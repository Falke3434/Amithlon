diff -uNr linux-2.4.37.9/arch/i386/kernel/dmi_scan.c linux-2.4.37.9-amithlon/arch/i386/kernel/dmi_scan.c
--- linux-2.4.37.9/arch/i386/kernel/dmi_scan.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/kernel/dmi_scan.c	2010-02-17 20:17:42.000000000 -0500
@@ -16,7 +16,7 @@
 
 unsigned long dmi_broken;
 int is_sony_vaio_laptop;
-
+#define XXX printk(KERN_INFO "Reached line %d\n",__LINE__);
 struct dmi_header
 {
 	u8	type;
@@ -28,21 +28,27 @@
 #define dmi_printk(x) printk x
 #else
 #define dmi_printk(x)
+//#define dmi_printk(x) printk x
 #endif
 
 static char * __init dmi_string(struct dmi_header *dm, u8 s)
 {
 	u8 *bp=(u8 *)dm;
+	XXX
 	bp+=dm->length;
+	XXX
 	if(!s)
 		return "";
+		XXX
 	s--;
 	while(s>0 && *bp)
 	{
+		XXX
 		bp+=strlen(bp);
 		bp++;
 		s--;
 	}
+	XXX
 	return bp;
 }
 
@@ -159,16 +165,24 @@
 static void __init dmi_save_ident(struct dmi_header *dm, int slot, int string)
 {
 	char *d = (char*)dm;
-	char *p = dmi_string(dm, d[string]);
+	char *p;
+	XXX
+	p = dmi_string(dm, d[string]);
+	XXX
 	if(p==NULL || *p == 0)
 		return;
+		XXX
 	if (dmi_ident[slot])
 		return;
-	dmi_ident[slot] = alloc_bootmem(strlen(p)+1);
+	XXX
+	dmi_ident[slot] = kmalloc(strlen(p)+1, GFP_KERNEL);
+	//dmi_ident[slot] = alloc_bootmem(strlen(p)+1);
+	XXX
 	if(dmi_ident[slot])
 		strcpy(dmi_ident[slot], p);
 	else
 		printk(KERN_ERR "dmi_save_ident: out of memory.\n");
+		XXX
 }
 
 /*
diff -uNr linux-2.4.37.9/arch/i386/kernel/i8259.c linux-2.4.37.9-amithlon/arch/i386/kernel/i8259.c
--- linux-2.4.37.9/arch/i386/kernel/i8259.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/kernel/i8259.c	2010-02-17 20:04:05.000000000 -0500
@@ -497,7 +497,7 @@
 	outb_p(0x34,0x43);		/* binary, mode 2, LSB/MSB, ch 0 */
 	outb_p(LATCH & 0xff , 0x40);	/* LSB */
 	outb(LATCH >> 8 , 0x40);	/* MSB */
-
+	current_latch=LATCH;
 #ifndef CONFIG_VISWS
 	if (!acpi_ioapic)
 		setup_irq(2, &irq2);
diff -uNr linux-2.4.37.9/arch/i386/kernel/setup.c linux-2.4.37.9-amithlon/arch/i386/kernel/setup.c
--- linux-2.4.37.9/arch/i386/kernel/setup.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/kernel/setup.c	2010-02-21 21:16:00.000000000 -0500
@@ -122,6 +122,7 @@
 #include <asm/mmu_context.h>
 #include <asm/io_apic.h>
 #include <asm/edd.h>
+#include <linux/uae.h>
 /*
  * Machine setup..
  */
@@ -131,7 +132,7 @@
 
 unsigned long mmu_cr4_features;
 EXPORT_SYMBOL(mmu_cr4_features);
-
+unsigned long zeropage=0;
 /*
  * Bus types ..
  */
@@ -769,14 +770,14 @@
 		}
 
 		e820.nr_map = 0;
-		add_memory_region(0, LOWMEMSIZE(), E820_RAM);
+/*		add_memory_region(0, LOWMEMSIZE(), E820_RAM);	*/
 		add_memory_region(HIGH_MEMORY, mem_size << 10, E820_RAM);
   	}
 	printk(KERN_INFO "BIOS-provided physical RAM map:\n");
 	print_memory_map(who);
 } /* setup_memory_region */
 
-
+static int leavepages=5120; /* Leave 20M for linux' use */
 static void __init parse_cmdline_early (char ** cmdline_p)
 {
 	char c = ' ', *to = command_line, *from = COMMAND_LINE;
@@ -833,6 +834,14 @@
 				}
 			}
 		}
+		if (!memcmp(from, "leavepages=", 11)) {
+		     leavepages=0;
+		     from+=11;
+		     while (*from>='0' && *from<='9') {
+			  leavepages=10*leavepages+*from-'0';
+			  from++;
+		     }
+		}
 #ifdef	CONFIG_SMP
 		/*
 		 * If the BIOS enumerates physical processors before logical,
@@ -1086,8 +1095,14 @@
 	 * reserve physical page 0 - it's a special BIOS page on many boxes,
 	 * enabling clean reboots, SMP operation, laptop functions.
 	 */
+#if 0
 	reserve_bootmem(0, PAGE_SIZE);
-
+#endif
+	/* However, the *contents* we need to do vm86 calls later on.
+	     As AmigaOS will puke all over this page, let's get them
+	     into a nice and safe place *now*.... 0x82000 is such a place */
+	memcpy((void*)0x82000,(void*)0,0x1000);
+	zeropage=0x82000;
 #ifdef CONFIG_SMP
 	/*
 	 * But first pinch a few for the stack/trampoline stuff
@@ -1233,7 +1248,41 @@
 #endif
 	paging_init();
 
-	dmi_scan_machine();
+/*	dmi_scan_machine(); */
+	/* 
+	 * For UAE use, we need to grab as much memory below 16M as possible.
+	 * Note that the initrd memory will be added to our pool later, so
+	 * it being reserved right now isn't a problem.
+	 */
+	{
+		 int i;
+	     int lastfound=-1;
+	     int startblock=0;
+	     int leavelowpages=512; /* And 2M of <16M mem */
+
+	     for (i=0;i<max_low_pfn;i++) {
+		  if (bootmem_is_reserved(i<<PAGE_SHIFT))
+		       continue;
+		  if ((i<<PAGE_SHIFT)>=16*1024*1024 && leavepages) {
+		       leavepages--;
+		       continue;
+		  }
+		  if ((i<<PAGE_SHIFT)>=1*1024*1024 && leavelowpages) {
+		       leavelowpages--;
+		       continue;
+		  }
+			reserve_bootmem(i<<PAGE_SHIFT,PAGE_SIZE);
+		  
+		  if (i!=lastfound+1) {
+		       if (startblock) {
+			    add_uae_block(startblock,lastfound);
+		       }
+		       startblock=i;
+		  }
+		  lastfound=i;
+	     }
+	     add_uae_block(startblock,lastfound);
+	}
 
 	/*
 	 * Parse the ACPI tables for possible boot-time SMP configuration.
@@ -2541,6 +2590,9 @@
 
 	}
 #endif
+	printk(KERN_INFO "CPU: About to head into dmi_scan_machine\n");
+	dmi_scan_machine();
+	printk(KERN_INFO "CPU: Came back dmi_scan_machine\n");
 }
 
 void __init get_cpu_vendor(struct cpuinfo_x86 *c)
diff -uNr linux-2.4.37.9/arch/i386/kernel/time.c linux-2.4.37.9-amithlon/arch/i386/kernel/time.c
--- linux-2.4.37.9/arch/i386/kernel/time.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/kernel/time.c	2010-02-17 20:04:05.000000000 -0500
@@ -72,6 +72,15 @@
 
 static unsigned long last_tsc_low; /* lsb 32 bits of Time Stamp Counter */
 
+static unsigned int handle_hiprec=0; /* As long as this is 0, we do normal
+					jiffies handling */
+static unsigned long long jiffie_time; /* When to do jiffies */
+static unsigned long long jiffie_add;   /* Cycles per jiffie */
+static unsigned long long margin;
+static unsigned long long last_target;
+
+unsigned long current_latch=~0; /* The current latch value for the timer chip */
+
 /* Cached *multiplier* to convert TSC counts to microseconds.
  * (see the equation below).
  * Equal to 2^32 * (1 / (clocks per usec) ).
@@ -560,9 +569,86 @@
 
 /* last time the cmos clock got updated */
 static long last_rtc_update;
-
+static int use_tsc;
 int timer_ack;
 
+static inline int do_hiprec_timer(int reset_always)
+{
+	if (use_tsc)
+	{ /* Handle the high precision "timer" the is kludged on
+	     via the irq.c char driver */
+	  unsigned long low,high;
+	  unsigned long long now;
+	  unsigned long newlatch=LATCH;
+	  unsigned long long nextev;
+	  unsigned long long target;
+	  int do_jiffie=0;
+
+	  nextev=~0;
+	  rdtsc(low,high);
+	  now=(unsigned long long)low | ((unsigned long long)high)<<32;
+
+	  if(uae_alert<=now) {
+	    while (1) {
+	      if (!handle_hiprec) {
+		/* First time */
+		jiffie_time=now; 
+		jiffie_add=(unsigned long)cpu_khz/HZ*1000;
+		handle_hiprec=1; 
+		margin=(unsigned long)cpu_khz/200; /* 5us */
+	      }
+	      nextev=uae_nextevent;
+	      if (nextev<=now+margin) {
+		uae_trigger();
+	      }
+	      else 
+		break; /* Get out of loop */
+	    }
+	  }
+	  if (!handle_hiprec || jiffie_time<=now+margin*32) {
+	    do_jiffie=1;
+	    jiffie_time+=jiffie_add;
+	  }
+	  if (nextev<=jiffie_time+(jiffie_add>>1)) { 
+	    target=nextev;
+	  }
+	  else {
+	    target=jiffie_time;
+	  }
+	  if (target<now) { /* Uh-oh! */
+	    target=now;
+	  }
+	  last_target=target;
+	  /* Talk about lousy precision! FIXME */
+	  newlatch=(unsigned long)(target-now)*16/(125*cpu_khz/(CLOCK_TICK_RATE/128));
+	  if (newlatch<3) /* This is probably pushing it. We might lose
+			     some interrupts, but then, who cares? */
+	    newlatch=3;
+#if 1	  
+	  if (reset_always ||
+	      ((newlatch<current_latch-5 || newlatch>current_latch+5) &&
+	       handle_hiprec)) {
+	    /* It's different enough for us to actually change the value */
+	    spin_lock(&i8259A_lock);
+	    outb_p(0x34,0x43);		/* binary, mode 2, LSB/MSB, ch 0 */
+	    outb_p(newlatch & 0xff , 0x40);	/* LSB */
+	    outb(newlatch >> 8 , 0x40);	/* MSB */
+	    spin_unlock(&i8259A_lock);
+	    current_latch=newlatch;
+	  }
+
+	  if (!do_jiffie)
+	    return 1;
+#endif
+	}
+	return 0;
+}
+	
+void schedule_hiprec(void)
+{
+  do_hiprec_timer(1);
+}
+
 /*
  * timer_interrupt() needs to keep up the real-time clock,
  * as well as call the "do_timer()" routine every clocktick
@@ -589,7 +675,10 @@
 	/* Clear the interrupt */
 	co_cpu_write(CO_CPU_STAT,co_cpu_read(CO_CPU_STAT) & ~CO_STAT_TIMEINTR);
 #endif
+	if (do_hiprec_timer(0))
+	return;
 	do_timer(regs);
+	maybe_show_logo();
 /*
  * In the SMP case we use the local APIC timer interrupt to do the
  * profiling, except when we simulate SMP mode on a uniprocessor
@@ -635,7 +724,7 @@
 #endif
 }
 
-static int use_tsc;
+
 
 /*
  * This is the same as the above, except we _also_ save the current
diff -uNr linux-2.4.37.9/arch/i386/mm/fault.c linux-2.4.37.9-amithlon/arch/i386/mm/fault.c
--- linux-2.4.37.9/arch/i386/mm/fault.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/mm/fault.c	2010-02-17 20:04:05.000000000 -0500
@@ -126,7 +126,7 @@
 
 asmlinkage void do_invalid_op(struct pt_regs *, unsigned long);
 extern unsigned long idt;
-
+int uae_handle_fault(struct pt_regs *regs, unsigned long error_code, unsigned long addr);
 /*
  * This routine handles page faults.  It determines the address,
  * and the problem, and then passes it off to one of the appropriate
@@ -156,7 +156,8 @@
 		local_irq_enable();
 
 	tsk = current;
-
+	if (uae_handle_fault(regs,error_code,address))
+	    return;
 	/*
 	 * We fault-in kernel-space virtual memory on-demand. The
 	 * 'reference' page table is init_mm.pgd.
diff -uNr linux-2.4.37.9/arch/i386/mm/init.c linux-2.4.37.9-amithlon/arch/i386/mm/init.c
--- linux-2.4.37.9/arch/i386/mm/init.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/arch/i386/mm/init.c	2010-02-17 20:04:05.000000000 -0500
@@ -37,7 +37,7 @@
 #include <asm/e820.h>
 #include <asm/apic.h>
 #include <asm/tlb.h>
-
+#include <linux/uae.h>
 mmu_gather_t mmu_gathers[NR_CPUS];
 unsigned long highstart_pfn, highend_pfn;
 static unsigned long totalram_pages;
@@ -602,6 +602,13 @@
 #ifdef CONFIG_BLK_DEV_INITRD
 void free_initrd_mem(unsigned long start, unsigned long end)
 {
+  /* Instead of giving this back to the OS, let's hand it to UAE instead */
+  while (start&0xfff)
+    start++;
+  while (end&0xfff)
+    end--;
+  add_uae_block((start-PAGE_OFFSET)/4096,(end-PAGE_OFFSET)/4096-1);
+  return;
 	if (start < end)
 		printk (KERN_INFO "Freeing initrd memory: %ldk freed\n", (end - start) >> 10);
 	for (; start < end; start += PAGE_SIZE) {
diff -uNr linux-2.4.37.9/cb linux-2.4.37.9-amithlon/cb
--- linux-2.4.37.9/cb	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/cb	2010-02-17 20:04:10.000000000 -0500
@@ -0,0 +1,10 @@
+(
+  cd /newdisk/uae-0.8.8-intel/uae-0.8.15-emubox
+  ./makehaage
+)
+mount /dev/fd0 /mnt2
+rm /mnt2/bootird.gz /mnt2/emubox.gz /mnt2/map
+cp arch/i386/boot/bzImage /mnt2/emubox.gz
+cp /newdisk/bootird.gz /mnt2
+lilo -r /mnt2
+umount /mnt2
diff -uNr linux-2.4.37.9/ci linux-2.4.37.9-amithlon/ci
--- linux-2.4.37.9/ci	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/ci	2010-02-17 20:04:10.000000000 -0500
@@ -0,0 +1,4 @@
+mount /dev/fd0 /mnt2
+cp arch/i386/boot/bzImage /mnt2
+lilo -r /mnt2
+umount /mnt2
diff -uNr linux-2.4.37.9/.config linux-2.4.37.9-amithlon/.config
--- linux-2.4.37.9/.config	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/.config	2010-06-17 09:31:53.000000000 -0400
@@ -0,0 +1,923 @@
+#
+# Automatically generated by make menuconfig: don't edit
+#
+CONFIG_X86=y
+# CONFIG_SBUS is not set
+CONFIG_UID16=y
+
+#
+# Code maturity level options
+#
+CONFIG_EXPERIMENTAL=y
+
+#
+# Loadable module support
+#
+CONFIG_MODULES=y
+# CONFIG_MODVERSIONS is not set
+# CONFIG_KMOD is not set
+
+#
+# Processor type and features
+#
+# CONFIG_M386 is not set
+# CONFIG_M486 is not set
+# CONFIG_M586 is not set
+# CONFIG_M586TSC is not set
+# CONFIG_M586MMX is not set
+# CONFIG_M686 is not set
+CONFIG_MPENTIUMIII=y
+# CONFIG_MPENTIUM4 is not set
+# CONFIG_MK6 is not set
+# CONFIG_MK7 is not set
+# CONFIG_MK8 is not set
+# CONFIG_MELAN is not set
+# CONFIG_MCRUSOE is not set
+# CONFIG_MGEODE_LX is not set
+# CONFIG_MWINCHIPC6 is not set
+# CONFIG_MWINCHIP2 is not set
+# CONFIG_MWINCHIP3D is not set
+# CONFIG_MCYRIXIII is not set
+# CONFIG_MVIAC3_2 is not set
+CONFIG_X86_WP_WORKS_OK=y
+CONFIG_X86_INVLPG=y
+CONFIG_X86_CMPXCHG=y
+CONFIG_X86_XADD=y
+CONFIG_X86_BSWAP=y
+CONFIG_X86_POPAD_OK=y
+# CONFIG_RWSEM_GENERIC_SPINLOCK is not set
+CONFIG_RWSEM_XCHGADD_ALGORITHM=y
+CONFIG_X86_L1_CACHE_SHIFT=5
+CONFIG_X86_HAS_TSC=y
+CONFIG_X86_GOOD_APIC=y
+CONFIG_X86_PGE=y
+CONFIG_X86_USE_PPRO_CHECKSUM=y
+CONFIG_X86_F00F_WORKS_OK=y
+CONFIG_X86_MCE=y
+CONFIG_TOSHIBA=m
+CONFIG_I8K=m
+CONFIG_MICROCODE=m
+CONFIG_X86_MSR=m
+CONFIG_X86_CPUID=m
+# CONFIG_EDD is not set
+CONFIG_NOHIGHMEM=y
+# CONFIG_HIGHMEM4G is not set
+# CONFIG_HIGHMEM64G is not set
+# CONFIG_HIGHMEM is not set
+# CONFIG_MATH_EMULATION is not set
+CONFIG_MTRR=y
+# CONFIG_SMP is not set
+# CONFIG_X86_UP_APIC is not set
+# CONFIG_X86_UP_IOAPIC is not set
+# CONFIG_X86_TSC is not set
+# CONFIG_X86_TSC_DISABLE is not set
+CONFIG_X86_TSC=y
+
+#
+# General setup
+#
+CONFIG_NET=y
+CONFIG_PCI=y
+# CONFIG_PCI_GOBIOS is not set
+# CONFIG_PCI_GODIRECT is not set
+CONFIG_PCI_GOANY=y
+CONFIG_PCI_BIOS=y
+CONFIG_PCI_DIRECT=y
+CONFIG_ISA=y
+# CONFIG_PCI_NAMES is not set
+# CONFIG_EISA is not set
+# CONFIG_MCA is not set
+# CONFIG_HOTPLUG is not set
+# CONFIG_PCMCIA is not set
+# CONFIG_HOTPLUG_PCI is not set
+CONFIG_SYSVIPC=y
+# CONFIG_BSD_PROCESS_ACCT is not set
+CONFIG_SYSCTL=y
+CONFIG_KCORE_ELF=y
+# CONFIG_KCORE_AOUT is not set
+# CONFIG_BINFMT_AOUT is not set
+CONFIG_BINFMT_ELF=y
+# CONFIG_BINFMT_MISC is not set
+# CONFIG_OOM_KILLER is not set
+CONFIG_PM=y
+CONFIG_APM=y
+# CONFIG_APM_IGNORE_USER_SUSPEND is not set
+# CONFIG_APM_DO_ENABLE is not set
+# CONFIG_APM_CPU_IDLE is not set
+# CONFIG_APM_DISPLAY_BLANK is not set
+# CONFIG_APM_RTC_IS_GMT is not set
+# CONFIG_APM_ALLOW_INTS is not set
+# CONFIG_APM_REAL_MODE_POWER_OFF is not set
+
+#
+# ACPI Support
+#
+# CONFIG_ACPI is not set
+
+#
+# Memory Technology Devices (MTD)
+#
+# CONFIG_MTD is not set
+
+#
+# Parallel port support
+#
+# CONFIG_PARPORT is not set
+
+#
+# Plug and Play configuration
+#
+CONFIG_PNP=y
+CONFIG_ISAPNP=y
+
+#
+# Block devices
+#
+CONFIG_BLK_DEV_FD=y
+# CONFIG_BLK_DEV_XD is not set
+# CONFIG_PARIDE is not set
+# CONFIG_BLK_CPQ_DA is not set
+# CONFIG_BLK_CPQ_CISS_DA is not set
+# CONFIG_CISS_SCSI_TAPE is not set
+# CONFIG_CISS_MONITOR_THREAD is not set
+# CONFIG_BLK_DEV_DAC960 is not set
+# CONFIG_BLK_DEV_UMEM is not set
+# CONFIG_BLK_DEV_SX8 is not set
+# CONFIG_BLK_DEV_LOOP is not set
+# CONFIG_BLK_DEV_NBD is not set
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_SIZE=4096
+CONFIG_BLK_DEV_INITRD=y
+# CONFIG_BLK_STATS is not set
+
+#
+# Multi-device support (RAID and LVM)
+#
+# CONFIG_MD is not set
+# CONFIG_BLK_DEV_MD is not set
+# CONFIG_MD_LINEAR is not set
+# CONFIG_MD_RAID0 is not set
+# CONFIG_MD_RAID1 is not set
+# CONFIG_MD_RAID5 is not set
+# CONFIG_MD_MULTIPATH is not set
+# CONFIG_BLK_DEV_LVM is not set
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_MMAP=y
+# CONFIG_NETLINK_DEV is not set
+# CONFIG_NETFILTER is not set
+# CONFIG_FILTER is not set
+# CONFIG_UNIX is not set
+# CONFIG_INET is not set
+# CONFIG_ATM is not set
+# CONFIG_VLAN_8021Q is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_DECNET is not set
+# CONFIG_BRIDGE is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+# CONFIG_LLC is not set
+# CONFIG_NET_DIVERT is not set
+# CONFIG_WAN_ROUTER is not set
+# CONFIG_NET_FASTROUTE is not set
+# CONFIG_NET_HW_FLOWCONTROL is not set
+
+#
+# QoS and/or fair queueing
+#
+# CONFIG_NET_SCHED is not set
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+
+#
+# Telephony Support
+#
+# CONFIG_PHONE is not set
+# CONFIG_PHONE_IXJ is not set
+# CONFIG_PHONE_IXJ_PCMCIA is not set
+
+#
+# ATA/IDE/MFM/RLL support
+#
+CONFIG_IDE=y
+
+#
+# IDE, ATA and ATAPI Block devices
+#
+CONFIG_BLK_DEV_IDE=y
+# CONFIG_BLK_DEV_HD_IDE is not set
+# CONFIG_BLK_DEV_HD is not set
+# CONFIG_BLK_DEV_IDE_SATA is not set
+CONFIG_BLK_DEV_IDEDISK=y
+CONFIG_IDEDISK_MULTI_MODE=y
+# CONFIG_IDEDISK_STROKE is not set
+# CONFIG_BLK_DEV_IDECS is not set
+# CONFIG_BLK_DEV_DELKIN is not set
+# CONFIG_BLK_DEV_IDECD is not set
+# CONFIG_BLK_DEV_IDETAPE is not set
+# CONFIG_BLK_DEV_IDEFLOPPY is not set
+CONFIG_BLK_DEV_IDESCSI=y
+# CONFIG_IDE_TASK_IOCTL is not set
+CONFIG_BLK_DEV_CMD640=y
+# CONFIG_BLK_DEV_CMD640_ENHANCED is not set
+# CONFIG_BLK_DEV_ISAPNP is not set
+CONFIG_BLK_DEV_IDEPCI=y
+CONFIG_BLK_DEV_GENERIC=y
+CONFIG_IDEPCI_SHARE_IRQ=y
+CONFIG_BLK_DEV_IDEDMA_PCI=y
+# CONFIG_BLK_DEV_OFFBOARD is not set
+# CONFIG_BLK_DEV_IDEDMA_FORCED is not set
+CONFIG_IDEDMA_PCI_AUTO=y
+# CONFIG_IDEDMA_ONLYDISK is not set
+CONFIG_BLK_DEV_IDEDMA=y
+# CONFIG_IDEDMA_PCI_WIP is not set
+CONFIG_BLK_DEV_ADMA100=y
+CONFIG_BLK_DEV_AEC62XX=y
+CONFIG_BLK_DEV_ALI15X3=y
+# CONFIG_WDC_ALI15X3 is not set
+CONFIG_BLK_DEV_AMD74XX=y
+# CONFIG_AMD74XX_OVERRIDE is not set
+CONFIG_BLK_DEV_ATIIXP=y
+CONFIG_BLK_DEV_CMD64X=y
+CONFIG_BLK_DEV_TRIFLEX=y
+CONFIG_BLK_DEV_CY82C693=y
+CONFIG_BLK_DEV_CS5530=y
+CONFIG_BLK_DEV_HPT34X=y
+# CONFIG_HPT34X_AUTODMA is not set
+CONFIG_BLK_DEV_HPT366=y
+CONFIG_BLK_DEV_PIIX=y
+CONFIG_BLK_DEV_NS87415=y
+CONFIG_BLK_DEV_OPTI621=y
+CONFIG_BLK_DEV_PDC202XX_OLD=y
+# CONFIG_PDC202XX_BURST is not set
+CONFIG_BLK_DEV_PDC202XX_NEW=y
+# CONFIG_PDC202XX_FORCE is not set
+CONFIG_BLK_DEV_RZ1000=y
+CONFIG_BLK_DEV_SC1200=y
+CONFIG_BLK_DEV_SVWKS=y
+CONFIG_BLK_DEV_SIIMAGE=y
+CONFIG_BLK_DEV_SIS5513=y
+CONFIG_BLK_DEV_SLC90E66=y
+CONFIG_BLK_DEV_TRM290=y
+CONFIG_BLK_DEV_VIA82CXXX=y
+# CONFIG_IDE_CHIPSETS is not set
+CONFIG_IDEDMA_AUTO=y
+# CONFIG_IDEDMA_IVB is not set
+# CONFIG_DMA_NONPCI is not set
+CONFIG_BLK_DEV_PDC202XX=y
+# CONFIG_BLK_DEV_ATARAID is not set
+# CONFIG_BLK_DEV_ATARAID_PDC is not set
+# CONFIG_BLK_DEV_ATARAID_HPT is not set
+# CONFIG_BLK_DEV_ATARAID_MEDLEY is not set
+# CONFIG_BLK_DEV_ATARAID_SII is not set
+
+#
+# SCSI support
+#
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_SD_EXTRA_DEVS=40
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_CHR_DEV_OSST is not set
+# CONFIG_BLK_DEV_SR is not set
+CONFIG_CHR_DEV_SG=y
+# CONFIG_SCSI_DEBUG_QUEUES is not set
+CONFIG_SCSI_MULTI_LUN=y
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+
+#
+# SCSI low-level drivers
+#
+# CONFIG_BLK_DEV_3W_XXXX_RAID is not set
+# CONFIG_SCSI_7000FASST is not set
+# CONFIG_SCSI_ACARD is not set
+# CONFIG_SCSI_AHA152X is not set
+# CONFIG_SCSI_AHA1542 is not set
+# CONFIG_SCSI_AHA1740 is not set
+# CONFIG_SCSI_AACRAID is not set
+# CONFIG_SCSI_AIC7XXX is not set
+# CONFIG_SCSI_AIC79XX is not set
+# CONFIG_SCSI_AIC7XXX_OLD is not set
+# CONFIG_SCSI_DPT_I2O is not set
+# CONFIG_SCSI_ADVANSYS is not set
+# CONFIG_SCSI_IN2000 is not set
+# CONFIG_SCSI_AM53C974 is not set
+# CONFIG_SCSI_MEGARAID is not set
+# CONFIG_SCSI_MEGARAID2 is not set
+CONFIG_SCSI_SATA=y
+CONFIG_SCSI_SATA_AHCI=y
+CONFIG_SCSI_SATA_SVW=y
+CONFIG_SCSI_ATA_PIIX=y
+CONFIG_SCSI_SATA_NV=y
+CONFIG_SCSI_SATA_QSTOR=y
+CONFIG_SCSI_SATA_PROMISE=y
+CONFIG_SCSI_SATA_SX4=y
+CONFIG_SCSI_SATA_SIL=y
+CONFIG_SCSI_SATA_SIS=y
+CONFIG_SCSI_SATA_ULI=y
+CONFIG_SCSI_SATA_VIA=y
+CONFIG_SCSI_SATA_VITESSE=y
+# CONFIG_SCSI_BUSLOGIC is not set
+# CONFIG_SCSI_CPQFCTS is not set
+# CONFIG_SCSI_DMX3191D is not set
+# CONFIG_SCSI_DTC3280 is not set
+# CONFIG_SCSI_EATA is not set
+# CONFIG_SCSI_EATA_DMA is not set
+# CONFIG_SCSI_EATA_PIO is not set
+# CONFIG_SCSI_FUTURE_DOMAIN is not set
+# CONFIG_SCSI_GDTH is not set
+# CONFIG_SCSI_GENERIC_NCR5380 is not set
+# CONFIG_SCSI_IPS is not set
+# CONFIG_SCSI_INITIO is not set
+# CONFIG_SCSI_INIA100 is not set
+# CONFIG_SCSI_NCR53C406A is not set
+# CONFIG_SCSI_NCR53C7xx is not set
+# CONFIG_SCSI_SYM53C8XX_2 is not set
+# CONFIG_SCSI_NCR53C8XX is not set
+# CONFIG_SCSI_SYM53C8XX is not set
+# CONFIG_SCSI_PAS16 is not set
+# CONFIG_SCSI_PCI2000 is not set
+# CONFIG_SCSI_PCI2220I is not set
+# CONFIG_SCSI_PSI240I is not set
+# CONFIG_SCSI_QLOGIC_FAS is not set
+# CONFIG_SCSI_QLOGIC_ISP is not set
+# CONFIG_SCSI_QLOGIC_FC is not set
+# CONFIG_SCSI_QLOGIC_1280 is not set
+# CONFIG_SCSI_SEAGATE is not set
+# CONFIG_SCSI_SIM710 is not set
+# CONFIG_SCSI_SYM53C416 is not set
+# CONFIG_SCSI_DC390T is not set
+# CONFIG_SCSI_T128 is not set
+# CONFIG_SCSI_U14_34F is not set
+# CONFIG_SCSI_ULTRASTOR is not set
+# CONFIG_SCSI_NSP32 is not set
+# CONFIG_SCSI_DEBUG is not set
+
+#
+# Fusion MPT device support
+#
+# CONFIG_FUSION is not set
+# CONFIG_FUSION_BOOT is not set
+# CONFIG_FUSION_ISENSE is not set
+# CONFIG_FUSION_CTL is not set
+# CONFIG_FUSION_LAN is not set
+
+#
+# IEEE 1394 (FireWire) support (EXPERIMENTAL)
+#
+# CONFIG_IEEE1394 is not set
+
+#
+# I2O device support
+#
+# CONFIG_I2O is not set
+# CONFIG_I2O_PCI is not set
+# CONFIG_I2O_BLOCK is not set
+# CONFIG_I2O_LAN is not set
+# CONFIG_I2O_SCSI is not set
+# CONFIG_I2O_PROC is not set
+
+#
+# Network device support
+#
+CONFIG_NETDEVICES=y
+
+#
+# ARCnet devices
+#
+# CONFIG_ARCNET is not set
+CONFIG_DUMMY=m
+# CONFIG_BONDING is not set
+# CONFIG_EQUALIZER is not set
+# CONFIG_TUN is not set
+# CONFIG_ETHERTAP is not set
+# CONFIG_NET_SB1000 is not set
+
+#
+# Ethernet (10 or 100Mbit)
+#
+CONFIG_NET_ETHERNET=y
+# CONFIG_SUNLANCE is not set
+CONFIG_HAPPYMEAL=m
+# CONFIG_SUNBMAC is not set
+# CONFIG_SUNQE is not set
+CONFIG_SUNGEM=m
+CONFIG_NET_VENDOR_3COM=y
+CONFIG_EL1=m
+CONFIG_EL2=m
+CONFIG_ELPLUS=m
+CONFIG_EL16=m
+CONFIG_EL3=m
+CONFIG_3C515=m
+# CONFIG_ELMC is not set
+# CONFIG_ELMC_II is not set
+CONFIG_VORTEX=m
+CONFIG_TYPHOON=m
+CONFIG_LANCE=m
+CONFIG_NET_VENDOR_SMC=y
+CONFIG_WD80x3=m
+# CONFIG_ULTRAMCA is not set
+CONFIG_ULTRA=m
+# CONFIG_ULTRA32 is not set
+CONFIG_SMC9194=m
+CONFIG_NET_VENDOR_RACAL=y
+CONFIG_NI5010=m
+CONFIG_NI52=m
+CONFIG_NI65=m
+CONFIG_AT1700=m
+CONFIG_DEPCA=m
+CONFIG_HP100=m
+# CONFIG_NET_ISA is not set
+CONFIG_NET_PCI=y
+CONFIG_PCNET32=m
+CONFIG_AMD8111_ETH=m
+CONFIG_ADAPTEC_STARFIRE=m
+CONFIG_AC3200=m
+CONFIG_APRICOT=m
+CONFIG_B44=m
+CONFIG_CS89x0=m
+CONFIG_TULIP=m
+CONFIG_TULIP_MWI=y
+CONFIG_TULIP_MMIO=y
+CONFIG_DE4X5=m
+CONFIG_DGRS=m
+CONFIG_DM9102=m
+CONFIG_EEPRO100=m
+# CONFIG_EEPRO100_PIO is not set
+CONFIG_E100=m
+# CONFIG_LNE390 is not set
+CONFIG_FEALNX=m
+CONFIG_NATSEMI=m
+CONFIG_NE2K_PCI=m
+CONFIG_FORCEDETH=m
+# CONFIG_NE3210 is not set
+# CONFIG_ES3210 is not set
+# CONFIG_8139CP is not set
+CONFIG_8139TOO=m
+# CONFIG_8139TOO_PIO is not set
+# CONFIG_8139TOO_TUNE_TWISTER is not set
+CONFIG_8139TOO_8129=y
+# CONFIG_8139_OLD_RX_RESET is not set
+CONFIG_SIS900=m
+CONFIG_EPIC100=m
+CONFIG_SUNDANCE=m
+# CONFIG_SUNDANCE_MMIO is not set
+CONFIG_TLAN=m
+CONFIG_VIA_RHINE=m
+# CONFIG_VIA_RHINE_MMIO is not set
+CONFIG_WINBOND_840=m
+CONFIG_NET_POCKET=y
+CONFIG_ATP=m
+CONFIG_DE600=m
+CONFIG_DE620=m
+
+#
+# Ethernet (1000 Mbit)
+#
+CONFIG_ACENIC=m
+# CONFIG_ACENIC_OMIT_TIGON_I is not set
+CONFIG_DL2K=m
+CONFIG_E1000=m
+# CONFIG_E1000_NAPI is not set
+# CONFIG_MYRI_SBUS is not set
+CONFIG_NS83820=m
+CONFIG_HAMACHI=m
+CONFIG_YELLOWFIN=m
+CONFIG_R8169=m
+CONFIG_SKGE=m
+CONFIG_SKY2=m
+CONFIG_SK98LIN=m
+CONFIG_TIGON3=m
+# CONFIG_FDDI is not set
+# CONFIG_PLIP is not set
+# CONFIG_PPP is not set
+# CONFIG_SLIP is not set
+
+#
+# Wireless LAN (non-hamradio)
+#
+# CONFIG_NET_RADIO is not set
+
+#
+# Token Ring devices
+#
+# CONFIG_TR is not set
+# CONFIG_NET_FC is not set
+# CONFIG_RCPCI is not set
+# CONFIG_SHAPER is not set
+
+#
+# Wan interfaces
+#
+# CONFIG_WAN is not set
+
+#
+# Amateur Radio support
+#
+# CONFIG_HAMRADIO is not set
+
+#
+# IrDA (infrared) support
+#
+# CONFIG_IRDA is not set
+
+#
+# ISDN subsystem
+#
+# CONFIG_ISDN is not set
+
+#
+# Old CD-ROM drivers (not SCSI, not IDE)
+#
+# CONFIG_CD_NO_IDESCSI is not set
+
+#
+# Input core support
+#
+# CONFIG_INPUT is not set
+# CONFIG_INPUT_KEYBDEV is not set
+# CONFIG_DUMMY_KEYB is not set
+# CONFIG_INPUT_MOUSEDEV is not set
+# CONFIG_INPUT_JOYDEV is not set
+# CONFIG_INPUT_EVDEV is not set
+# CONFIG_INPUT_UINPUT is not set
+
+#
+# Character devices
+#
+CONFIG_VT=y
+CONFIG_VT_CONSOLE=y
+CONFIG_SERIAL=y
+# CONFIG_SERIAL_CONSOLE is not set
+CONFIG_SERIAL_EXTENDED=y
+CONFIG_SERIAL_MANY_PORTS=y
+CONFIG_SERIAL_SHARE_IRQ=y
+CONFIG_SERIAL_DETECT_IRQ=y
+CONFIG_SERIAL_MULTIPORT=y
+CONFIG_HUB6=y
+CONFIG_SERIAL_NONSTANDARD=y
+CONFIG_COMPUTONE=m
+CONFIG_ROCKETPORT=m
+CONFIG_CYCLADES=m
+CONFIG_CYZ_INTR=y
+CONFIG_DIGIEPCA=m
+CONFIG_ESPSERIAL=m
+CONFIG_MOXA_INTELLIO=m
+CONFIG_MOXA_SMARTIO=m
+CONFIG_ISI=m
+CONFIG_SYNCLINK=m
+CONFIG_SYNCLINKMP=m
+CONFIG_N_HDLC=m
+CONFIG_RISCOM8=m
+CONFIG_SPECIALIX=m
+CONFIG_SPECIALIX_RTSCTS=y
+# CONFIG_SPECIALIX_BROKEN is not set
+# CONFIG_SX is not set
+# CONFIG_RIO is not set
+CONFIG_STALDRV=y
+CONFIG_STALLION=m
+CONFIG_ISTALLION=m
+# CONFIG_UNIX98_PTYS is not set
+
+#
+# I2C support
+#
+# CONFIG_I2C is not set
+
+#
+# Mice
+#
+# CONFIG_BUSMOUSE is not set
+# CONFIG_MOUSE is not set
+
+#
+# Joysticks
+#
+# CONFIG_INPUT_GAMEPORT is not set
+# CONFIG_QIC02_TAPE is not set
+# CONFIG_IPMI_HANDLER is not set
+# CONFIG_IPMI_PANIC_EVENT is not set
+# CONFIG_IPMI_DEVICE_INTERFACE is not set
+# CONFIG_IPMI_KCS is not set
+# CONFIG_IPMI_WATCHDOG is not set
+
+#
+# Watchdog Cards
+#
+# CONFIG_WATCHDOG is not set
+# CONFIG_SCx200 is not set
+# CONFIG_SCx200_GPIO is not set
+# CONFIG_AMD_RNG is not set
+# CONFIG_INTEL_RNG is not set
+# CONFIG_HW_RANDOM is not set
+# CONFIG_GEODE_RNG is not set
+# CONFIG_AMD_PM768 is not set
+# CONFIG_NVRAM is not set
+CONFIG_RTC=y
+# CONFIG_MKBD is not set
+# CONFIG_DTLK is not set
+# CONFIG_R3964 is not set
+# CONFIG_APPLICOM is not set
+# CONFIG_SONYPI is not set
+
+#
+# Ftape, the floppy tape device driver
+#
+# CONFIG_FTAPE is not set
+# CONFIG_AGP is not set
+
+#
+# Direct Rendering Manager (XFree86 DRI support)
+#
+# CONFIG_DRM is not set
+# CONFIG_MWAVE is not set
+# CONFIG_OBMOUSE is not set
+
+#
+# Multimedia devices
+#
+# CONFIG_VIDEO_DEV is not set
+
+#
+# File systems
+#
+# CONFIG_QUOTA is not set
+# CONFIG_QFMT_V2 is not set
+# CONFIG_AUTOFS_FS is not set
+# CONFIG_AUTOFS4_FS is not set
+# CONFIG_REISERFS_FS is not set
+# CONFIG_REISERFS_CHECK is not set
+# CONFIG_REISERFS_PROC_INFO is not set
+# CONFIG_ADFS_FS is not set
+# CONFIG_ADFS_FS_RW is not set
+# CONFIG_AFFS_FS is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BEFS_DEBUG is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EXT3_FS is not set
+# CONFIG_JBD is not set
+# CONFIG_JBD_DEBUG is not set
+# CONFIG_FAT_FS is not set
+# CONFIG_MSDOS_FS is not set
+# CONFIG_UMSDOS_FS is not set
+# CONFIG_VFAT_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+# CONFIG_CRAMFS is not set
+# CONFIG_TMPFS is not set
+CONFIG_RAMFS=y
+# CONFIG_ISO9660_FS is not set
+# CONFIG_JOLIET is not set
+# CONFIG_ZISOFS is not set
+# CONFIG_JFS_FS is not set
+# CONFIG_JFS_DEBUG is not set
+# CONFIG_JFS_STATISTICS is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_NTFS_FS is not set
+# CONFIG_NTFS_RW is not set
+# CONFIG_HPFS_FS is not set
+CONFIG_PROC_FS=y
+# CONFIG_DEVFS_FS is not set
+# CONFIG_DEVFS_MOUNT is not set
+# CONFIG_DEVFS_DEBUG is not set
+# CONFIG_DEVPTS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_QNX4FS_RW is not set
+# CONFIG_ROMFS_FS is not set
+CONFIG_EXT2_FS=y
+# CONFIG_SYSV_FS is not set
+# CONFIG_UDF_FS is not set
+# CONFIG_UDF_RW is not set
+# CONFIG_UFS_FS is not set
+# CONFIG_UFS_FS_WRITE is not set
+# CONFIG_XFS_FS is not set
+# CONFIG_XFS_QUOTA is not set
+# CONFIG_XFS_RT is not set
+# CONFIG_XFS_TRACE is not set
+# CONFIG_XFS_DEBUG is not set
+
+#
+# Network File Systems
+#
+# CONFIG_CODA_FS is not set
+# CONFIG_INTERMEZZO_FS is not set
+# CONFIG_NFS_FS is not set
+# CONFIG_NFS_V3 is not set
+# CONFIG_NFS_DIRECTIO is not set
+# CONFIG_ROOT_NFS is not set
+# CONFIG_NFSD is not set
+# CONFIG_NFSD_V3 is not set
+# CONFIG_NFSD_TCP is not set
+# CONFIG_SUNRPC is not set
+# CONFIG_LOCKD is not set
+# CONFIG_SMB_FS is not set
+# CONFIG_NCPFS_NLS is not set
+# CONFIG_ZISOFS_FS is not set
+# CONFIG_ZLIB_FS_INFLATE is not set
+
+#
+# Partition Types
+#
+# CONFIG_PARTITION_ADVANCED is not set
+CONFIG_MSDOS_PARTITION=y
+# CONFIG_SMB_NLS is not set
+# CONFIG_NLS is not set
+
+#
+# Console drivers
+#
+CONFIG_VGA_CONSOLE=y
+CONFIG_VIDEO_SELECT=y
+# CONFIG_MDA_CONSOLE is not set
+
+#
+# Frame-buffer support
+#
+CONFIG_FB=y
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_FB_RIVA=y
+# CONFIG_FB_CLGEN is not set
+# CONFIG_FB_PM2 is not set
+# CONFIG_FB_PM3 is not set
+# CONFIG_FB_CYBER2000 is not set
+CONFIG_FB_VESA=y
+# CONFIG_FB_VGA16 is not set
+# CONFIG_FB_HGA is not set
+CONFIG_VIDEO_SELECT=y
+CONFIG_FB_MATROX=y
+CONFIG_FB_MATROX_MILLENIUM=y
+CONFIG_FB_MATROX_MYSTIQUE=y
+CONFIG_FB_MATROX_G450=y
+CONFIG_FB_MATROX_G100=y
+# CONFIG_FB_MATROX_PROC is not set
+CONFIG_FB_MATROX_MULTIHEAD=y
+# CONFIG_FB_ATY is not set
+CONFIG_FB_RADEON=y
+# CONFIG_FB_ATY128 is not set
+# CONFIG_FB_INTEL is not set
+# CONFIG_FB_SIS is not set
+# CONFIG_FB_NEOMAGIC is not set
+# CONFIG_FB_3DFX is not set
+# CONFIG_FB_VOODOO1 is not set
+CONFIG_FB_TRIDENT=y
+# CONFIG_FB_IT8181 is not set
+# CONFIG_FB_VIRTUAL is not set
+CONFIG_FBCON_ADVANCED=y
+# CONFIG_FBCON_MFB is not set
+# CONFIG_FBCON_CFB2 is not set
+# CONFIG_FBCON_CFB4 is not set
+CONFIG_FBCON_CFB8=y
+CONFIG_FBCON_CFB16=y
+# CONFIG_FBCON_CFB24 is not set
+CONFIG_FBCON_CFB32=y
+# CONFIG_FBCON_AFB is not set
+# CONFIG_FBCON_ILBM is not set
+# CONFIG_FBCON_IPLAN2P2 is not set
+# CONFIG_FBCON_IPLAN2P4 is not set
+# CONFIG_FBCON_IPLAN2P8 is not set
+# CONFIG_FBCON_MAC is not set
+# CONFIG_FBCON_VGA_PLANES is not set
+# CONFIG_FBCON_VGA is not set
+# CONFIG_FBCON_HGA is not set
+CONFIG_FBCON_FONTWIDTH8_ONLY=y
+CONFIG_FBCON_FONTS=y
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
+# CONFIG_FONT_SUN8x16 is not set
+# CONFIG_FONT_PEARL_8x8 is not set
+# CONFIG_FONT_ACORN_8x8 is not set
+
+#
+# Sound
+#
+CONFIG_SOUND=y
+CONFIG_SOUND_ALI5455=m
+CONFIG_SOUND_ALI5455_CODECSPDIFOUT_PCMOUTSHARE=y
+CONFIG_SOUND_ALI5455_CODECSPDIFOUT_CODECINDEPENDENTDMA=y
+CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_PCMOUTSHARE=y
+CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_CONTROLLERINDEPENDENTDMA=y
+CONFIG_SOUND_BT878=m
+CONFIG_SOUND_CMPCI=m
+CONFIG_SOUND_CMPCI_FM=y
+CONFIG_SOUND_CMPCI_FMIO=388
+CONFIG_SOUND_CMPCI_FMIO=388
+CONFIG_SOUND_CMPCI_MIDI=y
+CONFIG_SOUND_CMPCI_MPUIO=330
+CONFIG_SOUND_CMPCI_JOYSTICK=y
+CONFIG_SOUND_CMPCI_CM8738=y
+CONFIG_SOUND_CMPCI_SPDIFINVERSE=y
+CONFIG_SOUND_CMPCI_SPDIFLOOP=y
+CONFIG_SOUND_CMPCI_SPEAKERS=2
+CONFIG_SOUND_EMU10K1=m
+CONFIG_MIDI_EMU10K1=y
+CONFIG_SOUND_FUSION=m
+CONFIG_SOUND_CS4281=m
+CONFIG_SOUND_ES1370=m
+CONFIG_SOUND_ES1371=m
+CONFIG_SOUND_ESSSOLO1=m
+CONFIG_SOUND_MAESTRO=m
+CONFIG_SOUND_MAESTRO3=m
+CONFIG_SOUND_FORTE=m
+CONFIG_SOUND_ICH=m
+CONFIG_SOUND_RME96XX=m
+CONFIG_SOUND_SONICVIBES=m
+CONFIG_SOUND_TRIDENT=m
+CONFIG_SOUND_MSNDCLAS=m
+# CONFIG_MSNDCLAS_HAVE_BOOT is not set
+CONFIG_MSNDCLAS_INIT_FILE="/etc/sound/msndinit.bin"
+CONFIG_MSNDCLAS_PERM_FILE="/etc/sound/msndperm.bin"
+CONFIG_SOUND_MSNDPIN=m
+# CONFIG_MSNDPIN_HAVE_BOOT is not set
+CONFIG_MSNDPIN_INIT_FILE="/etc/sound/pndspini.bin"
+CONFIG_MSNDPIN_PERM_FILE="/etc/sound/pndsperm.bin"
+CONFIG_SOUND_VIA82CXXX=m
+CONFIG_MIDI_VIA82CXXX=y
+CONFIG_SOUND_OSS=m
+# CONFIG_SOUND_TRACEINIT is not set
+# CONFIG_SOUND_DMAP is not set
+CONFIG_SOUND_AD1816=m
+CONFIG_SOUND_AD1889=m
+CONFIG_SOUND_SGALAXY=m
+CONFIG_SOUND_ADLIB=m
+CONFIG_SOUND_ACI_MIXER=m
+CONFIG_SOUND_CS4232=m
+CONFIG_SOUND_SSCAPE=m
+CONFIG_SOUND_GUS=m
+# CONFIG_SOUND_GUS16 is not set
+# CONFIG_SOUND_GUSMAX is not set
+CONFIG_SOUND_VMIDI=m
+CONFIG_SOUND_TRIX=m
+CONFIG_SOUND_MSS=m
+CONFIG_SOUND_MPU401=m
+CONFIG_SOUND_NM256=m
+CONFIG_SOUND_MAD16=m
+CONFIG_MAD16_OLDCARD=y
+CONFIG_SOUND_PAS=m
+# CONFIG_PAS_JOYSTICK is not set
+CONFIG_SOUND_PSS=m
+# CONFIG_PSS_MIXER is not set
+# CONFIG_PSS_HAVE_BOOT is not set
+CONFIG_SOUND_SB=m
+CONFIG_SOUND_AWE32_SYNTH=m
+CONFIG_SOUND_KAHLUA=m
+CONFIG_SOUND_WAVEFRONT=m
+CONFIG_SOUND_MAUI=m
+CONFIG_SOUND_YM3812=m
+CONFIG_SOUND_OPL3SA1=m
+CONFIG_SOUND_OPL3SA2=m
+CONFIG_SOUND_YMFPCI=m
+CONFIG_SOUND_YMFPCI_LEGACY=y
+CONFIG_SOUND_UART6850=m
+CONFIG_SOUND_AEDSP16=m
+# CONFIG_SC6600 is not set
+# CONFIG_AEDSP16_SBPRO is not set
+# CONFIG_AEDSP16_MSS is not set
+# CONFIG_AEDSP16_MPU401 is not set
+# CONFIG_SOUND_TVMIXER is not set
+CONFIG_SOUND_AD1980=m
+CONFIG_SOUND_WM97XX=m
+
+#
+# USB support
+#
+# CONFIG_USB is not set
+
+#
+# Support for USB gadgets
+#
+# CONFIG_USB_GADGET is not set
+
+#
+# Bluetooth support
+#
+# CONFIG_BLUEZ is not set
+
+#
+# Kernel hacking
+#
+# CONFIG_DEBUG_KERNEL is not set
+CONFIG_LOG_BUF_SHIFT=0
+
+#
+# Cryptographic options
+#
+# CONFIG_CRYPTO is not set
+
+#
+# Library routines
+#
+# CONFIG_CRC32 is not set
+# CONFIG_ZLIB_INFLATE is not set
+# CONFIG_ZLIB_DEFLATE is not set
diff -uNr linux-2.4.37.9/.config.old linux-2.4.37.9-amithlon/.config.old
--- linux-2.4.37.9/.config.old	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/.config.old	2010-06-17 09:32:03.000000000 -0400
@@ -0,0 +1,883 @@
+#
+# Automatically generated by make menuconfig: don't edit
+#
+CONFIG_X86=y
+# CONFIG_SBUS is not set
+CONFIG_UID16=y
+
+#
+# Code maturity level options
+#
+CONFIG_EXPERIMENTAL=y
+
+#
+# Loadable module support
+#
+CONFIG_MODULES=y
+# CONFIG_MODVERSIONS is not set
+# CONFIG_KMOD is not set
+
+#
+# Processor type and features
+#
+# CONFIG_M386 is not set
+# CONFIG_M486 is not set
+# CONFIG_M586 is not set
+# CONFIG_M586TSC is not set
+# CONFIG_M586MMX is not set
+# CONFIG_M686 is not set
+CONFIG_MPENTIUMIII=y
+# CONFIG_MPENTIUM4 is not set
+# CONFIG_MK6 is not set
+# CONFIG_MK7 is not set
+# CONFIG_MK8 is not set
+# CONFIG_MELAN is not set
+# CONFIG_MCRUSOE is not set
+# CONFIG_MGEODE_LX is not set
+# CONFIG_MWINCHIPC6 is not set
+# CONFIG_MWINCHIP2 is not set
+# CONFIG_MWINCHIP3D is not set
+# CONFIG_MCYRIXIII is not set
+# CONFIG_MVIAC3_2 is not set
+CONFIG_X86_WP_WORKS_OK=y
+CONFIG_X86_INVLPG=y
+CONFIG_X86_CMPXCHG=y
+CONFIG_X86_XADD=y
+CONFIG_X86_BSWAP=y
+CONFIG_X86_POPAD_OK=y
+# CONFIG_RWSEM_GENERIC_SPINLOCK is not set
+CONFIG_RWSEM_XCHGADD_ALGORITHM=y
+CONFIG_X86_L1_CACHE_SHIFT=5
+CONFIG_X86_HAS_TSC=y
+CONFIG_X86_GOOD_APIC=y
+CONFIG_X86_PGE=y
+CONFIG_X86_USE_PPRO_CHECKSUM=y
+CONFIG_X86_F00F_WORKS_OK=y
+CONFIG_X86_MCE=y
+CONFIG_TOSHIBA=m
+CONFIG_I8K=m
+CONFIG_MICROCODE=m
+CONFIG_X86_MSR=m
+CONFIG_X86_CPUID=m
+# CONFIG_EDD is not set
+CONFIG_NOHIGHMEM=y
+# CONFIG_HIGHMEM4G is not set
+# CONFIG_HIGHMEM64G is not set
+# CONFIG_HIGHMEM is not set
+# CONFIG_MATH_EMULATION is not set
+CONFIG_MTRR=y
+# CONFIG_SMP is not set
+# CONFIG_X86_UP_APIC is not set
+# CONFIG_X86_UP_IOAPIC is not set
+# CONFIG_X86_TSC is not set
+# CONFIG_X86_TSC_DISABLE is not set
+CONFIG_X86_TSC=y
+
+#
+# General setup
+#
+CONFIG_NET=y
+CONFIG_PCI=y
+# CONFIG_PCI_GOBIOS is not set
+# CONFIG_PCI_GODIRECT is not set
+CONFIG_PCI_GOANY=y
+CONFIG_PCI_BIOS=y
+CONFIG_PCI_DIRECT=y
+CONFIG_ISA=y
+# CONFIG_PCI_NAMES is not set
+# CONFIG_EISA is not set
+# CONFIG_MCA is not set
+# CONFIG_HOTPLUG is not set
+# CONFIG_PCMCIA is not set
+# CONFIG_HOTPLUG_PCI is not set
+CONFIG_SYSVIPC=y
+# CONFIG_BSD_PROCESS_ACCT is not set
+CONFIG_SYSCTL=y
+CONFIG_KCORE_ELF=y
+# CONFIG_KCORE_AOUT is not set
+# CONFIG_BINFMT_AOUT is not set
+CONFIG_BINFMT_ELF=y
+# CONFIG_BINFMT_MISC is not set
+# CONFIG_OOM_KILLER is not set
+CONFIG_PM=y
+CONFIG_APM=y
+# CONFIG_APM_IGNORE_USER_SUSPEND is not set
+# CONFIG_APM_DO_ENABLE is not set
+# CONFIG_APM_CPU_IDLE is not set
+# CONFIG_APM_DISPLAY_BLANK is not set
+# CONFIG_APM_RTC_IS_GMT is not set
+# CONFIG_APM_ALLOW_INTS is not set
+# CONFIG_APM_REAL_MODE_POWER_OFF is not set
+
+#
+# ACPI Support
+#
+# CONFIG_ACPI is not set
+
+#
+# Memory Technology Devices (MTD)
+#
+# CONFIG_MTD is not set
+
+#
+# Parallel port support
+#
+# CONFIG_PARPORT is not set
+
+#
+# Plug and Play configuration
+#
+CONFIG_PNP=y
+CONFIG_ISAPNP=y
+
+#
+# Block devices
+#
+CONFIG_BLK_DEV_FD=y
+# CONFIG_BLK_DEV_XD is not set
+# CONFIG_PARIDE is not set
+# CONFIG_BLK_CPQ_DA is not set
+# CONFIG_BLK_CPQ_CISS_DA is not set
+# CONFIG_CISS_SCSI_TAPE is not set
+# CONFIG_CISS_MONITOR_THREAD is not set
+# CONFIG_BLK_DEV_DAC960 is not set
+# CONFIG_BLK_DEV_UMEM is not set
+# CONFIG_BLK_DEV_SX8 is not set
+# CONFIG_BLK_DEV_LOOP is not set
+# CONFIG_BLK_DEV_NBD is not set
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_SIZE=4096
+CONFIG_BLK_DEV_INITRD=y
+# CONFIG_BLK_STATS is not set
+
+#
+# Multi-device support (RAID and LVM)
+#
+# CONFIG_MD is not set
+# CONFIG_BLK_DEV_MD is not set
+# CONFIG_MD_LINEAR is not set
+# CONFIG_MD_RAID0 is not set
+# CONFIG_MD_RAID1 is not set
+# CONFIG_MD_RAID5 is not set
+# CONFIG_MD_MULTIPATH is not set
+# CONFIG_BLK_DEV_LVM is not set
+
+#
+# Networking options
+#
+CONFIG_PACKET=y
+CONFIG_PACKET_MMAP=y
+# CONFIG_NETLINK_DEV is not set
+# CONFIG_NETFILTER is not set
+# CONFIG_FILTER is not set
+# CONFIG_UNIX is not set
+# CONFIG_INET is not set
+# CONFIG_ATM is not set
+# CONFIG_VLAN_8021Q is not set
+# CONFIG_IPX is not set
+# CONFIG_ATALK is not set
+# CONFIG_DECNET is not set
+# CONFIG_BRIDGE is not set
+# CONFIG_X25 is not set
+# CONFIG_LAPB is not set
+# CONFIG_LLC is not set
+# CONFIG_NET_DIVERT is not set
+# CONFIG_WAN_ROUTER is not set
+# CONFIG_NET_FASTROUTE is not set
+# CONFIG_NET_HW_FLOWCONTROL is not set
+
+#
+# QoS and/or fair queueing
+#
+# CONFIG_NET_SCHED is not set
+
+#
+# Network testing
+#
+# CONFIG_NET_PKTGEN is not set
+
+#
+# Telephony Support
+#
+# CONFIG_PHONE is not set
+# CONFIG_PHONE_IXJ is not set
+# CONFIG_PHONE_IXJ_PCMCIA is not set
+
+#
+# ATA/IDE/MFM/RLL support
+#
+CONFIG_IDE=y
+
+#
+# IDE, ATA and ATAPI Block devices
+#
+CONFIG_BLK_DEV_IDE=y
+# CONFIG_BLK_DEV_HD_IDE is not set
+# CONFIG_BLK_DEV_HD is not set
+# CONFIG_BLK_DEV_IDE_SATA is not set
+CONFIG_BLK_DEV_IDEDISK=y
+CONFIG_IDEDISK_MULTI_MODE=y
+# CONFIG_IDEDISK_STROKE is not set
+# CONFIG_BLK_DEV_IDECS is not set
+# CONFIG_BLK_DEV_DELKIN is not set
+# CONFIG_BLK_DEV_IDECD is not set
+# CONFIG_BLK_DEV_IDETAPE is not set
+# CONFIG_BLK_DEV_IDEFLOPPY is not set
+CONFIG_BLK_DEV_IDESCSI=y
+# CONFIG_IDE_TASK_IOCTL is not set
+CONFIG_BLK_DEV_CMD640=y
+# CONFIG_BLK_DEV_CMD640_ENHANCED is not set
+# CONFIG_BLK_DEV_ISAPNP is not set
+CONFIG_BLK_DEV_IDEPCI=y
+CONFIG_BLK_DEV_GENERIC=y
+CONFIG_IDEPCI_SHARE_IRQ=y
+CONFIG_BLK_DEV_IDEDMA_PCI=y
+# CONFIG_BLK_DEV_OFFBOARD is not set
+# CONFIG_BLK_DEV_IDEDMA_FORCED is not set
+CONFIG_IDEDMA_PCI_AUTO=y
+# CONFIG_IDEDMA_ONLYDISK is not set
+CONFIG_BLK_DEV_IDEDMA=y
+# CONFIG_IDEDMA_PCI_WIP is not set
+CONFIG_BLK_DEV_ADMA100=y
+CONFIG_BLK_DEV_AEC62XX=y
+CONFIG_BLK_DEV_ALI15X3=y
+# CONFIG_WDC_ALI15X3 is not set
+CONFIG_BLK_DEV_AMD74XX=y
+# CONFIG_AMD74XX_OVERRIDE is not set
+CONFIG_BLK_DEV_ATIIXP=y
+CONFIG_BLK_DEV_CMD64X=y
+CONFIG_BLK_DEV_TRIFLEX=y
+CONFIG_BLK_DEV_CY82C693=y
+CONFIG_BLK_DEV_CS5530=y
+CONFIG_BLK_DEV_HPT34X=y
+# CONFIG_HPT34X_AUTODMA is not set
+CONFIG_BLK_DEV_HPT366=y
+CONFIG_BLK_DEV_PIIX=y
+CONFIG_BLK_DEV_NS87415=y
+CONFIG_BLK_DEV_OPTI621=y
+CONFIG_BLK_DEV_PDC202XX_OLD=y
+# CONFIG_PDC202XX_BURST is not set
+CONFIG_BLK_DEV_PDC202XX_NEW=y
+# CONFIG_PDC202XX_FORCE is not set
+CONFIG_BLK_DEV_RZ1000=y
+CONFIG_BLK_DEV_SC1200=y
+CONFIG_BLK_DEV_SVWKS=y
+CONFIG_BLK_DEV_SIIMAGE=y
+CONFIG_BLK_DEV_SIS5513=y
+CONFIG_BLK_DEV_SLC90E66=y
+CONFIG_BLK_DEV_TRM290=y
+CONFIG_BLK_DEV_VIA82CXXX=y
+# CONFIG_IDE_CHIPSETS is not set
+CONFIG_IDEDMA_AUTO=y
+# CONFIG_IDEDMA_IVB is not set
+# CONFIG_DMA_NONPCI is not set
+CONFIG_BLK_DEV_PDC202XX=y
+# CONFIG_BLK_DEV_ATARAID is not set
+# CONFIG_BLK_DEV_ATARAID_PDC is not set
+# CONFIG_BLK_DEV_ATARAID_HPT is not set
+# CONFIG_BLK_DEV_ATARAID_MEDLEY is not set
+# CONFIG_BLK_DEV_ATARAID_SII is not set
+
+#
+# SCSI support
+#
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_SD_EXTRA_DEVS=40
+# CONFIG_CHR_DEV_ST is not set
+# CONFIG_CHR_DEV_OSST is not set
+# CONFIG_BLK_DEV_SR is not set
+CONFIG_CHR_DEV_SG=y
+# CONFIG_SCSI_DEBUG_QUEUES is not set
+CONFIG_SCSI_MULTI_LUN=y
+# CONFIG_SCSI_CONSTANTS is not set
+# CONFIG_SCSI_LOGGING is not set
+
+#
+# SCSI low-level drivers
+#
+# CONFIG_BLK_DEV_3W_XXXX_RAID is not set
+# CONFIG_SCSI_7000FASST is not set
+# CONFIG_SCSI_ACARD is not set
+# CONFIG_SCSI_AHA152X is not set
+# CONFIG_SCSI_AHA1542 is not set
+# CONFIG_SCSI_AHA1740 is not set
+# CONFIG_SCSI_AACRAID is not set
+# CONFIG_SCSI_AIC7XXX is not set
+# CONFIG_SCSI_AIC79XX is not set
+# CONFIG_SCSI_AIC7XXX_OLD is not set
+# CONFIG_SCSI_DPT_I2O is not set
+# CONFIG_SCSI_ADVANSYS is not set
+# CONFIG_SCSI_IN2000 is not set
+# CONFIG_SCSI_AM53C974 is not set
+# CONFIG_SCSI_MEGARAID is not set
+# CONFIG_SCSI_MEGARAID2 is not set
+CONFIG_SCSI_SATA=y
+CONFIG_SCSI_SATA_AHCI=y
+CONFIG_SCSI_SATA_SVW=y
+CONFIG_SCSI_ATA_PIIX=y
+CONFIG_SCSI_SATA_NV=y
+CONFIG_SCSI_SATA_QSTOR=y
+CONFIG_SCSI_SATA_PROMISE=y
+CONFIG_SCSI_SATA_SX4=y
+CONFIG_SCSI_SATA_SIL=y
+CONFIG_SCSI_SATA_SIS=y
+CONFIG_SCSI_SATA_ULI=y
+CONFIG_SCSI_SATA_VIA=y
+CONFIG_SCSI_SATA_VITESSE=y
+# CONFIG_SCSI_BUSLOGIC is not set
+# CONFIG_SCSI_CPQFCTS is not set
+# CONFIG_SCSI_DMX3191D is not set
+# CONFIG_SCSI_DTC3280 is not set
+# CONFIG_SCSI_EATA is not set
+# CONFIG_SCSI_EATA_DMA is not set
+# CONFIG_SCSI_EATA_PIO is not set
+# CONFIG_SCSI_FUTURE_DOMAIN is not set
+# CONFIG_SCSI_GDTH is not set
+# CONFIG_SCSI_GENERIC_NCR5380 is not set
+# CONFIG_SCSI_IPS is not set
+# CONFIG_SCSI_INITIO is not set
+# CONFIG_SCSI_INIA100 is not set
+# CONFIG_SCSI_NCR53C406A is not set
+# CONFIG_SCSI_NCR53C7xx is not set
+# CONFIG_SCSI_SYM53C8XX_2 is not set
+# CONFIG_SCSI_NCR53C8XX is not set
+# CONFIG_SCSI_SYM53C8XX is not set
+# CONFIG_SCSI_PAS16 is not set
+# CONFIG_SCSI_PCI2000 is not set
+# CONFIG_SCSI_PCI2220I is not set
+# CONFIG_SCSI_PSI240I is not set
+# CONFIG_SCSI_QLOGIC_FAS is not set
+# CONFIG_SCSI_QLOGIC_ISP is not set
+# CONFIG_SCSI_QLOGIC_FC is not set
+# CONFIG_SCSI_QLOGIC_1280 is not set
+# CONFIG_SCSI_SEAGATE is not set
+# CONFIG_SCSI_SIM710 is not set
+# CONFIG_SCSI_SYM53C416 is not set
+# CONFIG_SCSI_DC390T is not set
+# CONFIG_SCSI_T128 is not set
+# CONFIG_SCSI_U14_34F is not set
+# CONFIG_SCSI_ULTRASTOR is not set
+# CONFIG_SCSI_NSP32 is not set
+# CONFIG_SCSI_DEBUG is not set
+
+#
+# Fusion MPT device support
+#
+# CONFIG_FUSION is not set
+# CONFIG_FUSION_BOOT is not set
+# CONFIG_FUSION_ISENSE is not set
+# CONFIG_FUSION_CTL is not set
+# CONFIG_FUSION_LAN is not set
+
+#
+# IEEE 1394 (FireWire) support (EXPERIMENTAL)
+#
+# CONFIG_IEEE1394 is not set
+
+#
+# I2O device support
+#
+# CONFIG_I2O is not set
+# CONFIG_I2O_PCI is not set
+# CONFIG_I2O_BLOCK is not set
+# CONFIG_I2O_LAN is not set
+# CONFIG_I2O_SCSI is not set
+# CONFIG_I2O_PROC is not set
+
+#
+# Network device support
+#
+CONFIG_NETDEVICES=y
+
+#
+# ARCnet devices
+#
+# CONFIG_ARCNET is not set
+CONFIG_DUMMY=m
+# CONFIG_BONDING is not set
+# CONFIG_EQUALIZER is not set
+# CONFIG_TUN is not set
+# CONFIG_ETHERTAP is not set
+# CONFIG_NET_SB1000 is not set
+
+#
+# Ethernet (10 or 100Mbit)
+#
+CONFIG_NET_ETHERNET=y
+# CONFIG_SUNLANCE is not set
+CONFIG_HAPPYMEAL=m
+# CONFIG_SUNBMAC is not set
+# CONFIG_SUNQE is not set
+CONFIG_SUNGEM=m
+CONFIG_NET_VENDOR_3COM=y
+CONFIG_EL1=m
+CONFIG_EL2=m
+CONFIG_ELPLUS=m
+CONFIG_EL16=m
+CONFIG_EL3=m
+CONFIG_3C515=m
+# CONFIG_ELMC is not set
+# CONFIG_ELMC_II is not set
+CONFIG_VORTEX=m
+CONFIG_TYPHOON=m
+CONFIG_LANCE=m
+CONFIG_NET_VENDOR_SMC=y
+CONFIG_WD80x3=m
+# CONFIG_ULTRAMCA is not set
+CONFIG_ULTRA=m
+# CONFIG_ULTRA32 is not set
+CONFIG_SMC9194=m
+CONFIG_NET_VENDOR_RACAL=y
+CONFIG_NI5010=m
+CONFIG_NI52=m
+CONFIG_NI65=m
+CONFIG_AT1700=m
+CONFIG_DEPCA=m
+CONFIG_HP100=m
+# CONFIG_NET_ISA is not set
+CONFIG_NET_PCI=y
+CONFIG_PCNET32=m
+CONFIG_AMD8111_ETH=m
+CONFIG_ADAPTEC_STARFIRE=m
+CONFIG_AC3200=m
+CONFIG_APRICOT=m
+CONFIG_B44=m
+CONFIG_CS89x0=m
+CONFIG_TULIP=m
+CONFIG_TULIP_MWI=y
+CONFIG_TULIP_MMIO=y
+CONFIG_DE4X5=m
+CONFIG_DGRS=m
+CONFIG_DM9102=m
+CONFIG_EEPRO100=m
+# CONFIG_EEPRO100_PIO is not set
+CONFIG_E100=m
+# CONFIG_LNE390 is not set
+CONFIG_FEALNX=m
+CONFIG_NATSEMI=m
+CONFIG_NE2K_PCI=m
+CONFIG_FORCEDETH=m
+# CONFIG_NE3210 is not set
+# CONFIG_ES3210 is not set
+# CONFIG_8139CP is not set
+CONFIG_8139TOO=m
+# CONFIG_8139TOO_PIO is not set
+# CONFIG_8139TOO_TUNE_TWISTER is not set
+CONFIG_8139TOO_8129=y
+# CONFIG_8139_OLD_RX_RESET is not set
+CONFIG_SIS900=m
+CONFIG_EPIC100=m
+CONFIG_SUNDANCE=m
+# CONFIG_SUNDANCE_MMIO is not set
+CONFIG_TLAN=m
+CONFIG_VIA_RHINE=m
+# CONFIG_VIA_RHINE_MMIO is not set
+CONFIG_WINBOND_840=m
+CONFIG_NET_POCKET=y
+CONFIG_ATP=m
+CONFIG_DE600=m
+CONFIG_DE620=m
+
+#
+# Ethernet (1000 Mbit)
+#
+CONFIG_ACENIC=m
+# CONFIG_ACENIC_OMIT_TIGON_I is not set
+CONFIG_DL2K=m
+CONFIG_E1000=m
+# CONFIG_E1000_NAPI is not set
+# CONFIG_MYRI_SBUS is not set
+CONFIG_NS83820=m
+CONFIG_HAMACHI=m
+CONFIG_YELLOWFIN=m
+CONFIG_R8169=m
+CONFIG_SKGE=m
+CONFIG_SKY2=m
+CONFIG_SK98LIN=m
+CONFIG_TIGON3=m
+# CONFIG_FDDI is not set
+# CONFIG_PLIP is not set
+# CONFIG_PPP is not set
+# CONFIG_SLIP is not set
+
+#
+# Wireless LAN (non-hamradio)
+#
+# CONFIG_NET_RADIO is not set
+
+#
+# Token Ring devices
+#
+# CONFIG_TR is not set
+# CONFIG_NET_FC is not set
+# CONFIG_RCPCI is not set
+# CONFIG_SHAPER is not set
+
+#
+# Wan interfaces
+#
+# CONFIG_WAN is not set
+
+#
+# Amateur Radio support
+#
+# CONFIG_HAMRADIO is not set
+
+#
+# IrDA (infrared) support
+#
+# CONFIG_IRDA is not set
+
+#
+# ISDN subsystem
+#
+# CONFIG_ISDN is not set
+
+#
+# Old CD-ROM drivers (not SCSI, not IDE)
+#
+# CONFIG_CD_NO_IDESCSI is not set
+
+#
+# Input core support
+#
+# CONFIG_INPUT is not set
+# CONFIG_INPUT_KEYBDEV is not set
+# CONFIG_DUMMY_KEYB is not set
+# CONFIG_INPUT_MOUSEDEV is not set
+# CONFIG_INPUT_JOYDEV is not set
+# CONFIG_INPUT_EVDEV is not set
+# CONFIG_INPUT_UINPUT is not set
+
+#
+# Character devices
+#
+CONFIG_VT=y
+CONFIG_VT_CONSOLE=y
+CONFIG_SERIAL=y
+# CONFIG_SERIAL_CONSOLE is not set
+CONFIG_SERIAL_EXTENDED=y
+CONFIG_SERIAL_MANY_PORTS=y
+CONFIG_SERIAL_SHARE_IRQ=y
+CONFIG_SERIAL_DETECT_IRQ=y
+CONFIG_SERIAL_MULTIPORT=y
+CONFIG_HUB6=y
+CONFIG_SERIAL_NONSTANDARD=y
+CONFIG_COMPUTONE=m
+CONFIG_ROCKETPORT=m
+CONFIG_CYCLADES=m
+CONFIG_CYZ_INTR=y
+CONFIG_DIGIEPCA=m
+CONFIG_ESPSERIAL=m
+CONFIG_MOXA_INTELLIO=m
+CONFIG_MOXA_SMARTIO=m
+CONFIG_ISI=m
+CONFIG_SYNCLINK=m
+CONFIG_SYNCLINKMP=m
+CONFIG_N_HDLC=m
+CONFIG_RISCOM8=m
+CONFIG_SPECIALIX=m
+CONFIG_SPECIALIX_RTSCTS=y
+# CONFIG_SPECIALIX_BROKEN is not set
+# CONFIG_SX is not set
+# CONFIG_RIO is not set
+CONFIG_STALDRV=y
+CONFIG_STALLION=m
+CONFIG_ISTALLION=m
+# CONFIG_UNIX98_PTYS is not set
+
+#
+# I2C support
+#
+# CONFIG_I2C is not set
+
+#
+# Mice
+#
+# CONFIG_BUSMOUSE is not set
+# CONFIG_MOUSE is not set
+
+#
+# Joysticks
+#
+# CONFIG_INPUT_GAMEPORT is not set
+# CONFIG_QIC02_TAPE is not set
+# CONFIG_IPMI_HANDLER is not set
+# CONFIG_IPMI_PANIC_EVENT is not set
+# CONFIG_IPMI_DEVICE_INTERFACE is not set
+# CONFIG_IPMI_KCS is not set
+# CONFIG_IPMI_WATCHDOG is not set
+
+#
+# Watchdog Cards
+#
+# CONFIG_WATCHDOG is not set
+# CONFIG_SCx200 is not set
+# CONFIG_SCx200_GPIO is not set
+# CONFIG_AMD_RNG is not set
+# CONFIG_INTEL_RNG is not set
+# CONFIG_HW_RANDOM is not set
+# CONFIG_GEODE_RNG is not set
+# CONFIG_AMD_PM768 is not set
+# CONFIG_NVRAM is not set
+CONFIG_RTC=y
+# CONFIG_MKBD is not set
+# CONFIG_DTLK is not set
+# CONFIG_R3964 is not set
+# CONFIG_APPLICOM is not set
+# CONFIG_SONYPI is not set
+
+#
+# Ftape, the floppy tape device driver
+#
+# CONFIG_FTAPE is not set
+# CONFIG_AGP is not set
+
+#
+# Direct Rendering Manager (XFree86 DRI support)
+#
+# CONFIG_DRM is not set
+# CONFIG_MWAVE is not set
+# CONFIG_OBMOUSE is not set
+
+#
+# Multimedia devices
+#
+# CONFIG_VIDEO_DEV is not set
+
+#
+# File systems
+#
+# CONFIG_QUOTA is not set
+# CONFIG_QFMT_V2 is not set
+# CONFIG_AUTOFS_FS is not set
+# CONFIG_AUTOFS4_FS is not set
+# CONFIG_REISERFS_FS is not set
+# CONFIG_REISERFS_CHECK is not set
+# CONFIG_REISERFS_PROC_INFO is not set
+# CONFIG_ADFS_FS is not set
+# CONFIG_ADFS_FS_RW is not set
+# CONFIG_AFFS_FS is not set
+# CONFIG_HFS_FS is not set
+# CONFIG_HFSPLUS_FS is not set
+# CONFIG_BEFS_FS is not set
+# CONFIG_BEFS_DEBUG is not set
+# CONFIG_BFS_FS is not set
+# CONFIG_EXT3_FS is not set
+# CONFIG_JBD is not set
+# CONFIG_JBD_DEBUG is not set
+# CONFIG_FAT_FS is not set
+# CONFIG_MSDOS_FS is not set
+# CONFIG_UMSDOS_FS is not set
+# CONFIG_VFAT_FS is not set
+# CONFIG_EFS_FS is not set
+# CONFIG_JFFS_FS is not set
+# CONFIG_JFFS2_FS is not set
+# CONFIG_CRAMFS is not set
+# CONFIG_TMPFS is not set
+CONFIG_RAMFS=y
+# CONFIG_ISO9660_FS is not set
+# CONFIG_JOLIET is not set
+# CONFIG_ZISOFS is not set
+# CONFIG_JFS_FS is not set
+# CONFIG_JFS_DEBUG is not set
+# CONFIG_JFS_STATISTICS is not set
+# CONFIG_MINIX_FS is not set
+# CONFIG_VXFS_FS is not set
+# CONFIG_NTFS_FS is not set
+# CONFIG_NTFS_RW is not set
+# CONFIG_HPFS_FS is not set
+CONFIG_PROC_FS=y
+# CONFIG_DEVFS_FS is not set
+# CONFIG_DEVFS_MOUNT is not set
+# CONFIG_DEVFS_DEBUG is not set
+# CONFIG_DEVPTS_FS is not set
+# CONFIG_QNX4FS_FS is not set
+# CONFIG_QNX4FS_RW is not set
+# CONFIG_ROMFS_FS is not set
+CONFIG_EXT2_FS=y
+# CONFIG_SYSV_FS is not set
+# CONFIG_UDF_FS is not set
+# CONFIG_UDF_RW is not set
+# CONFIG_UFS_FS is not set
+# CONFIG_UFS_FS_WRITE is not set
+# CONFIG_XFS_FS is not set
+# CONFIG_XFS_QUOTA is not set
+# CONFIG_XFS_RT is not set
+# CONFIG_XFS_TRACE is not set
+# CONFIG_XFS_DEBUG is not set
+
+#
+# Network File Systems
+#
+# CONFIG_CODA_FS is not set
+# CONFIG_INTERMEZZO_FS is not set
+# CONFIG_NFS_FS is not set
+# CONFIG_NFS_V3 is not set
+# CONFIG_NFS_DIRECTIO is not set
+# CONFIG_ROOT_NFS is not set
+# CONFIG_NFSD is not set
+# CONFIG_NFSD_V3 is not set
+# CONFIG_NFSD_TCP is not set
+# CONFIG_SUNRPC is not set
+# CONFIG_LOCKD is not set
+# CONFIG_SMB_FS is not set
+# CONFIG_NCPFS_NLS is not set
+# CONFIG_ZISOFS_FS is not set
+# CONFIG_ZLIB_FS_INFLATE is not set
+
+#
+# Partition Types
+#
+# CONFIG_PARTITION_ADVANCED is not set
+CONFIG_MSDOS_PARTITION=y
+# CONFIG_SMB_NLS is not set
+# CONFIG_NLS is not set
+
+#
+# Console drivers
+#
+CONFIG_VGA_CONSOLE=y
+CONFIG_VIDEO_SELECT=y
+# CONFIG_MDA_CONSOLE is not set
+
+#
+# Frame-buffer support
+#
+CONFIG_FB=y
+CONFIG_DUMMY_CONSOLE=y
+CONFIG_FB_RIVA=y
+# CONFIG_FB_CLGEN is not set
+# CONFIG_FB_PM2 is not set
+# CONFIG_FB_PM3 is not set
+# CONFIG_FB_CYBER2000 is not set
+CONFIG_FB_VESA=y
+# CONFIG_FB_VGA16 is not set
+# CONFIG_FB_HGA is not set
+CONFIG_VIDEO_SELECT=y
+CONFIG_FB_MATROX=y
+CONFIG_FB_MATROX_MILLENIUM=y
+CONFIG_FB_MATROX_MYSTIQUE=y
+CONFIG_FB_MATROX_G450=y
+CONFIG_FB_MATROX_G100=y
+# CONFIG_FB_MATROX_PROC is not set
+CONFIG_FB_MATROX_MULTIHEAD=y
+# CONFIG_FB_ATY is not set
+CONFIG_FB_RADEON=y
+# CONFIG_FB_ATY128 is not set
+# CONFIG_FB_INTEL is not set
+# CONFIG_FB_SIS is not set
+# CONFIG_FB_NEOMAGIC is not set
+# CONFIG_FB_3DFX is not set
+# CONFIG_FB_VOODOO1 is not set
+CONFIG_FB_TRIDENT=y
+# CONFIG_FB_IT8181 is not set
+# CONFIG_FB_VIRTUAL is not set
+CONFIG_FBCON_ADVANCED=y
+# CONFIG_FBCON_MFB is not set
+# CONFIG_FBCON_CFB2 is not set
+# CONFIG_FBCON_CFB4 is not set
+CONFIG_FBCON_CFB8=y
+CONFIG_FBCON_CFB16=y
+# CONFIG_FBCON_CFB24 is not set
+CONFIG_FBCON_CFB32=y
+# CONFIG_FBCON_AFB is not set
+# CONFIG_FBCON_ILBM is not set
+# CONFIG_FBCON_IPLAN2P2 is not set
+# CONFIG_FBCON_IPLAN2P4 is not set
+# CONFIG_FBCON_IPLAN2P8 is not set
+# CONFIG_FBCON_MAC is not set
+# CONFIG_FBCON_VGA_PLANES is not set
+# CONFIG_FBCON_VGA is not set
+# CONFIG_FBCON_HGA is not set
+CONFIG_FBCON_FONTWIDTH8_ONLY=y
+CONFIG_FBCON_FONTS=y
+CONFIG_FONT_8x8=y
+CONFIG_FONT_8x16=y
+# CONFIG_FONT_SUN8x16 is not set
+# CONFIG_FONT_PEARL_8x8 is not set
+# CONFIG_FONT_ACORN_8x8 is not set
+
+#
+# Sound
+#
+CONFIG_SOUND=y
+CONFIG_SOUND_ALI5455=m
+CONFIG_SOUND_ALI5455_CODECSPDIFOUT_PCMOUTSHARE=y
+CONFIG_SOUND_ALI5455_CODECSPDIFOUT_CODECINDEPENDENTDMA=y
+CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_PCMOUTSHARE=y
+CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_CONTROLLERINDEPENDENTDMA=y
+CONFIG_SOUND_BT878=m
+CONFIG_SOUND_CMPCI=m
+CONFIG_SOUND_CMPCI_FM=y
+CONFIG_SOUND_CMPCI_FMIO=388
+CONFIG_SOUND_CMPCI_FMIO=388
+CONFIG_SOUND_CMPCI_MIDI=y
+CONFIG_SOUND_CMPCI_MPUIO=330
+CONFIG_SOUND_CMPCI_JOYSTICK=y
+CONFIG_SOUND_CMPCI_CM8738=y
+CONFIG_SOUND_CMPCI_SPDIFINVERSE=y
+CONFIG_SOUND_CMPCI_SPDIFLOOP=y
+CONFIG_SOUND_CMPCI_SPEAKERS=2
+CONFIG_SOUND_EMU10K1=m
+CONFIG_MIDI_EMU10K1=y
+CONFIG_SOUND_FUSION=m
+CONFIG_SOUND_CS4281=m
+CONFIG_SOUND_ES1370=m
+CONFIG_SOUND_ES1371=m
+CONFIG_SOUND_ESSSOLO1=m
+CONFIG_SOUND_MAESTRO=m
+CONFIG_SOUND_MAESTRO3=m
+CONFIG_SOUND_FORTE=m
+CONFIG_SOUND_ICH=m
+CONFIG_SOUND_RME96XX=m
+CONFIG_SOUND_SONICVIBES=m
+CONFIG_SOUND_TRIDENT=m
+CONFIG_SOUND_MSNDCLAS=m
+# CONFIG_MSNDCLAS_HAVE_BOOT is not set
+CONFIG_MSNDCLAS_INIT_FILE="/etc/sound/msndinit.bin"
+CONFIG_MSNDCLAS_PERM_FILE="/etc/sound/msndperm.bin"
+CONFIG_SOUND_MSNDPIN=m
+# CONFIG_MSNDPIN_HAVE_BOOT is not set
+CONFIG_MSNDPIN_INIT_FILE="/etc/sound/pndspini.bin"
+CONFIG_MSNDPIN_PERM_FILE="/etc/sound/pndsperm.bin"
+CONFIG_SOUND_VIA82CXXX=m
+CONFIG_MIDI_VIA82CXXX=y
+# CONFIG_SOUND_OSS is not set
+# CONFIG_SOUND_TVMIXER is not set
+CONFIG_SOUND_AD1980=m
+CONFIG_SOUND_WM97XX=m
+
+#
+# USB support
+#
+# CONFIG_USB is not set
+
+#
+# Support for USB gadgets
+#
+# CONFIG_USB_GADGET is not set
+
+#
+# Bluetooth support
+#
+# CONFIG_BLUEZ is not set
+
+#
+# Kernel hacking
+#
+# CONFIG_DEBUG_KERNEL is not set
+CONFIG_LOG_BUF_SHIFT=0
+
+#
+# Cryptographic options
+#
+# CONFIG_CRYPTO is not set
+
+#
+# Library routines
+#
+# CONFIG_CRC32 is not set
+# CONFIG_ZLIB_INFLATE is not set
+# CONFIG_ZLIB_DEFLATE is not set
diff -uNr linux-2.4.37.9/drivers/char/amithlon_pci.h linux-2.4.37.9-amithlon/drivers/char/amithlon_pci.h
--- linux-2.4.37.9/drivers/char/amithlon_pci.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/amithlon_pci.h	2010-06-16 22:58:53.000000000 -0400
@@ -0,0 +1,62 @@
+#ifndef AMITHLON_PCI_H
+#define AMITHLON_PCI_H
+
+#include "linux/pci.h"
+
+#define CMD_FIND_SLOT   1
+#define CMD_FIND_SUBSYS 2
+#define CMD_FIND_DEVICE 3
+#define CMD_FIND_CLASS  4
+#define CMD_FIND_CAPAB  5
+#define CMD_SET_POWER   6
+#define CMD_ENABLE      7
+#define CMD_DISABLE     8
+#define CMD_RELEASE     9
+#define CMD_REQUEST    10
+
+#define CMD_READBYTE   20
+#define CMD_READWORD   21
+#define CMD_READLONG   22
+#define CMD_WRITEBYTE  23
+#define CMD_WRITEWORD  24
+#define CMD_WRITELONG  25
+
+#define CMD_GETBASE    30
+#define CMD_GETINFO    31
+#define CMD_GETNAME    32
+
+typedef struct {
+  /* operation choice */
+  int command;
+
+  /* inputs */
+  unsigned char busnum;
+  unsigned char devnum;
+  unsigned char funnum;
+
+  unsigned int  vendor;
+  unsigned int  device;
+  unsigned int  subsys_vendor;
+  unsigned int  subsys_device;
+  unsigned int  class;
+  unsigned long starthandle;
+  int           capability;
+  int           powerstate;
+  int           basenum;
+  int           offset;
+  char*         res_name;
+  unsigned char* releasecode;
+
+  /* Outputs */
+  int           cappos;
+  unsigned long handle;
+  int           oldpowerstate;
+  int           result;
+  unsigned long confdata;
+  unsigned long start;
+  unsigned long end;
+  unsigned long flags;
+  unsigned long irq;
+} pcidata;
+
+#endif
diff -uNr linux-2.4.37.9/drivers/char/Config.in linux-2.4.37.9-amithlon/drivers/char/Config.in
--- linux-2.4.37.9/drivers/char/Config.in	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/Config.in	2010-02-17 20:04:08.000000000 -0500
@@ -334,7 +334,7 @@
 if [ "$CONFIG_TOSHIBA_RBTX4927" = "y" -o "$CONFIG_TOSHIBA_JMR3927" = "y" ]; then
    tristate 'Dallas DS1742 RTC support' CONFIG_DS1742
 fi
-
+bool 'Magic Keyboard Support' CONFIG_MKBD
 tristate 'Double Talk PC internal speech card support' CONFIG_DTLK
 tristate 'Siemens R3964 line discipline' CONFIG_R3964
 tristate 'Applicom intelligent fieldbus card support' CONFIG_APPLICOM
diff -uNr linux-2.4.37.9/drivers/char/irq.c linux-2.4.37.9-amithlon/drivers/char/irq.c
--- linux-2.4.37.9/drivers/char/irq.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/irq.c	2010-02-17 20:04:08.000000000 -0500
@@ -0,0 +1,2111 @@
+/*
+	irq - driver to delivery hardware interrupts to user space.
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su
+	Copying-policy: GPL
+
+	$Id: irq.c,v 1.67 2000/07/31 10:59:07 fedorov Exp $
+
+	tab size = 4
+*/
+
+
+#include <linux/types.h>
+
+#ifndef __KERNEL__
+# error This is a Linux kernel device driver
+#endif
+
+#ifndef  IRQ_MAJOR
+# define IRQ_MAJOR 60			// experimental
+#endif
+
+#define DISALLOW_SHARED_DISABLE 0
+
+#if defined(MODVERSIONS) && !defined(__GENKSYMS__)
+# include <linux/modversions.h>
+#endif
+
+#include <linux/config.h>
+
+//#ifdef			 MODULE
+# include <linux/module.h>
+//#endif
+
+#if defined(MODVERSIONS) && defined(CONFIG_IRQ_EXPORT_SIMULATE) && !defined(__GENKSYMS__)
+# include "irq.ver"
+#endif
+
+#include <linux/mm.h>
+#include <linux/mm.h>
+#include <linux/errno.h>
+#include <linux/file.h>
+#include <linux/smp_lock.h>
+#include <linux/highuid.h>
+
+#include <linux/compat/uaccess.h>
+#include <linux/compat/init.h>
+#include <linux/compat/atomic.h>
+#include <linux/compat/bitops.h>
+#include <linux/compat/system.h>		// xchg_compat()
+#include <linux/compat/wait.h>			// wait_queue_head
+#include <linux/compat/spinlock.h>
+#include <linux/compat/fs.h>			// file_operations
+#include <linux/compat/poll.h>			// poll_wait()
+#include <linux/compat/sched.h> 		// NEED_RESCHED
+#include <linux/compat/errno.h> 		// ENOTSUP
+
+#include <linux/types.h>
+#include <linux/slab.h>				// kmalloc(), kfree()
+#include <asm/irq.h>					// NR_IRQS
+#include <linux/major.h>				// MAX_CHRDEV
+
+#include <linux/df/pr.h>				// pr_error(), pr_endl()
+#include <linux/df/assert.h>			// assert_retvoid(), assert_retval()
+#include <linux/df/save_flags_and_cli.h>
+#include <linux/df/strdup.h>
+
+#include <asm/io.h>
+#include <asm/system.h>
+
+#include "./irq.h"						// API definitions
+
+#include "amithlon_pci.h"
+
+#define REGPARM(n) __attribute__(( regparm(n) ))
+
+#define UNUSED __attribute__(( unused ))
+
+
+/* UAE memory blocks. Why here, you ask? Because it's easy. */
+typedef struct {
+  int start;
+  int end;
+} range;
+
+#define UAE_BLOCKS_N 16
+static range uae_blocks[UAE_BLOCKS_N];
+static int blockindex=0;
+
+extern unsigned long process_to_elevate;
+extern int do_elevate_process;
+extern unsigned long zeropage;
+
+void add_uae_block(int start, int end)
+{
+  if (blockindex==UAE_BLOCKS_N)
+    return;
+  uae_blocks[blockindex].start=start;
+  uae_blocks[blockindex].end=end;
+  blockindex++;
+}
+
+/* UAE fast page fault handling */
+
+static fpf_data fpf;
+static unsigned long fpf_eip;
+
+int uae_handle_fault(struct pt_regs *regs, unsigned long error_code,
+		     unsigned long address)
+{
+  error_code=5;
+  if (current==fpf.task && 
+      address==fpf.addr &&
+      fpf.handler &&
+      (error_code&1) &&  /* protection fault, rather than page fault */
+      (error_code&4)) {  /* In user mode */
+    /* Do it */
+    unsigned long x;
+    fpf_eip=regs->eip;
+    if (COPY_FROM_USER(&x,(const void*)(fpf_eip+6), sizeof(x)))
+      return 0;
+    regs->eip=x;
+    return 1;
+  }
+  return 0;
+}
+
+/* UAE high precision timers. Kludge in here like nothing you ever dreamt of */
+unsigned long long uae_alert=~0; /* When to start checking timers */
+unsigned long long uae_nextevent=~0; /* When to next trigger */
+
+
+
+//==== declarations ====================================================
+
+static int major = IRQ_MAJOR;	// 0 - auto - it works, but useless
+
+static const char      name[]             = "irq";
+
+static const char   version[] __init_data =
+	"$Revision: 1.67 $ $Date: 2000/07/31 10:59:07 $";
+
+static const char copyright[] __init_data =
+	"(C) Dmitry A. Fedorov, 1997, fedorov@inp.nsk.su";
+
+typedef enum { false=0, true=1, Off=false, On=true } bool;
+typedef struct __irq_request_arg __irq_request_arg;
+typedef struct inode Inode;
+typedef struct file File;
+typedef struct task_struct task_struct;
+
+
+
+//==== utilities =======================================================
+
+# include <linux/df/strdup.imp>
+
+static int nomem(void)
+{
+	pr_error("%s: Out of memory!\n", name);
+	return -ENOMEM;
+}
+
+extern inline bool has_readwrite_access(const File* file)
+{
+	return ( (file->f_flags&O_ACCMODE) != O_RDWR ) ? false : true;
+}
+
+
+#if 0
+static uint trace_count=0;
+
+# define TRACE()	\
+	printk("%u: " __FILE__ ":%u: " __FUNCTION__ "()\n", \
+		trace_count++, __LINE__)
+
+# define TRACEF(fmt, arg...)	\
+	do \
+	{ \
+		printk("%u: " __FILE__ ":%u: " __FUNCTION__ "(): ", \
+			trace_count++, __LINE__); \
+		printk(fmt, ##arg); \
+	} while(0)
+#endif
+
+/***************** PCI handling ****************************************/
+
+#define PCI_MINOR 255
+
+typedef struct pci_list_t {
+  struct pci_dev* dev;
+  unsigned char* releasecode;
+  char* name;
+  struct pci_list_t* next;
+  struct pci_list_t** prev_p;
+} pci_list;
+
+pci_list* devlist=NULL;
+
+
+static int find_code_size(unsigned char* ud)
+{
+  int size=0;
+
+  while (1) {
+    unsigned char c;
+    COPY_FROM_USER(&c,ud+size+2,1);
+    switch(c) {
+    case 0xa0: size+=4; break;
+    case 0xe0: size+=6; break;
+    case 0x90: size+=4; break;
+    case 0xd0: size+=6; break;
+    case 0x80: size+=6; break;
+    case 0xc0: size+=8; break;
+    default: return size;
+    }
+    size+=2;
+  }
+}
+
+u32 dummy=0;
+
+static void execute_release_code(pci_list* x)
+{
+  int pos;
+  u8* releasecode;
+
+  if (!x->releasecode)
+    return;
+  pos=0;
+  releasecode=x->releasecode;
+
+  cli();
+  while (1) {
+    int basenum=releasecode[pos];
+    int type=releasecode[pos+2];
+    unsigned int base=x->dev->resource[basenum].start;
+    int io=(x->dev->resource[basenum].flags&1);
+    unsigned int offset;
+    unsigned int val;
+    int len;
+    unsigned int i;
+    int op=releasecode[pos+1];
+
+    pos+=2; /* skip base/op */
+    if (type&0x40) {
+      offset=((u32)releasecode[pos+2]<<8)|
+	((u32)releasecode[pos+3]<<0);
+      pos+=2;
+    }
+    else {
+      offset=releasecode[pos+1];
+    }      
+    pos+=2; /* skip type/offset */
+    switch(type) {
+    case 0x80:
+    case 0xc0: len=4; break;
+    case 0x90:
+    case 0xd0: len=2; break;
+    case 0xa0:
+    case 0xe0: len=1; break;
+    default:
+      sti();
+      return;
+    }
+    val=0;
+    for (i=0;i<len;i++)
+      val=(val<<8)+releasecode[pos+i];
+
+    printk("op %d: base %x, offset %x, val %x, io=%d, len=%d\n",op,base,offset,val,io,len);
+
+    switch(op) {
+    case 0x00: 
+      {/* write */
+	if (io) {
+	  switch(len) {
+	  case 4: outl(val,base+offset); break;
+	  case 2: outw(val,base+offset); break;
+	  case 1: outb(val,base+offset); break;
+	  }
+	}
+	else { /* memory */
+	  unsigned long paddr=(unsigned long)bus_to_virt(base+offset);
+	  void* addr=ioremap(paddr,4);
+
+	  switch(len) {
+	  case 4: *((u32*)addr)=val; break;
+	  case 2: *((u16*)addr)=val; break;
+	  case 1: *((u8*)addr)=val; break;
+	  }
+	  iounmap(addr);
+	}
+      }
+      break;
+
+    case 0x01: 
+      { /* read */
+	if (io) {
+	  switch(len) {
+	  case 4: dummy+=inl(base+offset); break;
+	  case 2: dummy+=inw(base+offset); break;
+	  case 1: dummy+=inb(base+offset); break;
+	  }
+	}
+	else { /* memory */
+	  unsigned long paddr=(unsigned long)bus_to_virt(base+offset);
+	  void* addr=ioremap(paddr,4);
+
+	  switch(len) {
+	  case 4: dummy+=*((u32*)addr); break;
+	  case 2: dummy+=*((u16*)addr); break;
+	  case 1: dummy+=*((u8*)addr); break;
+	  }
+	  iounmap(addr);
+	}
+      }
+      break;
+
+    case 0x02: 
+      { /* sleep */
+	for (i=0;i<val;i++)
+	  outb(0,0x80);
+      }
+      break;
+
+    default:
+      break;
+    }
+    
+    if (len==1)
+      pos+=2;
+    else
+      pos+=len;
+  }
+  sti();
+}
+
+static void release_device(struct pci_dev* dev, int runcode)
+{
+  pci_list* l=devlist;
+
+  while (l && l->dev!=dev)
+    l=l->next;
+  if (!l)
+    return;
+  if (runcode)
+    execute_release_code(l);
+  pci_release_regions(l->dev);
+
+  if (l->next)
+    l->next->prev_p=l->prev_p;
+  *(l->prev_p)=l->next;
+  kfree(l->name);
+  if (l->releasecode)
+    kfree(l->releasecode);
+  kfree(l);
+}
+
+static void release_all_devices(void)
+{
+  pci_list* l=devlist;
+
+  while (l) {
+    pci_list* next=l->next;
+
+    release_device(l->dev,1);
+    l=next;
+  }
+}
+
+static int pcicommand(pcidata* x)
+{
+  struct pci_dev* sh=(struct pci_dev*)x->starthandle;
+
+  switch(x->command) {
+  case CMD_FIND_SLOT:
+    x->handle=(unsigned long)pci_find_slot(x->busnum,
+					   PCI_DEVFN(x->devnum,x->funnum));
+    return 0;
+  case CMD_FIND_SUBSYS:
+    x->handle=(unsigned long)pci_find_subsys(x->vendor,
+					     x->device,
+					     x->subsys_vendor,
+					     x->subsys_device,
+					     sh);
+    return 0;
+  case CMD_FIND_DEVICE:
+    x->handle=(unsigned long)pci_find_device(x->vendor,
+					     x->device,
+					     sh);
+    return 0;
+  case CMD_FIND_CLASS:
+    x->handle=(unsigned long)pci_find_class(x->class,
+					    sh);
+    return 0;
+  case CMD_FIND_CAPAB:
+    x->cappos=pci_find_capability(sh,
+				  x->capability);
+    return 0;
+  case CMD_SET_POWER:
+    x->oldpowerstate=pci_set_power_state(sh,
+					 x->powerstate);
+    return 0;
+  case CMD_ENABLE:
+    x->result=pci_enable_device(sh);
+    return 0;
+  case CMD_DISABLE:
+    pci_disable_device(sh);
+    return 0;
+  case CMD_RELEASE:
+    release_device(sh,0);
+    return 0;
+  case CMD_REQUEST:
+    {
+      char* name;
+      
+      if (x->res_name) {
+	int len;
+	char c;
+	int i;
+
+	len=0;
+	while (!COPY_FROM_USER(&c, x->res_name+len,1)) {
+	  if (!c)
+	    break;
+	  len++;
+	}
+	name=kmalloc(len+1,GFP_KERNEL);
+	for (i=0;i<len;i++) {
+	  name[i]=0;
+	  COPY_FROM_USER(name+i, x->res_name+i,1);
+	}
+	name[i]=0;
+      }
+      else {
+	name=kmalloc(22,GFP_KERNEL);
+	strcpy(name,"amithlon pci system");
+      }
+
+      x->result=pci_request_regions(sh,name);
+      if (!x->result) { /* Successful */
+	pci_list* n=kmalloc(sizeof(pci_list),GFP_KERNEL);
+	n->dev=sh;
+	if (x->releasecode) {
+	  int size=find_code_size(x->releasecode);
+	  n->releasecode=kmalloc(size,GFP_KERNEL);
+	  COPY_FROM_USER(n->releasecode,x->releasecode,size);
+	}
+	else 
+	  n->releasecode=NULL;
+	n->name=name;
+	n->next=devlist;
+	n->prev_p=&devlist;
+	if (devlist)
+	  devlist->prev_p=&(n->next);
+	devlist=n;
+      }
+      else {
+	kfree(name);
+      }
+    }
+    return 0;
+    
+  case CMD_READBYTE:
+    x->confdata=0;
+    x->result=pci_read_config_byte(sh,
+				   x->offset,
+				   (u8*)&(x->confdata));
+    return 0;
+
+  case CMD_READWORD:
+    x->confdata=0;
+    x->result=pci_read_config_word(sh,
+				   x->offset,
+				   (u16*)&(x->confdata));
+    return 0;
+  case CMD_READLONG:
+    x->confdata=0;
+    x->result=pci_read_config_dword(sh,
+				    x->offset,
+				    (u32*)&(x->confdata));
+    return 0;
+  case CMD_WRITEBYTE:
+    x->result=pci_write_config_byte(sh,
+				    x->offset,
+				    (u8)(x->confdata));
+    return 0;
+  case CMD_WRITEWORD:
+    x->result=pci_write_config_word(sh,
+				    x->offset,
+				    (u16)(x->confdata));
+    return 0;
+  case CMD_WRITELONG:
+    x->result=pci_write_config_dword(sh,
+				     x->offset,
+				     (u32)(x->confdata));
+    return 0;
+    
+  case CMD_GETBASE:
+    x->start=sh->resource[x->basenum].start;
+    x->end=sh->resource[x->basenum].end;
+    x->flags=sh->resource[x->basenum].flags;
+    return 0;
+
+  case CMD_GETINFO:
+    x->irq=sh->irq;
+    x->devnum=PCI_SLOT(sh->devfn);
+    x->funnum=PCI_FUNC(sh->devfn);
+    x->busnum=sh->bus->number;
+    return 0;
+
+  case CMD_GETNAME:
+    {
+      int len=0;
+      do {  
+	if (COPY_TO_USER((void*)(x->res_name+len),(void*)(sh->name+len),1))
+	  return -EFAULT;
+      } while (sh->name[len++]);
+    }
+    return 0;
+  default:
+    return -EINVAL;
+  }
+}
+
+//==== irq utilities ===================================================
+
+extern inline uint irq_minor(ushort minor)
+{
+	return minor;	// /dev/irqN has minor N
+}
+
+extern inline uint irq_inode(const Inode* inode)
+{
+	return irq_minor(INODE_MINOR(inode));
+}
+
+extern inline uint irq_file(const File* file)
+{
+	return irq_minor(FILE_MINOR(file));
+}
+
+
+//==== declarations ====================================================
+
+//+ init/cleanup
+static int _irq_init(void);
+#ifdef MODULE
+int init_module(void);
+void cleanup_module(void);
+#else
+int irq_init(void);
+#endif
+//- init/cleanup
+
+
+//+ file_operations
+static int irq_open(Inode* inode, File* file);
+static FILE_OPERATIONS_CLOSE_TYPE irq_close(Inode* inode, File* file);
+
+static FILE_OPERATIONS_SEEK_PROTOTYPE(irq_seek,inode,file,offset,origin);
+
+static int irq_ioctl(Inode* inode, File* file, uint cmd, ulong arg);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,23)
+static int irq_select(Inode* inode, File* file, int sel_type, select_table* wt);
+#else
+static uint irq_poll(struct file* file, poll_table* pt);
+#endif
+//- file_operations
+
+
+//+ data structures and methods
+
+typedef struct irq_channel irq_chan;
+typedef struct task_channel task_chan;
+
+
+
+// interrupt delivery channel
+struct irq_channel
+{
+#ifndef NDEBUG
+	ulong signature;		// assertions
+# define ICH_SIG 0xdeadbeef
+#endif
+
+	File* file;
+	uint irq;				// access speed-up
+	task_chan* tch;			// my container
+	int sig;				// sig num for delivery, -1 for select(2) only
+	int flags;				// enum irq_flags
+	char* devname;			// for info in /proc/interrupt
+
+	wait_queue_head_t wqh;
+
+	size_t irq_count;		// received interrupts
+	size_t sig_count;		// signals sent
+	size_t sel_count;		// interrupt counter for irq_select()
+	size_t skipping_count;	// local skipping mode counter
+};
+
+static irq_chan* ich_ctor(File* file, int sig, int flags);
+static void ich_dtor(irq_chan* ich);
+static void ich_attach_tch(irq_chan* ich, task_chan* tch);
+static void ich_detach_tch(irq_chan* ich);
+
+
+
+
+// user task's interrupt delivery channel
+struct task_channel
+{
+#ifndef NDEBUG
+	ulong signature;			// assertions
+# define TCH_SIG 0xbeefdead
+#endif
+
+	task_chan* next;			// list
+	task_chan* prev;			//
+
+	irq_chan* ichs[NR_IRQS];	// interrupt delivery channels
+	size_t nr_ich;
+
+	task_struct* owner_task;	// interrupt requester/owner
+	pid_t owner_pid;			//
+};
+
+static task_chan* tch_ctor(task_struct* task);
+static void       tch_dtor(task_chan* tch);
+static void       tch_link(task_chan* tch);
+static void       tch_unlink(task_chan* tch);
+static task_chan* tch_find(const task_struct* task);
+static task_chan* tch_new_link(task_struct* task);
+#if 0
+static task_chan* tch_find_new_link(task_struct* task);
+#endif
+static void tch_attach_ich(task_chan* tch, irq_chan* ich);
+static void tch_detach_ich(task_chan* tch, uint irq);
+
+
+// are all of interrupt delivery channels empty?
+extern inline bool tch_is_empty(const task_chan* tch)
+{
+	assert_retval(tch!=NULL, false);
+	assert_retval(tch->signature==TCH_SIG, false);
+	return tch->nr_ich==0;
+}
+
+// delete self if all of interrupt delivery channels are empty.
+// returns empty flag.
+extern inline bool tch_dtor_if_empty(task_chan* tch)
+{
+	return tch_is_empty(tch) ? (tch_dtor(tch), true) : false;
+}
+
+
+static bool check_ownership(const irq_chan* ich)			REGPARM(1);
+
+static int check_null_and_ownership(const irq_chan* ich)	REGPARM(1);
+
+//- data structures and methods
+
+
+//+
+static int do_request(File* file, int sig, int flags);
+
+static int register_irq_handler(irq_chan* ich)	REGPARM(1);
+static bool free_irq_ich_tch(irq_chan* ich)		REGPARM(1);
+
+static void skipping_on (irq_chan* ich)	REGPARM(1);
+static int	skipping_off(irq_chan* ich)	REGPARM(1);
+static void skipping_sub(irq_chan* ich)	REGPARM(1);
+
+static void irq_simulate(uint irq);
+
+static void irq_handler(int irq, void* dev_id, struct pt_regs* ptregs);
+static void do_irq(irq_chan* ich) REGPARM(1);
+//-
+
+
+
+//==== common variables & tables =======================================
+
+// file_operations switcher
+static struct file_operations fops = {
+  owner:  NULL,
+  llseek: irq_seek,		// for error reporting only
+  poll:   irq_poll,
+  ioctl:  irq_ioctl,
+  open:   irq_open,
+  release: irq_close,
+  };
+
+
+static size_t irq_channels_registered[NR_IRQS] = { [0 ... NR_IRQS-1] = 0 };
+
+// list of tasks with opened interrupt delivery channels
+static task_chan* tchlist=NULL;
+static spinlock_t tchlist_lock = SPIN_LOCK_UNLOCKED; //used in simulate() only
+
+// skipping mode counter
+static size_t skipping_irq_counts[NR_IRQS] = { [0 ... NR_IRQS-1] = 0 };
+
+static size_t disabled_irq_counts[NR_IRQS] = { [0 ... NR_IRQS-1] = 0 };
+
+
+#ifdef CONFIG_IRQ_EXPORT_SIMULATE
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+static struct symbol_table irq_syms =
+{
+#  include <linux/symtab_begin.h>
+	X(irq_simulate),
+#  include <linux/symtab_end.h>
+};
+# else
+EXPORT_SYMBOL(irq_simulate);
+# endif
+#endif
+
+
+//======================================================================
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+
+static void REGPARM(1) DISABLE_IRQ(uint irq)
+{
+	assert_retvoid(irq<NR_IRQS);
+	disabled_irq_counts[irq] = 1;
+	disable_irq(irq);
+}
+
+static void REGPARM(1) ENABLE_IRQ(uint irq)
+{
+	assert_retvoid(irq<NR_IRQS);
+	disabled_irq_counts[irq] = 0;
+	enable_irq(irq);
+}
+
+#else
+
+static void REGPARM(1) DISABLE_IRQ(uint irq)
+{
+	assert_retvoid(irq<NR_IRQS);
+	++disabled_irq_counts[irq];
+	disable_irq(irq);
+}
+
+static void REGPARM(1) ENABLE_IRQ(uint irq)
+{
+	assert_retvoid(irq<NR_IRQS);
+	if (disabled_irq_counts[irq] > 0)
+	{
+		--disabled_irq_counts[irq];
+		enable_irq(irq);
+	}
+}
+
+#endif
+
+
+//==== debugging =======================================================
+
+static void _prefix(const char* file, int line, const char* func)
+{
+	printk("%s:%d %s(): ", file, line, func);
+}
+
+#define prefix() _prefix(__FILE__,__LINE__,__FUNCTION__)
+
+
+#ifdef DEBUG
+
+static size_t msg_counter = 0;
+
+static void print_msg_counter(void)
+{
+	printk("%u: ", msg_counter++);
+}
+
+static void pfx(uint irq)
+{
+	printk("%s[%u]: ", name, irq);
+}
+
+# define PFX(irq)		pfx(irq)
+# define PREFIX()		prefix()
+# define PRDEBUG(fmt,arg...)	printk(fmt,##arg)
+# define PRMSGCOUNTER()	print_msg_counter()
+# define PRENDL() pr_endl()
+#
+#else
+#
+# define PFX(irq)
+# define PREFIX()
+# define PRDEBUG(fmt,arg...)
+# define PRMSGCOUNTER()
+# define PRENDL()
+#
+#endif
+
+
+
+#ifdef DEBUG
+
+static void ICH_PRINT(const irq_chan* ich)
+{
+	ulong flags;
+	irq_chan tich;
+
+	if (ich==NULL)
+	{
+		printk("!NULL!");
+		return;
+	}
+
+	flags=save_flags_and_cli();
+	memcpy(&tich, ich, sizeof(tich));
+	restore_flags(flags);
+
+	printk( "(devname=%s irq=%d tch=%p sig=%d flags=0x%08X "
+			"irq_count=%u sig_count=%u)",
+		tich.devname, tich.irq, tich.tch, tich.sig, tich.flags,
+		tich.irq_count, tich.sig_count);
+}
+
+static void ICHLIST_PRINT(const task_chan* tch)
+{
+	int i;
+
+	if (tch==NULL)
+		printk("!NULL!");
+
+	assert_retvoid(tch->signature==TCH_SIG);
+
+	printk("[");
+	for (i=0; i<NR_IRQS; i++)
+	{
+		assert_retvoid(tch->ichs[i]==NULL || tch->ichs[i]->signature==ICH_SIG);
+		printk(" %p",tch->ichs[i]);
+	}
+	printk(" ]");
+}
+
+static void TCHLIST_PRINT(void)
+{
+	task_chan* tch;
+
+	for(tch=tchlist; tch!=NULL; tch=tch->next)
+	{
+		assert_break(tch->signature==TCH_SIG);
+
+		printk("%s %s(): tch=%p next=%p, ichlist: ",
+			name, __FUNCTION__, tch, tch->next);
+		ICHLIST_PRINT(tch);
+
+		pr_endl();
+	}
+}
+
+#else	// ndef DEBUG
+
+# define ICHLIST_PRINT(tch)
+# define TCHLIST_PRINT()
+# define ICH_PRINT(ich)
+
+#endif	// def DEBUG
+
+
+
+//==== implementation ==================================================
+
+//+ data structures and methods
+
+// allocate memory for interrupt delivery channel structure and initialize.
+// returns NULL on memory exhausted.
+static irq_chan* ich_ctor(File* file, int sig, int flags)
+{
+	register irq_chan* ich;
+
+	assert_retval(irq_file(file) < NR_IRQS, NULL);
+
+	ich=kmalloc(sizeof(irq_chan), GFP_KERNEL);
+
+	if (ich!=NULL)
+	{
+#ifndef NDEBUG
+		ich->signature=ICH_SIG;
+#endif
+
+		ich->file=file;
+		file->private_data = ich;
+		ich->irq=irq_file(file);
+		ich->tch=NULL;
+		ich->sig=sig;
+		ich->flags=flags;
+		ich->devname=NULL;
+
+		init_waitqueue_head(&ich->wqh);
+
+		ich->irq_count=0;
+		ich->sig_count=0;
+		ich->sel_count=0;
+		ich->skipping_count=0;
+	}
+
+	PREFIX(); PRDEBUG("ich=%p ich=", ich); ICH_PRINT(ich); PRENDL();
+	return ich;
+}
+
+static void REGPARM(1) ich_dtor(irq_chan* ich)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich->tch==NULL);
+	PREFIX(); ICH_PRINT(ich); PRENDL();
+
+	ich->file->private_data = NULL;
+
+#ifndef NDEBUG
+	ich->signature=0;
+	ich->file=NULL;
+	ich->tch=NULL;
+#endif
+
+	kfree(ich->devname);
+
+#ifndef NDEBUG
+	ich->devname=NULL;
+#endif
+
+	kfree(ich);
+}
+
+
+static void ich_attach_tch(irq_chan* ich, task_chan* tch)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+
+	ich->tch=tch;
+}
+
+static void ich_detach_tch(irq_chan* ich)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich->tch!=NULL);
+	assert_retvoid(ich->tch->signature==TCH_SIG);
+
+	ich->tch=NULL;
+}
+
+
+
+// allocate memory for task channel structure and initialize.
+// returns NULL on memory exhausted.
+static task_chan* tch_ctor(task_struct* task)
+{
+	register task_chan* tch=kmalloc(sizeof(task_chan),GFP_KERNEL);
+
+	if (tch!=NULL)
+	{
+#ifndef NDEBUG
+		tch->signature=TCH_SIG;
+#endif
+		tch->next=NULL;
+		tch->prev=NULL;
+		memset(tch->ichs, 0, sizeof(tch->ichs));
+		tch->nr_ich=0;
+		tch->owner_task=task;
+		tch->owner_pid=task->pid;
+	}
+	return tch;
+}
+
+static void tch_dtor(task_chan* tch)
+{
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+
+	tch_unlink(tch);
+	if (tch_is_empty(tch))
+	{
+		assert_retvoid(tch->next==NULL);
+		assert_retvoid(tch->prev==NULL);
+		assert_retvoid(tch->nr_ich==0);
+
+#ifndef NDEBUG
+		memset(&tch->ichs, 0, sizeof(tch->ichs));
+		tch->owner_task=NULL;
+		tch->owner_pid=-1;
+#endif
+		kfree(tch);
+	}
+	else
+	{
+		prefix(); printk("task_chan* %p is not empty!\n", tch);
+	}
+}
+
+// insert new and cleared task channel at begin of list.
+static void tch_link(task_chan* tch)
+{
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+	assert_retvoid(tch->next==NULL);
+	assert_retvoid(tch->prev==NULL);
+
+	if (tchlist!=NULL)
+	{
+		assert_retvoid(tchlist->signature==TCH_SIG);
+
+		tch->next=tchlist;
+		tchlist->prev=tch;
+	}
+	tchlist=tch;
+}
+
+static void tch_unlink(task_chan* tch)
+{
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+
+	assert_retvoid(tchlist==NULL || tchlist->signature==TCH_SIG);
+
+	assert_retvoid(tch->next==NULL || tch->next->signature==TCH_SIG);
+	assert_retvoid(tch->prev==NULL || tch->prev->signature==TCH_SIG);
+
+	assert_retvoid(tch->next==NULL || tch->next->prev == tch);
+	assert_retvoid(tch->prev==NULL || tch->prev->next == tch);
+
+	if (tch->next!=NULL)		// I am not a last member in list
+		tch->next->prev = tch->prev;
+
+	if (tch->prev!=NULL)		// I am not a first member in list
+		tch->prev->next = tch->next;
+	else						// I am a first member in list
+		tchlist=tch->next;
+}
+
+// find task channel.
+static task_chan* tch_find(const task_struct* task)
+{
+	task_chan* tch;
+
+	for(tch=tchlist; tch!=NULL; tch=tch->next)
+	{
+		assert_break(tch->signature==TCH_SIG);
+
+		if (tch->owner_task==task && tch->owner_pid==task->pid)
+			return tch;
+	}
+
+	return NULL;
+}
+
+// create new task channel and add it to list.
+// returns NULL on ENOMEM.
+static task_chan* tch_new_link(task_struct* task)
+{
+	task_chan* tch;
+
+	if ((tch=tch_ctor(task))==NULL)
+		return NULL;
+	assert_retval(tch->signature==TCH_SIG, NULL);
+	tch_link(tch);
+	return tch;
+}
+
+#if 0
+// find task channel, if isn't create new and add it to list.
+// returns NULL on ENOMEM.
+static task_chan* tch_find_new_link(task_struct* task)
+{
+	task_chan* tch=tch_find(task);
+	if (tch!=NULL) return tch;
+
+	return tch_new_link(task);
+}
+#endif
+
+static void tch_attach_ich(task_chan* tch, irq_chan* ich)
+{
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+
+	assert_retvoid(ich->irq<NR_IRQS);
+	assert_retvoid(tch->ichs[ich->irq]==NULL);
+
+	tch->ichs[ich->irq] = ich;
+	tch->nr_ich++;
+	ich_attach_tch(ich,tch);
+}
+
+static void tch_detach_ich(task_chan* tch, uint irq)
+{
+	assert_retvoid(tch!=NULL);
+	assert_retvoid(tch->signature==TCH_SIG);
+	assert_retvoid(irq<NR_IRQS);
+	assert_retvoid(tch->ichs[irq] != NULL);
+	assert_retvoid(tch==tch->ichs[irq]->tch);
+	assert_retvoid(tch->nr_ich>0);
+
+	ich_detach_tch(tch->ichs[irq]);
+	tch->ichs[irq] = NULL;
+	tch->nr_ich--;
+}
+
+
+
+//returns error flag
+static bool check_ownership(const irq_chan* ich)
+{
+	assert_retval(ich!=NULL, true);
+	assert_retval(ich->signature==ICH_SIG, true);
+	assert_retval(ich->tch!=NULL, true);
+	assert_retval(ich->tch->signature==TCH_SIG, true);
+
+	return (ich->tch->owner_pid != current->pid);
+}
+
+//returns -errno or 0
+static int check_null_and_ownership(const irq_chan* ich)
+{
+	if (ich==NULL)
+		return -EPERM;
+
+	if (check_ownership(ich))
+		return -EACCES;
+
+	return 0;
+}
+
+//- data structures and methods
+
+
+//+ init/cleanup
+
+static int __init_text _irq_init(void)
+{
+	int rc;
+
+	pr_info("%s driver %s\n%s    %s\n",
+		name,version, KERN_INFO,copyright);
+	pr_info("%s: ", name);
+	if ( (rc=register_chrdev(major,name,&fops)) <0 )
+	{
+		printk("registration failed: ");
+		if (rc==-EBUSY)
+			if (major==0)
+				printk("no free major slots");
+			else
+				printk("major %d is busy",major);
+		else if (rc==-EINVAL)
+				printk("major number %d > %d", major, MAX_CHRDEV-1);
+		else
+			printk("rc = %d",rc);
+		pr_endl();
+		return rc;
+	}
+
+
+#if defined(MODULE) && defined(CONFIG_IRQ_EXPORT_SIMULATE)
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+	if( (rc=register_symtab(&irq_syms))!=0)
+	{
+		printk("register_symtab() error\n");
+		unregister_chrdev(major,name);
+		return rc;
+	}
+# endif
+#endif
+
+	if (major==0) major=rc;
+	printk("registered with major %u\n", major);
+
+	// static object constructors
+
+	return 0;
+}
+
+#ifdef MODULE
+int __init_text init_module(void)
+{
+	return _irq_init();
+}
+
+void cleanup_module(void)
+{
+	int rc=unregister_chrdev(major,name);
+	pr_info("%s unloaded ",name);
+	if (rc==0)
+		printk("successfully");
+	else
+		printk("with error: ");
+		if (rc==-EINVAL)
+			printk("major number %d is not registered"
+					" with the matching name %s",
+				major, name);
+		else
+			printk("%d",rc);
+	pr_endl();
+}
+
+#else	//def MODULE
+
+int __init_text irq_init(void)
+{
+	return _irq_init();
+}
+#endif	//MODULE
+
+//- init/cleanup
+
+
+//+ file_operations routines
+
+static int irq_open(Inode* inode, File* file)
+{
+	PREFIX(); PFX(irq_inode(inode)); PRDEBUG("opening by %d...\n",
+		current->pid);
+
+	if (irq_inode(inode)>=NR_IRQS && irq_inode(inode)!=PCI_MINOR)
+		return -ENXIO;
+#if 0
+	if (file->f_flags & ~O_ACCMODE)
+		return -EINVAL;
+#endif
+	file->private_data=NULL;
+
+	MOD_INC_USE_COUNT;
+	PREFIX(); PFX(irq_inode(inode)); PRDEBUG("opened by %d\n", current->pid);
+	PREFIX(); TCHLIST_PRINT();
+	return 0;
+}
+
+static FILE_OPERATIONS_CLOSE_TYPE irq_close(Inode* UNUSED inode, File* file)
+{
+	register irq_chan* ich=file->private_data;
+
+	if (irq_inode(inode)==PCI_MINOR) 
+	  release_all_devices();
+	PREFIX(); PFX(irq_inode(inode)); PRDEBUG("closing by %d...\n",
+		current->pid);
+	PREFIX(); TCHLIST_PRINT();
+
+	if (ich!=NULL)
+	{
+		assert_goto(ich->signature==ICH_SIG, out);
+		assert_goto(ich->tch!=NULL, out);
+		assert_goto(ich->tch->signature==TCH_SIG, out);
+
+		PREFIX(); PRDEBUG("%d found, tch=%p\n", current->pid, ich->tch);
+		PREFIX(); TCHLIST_PRINT();
+
+		free_irq_ich_tch(ich);
+
+		PREFIX(); TCHLIST_PRINT();
+	}
+
+out:
+	MOD_DEC_USE_COUNT;
+
+	PREFIX(); PFX(irq_inode(inode)); PRDEBUG("closed by %d", current->pid);
+	if (ich==NULL)		//no registered handler
+	{
+		PRDEBUG(" (w/o irq channels)");
+		;
+	}
+	PRENDL();
+
+	return FILE_OPERATIONS_CLOSE_VALUE(0);
+}
+
+static FILE_OPERATIONS_SEEK_PROTOTYPE(irq_seek, UNUSED inode, UNUSED file,
+	UNUSED offset, UNUSED origin)
+{
+	return -ESPIPE;
+}
+
+extern unsigned long cpu_khz;
+extern void schedule_hiprec(void);
+
+#define rdtsc(low,high) \
+     __asm__ __volatile__("rdtsc" : "=a" (low), "=d" (high))
+
+static int irq_ioctl(Inode* inode, File* file, uint cmd, ulong arg)
+{
+  uint irq=irq_inode(inode);
+  int rc=0;
+  __irq_request_arg req_arg;
+  unsigned long long when;
+  irq_chan* ich=file->private_data;
+
+  if (irq==PCI_MINOR) { /* ANY ioctl on the pci one will release the devices */
+    release_all_devices();
+    return 0;
+  }
+  assert_retval(irq<NR_IRQS, -EBADFD);
+  PREFIX(); PFX(irq); PRDEBUG("ioctl by %d, cmd: 0x%08X, arg: 0x%08lX\n",
+			      current->pid, cmd, arg);
+  PREFIX(); TCHLIST_PRINT();
+
+  switch (cmd)
+    {
+    case __IRQ_REQUEST_IOCTL:
+      if ( COPY_FROM_USER(&req_arg, (const void*)arg, sizeof(req_arg)) )
+	return -EFAULT;
+
+      PREFIX(); PFX(irq);
+      PRDEBUG("ioctl IRQ_REQUEST: pid=%d sig=%d flags=0x%08X\n",
+	      current->pid, req_arg.sig, req_arg.flags);
+
+      if ( ich!=NULL && check_ownership(ich) )
+	return -EACCES;
+
+      return do_request(file, req_arg.sig, req_arg.flags);
+
+    case __IRQ_FREE_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_FREE: pid=%d sig=%ld\n",
+				  current->pid, arg);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+
+      free_irq_ich_tch(ich);
+      return 0;
+
+    case __IRQ_ENABLE_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_ENABLE: pid=%d\n",
+				  current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+#if DISALLOW_SHARED_DISABLE
+      if (ich->flags&IRQ_SHARED)
+	return -EPERM;
+#endif
+
+      ENABLE_IRQ(irq);
+      break;
+
+    case __IRQ_DISABLE_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_DISABLE: pid=%d\n",
+				  current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+#if DISALLOW_SHARED_DISABLE
+      if (ich->flags&IRQ_SHARED)
+	return -EPERM;
+#endif
+
+      DISABLE_IRQ(irq);
+      break;
+
+    case __IRQ_SKIPPING_ON_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_SKIPPING_ON: pid=%d\n",
+				  current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+
+      skipping_on(ich);
+      break;
+
+    case __IRQ_SKIPPING_OFF_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_SKIPPING_OFF: pid=%d\n",
+				  current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+
+      return skipping_off(ich);
+
+    case __IRQ_SKIPPING_CONSENT_ON_IOCTL:
+      PREFIX(); PFX(irq);
+      PRDEBUG("ioctl IRQ_SKIPPING_CONSENT_ON: pid=%d\n",
+	      current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+
+      ich->flags|=IRQ_SKIPPING_CONSENT;
+      break;
+
+    case __IRQ_SKIPPING_CONSENT_OFF_IOCTL:
+      PREFIX(); PFX(irq);
+      PRDEBUG("ioctl IRQ_SKIPPING_CONSENT_OFF: pid=%d\n",
+	      current->pid);
+
+      rc=check_null_and_ownership(ich);
+      if (rc!=0)
+	return rc;
+
+      ich->flags &= ~IRQ_SKIPPING_CONSENT;
+      break;
+
+    case __IRQ_SIMULATE_IOCTL:
+      PREFIX(); PFX(irq); PRDEBUG("ioctl IRQ_SIMULATE: pid=%d\n",
+				  current->pid);
+
+      if (!has_readwrite_access(file))
+	return -EACCES;
+
+      irq_simulate(irq);
+      break;
+
+    case __IRQ_STAT_IOCTL:
+      return -ENOTSUP;
+
+    case __UAE_SET_TIMER_IOCTL:
+      if ( COPY_FROM_USER(&when, (const void*)arg, sizeof(when)) )
+	return -EFAULT;
+      uae_nextevent=when;
+      uae_alert=when-cpu_khz/HZ*2000;
+      if (uae_alert>when)
+	uae_alert=0;
+#if 0
+      printk("uae_nextevent=%u/%u, uae_alert=%u/%u\n",
+	     (unsigned int)(uae_nextevent>>32),
+	     (unsigned int)uae_nextevent,
+	     (unsigned int)(uae_alert>>32),
+	     (unsigned int)uae_alert);
+#endif
+      schedule_hiprec();
+      return 0;
+
+    case __UAE_GET_RANGE_IOCTL:
+      {
+	long index;
+	int se;
+
+	if ( COPY_FROM_USER(&index, (const void*)arg, sizeof(index)) )
+	  return -EFAULT;
+	if (index==-1) {
+	  index=blockindex;
+	  if (COPY_TO_USER((void*) arg,&index,sizeof(index)))
+	    return -EFAULT;
+	  return 0;
+	}
+	se=index&1;
+	index/=2;
+	if (index<0 || index>=UAE_BLOCKS_N)
+	  return -EFAULT;
+	if (se) 
+	  index=uae_blocks[index].start;
+	else
+	  index=uae_blocks[index].end;
+	if (COPY_TO_USER((void*) arg,&index,sizeof(index)))
+	  return -EFAULT;
+	return 0;
+      }
+
+    case __UAE_SET_FPF_IOCTL:
+      {
+	long index;
+	int se;
+
+	if ( COPY_FROM_USER(&fpf, (const void*)arg, sizeof(fpf)) )
+	  return -EFAULT;
+	fpf.task=current;
+      }
+      return 0;
+
+    case __UAE_GET_FPF_EIP_IOCTL:
+      {
+	long index;
+	int se;
+
+	if ( COPY_TO_USER((void*)arg, &fpf_eip, sizeof(fpf_eip)) )
+	  return -EFAULT;
+      }
+      return 0;
+
+    case __UAE_READ_IOPORT_IOCTL:
+      {
+	ioport_data id;
+	int count;
+	unsigned short* data;
+	int dummy;
+	unsigned int now;
+	unsigned char x;
+
+	if ( COPY_FROM_USER(&id, (const void*)arg, sizeof(id)) )
+	  return -EFAULT;
+	count=id.count;
+	data=(unsigned short*)(id.addr);
+
+	cli();
+	while (count--) {
+	  x=inb(id.port);
+	  rdtsc(now,dummy);
+	  now&=~0x000f;
+	  x&=0x08;
+	  now|=x;
+	  *data++=now;
+	}
+	sti();
+      }
+      return 0;
+
+    case __UAE_PCI_OP_IOCTL:
+      {
+	pcidata pd;
+	int answer;
+	if ( COPY_FROM_USER(&pd, (const void*)arg, sizeof(pd)) )
+	  return -EFAULT;
+	answer=pcicommand(&pd);
+	if (answer)
+	  return answer;
+	if ( COPY_TO_USER((void*)arg, &pd, sizeof(pd)) )
+	  return -EFAULT;
+      }
+      return 0;
+
+    case __UAE_SET_IRQHANDLER_IOCTL:
+      {
+	unsigned long x;
+	if ( COPY_FROM_USER(&x, (const void*)arg, sizeof(x)) )
+	  return -EFAULT;
+	process_to_elevate=x;
+	return 0;
+      }
+	
+    case __UAE_STOP_IRQHANDLER_IOCTL:
+      {
+	do_elevate_process=0;
+	xchg_compat( &NEED_RESCHED, 1 );
+	return 0;
+      }
+
+    case __UAE_GET_ZEROPAGE_IOCTL:
+      {
+	unsigned long x=zeropage;
+	if (COPY_TO_USER((void*)arg,&x,sizeof(x)))
+	  return -EFAULT;
+	return 0;
+      }
+
+    default:
+      return -ENOSYS;
+    }
+  
+  return 0;
+}
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,23)
+
+// sel_type: SEL_IN || SEL_OUT || SEL_EX
+// return: 0 if wait, 1 if ready
+static int irq_select(Inode* UNUSED inode, File* file,
+	int sel_type, select_table* wt)
+{
+	irq_chan* ich=file->private_data;
+
+	if (ich==NULL) return 1;	// unrequested irq
+
+	assert_retval(ich->signature==ICH_SIG, 1);
+
+	if (sel_type==SEL_IN)
+	{
+		if ( xchg_compat( &ich->sel_count, 0 ) == 0 )
+			select_wait(&ich->wqh, wt);
+		else
+		{
+			PREFIX(); PRMSGCOUNTER(); PFX(ich->irq);
+				PRDEBUG("sel_count was %d\n", ich->sel_count);
+
+			return 1;
+		}
+	}
+	return 0;
+}
+
+#else	// LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,23)
+
+static uint irq_poll(File* file, poll_table* pt)
+{
+	irq_chan* ich=file->private_data;
+
+	if (ich==NULL)	// unrequested irq
+		return POLLERR|POLLNVAL;
+
+	assert_retval(ich->signature==ICH_SIG, POLLERR|POLLNVAL);
+
+	// queue current process into any wait queue that
+	// may awaken in the future (read and write)
+	poll_wait(file, &ich->wqh, pt);
+
+	// we have an input event only
+	return xchg_compat( &ich->sel_count, 0 ) ? POLLIN|POLLRDNORM : 0;
+}
+
+#endif	// LINUX_VERSION_CODE < KERNEL_VERSION(2,1,23)
+
+//- file_operations routines
+
+
+static int do_request(File* file, int sig, int flags)
+{
+	task_chan* tch;
+	irq_chan* ich;
+	uint irq;
+	int rc;
+
+	if (!has_readwrite_access(file))
+		return -EACCES;
+
+	if ( sig != -1 && (sig<1 || sig>_NSIG) )
+		return -EINVAL;
+
+	if ( flags & ~(IRQ_SHARED|IRQ_SKIPPING|IRQ_SKIPPING_CONSENT) )
+		return -EINVAL;
+
+	irq=irq_file(file);
+	assert_retval(irq<NR_IRQS, -EBADFD);
+
+	if ( (tch=tch_find(current)) != NULL )
+	{
+		if ( tch->ichs[irq] != NULL )// this task already owned IRQ
+			return -EBUSY;
+	}
+	else
+		if ( (tch=tch_new_link(current)) == NULL )
+			return nomem();
+
+	if ((ich=ich_ctor(file, sig, flags))==NULL)
+	{
+		tch_dtor_if_empty(tch);		// clean up
+		return nomem();
+	}
+
+	tch_attach_ich(tch,ich);
+
+	PREFIX(); PFX(irq); PRDEBUG("ich=%p ich=", ich); ICH_PRINT(ich); PRENDL();
+	PREFIX(); TCHLIST_PRINT();
+
+	rc=register_irq_handler(ich);
+	if (rc!=0)
+	{	// clean up
+		tch_detach_ich(tch,irq);
+		ich_dtor(ich);
+		tch_dtor_if_empty(tch);
+	}
+
+	return rc;
+}
+
+static int register_irq_handler(irq_chan* ich)
+{
+	int rc;
+	char buf[128];
+	char* devname;
+	uint irq;
+
+	assert_retval(ich!=NULL, -EBADFD);
+	assert_retval(ich->signature==ICH_SIG, -EBADFD);
+
+	irq=ich->irq;
+	assert_retval(irq<NR_IRQS, -EBADFD);
+
+	//+ info for /proc/interrupts
+	if (ich->sig!=-1)		//signal
+		sprintf(buf,"%s:%d.%d", name, current->pid, ich->sig);
+	else					//select() only
+		sprintf(buf,"%s:%d", name, current->pid);
+
+	devname=strdup(buf);
+	if (devname==NULL)	return nomem();
+	ich->devname=devname;
+	//- info for /proc/interrupts
+
+	if (ich->flags&IRQ_SKIPPING)
+		skipping_on(ich);
+
+	rc=request_irq(irq, irq_handler,
+		(ich->flags&IRQ_SHARED) ? SA_SHIRQ : 0, devname, ich);
+	if (rc!=0)
+	{	// clean up
+		skipping_sub(ich);
+		return rc;
+	}
+	++irq_channels_registered[irq];
+
+
+	PREFIX(); PRDEBUG("%s: ich=%p ich=",name,ich); ICH_PRINT(ich); PRENDL();
+	PREFIX(); TCHLIST_PRINT();
+	return 0;
+}
+
+// free IRQ and its structures.
+// returns destroyed tch flag.
+static bool free_irq_ich_tch(irq_chan* ich)
+{
+	task_chan* tch;
+	uint irq;
+
+	if (ich==NULL)	return false;
+
+	assert_retval(ich->signature==ICH_SIG, false);
+
+	tch=ich->tch;
+
+	assert_retval(tch!=NULL, false);
+	assert_retval(tch->signature==TCH_SIG, false);
+
+	irq=ich->irq;
+	assert_retval(irq<NR_IRQS, false);
+	assert_retval(tch->ichs[irq]==ich, false);
+
+	free_irq(irq,ich); //no more interrupts on this channel
+
+	--irq_channels_registered[irq];
+
+	skipping_sub(ich);
+
+	tch_detach_ich(tch, irq);
+	ich_dtor(ich);
+	return tch_dtor_if_empty(tch);
+}
+
+
+static void skipping_on(register irq_chan* ich)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich->tch!=NULL);
+	assert_retvoid(ich->tch->signature==TCH_SIG);
+	assert_retvoid(ich->irq<NR_IRQS);
+
+	ich->skipping_count++;
+	skipping_irq_counts[ich->irq]++;
+}
+
+static int skipping_off(register irq_chan* ich)
+{
+	assert_retval(ich!=NULL, -EBADFD);
+	assert_retval(ich->signature==ICH_SIG, -EBADFD);
+	assert_retval(ich->tch!=NULL, -EBADFD);
+	assert_retval(ich->tch->signature==TCH_SIG, -EBADFD);
+	assert_retval(ich->irq<NR_IRQS, -EBADFD);
+
+	if (ich->skipping_count && skipping_irq_counts[ich->irq])
+	{
+		ich->skipping_count--;
+		skipping_irq_counts[ich->irq]--;
+		return 0;
+	}
+	else
+		return -EPERM;
+}
+
+static void skipping_sub(register irq_chan* ich)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich->tch!=NULL);
+	assert_retvoid(ich->tch->signature==TCH_SIG);
+	assert_retvoid(ich->irq<NR_IRQS);
+
+	skipping_irq_counts[ich->irq] -= ich->skipping_count;
+	ich->skipping_count=0;
+}
+
+
+static void irq_simulate(uint irq)
+{
+	task_chan* tch;
+	irq_chan* ich;
+
+#ifdef CONFIG_IRQ_EXPORT_SIMULATE
+    ulong flags;
+#endif
+
+	assert_retvoid(irq<NR_IRQS);
+
+#ifdef CONFIG_IRQ_EXPORT_SIMULATE
+	spin_lock_irqsave(&tchlist_lock, flags);
+#endif
+
+	for(tch=tchlist; tch!=NULL; tch=tch->next)
+	{
+		assert_break(tch->signature==TCH_SIG);
+		ich=tch->ichs[irq];
+
+		if (ich!=NULL)
+		{
+			assert_break(ich->signature==ICH_SIG);
+
+			if ( (ich->flags&IRQ_SKIPPING_CONSENT && skipping_irq_counts[irq])
+				|| disabled_irq_counts[irq] )
+				continue;
+
+#ifndef CONFIG_IRQ_EXPORT_SIMULATE
+			DISABLE_IRQ(irq);
+#endif
+
+			do_irq(ich);
+
+#ifndef CONFIG_IRQ_EXPORT_SIMULATE
+			ENABLE_IRQ(irq);
+#endif
+		}
+	}
+
+#ifdef CONFIG_IRQ_EXPORT_SIMULATE
+	spin_unlock_irqrestore(&tchlist_lock, flags);
+#endif
+}
+
+
+// "slow" interrupt handler
+static void irq_handler(int irq, void* dev_id, struct pt_regs* UNUSED ptregs)
+{
+	register irq_chan* ich = (irq_chan*)dev_id;
+
+	PREFIX(); PRDEBUG("IRQ %d interrupt handler\n", irq);
+
+	assert_retvoid((uint)irq<NR_IRQS);
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich==ich->file->private_data && (uint)irq==ich->irq);
+
+	disable_irq_nosync(irq);
+	++disabled_irq_counts[irq];
+
+	ich->irq_count++;
+
+	if ( ich->flags&IRQ_SKIPPING_CONSENT && skipping_irq_counts[irq] )
+		return;
+
+	do_irq(ich);
+}
+
+static void do_irq(register irq_chan* ich)
+{
+	assert_retvoid(ich!=NULL);
+	assert_retvoid(ich->signature==ICH_SIG);
+	assert_retvoid(ich->tch!=NULL);
+	assert_retvoid(ich->tch->signature==TCH_SIG);
+	assert_retvoid(ich->irq<NR_IRQS);
+
+	PREFIX(); PFX(ich->irq); PRDEBUG("sending "); ICH_PRINT(ich); PRENDL();
+
+	ich->sel_count++;
+	wake_up_interruptible(&ich->wqh);
+
+	if (ich->sig != -1)
+		if (send_sig(ich->sig, ich->tch->owner_task, 1)==0)
+		{
+			ich->sig_count++;
+			PREFIX(); PFX(ich->irq); PRDEBUG("sent ");
+			ICH_PRINT(ich); PRENDL();
+			do_elevate_process=1;  /* Get a fast response */
+		}
+	xchg_compat( &NEED_RESCHED, 1 );
+}
+
+
+
+/* UAE hackery */
+void uae_trigger(void)
+{
+  irq_simulate(31);
+  uae_alert=~0;
+  uae_nextevent=~0;
+}
+
+/*
+$Log: irq.c,v $
+Revision 1.67  2000/07/31 10:59:07  fedorov
+xchg_compat() used, xchg() bug fixed
+
+Revision 1.66  2000/05/24 10:39:28  fedorov
+english corrected
+
+Revision 1.65  2000/05/18 04:16:14  fedorov
+---
+
+Revision 1.64  2000/05/10 14:05:02  fedorov
+using of sys_sched_yield() was buggy, atomic xchg(&NEED_RESCHED, 1) used;
+<linux/compat/errno.h> used
+
+Revision 1.63  1999/12/19 09:42:58  fedorov
+sys_sched_yield() used to pre-empt current task in interrupt delivery.
+
+Revision 1.62  1999/12/17 15:23:55  fedorov
+NEED_RESCHED compatibility macro used.
+
+Revision 1.61  1999/11/27 09:27:42  fedorov
+ENOTSUP compatibility
+
+Revision 1.60  1999/10/27 07:07:21  fedorov
+do_irq(): set need_resched if preemtion needed only.
+
+Revision 1.59  1999/10/07 08:09:19  fedorov
+sorted; assertions added; unsigned int for IRQ number;
+de-bugged on 2.2.12 kernel.
+
+Revision 1.58  1999/10/05 07:29:45  fedorov
+2.0 - 2.2 compatibility completed, compilation test passed.
+
+Revision 1.57  1999/10/02 13:45:00  fedorov
+select() bug fixed: handle ich->sel_count by xchg() atomically;
+poll() added - no compilation test available.
+
+Revision 1.56  1999/10/02 12:31:00  fedorov
+minor lookup macros from <linux/compat/fs.h> used.
+
+Revision 1.55  1999/10/02 10:58:56  fedorov
+<linux/compat/fs.h> (FILE_OPERATIONS_* macros) used -
+irq_seek(), irq_close(), fops affected.
+
+Revision 1.54  1999/09/30 13:23:00  fedorov
+irq_simulate() can be called from interrupt/bottom-half handlers.
+
+Revision 1.53  1999/09/29 10:54:16  fedorov
+ich_{att,det}ach_tch(), tch_{att,det}ach_ich() added;
+file->private_data handling moved to ich ctor/dtor.
+
+Revision 1.52  1999/09/29 09:32:16  fedorov
+static init of static objects;
+disabled irqs handled by irq_simulate;
+skip_counts -> skipping_irq_counts; skip_count -> skipping_count.
+
+Revision 1.51  1999/09/29 06:58:38  fedorov
+IRQ_ONESHOT flag removed to simplify driver - locks out;
+sorted;
+do_free() removed - fre_irq_ich_tch() used;
+
+Revision 1.50  1999/09/26 14:43:22  fedorov
+tchlist locking started
+
+Revision 1.49  1999/09/26 11:11:07  fedorov
+sorted
+
+Revision 1.48  1999/09/26 10:23:08  fedorov
+*** empty log message ***
+
+Revision 1.47  1999/09/23 14:39:15  fedorov
+irq_channels_registered become atomic_t;
+irq_wait_queues become static.
+
+Revision 1.46  1999/09/22 14:43:51  fedorov
+compatibility wait_queue used
+
+Revision 1.45  1999/09/22 14:34:06  fedorov
+compatibility COPY_FROM_USER() used
+
+Revision 1.44  1999/09/22 14:23:36  fedorov
+__init attributes applied
+
+Revision 1.43  1999/09/22 14:04:53  fedorov
+compatibility headers included;
+old EXPORT_SIMULATE symbol bug fixed;
+VERBOSE_DEBUG -> DEBUG;
+debug print functions uppercased.
+
+Revision 1.42  1999/09/22 13:32:24  fedorov
+EBADFD errno value used on assertion failure.
+
+Revision 1.41  1999/09/22 11:42:08  fedorov
+internal names changed; binary compatibility saved.
+
+Revision 1.40  1999/09/22 10:29:29  fedorov
+many of utilities moved to <linux/df/ *.h> headers;
+my kernel assertions used instead of *CHECK* macros.
+
+Revision 1.39  1999/08/15 14:16:28  fedorov
+tab replaced by spaces in string
+
+Revision 1.38  1999/08/11 11:30:13  fedorov
+English version of man draft created. English comments.
+Header and history log formats changed.
+Extra protection of multiple headers inclusion removed.
+Some cosmetic changes.
+
+Revision 1.37  1999/07/07 14:34:24	fedorov
+"empty log messages" removed
+
+Revision 1.36  1999/03/06 14:32:41	fedorov
+process ownership checking added
+
+Revision 1.35  1999/03/06 10:09:37	fedorov
+some function names changed; REGPARM1 macro created & used
+
+Revision 1.34  1999/03/06 08:25:11	fedorov
+printkEOL() -> pr_endl()
+
+Revision 1.33  1999/03/06 07:20:36	fedorov
+my printk() quirks removed
+
+Revision 1.32  1999/02/04 13:40:11	fedorov
+indentation
+
+Revision 1.31  1999/02/04 09:06:32	fedorov
+bool redefined
+
+Revision 1.30  1999/02/02 06:41:32	fedorov
+C extern inline
+
+Revision 1.27  1998/04/25 12:07:13	fedorov
+indentation; irq_read(),irq_write() removed
+
+Revision 1.26  1998/04/20 12:23:59	fedorov
+never mind
+
+Revision 1.25  1998/04/18 08:35:47	fedorov
+never mind
+
+Revision 1.24  1998/04/10 11:21:09	fedorov
+indentation
+
+Revision 1.23  1998/04/03 10:52:23	fedorov
+indentation
+
+Revision 1.22  1998/03/29 17:20:30	fedorov
+irqnum renamed to irq anywhere;
+task_struct pointer is not const somewhere now
+	to avoid type casting to non-const pointer;
+irq_simulate() defer skipping mode;
+
+Revision 1.21  1998/03/25 22:43:37	fedorov
+modversions & genksym used
+
+Revision 1.20  1998/03/18 15:47:21	fedorov
+irq_simulate() created and added to own part of kernel symbol_table.
+need_resched=1 added to end of bh_handler() for irq_simulate()
+from syscall.
+int irqnum added to struct irq_channel for access speed-up.
+irqnum_minor(int minor) created for minor->irqnum translation
+	independly from real mapping; minor superseeded by irqnum elsewere.
+pfx() and PFX() accept irqnum now, was minor.
+more [un]register_chrdev() error codes printed on init/cleanup module.
+extra have_readwrite_access() calls removed.
+obsolete for(;;) loop eliminated from tch_is_empty().
+print_overrun() added for save space from irq_handler() & bh_handler().
+save some space by using repeated words strings.
+pfx() comment-out conditionally to save space.
+unused tch_find_new_link() comment-out for save space.
+
+Revision 1.19  1998/03/10 08:51:15	fedorov
+something
+
+Revision 1.18  1998/02/01 15:24:59	fedorov
+cpp error message changed
+
+Revision 1.17  1998/01/12 13:53:41	fedorov
+tch_new_link() added
+
+Revision 1.15  1998/01/11 14:58:24	fedorov
+send_sig() fail processing corrected
+
+Revision 1.14  1998/01/11 13:55:47	fedorov
+skipping_off check underflow
+
+Revision 1.13  1998/01/10 16:13:32	fedorov
+nested skipping_{on|off} allowed
+
+Revision 1.12  1998/01/10 14:26:00	fedorov
+skipping mode added, flags changed, shared mode deferred by
+enable/disable now
+
+Revision 1.11  1997/12/23 15:48:55	fedorov
+access mode must be O_RDWR now
+
+Revision 1.10  1997/12/17 14:38:12	fedorov
+unused variables removed
+
+Revision 1.9  1997/12/17 11:48:39  fedorov
+copyright minor change
+
+Revision 1.8  1997/12/15 13:19:26  fedorov
+debugging reimplemented, task_chan has array of pointers to irq_chan now,
+not a list, select() added.
+
+Revision 1.7  1997/12/09 14:15:52  fedorov
+test passed!
+
+Revision 1.6  1997/12/09 11:33:20  fedorov
+turn irq on
+
+Revision 1.5  1997/12/09 09:42:32  fedorov
+ich_link() bug fixed. debugging reimplemented
+
+Revision 1.4  1997/12/07 13:38:22  fedorov
+never mind
+
+Revision 1.3  1997/12/07 11:52:12  fedorov
+never mind
+
+Revision 1.2  1997/12/07 11:41:30  fedorov
+signature checks implemented
+
+Revision 1.1  1997/12/06 23:10:19  fedorov
+Put under CVS control
+*/
+
diff -uNr linux-2.4.37.9/drivers/char/irq.h linux-2.4.37.9-amithlon/drivers/char/irq.h
--- linux-2.4.37.9/drivers/char/irq.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/irq.h	2010-06-16 22:58:53.000000000 -0400
@@ -0,0 +1,282 @@
+/*
+	irq - driver to delivery hardware interrupts to user space.
+
+	Interface definition.
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su
+	Copying-policy: LGPL
+
+	$Id: irq.h,v 1.18 1999/09/29 06:47:56 fedorov Exp $
+
+	tab size = 4
+*/
+
+#ifndef  _IRQ_H
+# define _IRQ_H
+
+#include "amithlon_pci.h"
+
+# ifdef __KERNEL__
+#  include <asm/ioctl.h>
+# else
+#  include <sys/ioctl.h>
+# endif
+
+# ifdef __cplusplus
+   extern "C" {
+# endif
+
+typedef struct {
+  struct task_struct *task;
+  unsigned long      addr;
+  unsigned long      handler;
+} fpf_data;
+
+typedef struct {
+  unsigned long addr;
+  unsigned long count;
+  unsigned short port;
+} ioport_data;
+
+/* + ioctl definitions */
+
+/* free slot from the linux/Documentation/ioctl-number.txt */
+# define __IRQ_IOCTL_TYPE_LETTER 'i'
+
+enum
+{
+	__IRQ_REQUEST_IOCTL_NUMBER=1,
+	__IRQ_FREE_IOCTL_NUMBER,
+
+	__IRQ_ENABLE_IOCTL_NUMBER,
+	__IRQ_DISABLE_IOCTL_NUMBER,
+
+	__IRQ_SKIPPING_ON_IOCTL_NUMBER,
+	__IRQ_SKIPPING_OFF_IOCTL_NUMBER,
+
+	__IRQ_SKIPPING_CONSENT_ON_IOCTL_NUMBER,
+	__IRQ_SKIPPING_CONSENT_OFF_IOCTL_NUMBER,
+
+	__IRQ_STAT_IOCTL_NUMBER,
+
+	__IRQ_SIMULATE_IOCTL_NUMBER,
+	
+	__UAE_SET_TIMER_NUMBER,
+	__UAE_GET_RANGE_NUMBER,
+	__UAE_SET_FPF_NUMBER,
+	__UAE_GET_FPF_EIP_NUMBER,
+	__UAE_READ_IOPORT_NUMBER,
+	__UAE_PCI_OP_NUMBER,
+	__UAE_SET_IRQHANDLER_NUMBER,
+	__UAE_STOP_IRQHANDLER_NUMBER,
+	__UAE_GET_ZEROPAGE_NUMBER,
+};
+
+
+#define __IRQ_REQUEST_IOCTL \
+	_IOW(__IRQ_IOCTL_TYPE_LETTER, __IRQ_REQUEST_IOCTL_NUMBER, \
+		struct __irq_request_arg )
+
+#define __IRQ_FREE_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_FREE_IOCTL_NUMBER)
+
+#define __IRQ_ENABLE_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_ENABLE_IOCTL_NUMBER)
+#define __IRQ_DISABLE_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_DISABLE_IOCTL_NUMBER)
+
+#define __IRQ_SKIPPING_ON_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_SKIPPING_ON_IOCTL_NUMBER)
+#define __IRQ_SKIPPING_OFF_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_SKIPPING_OFF_IOCTL_NUMBER)
+
+#define __IRQ_SKIPPING_CONSENT_ON_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_SKIPPING_CONSENT_ON_IOCTL_NUMBER)
+#define __IRQ_SKIPPING_CONSENT_OFF_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_SKIPPING_CONSENT_OFF_IOCTL_NUMBER)
+
+#define __IRQ_STAT_IOCTL \
+	_IOR(__IRQ_IOCTL_TYPE_LETTER, __IRQ_STAT_IOCTL_NUMBER, \
+		struct irq_stat )
+
+#define __IRQ_SIMULATE_IOCTL \
+	_IO (__IRQ_IOCTL_TYPE_LETTER, __IRQ_SIMULATE_IOCTL_NUMBER)
+
+#define __UAE_SET_TIMER_IOCTL \
+	_IOW(__IRQ_IOCTL_TYPE_LETTER, __UAE_SET_TIMER_NUMBER, \
+		unsigned long long )
+
+#define __UAE_GET_RANGE_IOCTL \
+	_IOWR(__IRQ_IOCTL_TYPE_LETTER, __UAE_GET_RANGE_NUMBER, \
+		unsigned long)
+
+#define __UAE_SET_FPF_IOCTL \
+	_IOW(__IRQ_IOCTL_TYPE_LETTER, __UAE_SET_FPF_NUMBER, \
+		fpf_data)
+
+#define __UAE_GET_FPF_EIP_IOCTL \
+	_IOR(__IRQ_IOCTL_TYPE_LETTER, __UAE_SET_FPF_NUMBER, \
+		unsigned long)
+
+#define __UAE_READ_IOPORT_IOCTL \
+	_IOW(__IRQ_IOCTL_TYPE_LETTER, __UAE_READ_IOPORT_NUMBER, \
+		ioport_data)
+
+#define __UAE_PCI_OP_IOCTL \
+	_IOWR(__IRQ_IOCTL_TYPE_LETTER, __UAE_PCI_OP_NUMBER, \
+		pcidata)
+
+#define __UAE_SET_IRQHANDLER_IOCTL \
+	_IOWR(__IRQ_IOCTL_TYPE_LETTER, __UAE_SET_IRQHANDLER_NUMBER, \
+		unsigned long)
+
+#define __UAE_STOP_IRQHANDLER_IOCTL \
+	_IOWR(__IRQ_IOCTL_TYPE_LETTER, __UAE_STOP_IRQHANDLER_NUMBER, \
+		unsigned long)
+
+#define __UAE_GET_ZEROPAGE_IOCTL \
+	_IOR(__IRQ_IOCTL_TYPE_LETTER, __UAE_GET_ZEROPAGE_NUMBER, \
+		unsigned long )
+/* - ioctl definitions */
+
+
+enum irq_flags
+{
+	IRQ_SHARED=1, IRQ_SKIPPING=4, IRQ_SKIPPING_CONSENT=8
+};
+
+
+struct __irq_request_arg
+{
+	int sig;
+	int flags;
+};
+
+struct irq_stat
+{
+	size_t kstat_interrupts;
+	size_t irq_handler_interrupts;
+	size_t irq_handler_sent_interrupts;
+	size_t irq_count;
+	size_t sig_count;
+};
+
+
+/* + ioctl user interface */
+
+# ifndef __KERNEL__
+
+extern __inline__ int irq_request(int fd, int sig, int flags)
+{
+	struct __irq_request_arg arg = { sig, flags };
+	return ioctl(fd, __IRQ_REQUEST_IOCTL, &arg);
+}
+
+extern __inline__ int irq_free(int fd)
+	{ return ioctl(fd, __IRQ_FREE_IOCTL); }
+
+extern __inline__ int irq_enable(int fd)
+	{ return ioctl(fd, __IRQ_ENABLE_IOCTL); }
+
+extern __inline__ int irq_disable(int fd)
+	{ return ioctl(fd, __IRQ_DISABLE_IOCTL); }
+
+extern __inline__ int irq_skipping_on(int fd)
+	{ return ioctl(fd, __IRQ_SKIPPING_ON_IOCTL); }
+
+extern __inline__ int irq_skipping_off(int fd)
+	{ return ioctl(fd, __IRQ_SKIPPING_OFF_IOCTL); }
+
+extern __inline__ int irq_skipping_consent(int fd)
+	{ return ioctl(fd, __IRQ_SKIPPING_CONSENT_ON_IOCTL); }
+
+extern __inline__ int irq_skipping_inconsent(int fd)
+	{ return ioctl(fd, __IRQ_SKIPPING_CONSENT_OFF_IOCTL); }
+
+extern __inline__ int irq_stat(int fd, struct irq_stat* stat)
+	{ return ioctl(fd, __IRQ_STAT_IOCTL, stat); }
+
+extern __inline__ int irq_simulate(int fd)
+	{ return ioctl(fd, __IRQ_SIMULATE_IOCTL); }
+
+# endif	//ndef __KERNEL__
+
+/* - ioctl user interface */
+
+
+# if 0
+struct kernel_stat
+{
+	unsigned int interrupts[NR_IRQS];
+};
+extern struct kernel_stat kstat;
+# endif
+
+# ifdef __cplusplus
+}
+# endif
+
+#endif	/* _IRQ_H */
+
+
+/*
+$Log: irq.h,v $
+Revision 1.18  1999/09/29 06:47:56  fedorov
+IRQ_ONESHOT flag removed to simplify driver.
+
+Revision 1.17  1999/09/22 11:42:16  fedorov
+comment style changed; internal names changed; binary compatibility keeped.
+
+Revision 1.16  1999/08/11 11:39:21  fedorov
+Header and history log formats changed.
+Extra protection of multiple headers inclusion removed.
+Some cosmetic changes.
+
+Revision 1.15  1999/02/04 13:40:11  fedorov
+indentation
+
+Revision 1.14  1999/02/02 06:41:33  fedorov
+C extern inline
+
+Revision 1.13  1999/01/22 12:12:24  fedorov
+conflict user/kernel ioctl headers resolved
+
+Revision 1.12  1999/01/22 12:04:17  fedorov
+conflict user/kernel ioctl headers resolved
+
+Revision 1.11  1998/12/05 08:04:23  fedorov
+*** empty log message ***
+
+Revision 1.10  1998/04/11 13:27:21  fedorov
+IRQ_IOCTL_TYPE_LETTER don't depend on Makefile
+
+Revision 1.9  1998/04/10 11:21:09  fedorov
+indentation
+
+Revision 1.8  1998/03/25 22:42:01  fedorov
+kernel space irq_simulate() declaration removed
+
+Revision 1.7  1998/03/18 15:03:11  fedorov
+kernel space irq_simulate() added
+
+Revision 1.6  1998/03/16 10:48:43  fedorov
+irq_simulate() added; indentation
+
+Revision 1.5  1998/01/10 14:26:00  fedorov
+skipping mode added, flags changed, shared mode deferred by
+enable/disable now
+
+Revision 1.4  1997/12/28 14:36:58  fedorov
+extern C braces added
+
+Revision 1.3  1997/12/15 13:19:26  fedorov
+debugging reimplemented, task_chan has array of pointers to irq_chan now,
+not a list, select() added.
+
+Revision 1.2  1997/12/09 09:43:26  fedorov
+something
+
+Revision 1.1  1997/12/06 23:10:19  fedorov
+Put under CVS control
+*/
+
diff -uNr linux-2.4.37.9/drivers/char/keyboard.c linux-2.4.37.9-amithlon/drivers/char/keyboard.c
--- linux-2.4.37.9/drivers/char/keyboard.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/keyboard.c	2010-02-17 20:04:08.000000000 -0500
@@ -958,9 +958,9 @@
 		kbd_table[i] = kbd0;
 
 	ttytab = console_driver.table;
-
+#if 0
 	kbd_init_hw();
-
+#endif
 	tasklet_enable(&keyboard_tasklet);
 	tasklet_schedule(&keyboard_tasklet);
 	
diff -uNr linux-2.4.37.9/drivers/char/magic_kbd.c linux-2.4.37.9-amithlon/drivers/char/magic_kbd.c
--- linux-2.4.37.9/drivers/char/magic_kbd.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/magic_kbd.c	2010-02-17 20:04:08.000000000 -0500
@@ -0,0 +1,264 @@
+/*
+ *	Magic Keyboard interface for Linux	
+ *
+ *      Copyright (C) 1997 Bernd Meyer
+ *      derived from rtc.c, the Real Time Clock interface, which is
+ *	Copyright (C) 1996 Paul Gortmaker
+ *
+ *      This interface allows for low level redirection of keyboards.
+ *      It wedges in between the low level (hardware) keyboard handler and
+ *      the high level one (which hands the keyboard events on to the
+ *      console, X or SVGAlib apps). When the device /dev/mkbd is opened
+ *      for reading, scancodes coming from the low level driver are handed
+ *      out to the reading process instead of being passed on to the 
+ *      high level driver. The user level process can then do whatever
+ *      it wants (including sending them over a network to another machine).
+ *      If /dev/mkbd is written to, the bytes are fed to the high level
+ *      driver as if they had been generated by the low level driver.
+ *
+ *      /dev/mkbd will block on reads until at least one byte is ready for
+ *      reading. The data received from the low level driver is stored in a
+ *      cyclic buffer of finite size, so a process that has the device open
+ *      should make sure that it clears that buffer regularly.
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	as published by the Free Software Foundation; either version
+ *	2 of the License, or (at your option) any later version.
+ *
+ */
+
+#define MKBD_VERSION		"0.01"
+
+#include <linux/config.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/miscdevice.h>
+#include <linux/malloc.h>
+#include <linux/ioport.h>
+#include <linux/fcntl.h>
+#include <linux/init.h>
+
+#include <asm/io.h>
+#include <asm/uaccess.h>
+#include <asm/system.h>
+#include <linux/poll.h>
+#include <linux/keyboard.h>
+#include <linux/kbd_ll.h>
+#include <linux/pc_keyb.h>
+
+/*
+ *	We sponge a minor off of the misc major. No need slurping
+ *	up another valuable major dev number for this. 
+ */
+
+static DECLARE_WAIT_QUEUE_HEAD(mkbd_wait);
+
+static long long mkbd_llseek(struct file *file, loff_t offset, int origin);
+static ssize_t mkbd_read(struct file *file,
+		      char *buf, size_t count, loff_t *ppos);
+static int mkbd_ioctl(struct inode *inode, struct file *file,
+			unsigned int cmd, unsigned long arg);
+static unsigned int mkbd_poll(struct file *file, poll_table *wait);
+
+#define BUFFER_SIZE 128
+
+static unsigned char buffer[BUFFER_SIZE];
+static unsigned long start=0, end=0;
+static unsigned long number_open=0;
+static unsigned long bytes_total=0;
+static unsigned long bytes_total_in=0;
+
+static unsigned int bytes_in_buffer(void)
+{
+  return (BUFFER_SIZE+end-start)%BUFFER_SIZE;
+}
+
+static unsigned char get_from_buffer(void)
+{
+  if (bytes_in_buffer()>0) {
+    unsigned char answer=buffer[start];
+    start=(start+1)%BUFFER_SIZE;
+    return answer;
+  }
+  return 0; /* This shouldn't happen! */
+}
+
+static void put_into_buffer(unsigned char x)
+{
+  int newend=(end+1)%BUFFER_SIZE;
+
+  if (newend!=start) {
+    bytes_total++;
+    buffer[end]=x;
+    end=newend;
+  }
+}
+
+/*
+ *	Now all the various file operations that we export.
+ */
+
+static long long mkbd_llseek(struct file *file, loff_t offset, int origin)
+{
+	return -ESPIPE;
+}
+
+static ssize_t mkbd_read(struct file *file,
+		      char *buf, size_t count, loff_t *ppos)
+{
+	DECLARE_WAITQUEUE(wait, current);
+	int retval = 0;
+	
+	if (count < sizeof(unsigned char))  /* At least one character */
+		return -EINVAL;
+
+	add_wait_queue(&mkbd_wait, &wait);
+	current->state = TASK_INTERRUPTIBLE;
+		
+	while (bytes_in_buffer() == 0) {
+		if (file->f_flags & O_NONBLOCK) {
+			retval = -EAGAIN;
+			break;
+		}
+		if (signal_pending(current)) {
+			retval = -ERESTARTSYS;
+			break;
+		}
+		schedule();
+	}
+
+	if (retval == 0) { /* Supposedly, we have some data in the buffer */
+	  unsigned long used=0;
+	  while (bytes_in_buffer()>0 && count>0 && retval==0) {
+	    retval=put_user(get_from_buffer(),(unsigned char*)buf);
+	    count--;
+	    used++;
+	    buf++;
+	  }
+	  if (!retval)
+	    retval = used; 
+	}
+	
+	current->state = TASK_RUNNING;
+	remove_wait_queue(&mkbd_wait, &wait);
+	
+	return retval;
+}
+
+static ssize_t mkbd_write(struct file * file,
+		       const char * buf, size_t count, loff_t* ppos )
+{
+  const char *tmp = buf;
+  char c;
+  
+  for( ; count-- > 0;++tmp) {
+    get_user(c,tmp);
+    bytes_total_in++;
+    handle_scancode(c,!(c&0x80));
+  }
+  return( tmp - buf );
+}
+
+static int mkbd_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	unsigned long arg)
+{
+  return -EINVAL;
+}
+
+void mkbd_handle_scancode(unsigned char x, int down)
+{
+  put_into_buffer(x);
+  wake_up_interruptible(&mkbd_wait);	
+}
+
+static int mkbd_open(struct inode *inode, struct file *file)
+{
+  if (number_open==0) { /* First one to open this one */
+    scancode_handler=mkbd_handle_scancode;
+  }
+  number_open++; /* Should we check this for overflow? */
+  return 0;
+}
+
+static int mkbd_release(struct inode *inode, struct file *file)
+{
+  number_open--;
+  if (number_open==0) {
+    scancode_handler=handle_scancode;
+  }
+  return 0;
+}
+
+/* What does this one do? No idea! */
+
+static unsigned int mkbd_poll(struct file *file, poll_table *wait)
+{
+	poll_wait(file, &mkbd_wait, wait);
+	if (bytes_in_buffer() > 0)
+		return POLLIN | POLLRDNORM;
+	return 0;
+}
+
+/*
+ *	The various file operations we support.
+ */
+
+static struct file_operations mkbd_fops = {
+  owner:      NULL,  /* Now why aren't I allowed to say
+			THIS_MODULE here? rtc.c can... */
+  llseek:     mkbd_llseek,
+  read:	      mkbd_read,
+  write:      mkbd_write,
+  poll:	      mkbd_poll,
+  ioctl:      mkbd_ioctl,
+  open:	      mkbd_open,
+  release:    mkbd_release,
+};
+
+static struct miscdevice mkbd_dev=
+{
+	MKBD_MINOR,
+	"mkbd",
+	&mkbd_fops
+};
+
+int __init mkbd_init(void)
+{
+	printk(KERN_INFO "Magic keyboard Driver v%s\n", MKBD_VERSION);
+	misc_register(&mkbd_dev);
+
+	start=end=0;
+	number_open=0;
+	bytes_total=0;
+	bytes_total_in=0;
+
+	return 0;
+}
+
+/*
+ *	Info exported via "/proc/mkbd".
+ */
+
+int get_mkbd_status(char *buf)
+{
+	char *p;
+
+	p=buf;
+	p += sprintf(p,
+		"bytes in buffer\t: %05d\n"
+		"start          \t: %05d\n"
+		"end            \t: %05d\n"
+		"bytes passed on\t: %05d\n"
+		"bytes passed in\t: %05d\n"
+		"number of processes\t: %05d\n",
+		     (unsigned int)bytes_in_buffer(),
+		     (unsigned int)start,
+		     (unsigned int)end,
+		     (unsigned int)bytes_total,
+		     (unsigned int)bytes_total_in,
+		     (unsigned int)number_open);
+	return  p - buf;
+}
+
+
diff -uNr linux-2.4.37.9/drivers/char/Makefile linux-2.4.37.9-amithlon/drivers/char/Makefile
--- linux-2.4.37.9/drivers/char/Makefile	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/Makefile	2010-02-17 20:04:08.000000000 -0500
@@ -23,7 +23,8 @@
 
 export-objs     :=	busmouse.o console.o keyboard.o sysrq.o \
 			misc.o pty.o random.o selection.o serial.o \
-			sonypi.o tty_io.o tty_ioctl.o generic_serial.o \
+			tty_io.o magic_kbd.o pc_keyb.o irq.o \
+			sonypi.o tty_ioctl.o generic_serial.o \
 			au1000_gpio.o vac-serial.o hp_psaux.o nvram.o \
 			scx200.o fetchop.o
 
@@ -251,6 +252,8 @@
 obj-$(CONFIG_RTC) += rtc.o
 obj-$(CONFIG_GEN_RTC) += genrtc.o
 obj-$(CONFIG_EFI_RTC) += efirtc.o
+obj-$(CONFIG_MKBD) += magic_kbd.o
+obj-y += irq.o
 obj-$(CONFIG_SGI_DS1286) += ds1286.o
 obj-$(CONFIG_MIPS_RTC) += mips_rtc.o
 obj-$(CONFIG_SGI_IP27_RTC) += ip27-rtc.o
diff -uNr linux-2.4.37.9/drivers/char/mem.c linux-2.4.37.9-amithlon/drivers/char/mem.c
--- linux-2.4.37.9/drivers/char/mem.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/mem.c	2010-02-17 20:04:08.000000000 -0500
@@ -754,6 +754,7 @@
 	mda_console_init();
 #endif
 	tty_init();
+	irq_init();
 #ifdef CONFIG_M68K_PRINTER
 	lp_m68k_init();
 #endif
diff -uNr linux-2.4.37.9/drivers/char/misc.c linux-2.4.37.9-amithlon/drivers/char/misc.c
--- linux-2.4.37.9/drivers/char/misc.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/misc.c	2010-02-17 20:04:08.000000000 -0500
@@ -66,6 +66,7 @@
 static unsigned char misc_minors[DYNAMIC_MINORS / 8];
 
 extern int psaux_init(void);
+extern int mkbd_init(void);
 extern int rtc_DP8570A_init(void);
 extern int rtc_MK48T08_init(void);
 extern int ds1286_init(void);
@@ -257,6 +258,9 @@
 #ifdef CONFIG_BVME6000
 	rtc_DP8570A_init();
 #endif
+#ifdef CONFIG_MKBD
+	mkbd_init();
+#endif
 #ifdef CONFIG_SGI_DS1286
 	ds1286_init();
 #endif
diff -uNr linux-2.4.37.9/drivers/char/pc_keyb.c linux-2.4.37.9-amithlon/drivers/char/pc_keyb.c
--- linux-2.4.37.9/drivers/char/pc_keyb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/char/pc_keyb.c	2010-02-17 20:04:08.000000000 -0500
@@ -41,13 +41,14 @@
 #include <asm/uaccess.h>
 #include <asm/irq.h>
 #include <asm/system.h>
-
+#include <linux/module.h>
 #include <asm/io.h>
 
 /* Some configuration switches are present in the include file... */
 
 #include <linux/pc_keyb.h>
-
+void (*scancode_handler)(unsigned char, int some_bool)=NULL;
+EXPORT_SYMBOL(scancode_handler);
 /* Simple translation table for the SysRq keys */
 
 #ifdef CONFIG_MAGIC_SYSRQ
@@ -513,8 +514,12 @@
 		{
 			if (status & KBD_STAT_MOUSE_OBF)
 				handle_mouse_event(scancode);
-			else
-				handle_keyboard_event(scancode);
+			else {
+			  if (scancode_handler)
+			    scancode_handler(scancode, !(scancode & 0x80));
+			  else
+			    handle_scancode(scancode, !(scancode & 0x80));
+			}
 		}
 
 		status = kbd_read_status();
@@ -912,7 +917,7 @@
 		kbd_exists = 0;
 		return;
 	}
-
+	scancode_handler=handle_scancode;
 	kbd_request_region();
 
 	/* Flush any pending input. */
diff -uNr linux-2.4.37.9/drivers/mtd/Config.in linux-2.4.37.9-amithlon/drivers/mtd/Config.in
--- linux-2.4.37.9/drivers/mtd/Config.in	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/mtd/Config.in	2010-02-17 20:04:08.000000000 -0500
@@ -24,7 +24,8 @@
    dep_tristate '  Caching block device access to MTD devices' CONFIG_MTD_BLOCK $CONFIG_MTD
    if [ "$CONFIG_MTD_BLOCK" = "n" -o "$CONFIG_MTD_BLOCK" = "m" ]; then
    	dep_tristate '  Readonly block device access to MTD devices' CONFIG_MTD_BLOCK_RO $CONFIG_MTD
-   fi
+
+
    dep_tristate '  FTL (Flash Translation Layer) support' CONFIG_FTL $CONFIG_MTD
    dep_tristate '  NFTL (NAND Flash Translation Layer) support' CONFIG_NFTL $CONFIG_MTD
    if [ "$CONFIG_NFTL" = "y" -o "$CONFIG_NFTL" = "m" ]; then
diff -uNr linux-2.4.37.9/drivers/mtd/mtduae.c linux-2.4.37.9-amithlon/drivers/mtd/mtduae.c
--- linux-2.4.37.9/drivers/mtd/mtduae.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/mtd/mtduae.c	2010-02-17 20:04:08.000000000 -0500
@@ -0,0 +1,148 @@
+/* 
+ * mtuae - a sort of "initial ramdisk" that loads with the kernel image
+ * $Id: mtuae.c,v 0.01 2001/06/01
+ * Author: Bernd Meyer
+ *
+ * based heavily on mtdram.c, by
+ * Alexander Larsson <alex@cendio.se> 
+ *
+ * Copyright (c) 1999 Alexander Larsson <alex@cendio.se>
+ *               2001 Bernd Meyer <bmeyer@csse.monash.edu.au>
+ * This code is GPL
+ *
+ */
+
+#include <linux/config.h>
+#include <linux/module.h>
+
+#include <linux/slab.h>
+#include <linux/ioport.h>
+#include <linux/mtd/compatmac.h>
+#include <linux/mtd/mtd.h>
+
+#define MTDUAE_TOTAL_SIZE=(1024*1024)
+#define MTDUAE_ERASE_SIZE=(1024)
+static char data[MTDUAE_TOTAL_SIZE]=
+{0,1,2,3,4,5,6,7,255,254,253,252,251,250,249,248};
+
+// We could store these in the mtd structure, but we only support 1 device..
+static struct mtd_info *mtd_info;
+
+
+static int
+uae_erase(struct mtd_info *mtd, struct erase_info *instr)
+{
+  if (instr->addr + instr->len > mtd->size)
+    return -EINVAL;
+	
+  memset((char *)mtd->priv + instr->addr, 0xff, instr->len);
+  
+  instr->state = MTD_ERASE_DONE;
+
+  if (instr->callback)
+    (*(instr->callback))(instr);
+  return 0;
+}
+
+static int uae_point (struct mtd_info *mtd, loff_t from, size_t len, size_t *retlen, u_char **mtdbuf)
+{
+  if (from + len > mtd->size)
+    return -EINVAL;
+  
+  *mtdbuf = mtd->priv + from;
+  *retlen = len;
+  return 0;
+}
+
+static void uae_unpoint (struct mtd_info *mtd, u_char *addr)
+{
+}
+
+static int uae_read(struct mtd_info *mtd, loff_t from, size_t len,
+	     size_t *retlen, u_char *buf)
+{
+  if (from + len > mtd->size)
+    return -EINVAL;
+
+  memcpy(buf, mtd->priv + from, len);
+
+  *retlen=len;
+  return 0;
+}
+
+static int uae_write(struct mtd_info *mtd, loff_t to, size_t len,
+	      size_t *retlen, const u_char *buf)
+{
+  if (to + len > mtd->size)
+    return -EINVAL;
+  
+  memcpy ((char *)mtd->priv + to, buf, len);
+
+  *retlen=len;
+  return 0;
+}
+
+#if LINUX_VERSION_CODE < 0x20300
+#ifdef MODULE
+#define init_mtdram init_module
+#define cleanup_mtdram cleanup_module
+#endif
+#endif
+
+//static void __exit cleanup_mtdram(void)
+mod_exit_t cleanup_mtdram(void)
+{
+  if (mtd_info) {
+    del_mtd_device(mtd_info);
+    kfree(mtd_info);
+  }
+}
+
+extern struct module __this_module;
+
+mod_init_t init_mtdram(void)
+{
+   // Allocate some memory
+   mtd_info = (struct mtd_info *)kmalloc(sizeof(struct mtd_info), GFP_KERNEL);
+   if (mtd_info == 0)
+      return 0;
+   
+   memset(mtd_info, 0, sizeof(*mtd_info));
+
+   // Setup the MTD structure
+   mtd_info->name = "mtdram test device";
+   mtd_info->type = MTD_RAM;
+   mtd_info->flags = MTD_CAP_RAM;
+   mtd_info->size = MTDUAE_TOTAL_SIZE;
+   mtd_info->erasesize = MTDUAE_ERASE_SIZE;
+   mtd_info->priv = data;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
+   mtd_info->module = THIS_MODULE;			
+#endif
+
+   if (!mtd_info->priv) {
+     kfree(mtd_info);
+     mtd_info = NULL;
+     return -ENOMEM;
+   }
+   mtd_info->erase = uae_erase;
+   mtd_info->point = uae_point;
+   mtd_info->unpoint = uae_unpoint;
+   mtd_info->read = uae_read;
+   mtd_info->write = uae_write;
+
+   if (add_mtd_device(mtd_info)) {
+     vfree(mtd_info->priv);
+     kfree(mtd_info);
+     mtd_info = NULL;
+     return -EIO;
+   }
+   
+   return 0;
+}
+
+#if LINUX_VERSION_CODE > 0x20300
+module_init(init_mtdram);
+module_exit(cleanup_mtdram);
+#endif
diff -uNr linux-2.4.37.9/drivers/net/8139too.c linux-2.4.37.9-amithlon/drivers/net/8139too.c
--- linux-2.4.37.9/drivers/net/8139too.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/8139too.c	2010-02-20 09:51:57.000000000 -0500
@@ -1618,9 +1618,9 @@
 		if (tp->time_to_die)
 			break;
 
-		rtnl_lock ();
+
 		rtl8139_thread_iter (dev, tp, tp->mmio_addr);
-		rtnl_unlock ();
+
 	}
 
 	complete_and_exit (&tp->thr_exited, 0);
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk1200.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk1200.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk1200.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk1200.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,72 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * small cosine table in U8 format
+ */
+#define OFFSCOSTABBITS 6
+#define OFFSCOSTABSIZE (1<<OFFSCOSTABBITS)
+
+static unsigned char offscostab[OFFSCOSTABSIZE] = {
+	 255, 254, 252, 249, 245, 240, 233, 226,
+	 217, 208, 198, 187, 176, 164, 152, 140,
+	 128, 115, 103,  91,  79,  68,  57,  47,
+	  38,  29,  22,  15,  10,   6,   3,   1,
+	   1,   1,   3,   6,  10,  15,  22,  29,
+	  38,  47,  57,  68,  79,  91, 103, 115,
+	 127, 140, 152, 164, 176, 187, 198, 208,
+	 217, 226, 233, 240, 245, 249, 252, 254
+};
+
+#define OFFSCOS(x) offscostab[((x)>>10)&0x3f]
+
+
+/*
+ * more accurate cosine table
+ */
+
+static const short costab[64] = {
+	 32767,  32609,  32137,  31356,  30272,  28897,  27244,  25329, 
+	 23169,  20787,  18204,  15446,  12539,   9511,   6392,   3211, 
+	     0,  -3211,  -6392,  -9511, -12539, -15446, -18204, -20787, 
+	-23169, -25329, -27244, -28897, -30272, -31356, -32137, -32609, 
+	-32767, -32609, -32137, -31356, -30272, -28897, -27244, -25329, 
+	-23169, -20787, -18204, -15446, -12539,  -9511,  -6392,  -3211, 
+	     0,   3211,   6392,   9511,  12539,  15446,  18204,  20787, 
+	 23169,  25329,  27244,  28897,  30272,  31356,  32137,  32609
+};
+
+#define COS(x) costab[((x)>>10)&0x3f]
+#define SIN(x) COS((x)+0xc000)
+
+
+/*
+ * afsk1200 specific tables
+ */
+#define AFSK12_SAMPLE_RATE 9600
+#define AFSK12_TX_FREQ_LO 1200
+#define AFSK12_TX_FREQ_HI 2200
+#define AFSK12_CORRLEN 8
+
+static const int afsk12_tx_lo_i[] = {
+	  127,   89,    0,  -89, -127,  -89,    0,   89 
+};
+#define SUM_AFSK12_TX_LO_I 0
+
+static const int afsk12_tx_lo_q[] = {
+	    0,   89,  127,   89,    0,  -89, -127,  -89 
+};
+#define SUM_AFSK12_TX_LO_Q 0
+
+static const int afsk12_tx_hi_i[] = {
+	  127,   16, -122,  -48,  109,   77,  -89, -100 
+};
+#define SUM_AFSK12_TX_HI_I -30
+
+static const int afsk12_tx_hi_q[] = {
+	    0,  125,   32, -117,  -63,  100,   89,  -77 
+};
+#define SUM_AFSK12_TX_HI_Q 89
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_7.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_7.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_7.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_7.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,72 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * small cosine table in U8 format
+ */
+#define OFFSCOSTABBITS 6
+#define OFFSCOSTABSIZE (1<<OFFSCOSTABBITS)
+
+static unsigned char offscostab[OFFSCOSTABSIZE] = {
+	 255, 254, 252, 249, 245, 240, 233, 226,
+	 217, 208, 198, 187, 176, 164, 152, 140,
+	 128, 115, 103,  91,  79,  68,  57,  47,
+	  38,  29,  22,  15,  10,   6,   3,   1,
+	   1,   1,   3,   6,  10,  15,  22,  29,
+	  38,  47,  57,  68,  79,  91, 103, 115,
+	 127, 140, 152, 164, 176, 187, 198, 208,
+	 217, 226, 233, 240, 245, 249, 252, 254
+};
+
+#define OFFSCOS(x) offscostab[((x)>>10)&0x3f]
+
+
+/*
+ * more accurate cosine table
+ */
+
+static const short costab[64] = {
+	 32767,  32609,  32137,  31356,  30272,  28897,  27244,  25329, 
+	 23169,  20787,  18204,  15446,  12539,   9511,   6392,   3211, 
+	     0,  -3211,  -6392,  -9511, -12539, -15446, -18204, -20787, 
+	-23169, -25329, -27244, -28897, -30272, -31356, -32137, -32609, 
+	-32767, -32609, -32137, -31356, -30272, -28897, -27244, -25329, 
+	-23169, -20787, -18204, -15446, -12539,  -9511,  -6392,  -3211, 
+	     0,   3211,   6392,   9511,  12539,  15446,  18204,  20787, 
+	 23169,  25329,  27244,  28897,  30272,  31356,  32137,  32609
+};
+
+#define COS(x) costab[((x)>>10)&0x3f]
+#define SIN(x) COS((x)+0xc000)
+
+
+/*
+ * afsk2400 specific tables (tcm3105 clk 7372800.000000Hz)
+ */
+#define AFSK24_TX_FREQ_LO 1995
+#define AFSK24_TX_FREQ_HI 3658
+#define AFSK24_BITPLL_INC 9830
+#define AFSK24_SAMPLERATE 16000
+
+static const int afsk24_tx_lo_i[] = {
+	   10,   11,    0,  -43,  -89,  -80,   -1,   87,  112,   64,    0,  -24,  -16,   -7 
+};
+#define SUM_AFSK24_TX_LO_I 24
+
+static const int afsk24_tx_lo_q[] = {
+	    0,   11,   35,   43,    0,  -78, -125,  -89,   -1,   62,   61,   25,    0,   -7 
+};
+#define SUM_AFSK24_TX_LO_Q -63
+
+static const int afsk24_tx_hi_i[] = {
+	   10,    2,  -34,  -24,   76,   69,  -86, -101,   53,   83,  -14,  -35,    0,   10 
+};
+#define SUM_AFSK24_TX_HI_I 9
+
+static const int afsk24_tx_hi_q[] = {
+	    0,   16,    9,  -56,  -45,   88,   90,  -74,  -98,   31,   59,   -3,  -16,   -1 
+};
+#define SUM_AFSK24_TX_HI_Q 0
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_8.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_8.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_8.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2400_8.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,72 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * small cosine table in U8 format
+ */
+#define OFFSCOSTABBITS 6
+#define OFFSCOSTABSIZE (1<<OFFSCOSTABBITS)
+
+static unsigned char offscostab[OFFSCOSTABSIZE] = {
+	 255, 254, 252, 249, 245, 240, 233, 226,
+	 217, 208, 198, 187, 176, 164, 152, 140,
+	 128, 115, 103,  91,  79,  68,  57,  47,
+	  38,  29,  22,  15,  10,   6,   3,   1,
+	   1,   1,   3,   6,  10,  15,  22,  29,
+	  38,  47,  57,  68,  79,  91, 103, 115,
+	 127, 140, 152, 164, 176, 187, 198, 208,
+	 217, 226, 233, 240, 245, 249, 252, 254
+};
+
+#define OFFSCOS(x) offscostab[((x)>>10)&0x3f]
+
+
+/*
+ * more accurate cosine table
+ */
+
+static const short costab[64] = {
+	 32767,  32609,  32137,  31356,  30272,  28897,  27244,  25329, 
+	 23169,  20787,  18204,  15446,  12539,   9511,   6392,   3211, 
+	     0,  -3211,  -6392,  -9511, -12539, -15446, -18204, -20787, 
+	-23169, -25329, -27244, -28897, -30272, -31356, -32137, -32609, 
+	-32767, -32609, -32137, -31356, -30272, -28897, -27244, -25329, 
+	-23169, -20787, -18204, -15446, -12539,  -9511,  -6392,  -3211, 
+	     0,   3211,   6392,   9511,  12539,  15446,  18204,  20787, 
+	 23169,  25329,  27244,  28897,  30272,  31356,  32137,  32609
+};
+
+#define COS(x) costab[((x)>>10)&0x3f]
+#define SIN(x) COS((x)+0xc000)
+
+
+/*
+ * afsk2400 specific tables (tcm3105 clk 8000000.000000Hz)
+ */
+#define AFSK24_TX_FREQ_LO 2165
+#define AFSK24_TX_FREQ_HI 3970
+#define AFSK24_BITPLL_INC 9830
+#define AFSK24_SAMPLERATE 16000
+
+static const int afsk24_tx_lo_i[] = {
+	   10,   11,   -4,  -51,  -86,  -49,   47,  118,   97,   17,  -37,  -35,  -11,    0 
+};
+#define SUM_AFSK24_TX_LO_I 27
+
+static const int afsk24_tx_lo_q[] = {
+	    0,   12,   35,   34,  -22, -100, -115,  -40,   55,   87,   48,    2,  -11,  -10 
+};
+#define SUM_AFSK24_TX_LO_Q -25
+
+static const int afsk24_tx_hi_i[] = {
+	   10,    0,  -35,   -2,   89,    6, -124,  -10,  111,    9,  -61,   -4,   16,    1 
+};
+#define SUM_AFSK24_TX_HI_I 6
+
+static const int afsk24_tx_hi_q[] = {
+	    0,   16,    0,  -61,   -4,  112,    8, -124,  -10,   88,    7,  -35,   -2,   10 
+};
+#define SUM_AFSK24_TX_HI_Q 5
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2666.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2666.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_afsk2666.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_afsk2666.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,75 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * small cosine table in U8 format
+ */
+#define OFFSCOSTABBITS 6
+#define OFFSCOSTABSIZE (1<<OFFSCOSTABBITS)
+
+static unsigned char offscostab[OFFSCOSTABSIZE] = {
+	 255, 254, 252, 249, 245, 240, 233, 226,
+	 217, 208, 198, 187, 176, 164, 152, 140,
+	 128, 115, 103,  91,  79,  68,  57,  47,
+	  38,  29,  22,  15,  10,   6,   3,   1,
+	   1,   1,   3,   6,  10,  15,  22,  29,
+	  38,  47,  57,  68,  79,  91, 103, 115,
+	 127, 140, 152, 164, 176, 187, 198, 208,
+	 217, 226, 233, 240, 245, 249, 252, 254
+};
+
+#define OFFSCOS(x) offscostab[((x)>>10)&0x3f]
+
+
+/*
+ * more accurate cosine table
+ */
+
+static const short costab[64] = {
+	 32767,  32609,  32137,  31356,  30272,  28897,  27244,  25329, 
+	 23169,  20787,  18204,  15446,  12539,   9511,   6392,   3211, 
+	     0,  -3211,  -6392,  -9511, -12539, -15446, -18204, -20787, 
+	-23169, -25329, -27244, -28897, -30272, -31356, -32137, -32609, 
+	-32767, -32609, -32137, -31356, -30272, -28897, -27244, -25329, 
+	-23169, -20787, -18204, -15446, -12539,  -9511,  -6392,  -3211, 
+	     0,   3211,   6392,   9511,  12539,  15446,  18204,  20787, 
+	 23169,  25329,  27244,  28897,  30272,  31356,  32137,  32609
+};
+
+#define COS(x) costab[((x)>>10)&0x3f]
+#define SIN(x) COS((x)+0xc000)
+
+
+/*
+ * afsk2666 specific tables
+ */
+#define AFSK26_DEMCORRLEN 12
+#define AFSK26_SAMPLERATE 16000
+
+static const unsigned int afsk26_carfreq[2] = { 0x2000, 0x3555 };
+
+
+static const struct {
+	int i[12];
+	int q[12];
+} afsk26_dem_tables[2][2] = {
+	{
+		{{      1,      7,    -18,    -73,   -100,    -47,     47,    100,     73,     18,     -7,     -1 }, {      0,     17,     43,     30,    -41,   -115,   -115,    -41,     30,     43,     17,      0 }},
+#define AFSK26_DEM_SUM_I_0_0 0
+#define AFSK26_DEM_SUM_Q_0_0 -132
+		{{      1,     -7,    -46,    -10,    100,     76,    -75,   -100,     10,     46,      7,     -1 }, {      1,     17,     -6,    -79,    -41,     99,     99,    -41,    -79,     -6,     17,      1 }}
+#define AFSK26_DEM_SUM_I_0_1 1
+#define AFSK26_DEM_SUM_Q_0_1 -18
+	},
+	{
+		{{      8,     22,      0,    -67,   -118,    -89,      0,     67,     63,     22,      0,      0 }, {      0,     22,     63,     67,      0,    -89,   -118,    -67,      0,     22,      8,      0 }},
+#define AFSK26_DEM_SUM_I_1_0 -92
+#define AFSK26_DEM_SUM_Q_1_0 -92
+		{{      8,      8,    -54,    -67,     59,    122,      0,    -91,    -31,     22,      7,      0 }, {      0,     30,     31,    -67,   -102,     32,    118,     24,    -54,    -22,      4,      0 }}
+#define AFSK26_DEM_SUM_I_1_1 -17
+#define AFSK26_DEM_SUM_Q_1_1 -6
+	}
+};
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_fsk9600.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_fsk9600.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_fsk9600.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_fsk9600.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,302 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * fsk9600 specific tables
+ */
+static unsigned char fsk96_txfilt_4[] = {
+	  37,  37,  35,  36,  39,  40,  38,  38,
+	  53,  53,  51,  52,  55,  56,  54,  54,
+	 210, 210, 208, 209, 212, 213, 211, 211,
+	 226, 226, 224, 225, 228, 229, 227, 227,
+	  23,  23,  22,  22,  26,  26,  24,  24,
+	  39,  39,  38,  38,  42,  42,  40,  40,
+	 196, 196, 195, 195, 199, 199, 197, 197,
+	 212, 212, 211, 211, 215, 215, 213, 213,
+	  43,  43,  42,  42,  46,  46,  44,  44,
+	  59,  59,  58,  58,  62,  62,  60,  60,
+	 216, 216, 215, 215, 219, 219, 217, 217,
+	 232, 232, 231, 231, 235, 235, 233, 233,
+	  29,  29,  28,  28,  32,  32,  30,  30,
+	  45,  45,  44,  44,  48,  48,  46,  46,
+	 202, 202, 201, 201, 205, 205, 203, 203,
+	 218, 218, 217, 217, 221, 221, 219, 219,
+	  36,  36,  34,  34,  38,  38,  37,  37,
+	  52,  52,  50,  50,  54,  54,  53,  53,
+	 209, 209, 207, 207, 211, 211, 210, 210,
+	 225, 225, 223, 223, 227, 227, 226, 226,
+	  22,  22,  20,  20,  24,  24,  23,  23,
+	  38,  38,  36,  36,  40,  40,  39,  39,
+	 195, 195, 193, 193, 197, 197, 196, 196,
+	 211, 211, 209, 209, 213, 213, 212, 212,
+	  42,  42,  40,  40,  44,  44,  43,  43,
+	  58,  58,  56,  56,  60,  60,  59,  59,
+	 215, 215, 213, 213, 217, 217, 216, 216,
+	 231, 231, 229, 229, 233, 233, 232, 232,
+	  28,  28,  26,  27,  30,  31,  29,  29,
+	  44,  44,  42,  43,  46,  47,  45,  45,
+	 201, 201, 199, 200, 203, 204, 202, 202,
+	 217, 217, 215, 216, 219, 220, 218, 218,
+	  37,  37,  37,  37,  29,  29,  29,  30,
+	 108, 108, 108, 108, 100, 100, 100, 100,
+	 169, 169, 169, 170, 161, 161, 162, 162,
+	 240, 240, 240, 240, 232, 232, 232, 232,
+	  19,  19,  19,  20,  11,  11,  12,  12,
+	  90,  90,  90,  90,  82,  82,  82,  82,
+	 151, 151, 152, 152, 143, 143, 144, 144,
+	 222, 222, 222, 222, 214, 214, 215, 215,
+	  41,  41,  41,  41,  33,  33,  33,  34,
+	 112, 112, 112, 112, 104, 104, 104, 104,
+	 173, 173, 173, 174, 165, 165, 166, 166,
+	 244, 244, 244, 244, 236, 236, 236, 236,
+	  23,  23,  23,  24,  15,  15,  16,  16,
+	  94,  94,  94,  94,  86,  86,  86,  86,
+	 155, 155, 156, 156, 147, 147, 148, 148,
+	 226, 226, 226, 226, 218, 218, 219, 219,
+	  36,  36,  37,  37,  29,  29,  29,  29,
+	 107, 107, 108, 108,  99,  99, 100, 100,
+	 169, 169, 169, 169, 161, 161, 161, 161,
+	 239, 239, 240, 240, 231, 232, 232, 232,
+	  19,  19,  19,  19,  11,  11,  11,  11,
+	  89,  89,  90,  90,  81,  82,  82,  82,
+	 151, 151, 151, 151, 143, 143, 143, 143,
+	 221, 222, 222, 222, 214, 214, 214, 214,
+	  40,  40,  41,  41,  33,  33,  33,  33,
+	 111, 111, 112, 112, 103, 103, 104, 104,
+	 173, 173, 173, 173, 165, 165, 165, 165,
+	 243, 243, 244, 244, 235, 236, 236, 236,
+	  23,  23,  23,  23,  15,  15,  15,  15,
+	  93,  93,  94,  94,  85,  86,  86,  86,
+	 155, 155, 155, 155, 147, 147, 147, 147,
+	 225, 226, 226, 226, 218, 218, 218, 218,
+	  37,  36,  41,  40,  19,  19,  23,  23,
+	 169, 169, 173, 173, 151, 151, 155, 155,
+	 108, 107, 112, 111,  90,  89,  94,  93,
+	 240, 239, 244, 243, 222, 221, 226, 225,
+	  29,  29,  33,  33,  11,  11,  15,  15,
+	 161, 161, 165, 165, 143, 143, 147, 147,
+	 100,  99, 104, 103,  82,  81,  86,  85,
+	 232, 231, 236, 235, 214, 214, 218, 218,
+	  37,  37,  41,  41,  19,  19,  23,  23,
+	 169, 169, 173, 173, 152, 151, 156, 155,
+	 108, 108, 112, 112,  90,  90,  94,  94,
+	 240, 240, 244, 244, 222, 222, 226, 226,
+	  29,  29,  33,  33,  12,  11,  16,  15,
+	 162, 161, 166, 165, 144, 143, 148, 147,
+	 100, 100, 104, 104,  82,  82,  86,  86,
+	 232, 232, 236, 236, 215, 214, 219, 218,
+	  37,  36,  41,  40,  19,  19,  23,  23,
+	 169, 169, 173, 173, 151, 151, 155, 155,
+	 108, 107, 112, 111,  90,  89,  94,  93,
+	 240, 239, 244, 243, 222, 222, 226, 226,
+	  29,  29,  33,  33,  11,  11,  15,  15,
+	 161, 161, 165, 165, 143, 143, 147, 147,
+	 100,  99, 104, 103,  82,  82,  86,  86,
+	 232, 232, 236, 236, 214, 214, 218, 218,
+	  37,  37,  41,  41,  20,  19,  24,  23,
+	 170, 169, 174, 173, 152, 151, 156, 155,
+	 108, 108, 112, 112,  90,  90,  94,  94,
+	 240, 240, 244, 244, 222, 222, 226, 226,
+	  30,  29,  34,  33,  12,  11,  16,  15,
+	 162, 161, 166, 165, 144, 143, 148, 147,
+	 100, 100, 104, 104,  82,  82,  86,  86,
+	 232, 232, 236, 236, 215, 214, 219, 218,
+	  37,  36,  43,  42,  23,  22,  29,  28,
+	 210, 209, 216, 215, 196, 195, 202, 201,
+	  53,  52,  59,  58,  39,  38,  45,  44,
+	 226, 225, 232, 231, 212, 211, 218, 217,
+	  39,  38,  46,  44,  26,  24,  32,  30,
+	 212, 211, 219, 217, 199, 197, 205, 203,
+	  55,  54,  62,  60,  42,  40,  48,  46,
+	 228, 227, 235, 233, 215, 213, 221, 219,
+	  35,  34,  42,  40,  22,  20,  28,  26,
+	 208, 207, 215, 213, 195, 193, 201, 199,
+	  51,  50,  58,  56,  38,  36,  44,  42,
+	 224, 223, 231, 229, 211, 209, 217, 215,
+	  38,  37,  44,  43,  24,  23,  30,  29,
+	 211, 210, 217, 216, 197, 196, 203, 202,
+	  54,  53,  60,  59,  40,  39,  46,  45,
+	 227, 226, 233, 232, 213, 212, 219, 218,
+	  37,  36,  43,  42,  23,  22,  29,  28,
+	 210, 209, 216, 215, 196, 195, 202, 201,
+	  53,  52,  59,  58,  39,  38,  45,  44,
+	 226, 225, 232, 231, 212, 211, 218, 217,
+	  40,  38,  46,  44,  26,  24,  32,  31,
+	 213, 211, 219, 217, 199, 197, 205, 204,
+	  56,  54,  62,  60,  42,  40,  48,  47,
+	 229, 227, 235, 233, 215, 213, 221, 220,
+	  36,  34,  42,  40,  22,  20,  28,  27,
+	 209, 207, 215, 213, 195, 193, 201, 200,
+	  52,  50,  58,  56,  38,  36,  44,  43,
+	 225, 223, 231, 229, 211, 209, 217, 216,
+	  38,  37,  44,  43,  24,  23,  30,  29,
+	 211, 210, 217, 216, 197, 196, 203, 202,
+	  54,  53,  60,  59,  40,  39,  46,  45,
+	 227, 226, 233, 232, 213, 212, 219, 218
+};
+
+static unsigned char fsk96_txfilt_5[] = {
+	  39,  40,  38,  38,  42,  43,  41,  41,
+	  51,  51,  50,  50,  54,  54,  53,  53,
+	 209, 209, 207, 208, 212, 212, 210, 211,
+	 221, 221, 219, 219, 224, 224, 222, 222,
+	  28,  28,  27,  27,  31,  31,  30,  30,
+	  40,  40,  38,  39,  43,  43,  41,  42,
+	 198, 198, 196, 196, 201, 201, 199, 199,
+	 209, 210, 208, 208, 212, 213, 211, 211,
+	  45,  45,  44,  44,  48,  48,  47,  47,
+	  57,  57,  56,  56,  60,  60,  59,  59,
+	 215, 215, 213, 213, 218, 218, 216, 216,
+	 227, 227, 225, 225, 230, 230, 228, 228,
+	  34,  34,  32,  33,  37,  37,  35,  36,
+	  46,  46,  44,  44,  49,  49,  47,  47,
+	 203, 204, 202, 202, 206, 207, 205, 205,
+	 215, 215, 214, 214, 218, 218, 217, 217,
+	  38,  38,  37,  37,  41,  41,  40,  40,
+	  50,  50,  48,  49,  53,  53,  51,  52,
+	 208, 208, 206, 206, 211, 211, 209, 209,
+	 219, 220, 218, 218, 222, 223, 221, 221,
+	  27,  27,  25,  25,  30,  30,  28,  28,
+	  39,  39,  37,  37,  42,  42,  40,  40,
+	 196, 196, 195, 195, 199, 199, 198, 198,
+	 208, 208, 207, 207, 211, 211, 210, 210,
+	  44,  44,  42,  43,  47,  47,  45,  46,
+	  56,  56,  54,  54,  59,  59,  57,  57,
+	 213, 214, 212, 212, 216, 217, 215, 215,
+	 225, 225, 224, 224, 228, 228, 227, 227,
+	  33,  33,  31,  31,  36,  36,  34,  34,
+	  44,  45,  43,  43,  47,  48,  46,  46,
+	 202, 202, 201, 201, 205, 205, 204, 204,
+	 214, 214, 212, 213, 217, 217, 215, 216,
+	  39,  40,  39,  39,  35,  35,  35,  35,
+	  91,  91,  90,  90,  86,  87,  86,  86,
+	 183, 183, 182, 182, 178, 179, 178, 178,
+	 234, 234, 234, 234, 230, 230, 229, 230,
+	  21,  22,  21,  21,  17,  17,  17,  17,
+	  73,  73,  72,  72,  68,  69,  68,  68,
+	 165, 165, 164, 164, 161, 161, 160, 160,
+	 216, 216, 216, 216, 212, 212, 211, 212,
+	  44,  44,  44,  44,  40,  40,  40,  40,
+	  95,  96,  95,  95,  91,  91,  91,  91,
+	 187, 188, 187, 187, 183, 183, 183, 183,
+	 239, 239, 238, 239, 235, 235, 234, 234,
+	  26,  26,  26,  26,  22,  22,  22,  22,
+	  77,  78,  77,  77,  73,  73,  73,  73,
+	 170, 170, 169, 169, 165, 165, 165, 165,
+	 221, 221, 220, 221, 217, 217, 216, 216,
+	  39,  39,  38,  38,  34,  35,  34,  34,
+	  90,  90,  90,  90,  86,  86,  85,  85,
+	 182, 182, 182, 182, 178, 178, 177, 178,
+	 233, 233, 233, 233, 229, 229, 229, 229,
+	  21,  21,  20,  20,  16,  17,  16,  16,
+	  72,  72,  72,  72,  68,  68,  67,  68,
+	 164, 164, 164, 164, 160, 160, 159, 160,
+	 215, 215, 215, 215, 211, 211, 211, 211,
+	  43,  44,  43,  43,  39,  39,  39,  39,
+	  95,  95,  94,  94,  91,  91,  90,  90,
+	 187, 187, 186, 187, 183, 183, 182, 182,
+	 238, 238, 238, 238, 234, 234, 233, 234,
+	  25,  26,  25,  25,  21,  21,  21,  21,
+	  77,  77,  76,  77,  73,  73,  72,  72,
+	 169, 169, 168, 169, 165, 165, 164, 164,
+	 220, 220, 220, 220, 216, 216, 215, 216,
+	  39,  39,  41,  41,  26,  26,  28,  28,
+	 139, 139, 141, 141, 126, 125, 128, 128,
+	 139, 139, 141, 141, 126, 125, 128, 127,
+	 238, 238, 240, 240, 225, 225, 227, 227,
+	  26,  26,  28,  28,  13,  13,  15,  15,
+	 126, 125, 128, 128, 112, 112, 115, 114,
+	 126, 125, 128, 127, 112, 112, 115, 114,
+	 225, 225, 227, 227, 212, 212, 214, 214,
+	  41,  41,  44,  43,  28,  28,  30,  30,
+	 141, 141, 143, 143, 128, 128, 130, 130,
+	 141, 141, 143, 143, 128, 127, 130, 130,
+	 240, 240, 242, 242, 227, 227, 229, 229,
+	  28,  28,  30,  30,  15,  15,  17,  17,
+	 128, 128, 130, 130, 115, 114, 117, 116,
+	 128, 127, 130, 130, 115, 114, 117, 116,
+	 227, 227, 229, 229, 214, 214, 216, 216,
+	  39,  39,  41,  41,  26,  26,  28,  28,
+	 139, 138, 141, 140, 125, 125, 128, 127,
+	 139, 138, 141, 140, 125, 125, 127, 127,
+	 238, 238, 240, 240, 225, 225, 227, 227,
+	  26,  26,  28,  28,  13,  13,  15,  15,
+	 125, 125, 128, 127, 112, 112, 114, 114,
+	 125, 125, 127, 127, 112, 112, 114, 114,
+	 225, 225, 227, 227, 212, 211, 214, 214,
+	  41,  41,  43,  43,  28,  28,  30,  30,
+	 141, 140, 143, 143, 128, 127, 130, 129,
+	 141, 140, 143, 143, 127, 127, 130, 129,
+	 240, 240, 242, 242, 227, 227, 229, 229,
+	  28,  28,  30,  30,  15,  15,  17,  17,
+	 128, 127, 130, 129, 114, 114, 116, 116,
+	 127, 127, 130, 129, 114, 114, 116, 116,
+	 227, 227, 229, 229, 214, 214, 216, 216,
+	  39,  39,  44,  43,  21,  21,  26,  25,
+	 183, 182, 187, 187, 165, 164, 170, 169,
+	  91,  90,  95,  95,  73,  72,  77,  77,
+	 234, 233, 239, 238, 216, 215, 221, 220,
+	  35,  34,  40,  39,  17,  16,  22,  21,
+	 178, 178, 183, 183, 161, 160, 165, 165,
+	  86,  86,  91,  91,  68,  68,  73,  73,
+	 230, 229, 235, 234, 212, 211, 217, 216,
+	  39,  38,  44,  43,  21,  20,  26,  25,
+	 182, 182, 187, 186, 164, 164, 169, 168,
+	  90,  90,  95,  94,  72,  72,  77,  76,
+	 234, 233, 238, 238, 216, 215, 220, 220,
+	  35,  34,  40,  39,  17,  16,  22,  21,
+	 178, 177, 183, 182, 160, 159, 165, 164,
+	  86,  85,  91,  90,  68,  67,  73,  72,
+	 229, 229, 234, 233, 211, 211, 216, 215,
+	  40,  39,  44,  44,  22,  21,  26,  26,
+	 183, 182, 188, 187, 165, 164, 170, 169,
+	  91,  90,  96,  95,  73,  72,  78,  77,
+	 234, 233, 239, 238, 216, 215, 221, 220,
+	  35,  35,  40,  39,  17,  17,  22,  21,
+	 179, 178, 183, 183, 161, 160, 165, 165,
+	  87,  86,  91,  91,  69,  68,  73,  73,
+	 230, 229, 235, 234, 212, 211, 217, 216,
+	  39,  38,  44,  43,  21,  20,  26,  25,
+	 182, 182, 187, 187, 164, 164, 169, 169,
+	  90,  90,  95,  94,  72,  72,  77,  77,
+	 234, 233, 239, 238, 216, 215, 221, 220,
+	  35,  34,  40,  39,  17,  16,  22,  21,
+	 178, 178, 183, 182, 160, 160, 165, 164,
+	  86,  85,  91,  90,  68,  68,  73,  72,
+	 230, 229, 234, 234, 212, 211, 216, 216,
+	  39,  38,  45,  44,  28,  27,  34,  33,
+	 209, 208, 215, 213, 198, 196, 203, 202,
+	  51,  50,  57,  56,  40,  39,  46,  44,
+	 221, 219, 227, 225, 209, 208, 215, 214,
+	  42,  41,  48,  47,  31,  30,  37,  36,
+	 212, 211, 218, 216, 201, 199, 206, 205,
+	  54,  53,  60,  59,  43,  42,  49,  47,
+	 224, 222, 230, 228, 212, 211, 218, 217,
+	  38,  37,  44,  42,  27,  25,  32,  31,
+	 207, 206, 213, 212, 196, 195, 202, 201,
+	  50,  48,  56,  54,  38,  37,  44,  43,
+	 219, 218, 225, 224, 208, 207, 214, 212,
+	  41,  40,  47,  45,  30,  28,  35,  34,
+	 210, 209, 216, 215, 199, 198, 205, 204,
+	  53,  51,  59,  57,  41,  40,  47,  46,
+	 222, 221, 228, 227, 211, 210, 217, 215,
+	  40,  38,  45,  44,  28,  27,  34,  33,
+	 209, 208, 215, 214, 198, 196, 204, 202,
+	  51,  50,  57,  56,  40,  39,  46,  45,
+	 221, 220, 227, 225, 210, 208, 215, 214,
+	  43,  41,  48,  47,  31,  30,  37,  36,
+	 212, 211, 218, 217, 201, 199, 207, 205,
+	  54,  53,  60,  59,  43,  42,  49,  48,
+	 224, 223, 230, 228, 213, 211, 218, 217,
+	  38,  37,  44,  43,  27,  25,  33,  31,
+	 208, 206, 213, 212, 196, 195, 202, 201,
+	  50,  49,  56,  54,  39,  37,  44,  43,
+	 219, 218, 225, 224, 208, 207, 214, 213,
+	  41,  40,  47,  46,  30,  28,  36,  34,
+	 211, 209, 216, 215, 199, 198, 205, 204,
+	  53,  52,  59,  57,  42,  40,  47,  46,
+	 222, 221, 228, 227, 211, 210, 217, 216
+};
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_hapn4800.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_hapn4800.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_hapn4800.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_hapn4800.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,93 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * hapn4800 specific tables
+ */
+
+static unsigned char hapn48_txfilt_8[] = {
+	 127, 127,  92,  91, 151, 150, 115, 114,
+	 141, 140, 105, 104, 164, 163, 128, 128,
+	 128, 128,  63,  63, 193, 194, 129, 129,
+	 126, 126,  61,  62, 192, 192, 127, 127,
+	 128, 129,  37,  38, 224, 226, 134, 135,
+	 120, 121,  29,  31, 217, 218, 126, 127,
+	 128, 132,  19,  24, 239, 243, 130, 135,
+	 120, 125,  12,  16, 231, 236, 123, 127,
+	 127, 135,  16,  24, 236, 243, 125, 132,
+	 123, 130,  12,  19, 231, 239, 120, 128,
+	 127, 135,  31,  38, 218, 226, 121, 129,
+	 126, 134,  29,  37, 217, 224, 120, 128,
+	 127, 129,  62,  63, 192, 194, 126, 128,
+	 127, 129,  61,  63, 192, 193, 126, 128,
+	 128, 114, 104,  91, 163, 150, 140, 127,
+	 128, 115, 105,  92, 164, 151, 141, 127
+};
+
+static unsigned char hapn48_txfilt_10[] = {
+	 127, 127,  94,  94, 146, 146, 113, 112,
+	 143, 142, 109, 109, 161, 161, 128, 128,
+	 128, 127,  72,  72, 182, 182, 126, 126,
+	 129, 129,  73,  73, 183, 183, 128, 127,
+	 127, 128,  49,  50, 211, 212, 133, 133,
+	 122, 122,  43,  44, 205, 206, 127, 128,
+	 127, 130,  30,  33, 231, 233, 133, 136,
+	 119, 122,  22,  24, 222, 225, 125, 128,
+	 127, 133,  18,  23, 240, 245, 130, 135,
+	 120, 125,  10,  15, 232, 237, 122, 128,
+	 128, 135,  15,  23, 237, 245, 125, 133,
+	 122, 130,  10,  18, 232, 240, 120, 127,
+	 128, 136,  24,  33, 225, 233, 122, 130,
+	 125, 133,  22,  30, 222, 231, 119, 127,
+	 128, 133,  44,  50, 206, 212, 122, 128,
+	 127, 133,  43,  49, 205, 211, 122, 127,
+	 127, 126,  73,  72, 183, 182, 129, 127,
+	 128, 126,  73,  72, 183, 182, 129, 128,
+	 128, 112, 109,  94, 161, 146, 142, 127,
+	 128, 113, 109,  94, 161, 146, 143, 127
+};
+
+static unsigned char hapn48_txfilt_pm8[] = {
+	  12,   6, 242, 237,  18,  12, 248, 243,
+	  12,   7, 243, 237,  18,  13, 249, 243,
+	  12,  18, 243, 248,   7,  12, 237, 243,
+	  12,  18, 243, 248,   7,  12, 237, 243,
+	  12,  39, 225, 252,   3,  30, 216, 243,
+	  12,  39, 225, 252,   3,  30, 216, 243,
+	  11,  70, 193, 252,   3,  62, 185, 244,
+	  11,  70, 193, 252,   3,  62, 185, 244,
+	  11, 109, 152, 250,   5, 103, 146, 244,
+	  11, 109, 152, 250,   5, 103, 146, 244,
+	   9, 150, 107, 248,   7, 148, 105, 246,
+	   9, 150, 107, 248,   7, 148, 105, 246,
+	   8, 189,  66, 248,   7, 189,  66, 247,
+	   8, 189,  66, 248,   7, 189,  66, 247,
+	   7, 221,  34, 248,   7, 221,  34, 248,
+	   7, 221,  34, 248,   7, 221,  34, 248
+};
+
+static unsigned char hapn48_txfilt_pm10[] = {
+	  12,  12,   8,   8, 243, 243, 238, 238,
+	  17,  17,  12,  12, 247, 247, 243, 243,
+	   8,   8,  12,  13, 238, 239, 243, 243,
+	  12,  12,  16,  17, 242, 243, 247, 247,
+	   8,   8,  28,  28, 227, 227, 247, 247,
+	   8,   8,  28,  28, 227, 227, 247, 247,
+	   9,   8,  50,  50, 207, 206, 248, 248,
+	   7,   7,  49,  48, 205, 205, 247, 246,
+	  10,   9,  79,  78, 179, 178, 249, 248,
+	   7,   6,  77,  76, 177, 176, 246, 245,
+	  11,   8, 113, 110, 147, 144, 249, 246,
+	   9,   6, 111, 108, 145, 142, 247, 244,
+	  12,   7, 148, 143, 114, 109, 250, 245,
+	  10,   5, 146, 141, 112, 107, 248, 243,
+	  12,   5, 181, 174,  82,  74, 251, 244,
+	  11,   4, 181, 173,  81,  74, 250, 243,
+	  12,   3, 210, 201,  54,  45, 252, 243,
+	  12,   3, 210, 201,  54,  45, 252, 243,
+	  12,   4, 231, 223,  32,  24, 251, 243,
+	  12,   4, 231, 223,  32,  24, 251, 243
+};
+
diff -uNr linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_psk4800.h linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_psk4800.h
--- linux-2.4.37.9/drivers/net/hamradio/soundmodem/sm_tbl_psk4800.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/hamradio/soundmodem/sm_tbl_psk4800.h	2010-02-18 08:20:26.000000000 -0500
@@ -0,0 +1,373 @@
+/*
+ * THIS FILE IS GENERATED AUTOMATICALLY BY ./gentbl, DO NOT EDIT!
+ */
+
+
+/*
+ * psk4800 specific tables
+ */
+#define PSK48_TXF_OVERSAMPLING 5
+#define PSK48_TXF_NUMSAMPLES 16
+
+#define PSK48_SAMPLERATE  8000
+#define PSK48_CAR_FREQ    2000
+#define PSK48_PSK_LEN     5
+#define PSK48_RXF_LEN     64
+#define PSK48_PHASEINC    (0x10000*PSK48_CAR_FREQ/PSK48_SAMPLERATE)
+#define PSK48_SPHASEINC   (0x10000/(2*PSK48_PSK_LEN))
+
+static const short psk48_tx_table[PSK48_TXF_OVERSAMPLING*PSK48_TXF_NUMSAMPLES*8*2] = {
+	   -12,     -8,      0,      8,     12,      8,      0,     -8, 
+	     0,     -8,    -12,     -8,      0,      8,     12,      8, 
+	   -20,    -14,      0,     14,     20,     14,      0,    -14, 
+	     0,    -14,    -20,    -14,      0,     14,     20,     14, 
+	   -45,    -32,      0,     32,     45,     32,      0,    -32, 
+	     0,    -32,    -45,    -32,      0,     32,     45,     32, 
+	   -92,    -65,      0,     65,     92,     65,      0,    -65, 
+	     0,    -65,    -92,    -65,      0,     65,     92,     65, 
+	  -172,   -122,      0,    122,    172,    122,      0,   -122, 
+	     0,   -122,   -172,   -122,      0,    122,    172,    122, 
+	  -307,   -217,      0,    217,    307,    217,      0,   -217, 
+	     0,   -217,   -307,   -217,      0,    217,    307,    217, 
+	  -564,   -399,      0,    399,    564,    399,      0,   -399, 
+	     0,   -399,   -564,   -399,      0,    399,    564,    399, 
+	 -1322,   -935,      0,    935,   1322,    935,      0,   -935, 
+	     0,   -935,  -1322,   -935,      0,    935,   1322,    935, 
+	 12256,   8666,      0,  -8666, -12256,  -8666,      0,   8666, 
+	     0,   8666,  12256,   8666,      0,  -8666, -12256,  -8666, 
+	  1066,    754,      0,   -754,  -1066,   -754,      0,    754, 
+	     0,    754,   1066,    754,      0,   -754,  -1066,   -754, 
+	   495,    350,      0,   -350,   -495,   -350,      0,    350, 
+	     0,    350,    495,    350,      0,   -350,   -495,   -350, 
+	   273,    193,      0,   -193,   -273,   -193,      0,    193, 
+	     0,    193,    273,    193,      0,   -193,   -273,   -193, 
+	   153,    108,      0,   -108,   -153,   -108,      0,    108, 
+	     0,    108,    153,    108,      0,   -108,   -153,   -108, 
+	    81,     57,      0,    -57,    -81,    -57,      0,     57, 
+	     0,     57,     81,     57,      0,    -57,    -81,    -57, 
+	    38,     27,      0,    -27,    -38,    -27,      0,     27, 
+	     0,     27,     38,     27,      0,    -27,    -38,    -27, 
+	    17,     12,      0,    -12,    -17,    -12,      0,     12, 
+	     0,     12,     17,     12,      0,    -12,    -17,    -12, 
+	   -20,    -14,      0,     14,     20,     14,      0,    -14, 
+	     0,    -14,    -20,    -14,      0,     14,     20,     14, 
+	   -38,    -27,      0,     27,     38,     27,      0,    -27, 
+	     0,    -27,    -38,    -27,      0,     27,     38,     27, 
+	   -85,    -60,      0,     60,     85,     60,      0,    -60, 
+	     0,    -60,    -85,    -60,      0,     60,     85,     60, 
+	  -170,   -120,      0,    120,    170,    120,      0,   -120, 
+	     0,   -120,   -170,   -120,      0,    120,    170,    120, 
+	  -314,   -222,      0,    222,    314,    222,      0,   -222, 
+	     0,   -222,   -314,   -222,      0,    222,    314,    222, 
+	  -557,   -394,      0,    394,    557,    394,      0,   -394, 
+	     0,   -394,   -557,   -394,      0,    394,    557,    394, 
+	 -1048,   -741,      0,    741,   1048,    741,      0,   -741, 
+	     0,   -741,  -1048,   -741,      0,    741,   1048,    741, 
+	 -2783,  -1968,      0,   1968,   2783,   1968,      0,  -1968, 
+	     0,  -1968,  -2783,  -1968,      0,   1968,   2783,   1968, 
+	  6591,   4660,      0,  -4660,  -6591,  -4660,      0,   4660, 
+	     0,   4660,   6591,   4660,      0,  -4660,  -6591,  -4660, 
+	  1434,   1014,      0,  -1014,  -1434,  -1014,      0,   1014, 
+	     0,   1014,   1434,   1014,      0,  -1014,  -1434,  -1014, 
+	   707,    500,      0,   -500,   -707,   -500,      0,    500, 
+	     0,    500,    707,    500,      0,   -500,   -707,   -500, 
+	   395,    279,      0,   -279,   -395,   -279,      0,    279, 
+	     0,    279,    395,    279,      0,   -279,   -395,   -279, 
+	   219,    155,      0,   -155,   -219,   -155,      0,    155, 
+	     0,    155,    219,    155,      0,   -155,   -219,   -155, 
+	   114,     80,      0,    -80,   -114,    -80,      0,     80, 
+	     0,     80,    114,     80,      0,    -80,   -114,    -80, 
+	    53,     37,      0,    -37,    -53,    -37,      0,     37, 
+	     0,     37,     53,     37,      0,    -37,    -53,    -37, 
+	    25,     17,      0,    -17,    -25,    -17,      0,     17, 
+	     0,     17,     25,     17,      0,    -17,    -25,    -17, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	     0,      0,      0,      0,      0,      0,      0,      0, 
+	    25,     17,      0,    -17,    -25,    -17,      0,     17, 
+	     0,     17,     25,     17,      0,    -17,    -25,    -17, 
+	    53,     37,      0,    -37,    -53,    -37,      0,     37, 
+	     0,     37,     53,     37,      0,    -37,    -53,    -37, 
+	   114,     80,      0,    -80,   -114,    -80,      0,     80, 
+	     0,     80,    114,     80,      0,    -80,   -114,    -80, 
+	   219,    155,      0,   -155,   -219,   -155,      0,    155, 
+	     0,    155,    219,    155,      0,   -155,   -219,   -155, 
+	   395,    279,      0,   -279,   -395,   -279,      0,    279, 
+	     0,    279,    395,    279,      0,   -279,   -395,   -279, 
+	   707,    500,      0,   -500,   -707,   -500,      0,    500, 
+	     0,    500,    707,    500,      0,   -500,   -707,   -500, 
+	  1434,   1014,      0,  -1014,  -1434,  -1014,      0,   1014, 
+	     0,   1014,   1434,   1014,      0,  -1014,  -1434,  -1014, 
+	  6591,   4660,      0,  -4660,  -6591,  -4660,      0,   4660, 
+	     0,   4660,   6591,   4660,      0,  -4660,  -6591,  -4660, 
+	 -2783,  -1968,      0,   1968,   2783,   1968,      0,  -1968, 
+	     0,  -1968,  -2783,  -1968,      0,   1968,   2783,   1968, 
+	 -1048,   -741,      0,    741,   1048,    741,      0,   -741, 
+	     0,   -741,  -1048,   -741,      0,    741,   1048,    741, 
+	  -557,   -394,      0,    394,    557,    394,      0,   -394, 
+	     0,   -394,   -557,   -394,      0,    394,    557,    394, 
+	  -314,   -222,      0,    222,    314,    222,      0,   -222, 
+	     0,   -222,   -314,   -222,      0,    222,    314,    222, 
+	  -170,   -120,      0,    120,    170,    120,      0,   -120, 
+	     0,   -120,   -170,   -120,      0,    120,    170,    120, 
+	   -85,    -60,      0,     60,     85,     60,      0,    -60, 
+	     0,    -60,    -85,    -60,      0,     60,     85,     60, 
+	   -38,    -27,      0,     27,     38,     27,      0,    -27, 
+	     0,    -27,    -38,    -27,      0,     27,     38,     27, 
+	   -20,    -14,      0,     14,     20,     14,      0,    -14, 
+	     0,    -14,    -20,    -14,      0,     14,     20,     14, 
+	    17,     12,      0,    -12,    -17,    -12,      0,     12, 
+	     0,     12,     17,     12,      0,    -12,    -17,    -12, 
+	    38,     27,      0,    -27,    -38,    -27,      0,     27, 
+	     0,     27,     38,     27,      0,    -27,    -38,    -27, 
+	    81,     57,      0,    -57,    -81,    -57,      0,     57, 
+	     0,     57,     81,     57,      0,    -57,    -81,    -57, 
+	   153,    108,      0,   -108,   -153,   -108,      0,    108, 
+	     0,    108,    153,    108,      0,   -108,   -153,   -108, 
+	   273,    193,      0,   -193,   -273,   -193,      0,    193, 
+	     0,    193,    273,    193,      0,   -193,   -273,   -193, 
+	   495,    350,      0,   -350,   -495,   -350,      0,    350, 
+	     0,    350,    495,    350,      0,   -350,   -495,   -350, 
+	  1066,    754,      0,   -754,  -1066,   -754,      0,    754, 
+	     0,    754,   1066,    754,      0,   -754,  -1066,   -754, 
+	 12256,   8666,      0,  -8666, -12256,  -8666,      0,   8666, 
+	     0,   8666,  12256,   8666,      0,  -8666, -12256,  -8666, 
+	 -1322,   -935,      0,    935,   1322,    935,      0,   -935, 
+	     0,   -935,  -1322,   -935,      0,    935,   1322,    935, 
+	  -564,   -399,      0,    399,    564,    399,      0,   -399, 
+	     0,   -399,   -564,   -399,      0,    399,    564,    399, 
+	  -307,   -217,      0,    217,    307,    217,      0,   -217, 
+	     0,   -217,   -307,   -217,      0,    217,    307,    217, 
+	  -172,   -122,      0,    122,    172,    122,      0,   -122, 
+	     0,   -122,   -172,   -122,      0,    122,    172,    122, 
+	   -92,    -65,      0,     65,     92,     65,      0,    -65, 
+	     0,    -65,    -92,    -65,      0,     65,     92,     65, 
+	   -45,    -32,      0,     32,     45,     32,      0,    -32, 
+	     0,    -32,    -45,    -32,      0,     32,     45,     32, 
+	   -20,    -14,      0,     14,     20,     14,      0,    -14, 
+	     0,    -14,    -20,    -14,      0,     14,     20,     14, 
+	   -12,     -8,      0,      8,     12,      8,      0,     -8, 
+	     0,     -8,    -12,     -8,      0,      8,     12,      8
+};
+
+static const short psk48_rx_coeff[PSK48_RXF_LEN] = {
+	    -7,    11,    28,    35,    24,    -6,   -48,   -79,
+	   -76,   -22,    68,   157,   186,   114,   -53,  -250,
+	  -370,  -315,   -58,   318,   636,   694,   371,  -281,
+	 -1014, -1444, -1200,   -86,  1793,  4033,  6035,  7215,
+	  7215,  6035,  4033,  1793,   -86, -1200, -1444, -1014,
+	  -281,   371,   694,   636,   318,   -58,  -315,  -370,
+	  -250,   -53,   114,   186,   157,    68,   -22,   -76,
+	   -79,   -48,    -6,    24,    35,    28,    11,    -7
+};
+
+
+/*
+ * more accurate cosine table
+ */
+
+static const short costab[256] = {
+	 32767,  32757,  32727,  32678,  32609,  32520,  32412,  32284, 
+	 32137,  31970,  31785,  31580,  31356,  31113,  30851,  30571, 
+	 30272,  29955,  29621,  29268,  28897,  28510,  28105,  27683, 
+	 27244,  26789,  26318,  25831,  25329,  24811,  24278,  23731, 
+	 23169,  22594,  22004,  21402,  20787,  20159,  19519,  18867, 
+	 18204,  17530,  16845,  16150,  15446,  14732,  14009,  13278, 
+	 12539,  11792,  11038,  10278,   9511,   8739,   7961,   7179, 
+	  6392,   5601,   4807,   4011,   3211,   2410,   1607,    804, 
+	     0,   -804,  -1607,  -2410,  -3211,  -4011,  -4807,  -5601, 
+	 -6392,  -7179,  -7961,  -8739,  -9511, -10278, -11038, -11792, 
+	-12539, -13278, -14009, -14732, -15446, -16150, -16845, -17530, 
+	-18204, -18867, -19519, -20159, -20787, -21402, -22004, -22594, 
+	-23169, -23731, -24278, -24811, -25329, -25831, -26318, -26789, 
+	-27244, -27683, -28105, -28510, -28897, -29268, -29621, -29955, 
+	-30272, -30571, -30851, -31113, -31356, -31580, -31785, -31970, 
+	-32137, -32284, -32412, -32520, -32609, -32678, -32727, -32757, 
+	-32767, -32757, -32727, -32678, -32609, -32520, -32412, -32284, 
+	-32137, -31970, -31785, -31580, -31356, -31113, -30851, -30571, 
+	-30272, -29955, -29621, -29268, -28897, -28510, -28105, -27683, 
+	-27244, -26789, -26318, -25831, -25329, -24811, -24278, -23731, 
+	-23169, -22594, -22004, -21402, -20787, -20159, -19519, -18867, 
+	-18204, -17530, -16845, -16150, -15446, -14732, -14009, -13278, 
+	-12539, -11792, -11038, -10278,  -9511,  -8739,  -7961,  -7179, 
+	 -6392,  -5601,  -4807,  -4011,  -3211,  -2410,  -1607,   -804, 
+	     0,    804,   1607,   2410,   3211,   4011,   4807,   5601, 
+	  6392,   7179,   7961,   8739,   9511,  10278,  11038,  11792, 
+	 12539,  13278,  14009,  14732,  15446,  16150,  16845,  17530, 
+	 18204,  18867,  19519,  20159,  20787,  21402,  22004,  22594, 
+	 23169,  23731,  24278,  24811,  25329,  25831,  26318,  26789, 
+	 27244,  27683,  28105,  28510,  28897,  29268,  29621,  29955, 
+	 30272,  30571,  30851,  31113,  31356,  31580,  31785,  31970, 
+	 32137,  32284,  32412,  32520,  32609,  32678,  32727,  32757
+};
+
+#define COS(x) costab[((x)>>8)&0xff]
+#define SIN(x) COS((x)+0xc000)
+
+
+/*
+ * arctan table (indexed by i/q; should really be indexed by i/(i+q)
+ */
+#define ATAN_TABLEN 1024
+
+static const unsigned short atan_tab[ATAN_TABLEN+2] = {
+	     0,     10,     20,     30,     40,     50,     61,     71, 
+	    81,     91,    101,    112,    122,    132,    142,    152, 
+	   162,    173,    183,    193,    203,    213,    224,    234, 
+	   244,    254,    264,    274,    285,    295,    305,    315, 
+	   325,    336,    346,    356,    366,    376,    386,    397, 
+	   407,    417,    427,    437,    447,    458,    468,    478, 
+	   488,    498,    508,    519,    529,    539,    549,    559, 
+	   569,    579,    590,    600,    610,    620,    630,    640, 
+	   651,    661,    671,    681,    691,    701,    711,    722, 
+	   732,    742,    752,    762,    772,    782,    792,    803, 
+	   813,    823,    833,    843,    853,    863,    873,    884, 
+	   894,    904,    914,    924,    934,    944,    954,    964, 
+	   974,    985,    995,   1005,   1015,   1025,   1035,   1045, 
+	  1055,   1065,   1075,   1085,   1096,   1106,   1116,   1126, 
+	  1136,   1146,   1156,   1166,   1176,   1186,   1196,   1206, 
+	  1216,   1226,   1236,   1246,   1256,   1266,   1277,   1287, 
+	  1297,   1307,   1317,   1327,   1337,   1347,   1357,   1367, 
+	  1377,   1387,   1397,   1407,   1417,   1427,   1437,   1447, 
+	  1457,   1467,   1477,   1487,   1497,   1507,   1517,   1527, 
+	  1537,   1547,   1556,   1566,   1576,   1586,   1596,   1606, 
+	  1616,   1626,   1636,   1646,   1656,   1666,   1676,   1686, 
+	  1696,   1706,   1715,   1725,   1735,   1745,   1755,   1765, 
+	  1775,   1785,   1795,   1805,   1814,   1824,   1834,   1844, 
+	  1854,   1864,   1874,   1884,   1893,   1903,   1913,   1923, 
+	  1933,   1943,   1952,   1962,   1972,   1982,   1992,   2002, 
+	  2011,   2021,   2031,   2041,   2051,   2060,   2070,   2080, 
+	  2090,   2100,   2109,   2119,   2129,   2139,   2148,   2158, 
+	  2168,   2178,   2187,   2197,   2207,   2217,   2226,   2236, 
+	  2246,   2255,   2265,   2275,   2285,   2294,   2304,   2314, 
+	  2323,   2333,   2343,   2352,   2362,   2372,   2381,   2391, 
+	  2401,   2410,   2420,   2430,   2439,   2449,   2459,   2468, 
+	  2478,   2488,   2497,   2507,   2516,   2526,   2536,   2545, 
+	  2555,   2564,   2574,   2583,   2593,   2603,   2612,   2622, 
+	  2631,   2641,   2650,   2660,   2669,   2679,   2688,   2698, 
+	  2708,   2717,   2727,   2736,   2746,   2755,   2765,   2774, 
+	  2784,   2793,   2802,   2812,   2821,   2831,   2840,   2850, 
+	  2859,   2869,   2878,   2887,   2897,   2906,   2916,   2925, 
+	  2935,   2944,   2953,   2963,   2972,   2981,   2991,   3000, 
+	  3010,   3019,   3028,   3038,   3047,   3056,   3066,   3075, 
+	  3084,   3094,   3103,   3112,   3122,   3131,   3140,   3149, 
+	  3159,   3168,   3177,   3187,   3196,   3205,   3214,   3224, 
+	  3233,   3242,   3251,   3260,   3270,   3279,   3288,   3297, 
+	  3307,   3316,   3325,   3334,   3343,   3352,   3362,   3371, 
+	  3380,   3389,   3398,   3407,   3416,   3426,   3435,   3444, 
+	  3453,   3462,   3471,   3480,   3489,   3498,   3508,   3517, 
+	  3526,   3535,   3544,   3553,   3562,   3571,   3580,   3589, 
+	  3598,   3607,   3616,   3625,   3634,   3643,   3652,   3661, 
+	  3670,   3679,   3688,   3697,   3706,   3715,   3724,   3733, 
+	  3742,   3751,   3759,   3768,   3777,   3786,   3795,   3804, 
+	  3813,   3822,   3831,   3839,   3848,   3857,   3866,   3875, 
+	  3884,   3893,   3901,   3910,   3919,   3928,   3937,   3945, 
+	  3954,   3963,   3972,   3981,   3989,   3998,   4007,   4016, 
+	  4024,   4033,   4042,   4051,   4059,   4068,   4077,   4085, 
+	  4094,   4103,   4112,   4120,   4129,   4138,   4146,   4155, 
+	  4164,   4172,   4181,   4189,   4198,   4207,   4215,   4224, 
+	  4233,   4241,   4250,   4258,   4267,   4275,   4284,   4293, 
+	  4301,   4310,   4318,   4327,   4335,   4344,   4352,   4361, 
+	  4369,   4378,   4386,   4395,   4403,   4412,   4420,   4429, 
+	  4437,   4446,   4454,   4462,   4471,   4479,   4488,   4496, 
+	  4505,   4513,   4521,   4530,   4538,   4546,   4555,   4563, 
+	  4572,   4580,   4588,   4597,   4605,   4613,   4622,   4630, 
+	  4638,   4646,   4655,   4663,   4671,   4680,   4688,   4696, 
+	  4704,   4713,   4721,   4729,   4737,   4745,   4754,   4762, 
+	  4770,   4778,   4787,   4795,   4803,   4811,   4819,   4827, 
+	  4836,   4844,   4852,   4860,   4868,   4876,   4884,   4892, 
+	  4901,   4909,   4917,   4925,   4933,   4941,   4949,   4957, 
+	  4965,   4973,   4981,   4989,   4997,   5005,   5013,   5021, 
+	  5029,   5037,   5045,   5053,   5061,   5069,   5077,   5085, 
+	  5093,   5101,   5109,   5117,   5125,   5133,   5141,   5148, 
+	  5156,   5164,   5172,   5180,   5188,   5196,   5204,   5211, 
+	  5219,   5227,   5235,   5243,   5251,   5258,   5266,   5274, 
+	  5282,   5290,   5297,   5305,   5313,   5321,   5328,   5336, 
+	  5344,   5352,   5359,   5367,   5375,   5383,   5390,   5398, 
+	  5406,   5413,   5421,   5429,   5436,   5444,   5452,   5459, 
+	  5467,   5475,   5482,   5490,   5497,   5505,   5513,   5520, 
+	  5528,   5535,   5543,   5550,   5558,   5566,   5573,   5581, 
+	  5588,   5596,   5603,   5611,   5618,   5626,   5633,   5641, 
+	  5648,   5656,   5663,   5671,   5678,   5686,   5693,   5700, 
+	  5708,   5715,   5723,   5730,   5738,   5745,   5752,   5760, 
+	  5767,   5774,   5782,   5789,   5797,   5804,   5811,   5819, 
+	  5826,   5833,   5841,   5848,   5855,   5862,   5870,   5877, 
+	  5884,   5892,   5899,   5906,   5913,   5921,   5928,   5935, 
+	  5942,   5949,   5957,   5964,   5971,   5978,   5985,   5993, 
+	  6000,   6007,   6014,   6021,   6028,   6036,   6043,   6050, 
+	  6057,   6064,   6071,   6078,   6085,   6093,   6100,   6107, 
+	  6114,   6121,   6128,   6135,   6142,   6149,   6156,   6163, 
+	  6170,   6177,   6184,   6191,   6198,   6205,   6212,   6219, 
+	  6226,   6233,   6240,   6247,   6254,   6261,   6268,   6275, 
+	  6282,   6288,   6295,   6302,   6309,   6316,   6323,   6330, 
+	  6337,   6344,   6350,   6357,   6364,   6371,   6378,   6385, 
+	  6391,   6398,   6405,   6412,   6419,   6425,   6432,   6439, 
+	  6446,   6453,   6459,   6466,   6473,   6480,   6486,   6493, 
+	  6500,   6506,   6513,   6520,   6527,   6533,   6540,   6547, 
+	  6553,   6560,   6567,   6573,   6580,   6586,   6593,   6600, 
+	  6606,   6613,   6620,   6626,   6633,   6639,   6646,   6653, 
+	  6659,   6666,   6672,   6679,   6685,   6692,   6698,   6705, 
+	  6711,   6718,   6724,   6731,   6737,   6744,   6750,   6757, 
+	  6763,   6770,   6776,   6783,   6789,   6796,   6802,   6809, 
+	  6815,   6821,   6828,   6834,   6841,   6847,   6853,   6860, 
+	  6866,   6873,   6879,   6885,   6892,   6898,   6904,   6911, 
+	  6917,   6923,   6930,   6936,   6942,   6949,   6955,   6961, 
+	  6967,   6974,   6980,   6986,   6992,   6999,   7005,   7011, 
+	  7017,   7024,   7030,   7036,   7042,   7048,   7055,   7061, 
+	  7067,   7073,   7079,   7086,   7092,   7098,   7104,   7110, 
+	  7116,   7122,   7129,   7135,   7141,   7147,   7153,   7159, 
+	  7165,   7171,   7177,   7183,   7190,   7196,   7202,   7208, 
+	  7214,   7220,   7226,   7232,   7238,   7244,   7250,   7256, 
+	  7262,   7268,   7274,   7280,   7286,   7292,   7298,   7304, 
+	  7310,   7316,   7322,   7328,   7333,   7339,   7345,   7351, 
+	  7357,   7363,   7369,   7375,   7381,   7387,   7392,   7398, 
+	  7404,   7410,   7416,   7422,   7428,   7433,   7439,   7445, 
+	  7451,   7457,   7462,   7468,   7474,   7480,   7486,   7491, 
+	  7497,   7503,   7509,   7514,   7520,   7526,   7532,   7537, 
+	  7543,   7549,   7555,   7560,   7566,   7572,   7577,   7583, 
+	  7589,   7594,   7600,   7606,   7611,   7617,   7623,   7628, 
+	  7634,   7640,   7645,   7651,   7657,   7662,   7668,   7673, 
+	  7679,   7685,   7690,   7696,   7701,   7707,   7712,   7718, 
+	  7724,   7729,   7735,   7740,   7746,   7751,   7757,   7762, 
+	  7768,   7773,   7779,   7784,   7790,   7795,   7801,   7806, 
+	  7812,   7817,   7823,   7828,   7833,   7839,   7844,   7850, 
+	  7855,   7861,   7866,   7871,   7877,   7882,   7888,   7893, 
+	  7898,   7904,   7909,   7914,   7920,   7925,   7931,   7936, 
+	  7941,   7947,   7952,   7957,   7963,   7968,   7973,   7978, 
+	  7984,   7989,   7994,   8000,   8005,   8010,   8015,   8021, 
+	  8026,   8031,   8036,   8042,   8047,   8052,   8057,   8063, 
+	  8068,   8073,   8078,   8083,   8089,   8094,   8099,   8104, 
+	  8109,   8115,   8120,   8125,   8130,   8135,   8140,   8145, 
+	  8151,   8156,   8161,   8166,   8171,   8176,   8181,   8186, 
+	  8192,   8192
+};
+
diff -uNr linux-2.4.37.9/drivers/net/natsemi.c linux-2.4.37.9-amithlon/drivers/net/natsemi.c
--- linux-2.4.37.9/drivers/net/natsemi.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/natsemi.c	2010-02-20 09:53:26.000000000 -0500
@@ -2591,7 +2591,7 @@
 	struct netdev_private *np = dev->priv;
 	long ioaddr = dev->base_addr;
 
-	rtnl_lock();
+
 	if (netif_running (dev)) {
 		del_timer_sync(&np->timer);
 
@@ -2627,7 +2627,7 @@
 		}
 	}
 	netif_device_detach(dev);
-	rtnl_unlock();
+
 	return 0;
 }
 
@@ -2637,7 +2637,7 @@
 	struct net_device *dev = pci_get_drvdata (pdev);
 	struct netdev_private *np = dev->priv;
 
-	rtnl_lock();
+
 	if (netif_device_present(dev))
 		goto out;
 	if (netif_running(dev)) {
@@ -2659,7 +2659,7 @@
 	}
 	netif_device_attach(dev);
 out:
-	rtnl_unlock();
+
 	return 0;
 }
 
diff -uNr linux-2.4.37.9/drivers/net/setup.c linux-2.4.37.9-amithlon/drivers/net/setup.c
--- linux-2.4.37.9/drivers/net/setup.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/setup.c	2010-02-17 20:04:06.000000000 -0500
@@ -8,7 +8,7 @@
 #include <linux/errno.h>
 #include <linux/init.h>
 #include <linux/netlink.h>
-
+#include <net/slhc.h>
 extern int slip_init_ctrl_dev(void);
 extern int x25_asy_init_ctrl_dev(void);
   
diff -uNr linux-2.4.37.9/drivers/net/winbond-840.c linux-2.4.37.9-amithlon/drivers/net/winbond-840.c
--- linux-2.4.37.9/drivers/net/winbond-840.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/net/winbond-840.c	2010-02-20 09:54:23.000000000 -0500
@@ -1656,7 +1656,7 @@
 	struct netdev_private *np = dev->priv;
 	long ioaddr = dev->base_addr;
 
-	rtnl_lock();
+
 	if (netif_running (dev)) {
 		del_timer_sync(&np->timer);
 
@@ -1683,7 +1683,7 @@
 	} else {
 		netif_device_detach(dev);
 	}
-	rtnl_unlock();
+
 	return 0;
 }
 
@@ -1692,7 +1692,7 @@
 	struct net_device *dev = pci_get_drvdata (pdev);
 	struct netdev_private *np = dev->priv;
 
-	rtnl_lock();
+
 	if (netif_device_present(dev))
 		goto out; /* device not suspended */
 	if (netif_running(dev)) {
@@ -1715,7 +1715,7 @@
 		netif_device_attach(dev);
 	}
 out:
-	rtnl_unlock();
+
 	return 0;
 }
 #endif
diff -uNr linux-2.4.37.9/drivers/pci/pci.c linux-2.4.37.9-amithlon/drivers/pci/pci.c
--- linux-2.4.37.9/drivers/pci/pci.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/pci/pci.c	2010-02-17 20:04:07.000000000 -0500
@@ -8,7 +8,16 @@
  *
  *	Copyright 1997 -- 2000 Martin Mares <mj@ucw.cz>
  */
+#define UAE_PCI_START 0x50000000
+#define UAE_PCI_END   0xb0000000
 
+#if 1
+#define PCI_OFFSET pci_offset
+#define PCI_OFFSET_BRIDGE ((PCI_OFFSET)>>16) 
+#else
+#define PCI_OFFSET 0
+#define PCI_OFFSET_BRIDGE ((PCI_OFFSET)>>16) 
+#endif
 #include <linux/config.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -24,7 +33,7 @@
 #include <linux/bitops.h>
 #include <linux/delay.h>
 #include <linux/cache.h>
-
+#include <linux/tty.h>
 #include <asm/page.h>
 #include <asm/dma.h>	/* isa_dma_bridge_buggy */
 
@@ -83,7 +92,7 @@
 		const struct pci_dev *from)
 {
 	struct list_head *n = from ? from->global_list.next : pci_devices.next;
-
+	printk("UAE: pci_find_subsys %04x %04x %04x %04x\n",vendor,device,ss_vendor,ss_device);
 	while (n != &pci_devices) {
 		struct pci_dev *dev = pci_dev_g(n);
 		if ((vendor == PCI_ANY_ID || dev->vendor == vendor) &&
@@ -664,7 +673,20 @@
 {
 	struct pci_dev *dev;
 	int count = 0;
-
+	
+	printk("OOO: Registering module %s\n",drv->name);
+	if (drv->id_table) {
+	  while (drv->id_table[count].vendor) {
+	    printk("OOO: %04x %04x  %04x %04x\n",
+		   drv->id_table[count].vendor,
+		   drv->id_table[count].device,
+		   drv->id_table[count].subvendor,
+		   drv->id_table[count].subdevice);
+	    count++;
+	  }
+	}
+	count=0;
+	
 	list_add_tail(&drv->node, &pci_drivers);
 	pci_for_each_dev(dev) {
 		if (!pci_dev_driver(dev))
@@ -1154,7 +1176,7 @@
 			child->resource[i] = child->parent->resource[i];
 		return;
 	}
-
+	dev->bridge_valid_bases=0;
 	for(i=0; i<3; i++)
 		child->resource[i] = &dev->resource[PCI_BRIDGE_RESOURCES+i];
 
@@ -1176,6 +1198,7 @@
 		res->flags = (io_base_lo & PCI_IO_RANGE_TYPE_MASK) | IORESOURCE_IO;
 		res->start = base;
 		res->end = limit + 0xfff;
+		dev->bridge_valid_bases|=1;
 	}
 
 	res = child->resource[1];
@@ -1187,6 +1210,7 @@
 		res->flags = (mem_base_lo & PCI_MEMORY_RANGE_TYPE_MASK) | IORESOURCE_MEM;
 		res->start = base;
 		res->end = limit + 0xfffff;
+		dev->bridge_valid_bases|=2;
 	}
 
 	res = child->resource[2];
@@ -1213,6 +1237,7 @@
 		res->flags = (mem_base_lo & PCI_MEMORY_RANGE_TYPE_MASK) | IORESOURCE_MEM | IORESOURCE_PREFETCH;
 		res->start = base;
 		res->end = limit + 0xfffff;
+		dev->bridge_valid_bases|=4;
 	}
 }
 
@@ -2116,7 +2141,188 @@
 	 */
 	spin_unlock_irqrestore (&pool->lock, flags);
 }
+void __init pci_fixup_uae(void)
+{
+	struct pci_dev *dev;
+	u32 maxsize;
+	u32 pci_offset;
+	u32 ok;
+	int rescount=7;
+
+	maxsize=1024*1024;
+
+	pci_for_each_dev(dev) {
+	  int i;
+	  
+	  printk(KERN_ERR "%04x %04x   hdrtype %d\n",dev->vendor,dev->device,
+		 dev->hdr_type);
+	  if (dev->hdr_type==1) {
+	    u16 tmp;
+
+	    printk(KERN_ERR "  subordinate bus: %p, valid_bases=%02x\n",dev->subordinate,dev->bridge_valid_bases);
+	    pci_read_config_word(dev, PCI_MEMORY_BASE, &tmp);
+	    printk(KERN_ERR "  mem_base=%04x\n",tmp);
+	    pci_read_config_word(dev, PCI_MEMORY_LIMIT, &tmp);
+	    printk(KERN_ERR "  mem_limit=%04x\n",tmp);
+	    pci_read_config_word(dev, PCI_PREF_MEMORY_BASE, &tmp);
+	    printk(KERN_ERR "  pref_base=%04x\n",tmp);
+	    pci_read_config_word(dev, PCI_PREF_MEMORY_LIMIT, &tmp);
+	    printk(KERN_ERR "  pref_limit=%04x\n",tmp);
+	  }
+	  for (i=0;i<rescount;i++) {
+	    if (dev->resource[i].start) {
+	      printk(KERN_ERR "resource %d: Start %08lx, end %08lx, flags %08x\n",
+		     i,dev->resource[i].start,
+		     dev->resource[i].end,
+		     dev->resource[i].flags);
+	      if (dev->resource[i].flags & IORESOURCE_MEM) {
+		if (dev->resource[i].end-dev->resource[i].start+1 > maxsize) 
+		  maxsize=dev->resource[i].end-dev->resource[i].start+1;
+	      }
+	    }
+	  }
+	}
+	printk(KERN_ERR "maxsize=%08x\n",
+	       maxsize);
+	pci_offset=0;
+	do {
+	  ok=1;
+	  pci_for_each_dev(dev) {
+	    int i;
+	    
+	    for (i=0;i<rescount;i++) {
+	      if (dev->resource[i].start) {
+		if (dev->resource[i].flags & IORESOURCE_MEM) {
+		  if (dev->resource[i].start+pci_offset<UAE_PCI_START ||
+		      dev->resource[i].start+pci_offset>=UAE_PCI_END)
+		    ok=0;
+		  if (dev->resource[i].end+pci_offset<UAE_PCI_START ||
+		      dev->resource[i].end+pci_offset>=UAE_PCI_END)
+		    ok=0;
+		  if (((u32)(dev->resource[i].start+pci_offset))>
+		      ((u32)(dev->resource[i].end+pci_offset)))
+		    ok=0;
+		}
+	      }
+	    }
+	  }
+	  if (!ok) {
+	    pci_offset+=maxsize;
+	    if (!pci_offset) {
+	      printk(KERN_ERR "ARGH! Could not find proper pci_offset\n");
+	      if (rescount==7) {
+		printk(KERN_ERR "Trying to fudge by ignoring ROMs!\n");
+		rescount=6;
+	      }
+	      else {
+		panic("Can't find PCI offset even when ignoring ROMs!\n");
+	      }
+	    }
+	  }
+	} while (!ok);
 
+	printk(KERN_ERR "pci_offset %08x\n",
+	       pci_offset);
+	
+	printk(KERN_ERR "==================== Moving PCI NOW! =============\n");
+	pci_for_each_dev(dev) {
+	  int i;
+	  
+	  if (dev->hdr_type==0) {
+	    for (i=0;i<6;i++) {
+	      if (dev->resource[i].start &&
+		!(dev->resource[i].flags&PCI_BASE_ADDRESS_SPACE_IO)) {
+		u32 old,base;
+		dev->resource[i].start+=PCI_OFFSET;
+		dev->resource[i].end+=PCI_OFFSET;
+		pci_read_config_dword(dev,0x10+4*i,&old);
+		old&=~PCI_BASE_ADDRESS_MEM_MASK;
+		base=dev->resource[i].start&PCI_BASE_ADDRESS_MEM_MASK;
+		pci_write_config_dword(dev, 0x10+4*i, old|base);
+	      }
+	    }
+	    if (dev->resource[PCI_ROM_RESOURCE].start) {
+	      u32 old,base;
+	      if (rescount==7) {
+		dev->resource[PCI_ROM_RESOURCE].start+=PCI_OFFSET;
+		dev->resource[PCI_ROM_RESOURCE].end+=PCI_OFFSET;
+		pci_read_config_dword(dev,PCI_ROM_ADDRESS,&old);
+		old&=~PCI_ROM_ADDRESS_MASK;
+		base=dev->resource[PCI_ROM_RESOURCE].start&PCI_ROM_ADDRESS_MASK;
+		pci_write_config_dword(dev, PCI_ROM_ADDRESS, old|base);
+	      }
+	      else {
+		/* We can't shift the ROMs, so we disable them.
+		   Most of the time, we don't need them, anyway.... */
+		dev->resource[PCI_ROM_RESOURCE].start=0;
+		dev->resource[PCI_ROM_RESOURCE].end=0;
+		pci_write_config_dword(dev, PCI_ROM_ADDRESS,0);
+	      }
+	    }
+	  }
+	  else if (dev->hdr_type==1) {
+	    struct pci_bus* bus=dev->subordinate;
+
+	    for (i=0;i<2;i++) {
+	      if (dev->resource[i].start &&
+		  !(dev->resource[i].flags&PCI_BASE_ADDRESS_SPACE_IO)) {
+		u32 old,base;
+		dev->resource[i].start+=PCI_OFFSET;
+		dev->resource[i].end+=PCI_OFFSET;
+		pci_read_config_dword(dev,0x10+4*i,&old);
+		old&=~PCI_BASE_ADDRESS_MEM_MASK;
+		base=dev->resource[i].start&PCI_BASE_ADDRESS_MEM_MASK;
+		pci_write_config_dword(dev, 0x10+4*i, old|base);
+	      }
+	    }
+		if (dev->resource[PCI_ROM_RESOURCE].start) {
+	      u32 old,base;
+	      dev->resource[PCI_ROM_RESOURCE].start+=PCI_OFFSET;
+	      dev->resource[PCI_ROM_RESOURCE].end+=PCI_OFFSET;
+	      pci_read_config_dword(dev,PCI_ROM_ADDRESS1,&old);
+	      old&=~PCI_ROM_ADDRESS_MASK;
+		base=dev->resource[PCI_ROM_RESOURCE].start&PCI_ROM_ADDRESS_MASK;
+	      pci_write_config_dword(dev, PCI_ROM_ADDRESS1, old|base);
+	    }
+	    
+	    if (bus) {
+	      if (bus->resource[1] && (dev->bridge_valid_bases&2)) {
+		u16 mem_base_lo, mem_limit_lo;
+		printk(KERN_ERR " bus resource 1: Start/end %08x/%08x\n",
+		       bus->resource[1]->start,
+		       bus->resource[1]->end);
+		pci_read_config_word(dev, PCI_MEMORY_BASE, &mem_base_lo);
+		pci_read_config_word(dev, PCI_MEMORY_LIMIT, &mem_limit_lo);
+		bus->resource[1]->start+=PCI_OFFSET;
+		bus->resource[1]->end+=PCI_OFFSET;
+		pci_write_config_word(dev,PCI_MEMORY_LIMIT,
+				      mem_limit_lo+PCI_OFFSET_BRIDGE);
+		pci_write_config_word(dev,PCI_MEMORY_BASE,
+				      mem_base_lo+PCI_OFFSET_BRIDGE);
+	      }
+	      if (bus->resource[2] && (dev->bridge_valid_bases&4)) {
+		u16 mem_base_lo, mem_limit_lo;
+		printk(KERN_ERR " bus resource 2: Start/end %08x/%08x\n",
+		       bus->resource[2]->start,
+		       bus->resource[2]->end);
+		pci_read_config_word(dev, PCI_PREF_MEMORY_BASE, &mem_base_lo);
+		pci_read_config_word(dev, PCI_PREF_MEMORY_LIMIT, &mem_limit_lo);
+		bus->resource[2]->start+=PCI_OFFSET;
+		bus->resource[2]->end+=PCI_OFFSET;
+		pci_write_config_word(dev,PCI_PREF_MEMORY_LIMIT,
+				      mem_limit_lo+PCI_OFFSET_BRIDGE);
+		pci_write_config_word(dev,PCI_PREF_MEMORY_BASE,
+				      mem_base_lo+PCI_OFFSET_BRIDGE);
+	      }
+	    }
+	  }
+	}
+	screen_info.lfb_base=
+	  (u32)(screen_info.lfb_base+PCI_OFFSET);  /* For the vesa framebuffer.
+						      It's the one thing that
+						      already has cached a PCI
+						      address */
+}
 
 void __devinit  pci_init(void)
 {
@@ -2127,7 +2333,7 @@
 	pci_for_each_dev(dev) {
 		pci_fixup_device(PCI_FIXUP_FINAL, dev);
 	}
-
+	pci_fixup_uae();
 #ifdef CONFIG_PM
 	pm_register(PM_PCI_DEV, 0, pci_pm_callback);
 #endif
diff -uNr linux-2.4.37.9/drivers/scsi/ide-scsi.c linux-2.4.37.9-amithlon/drivers/scsi/ide-scsi.c
--- linux-2.4.37.9/drivers/scsi/ide-scsi.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/scsi/ide-scsi.c	2010-02-17 20:04:09.000000000 -0500
@@ -41,7 +41,7 @@
  */
 
 #define IDESCSI_VERSION "0.94"
-
+#define UAE_GET_IDENT 0x54785683
 #include <linux/module.h>
 #include <linux/config.h>
 #include <linux/types.h>
@@ -962,8 +962,13 @@
 		else
 			clear_bit(IDESCSI_SG_TRANSFORM, &scsi->transform);
 		return 0;
-	} else if (cmd == SG_GET_TRANSFORM)
+	} else if (cmd == SG_GET_TRANSFORM) {
 		return put_user(test_bit(IDESCSI_SG_TRANSFORM, &scsi->transform), (int *) arg);
+		} else if (cmd == UAE_GET_IDENT) {
+					if (copy_to_user(arg,drive->name,4))
+					return -EFAULT;
+					return 0;
+	}
 	return -EINVAL;
 }
 
diff -uNr linux-2.4.37.9/drivers/scsi/scsi.c linux-2.4.37.9-amithlon/drivers/scsi/scsi.c
--- linux-2.4.37.9/drivers/scsi/scsi.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/scsi/scsi.c	2010-02-17 20:04:10.000000000 -0500
@@ -2355,7 +2355,7 @@
 	 * If any of the devices would match this driver, then perform the
 	 * init function.
 	 */
-	if (tpnt->init && tpnt->dev_noticed) {
+	if (tpnt->init) {
 		if ((*tpnt->init) ()) {
 			for (shpnt = scsi_hostlist; shpnt;
 			     shpnt = shpnt->next) {
diff -uNr linux-2.4.37.9/drivers/scsi/sg.c linux-2.4.37.9-amithlon/drivers/scsi/sg.c
--- linux-2.4.37.9/drivers/scsi/sg.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/scsi/sg.c	2010-02-17 20:04:09.000000000 -0500
@@ -845,7 +845,7 @@
                        &sg_idp->h_cmd_per_lun);
 	    __put_user((short)sdp->device->queue_depth,
                        &sg_idp->d_queue_depth);
-	    __put_user(0, &sg_idp->unused[0]);
+	    __put_user(sdp->device->removable?1:0, &sg_idp->unused[0]);
 	    __put_user(0, &sg_idp->unused[1]);
             return 0;
         }
@@ -1346,7 +1346,7 @@
     static int sg_registered = 0;
     unsigned long iflags;
 
-    if ((sg_template.dev_noticed == 0) || sg_dev_arr)
+    if (/* (sg_template.dev_noticed == 0) || */ sg_dev_arr)
     	return 0;
 
     write_lock_irqsave(&sg_dev_arr_lock, iflags);
diff -uNr linux-2.4.37.9/drivers/sound/i810_audio.c linux-2.4.37.9-amithlon/drivers/sound/i810_audio.c
--- linux-2.4.37.9/drivers/sound/i810_audio.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/sound/i810_audio.c	2010-06-16 23:08:02.000000000 -0400
@@ -314,8 +314,8 @@
 	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
 	{PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_OPUS_7445,
 	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, AMD768},
-	{PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_8111_AUDIO,
-	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, AMD8111},
+/*	{PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_8111_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, AMD8111}, */
 	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_ESB_5,
 	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH4},
 	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_ICH6_18,
diff -uNr linux-2.4.37.9/drivers/sound/i810_audio.c~ linux-2.4.37.9-amithlon/drivers/sound/i810_audio.c~
--- linux-2.4.37.9/drivers/sound/i810_audio.c~	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/sound/i810_audio.c~	2010-02-17 20:04:07.000000000 -0500
@@ -0,0 +1,3545 @@
+/*
+ *	Intel i810 and friends ICH driver for Linux
+ *	Alan Cox <alan@redhat.com>
+ *
+ *  Built from:
+ *	Low level code:  Zach Brown (original nonworking i810 OSS driver)
+ *			 Jaroslav Kysela <perex@suse.cz> (working ALSA driver)
+ *
+ *	Framework: Thomas Sailer <sailer@ife.ee.ethz.ch>
+ *	Extended by: Zach Brown <zab@redhat.com>  
+ *			and others..
+ *
+ *  Hardware Provided By:
+ *	Analog Devices (A major AC97 codec maker)
+ *	Intel Corp  (you've probably heard of them already)
+ *
+ *  AC97 clues and assistance provided by
+ *	Analog Devices
+ *	Zach 'Fufu' Brown
+ *	Jeff Garzik
+ *
+ *	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License as published by
+ *	the Free Software Foundation; either version 2 of the License, or
+ *	(at your option) any later version.
+ *
+ *	This program is distributed in the hope that it will be useful,
+ *	but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *	GNU General Public License for more details.
+ *
+ *	You should have received a copy of the GNU General Public License
+ *	along with this program; if not, write to the Free Software
+ *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ *
+ *	Intel 810 theory of operation
+ *
+ *	The chipset provides three DMA channels that talk to an AC97
+ *	CODEC (AC97 is a digital/analog mixer standard). At its simplest
+ *	you get 48Khz audio with basic volume and mixer controls. At the
+ *	best you get rate adaption in the codec. We set the card up so
+ *	that we never take completion interrupts but instead keep the card
+ *	chasing its tail around a ring buffer. This is needed for mmap
+ *	mode audio and happens to work rather well for non-mmap modes too.
+ *
+ *	The board has one output channel for PCM audio (supported) and
+ *	a stereo line in and mono microphone input. Again these are normally
+ *	locked to 48Khz only. Right now recording is not finished.
+ *
+ *	There is no midi support, no synth support. Use timidity. To get
+ *	esd working you need to use esd -r 48000 as it won't probe 48KHz
+ *	by default. mpg123 can't handle 48Khz only audio so use xmms.
+ *
+ *	Fix The Sound On Dell
+ *
+ *	Not everyone uses 48KHz. We know of no way to detect this reliably
+ *	and certainly not to get the right data. If your i810 audio sounds
+ *	stupid you may need to investigate other speeds. According to Analog
+ *	they tend to use a 14.318MHz clock which gives you a base rate of
+ *	41194Hz.
+ *
+ *	This is available via the 'ftsodell=1' option. 
+ *
+ *	If you need to force a specific rate set the clocking= option
+ *
+ *	This driver is cursed. (Ben LaHaise)
+ *
+ *  ICH 3 caveats
+ *	Intel errata #7 for ICH3 IO. We need to disable SMI stuff
+ *	when codec probing. [Not Yet Done]
+ *
+ *  ICH 4 caveats
+ *
+ *	The ICH4 has the feature, that the codec ID doesn't have to be 
+ *	congruent with the IO connection.
+ * 
+ *	Therefore, from driver version 0.23 on, there is a "codec ID" <->
+ *	"IO register base offset" mapping (card->ac97_id_map) field.
+ *   
+ *	Juergen "George" Sawinski (jsaw) 
+ */
+ 
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/ctype.h>
+#include <linux/ioport.h>
+#include <linux/sched.h>
+#include <linux/delay.h>
+#include <linux/sound.h>
+#include <linux/slab.h>
+#include <linux/soundcard.h>
+#include <linux/pci.h>
+#include <linux/interrupt.h>
+#include <asm/io.h>
+#include <asm/dma.h>
+#include <linux/init.h>
+#include <linux/poll.h>
+#include <linux/spinlock.h>
+#include <linux/smp_lock.h>
+#include <linux/ac97_codec.h>
+#include <linux/bitops.h>
+#include <asm/uaccess.h>
+#include <asm/hardirq.h>
+
+#define DRIVER_VERSION "1.01"
+
+#define MODULOP2(a, b) ((a) & ((b) - 1))
+#define MASKP2(a, b) ((a) & ~((b) - 1))
+
+static int ftsodell;
+static int strict_clocking;
+static unsigned int clocking;
+static int spdif_locked;
+
+//#define DEBUG
+//#define DEBUG2
+//#define DEBUG_INTERRUPTS
+//#define DEBUG_MMAP
+//#define DEBUG_MMIO
+
+#define ADC_RUNNING	1
+#define DAC_RUNNING	2
+
+#define I810_FMT_16BIT	1
+#define I810_FMT_STEREO	2
+#define I810_FMT_MASK	3
+
+#define SPDIF_ON	0x0004
+#define SURR_ON		0x0010
+#define CENTER_LFE_ON	0x0020
+#define VOL_MUTED	0x8000
+
+/* the 810's array of pointers to data buffers */
+
+struct sg_item {
+#define BUSADDR_MASK	0xFFFFFFFE
+	u32 busaddr;	
+#define CON_IOC 	0x80000000 /* interrupt on completion */
+#define CON_BUFPAD	0x40000000 /* pad underrun with last sample, else 0 */
+#define CON_BUFLEN_MASK	0x0000ffff /* buffer length in samples */
+	u32 control;
+};
+
+/* an instance of the i810 channel */
+#define SG_LEN 32
+struct i810_channel 
+{
+	/* these sg guys should probably be allocated
+	   separately as nocache. Must be 8 byte aligned */
+	struct sg_item sg[SG_LEN];	/* 32*8 */
+	u32 offset;			/* 4 */
+	u32 port;			/* 4 */
+	u32 used;
+	u32 num;
+};
+
+/*
+ * we have 3 separate dma engines.  pcm in, pcm out, and mic.
+ * each dma engine has controlling registers.  These goofy
+ * names are from the datasheet, but make it easy to write
+ * code while leafing through it.
+ *
+ * ICH4 has 6 dma engines, pcm in, pcm out, mic, pcm in 2, 
+ * mic in 2, s/pdif.   Of special interest is the fact that
+ * the upper 3 DMA engines on the ICH4 *must* be accessed
+ * via mmio access instead of pio access.
+ */
+
+#define ENUM_ENGINE(PRE,DIG) 									\
+enum {												\
+	PRE##_BASE =	0x##DIG##0,		/* Base Address */				\
+	PRE##_BDBAR =	0x##DIG##0,		/* Buffer Descriptor list Base Address */	\
+	PRE##_CIV =	0x##DIG##4,		/* Current Index Value */			\
+	PRE##_LVI =	0x##DIG##5,		/* Last Valid Index */				\
+	PRE##_SR =	0x##DIG##6,		/* Status Register */				\
+	PRE##_PICB =	0x##DIG##8,		/* Position In Current Buffer */		\
+	PRE##_PIV =	0x##DIG##a,		/* Prefetched Index Value */			\
+	PRE##_CR =	0x##DIG##b		/* Control Register */				\
+}
+
+ENUM_ENGINE(OFF,0);	/* Offsets */
+ENUM_ENGINE(PI,0);	/* PCM In */
+ENUM_ENGINE(PO,1);	/* PCM Out */
+ENUM_ENGINE(MC,2);	/* Mic In */
+
+enum {
+	GLOB_CNT =	0x2c,			/* Global Control */
+	GLOB_STA = 	0x30,			/* Global Status */
+	CAS	 = 	0x34			/* Codec Write Semaphore Register */
+};
+
+ENUM_ENGINE(MC2,4);     /* Mic In 2 */
+ENUM_ENGINE(PI2,5);     /* PCM In 2 */
+ENUM_ENGINE(SP,6);      /* S/PDIF */
+
+enum {
+	SDM =           0x80                    /* SDATA_IN Map Register */
+};
+
+/* interrupts for a dma engine */
+#define DMA_INT_FIFO		(1<<4)  /* fifo under/over flow */
+#define DMA_INT_COMPLETE	(1<<3)  /* buffer read/write complete and ioc set */
+#define DMA_INT_LVI		(1<<2)  /* last valid done */
+#define DMA_INT_CELV		(1<<1)  /* last valid is current */
+#define DMA_INT_DCH		(1)	/* DMA Controller Halted (happens on LVI interrupts) */
+#define DMA_INT_MASK (DMA_INT_FIFO|DMA_INT_COMPLETE|DMA_INT_LVI)
+
+/* interrupts for the whole chip */
+#define INT_SEC		(1<<11)
+#define INT_PRI		(1<<10)
+#define INT_MC		(1<<7)
+#define INT_PO		(1<<6)
+#define INT_PI		(1<<5)
+#define INT_MO		(1<<2)
+#define INT_NI		(1<<1)
+#define INT_GPI		(1<<0)
+#define INT_MASK (INT_SEC|INT_PRI|INT_MC|INT_PO|INT_PI|INT_MO|INT_NI|INT_GPI)
+
+/* magic numbers to protect our data structures */
+#define I810_CARD_MAGIC		0x5072696E /* "Prin" */
+#define I810_STATE_MAGIC	0x63657373 /* "cess" */
+#define I810_DMA_MASK		0xffffffff /* DMA buffer mask for pci_alloc_consist */
+#define NR_HW_CH		3
+
+/* maxinum number of AC97 codecs connected, AC97 2.0 defined 4 */
+#define NR_AC97                 4
+
+/* Please note that an 8bit mono stream is not valid on this card, you must have a 16bit */
+/* stream at a minimum for this card to be happy */
+static const unsigned sample_size[] = { 1, 2, 2, 4 };
+/* Samples are 16bit values, so we are shifting to a word, not to a byte, hence shift */
+/* values are one less than might be expected */
+static const unsigned sample_shift[] = { -1, 0, 0, 1 };
+
+enum {
+	ICH82801AA = 0,
+	ICH82901AB,
+	INTEL440MX,
+	INTELICH2,
+	INTELICH3,
+	INTELICH4,
+	INTELICH5,
+	SI7012,
+	NVIDIA_NFORCE,
+	AMD768,
+	AMD8111
+};
+
+static char * card_names[] = {
+	"Intel ICH 82801AA",
+	"Intel ICH 82901AB",
+	"Intel 440MX",
+	"Intel ICH2",
+	"Intel ICH3",
+	"Intel ICH4",
+	"Intel ICH5",
+	"SiS 7012",
+	"NVIDIA nForce Audio",
+	"AMD 768",
+	"AMD-8111 IOHub"
+};
+
+/* These are capabilities (and bugs) the chipsets _can_ have */
+static struct {
+	int16_t      nr_ac97;
+#define CAP_MMIO                 0x0001
+#define CAP_20BIT_AUDIO_SUPPORT  0x0002
+	u_int16_t flags;
+} card_cap[] = {
+	{  1, 0x0000 }, /* ICH82801AA */
+	{  1, 0x0000 }, /* ICH82901AB */
+	{  1, 0x0000 }, /* INTEL440MX */
+	{  1, 0x0000 }, /* INTELICH2 */
+	{  2, 0x0000 }, /* INTELICH3 */
+ 	{  3, 0x0003 }, /* INTELICH4 */
+	{  3, 0x0003 }, /* INTELICH5 */
+	/*@FIXME to be verified*/	{  2, 0x0000 }, /* SI7012 */
+	/*@FIXME to be verified*/	{  2, 0x0000 }, /* NVIDIA_NFORCE */
+	/*@FIXME to be verified*/	{  2, 0x0000 }, /* AMD768 */
+	/*@FIXME to be verified*/	{  3, 0x0001 }, /* AMD8111 */
+};
+
+static struct pci_device_id i810_pci_tbl [] = {
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801AA_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, ICH82801AA},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801AB_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, ICH82901AB},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_440MX,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTEL440MX},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801BA_4,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH2},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801CA_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH3},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801DB_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH4},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82801EB_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH5},
+	{PCI_VENDOR_ID_SI, PCI_DEVICE_ID_SI_7012,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, SI7012},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_MCP2S_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_CK804_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_MCP04_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, NVIDIA_NFORCE},
+	{PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_OPUS_7445,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, AMD768},
+	{PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_8111_AUDIO,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, AMD8111},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_ESB_5,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH4},
+	{PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_ICH6_18,
+	 PCI_ANY_ID, PCI_ANY_ID, 0, 0, INTELICH4},
+
+	{0,}
+};
+
+MODULE_DEVICE_TABLE (pci, i810_pci_tbl);
+
+#ifdef CONFIG_PM
+#define PM_SUSPENDED(card) (card->pm_suspended)
+#else
+#define PM_SUSPENDED(card) (0)
+#endif
+
+/* "software" or virtual channel, an instance of opened /dev/dsp */
+struct i810_state {
+	unsigned int magic;
+	struct i810_card *card;	/* Card info */
+
+	/* single open lock mechanism, only used for recording */
+	struct semaphore open_sem;
+	wait_queue_head_t open_wait;
+
+	/* file mode */
+	mode_t open_mode;
+
+	/* virtual channel number */
+	int virt;
+
+#ifdef CONFIG_PM
+	unsigned int pm_saved_dac_rate,pm_saved_adc_rate;
+#endif
+	struct dmabuf {
+		/* wave sample stuff */
+		unsigned int rate;
+		unsigned char fmt, enable, trigger;
+
+		/* hardware channel */
+		struct i810_channel *read_channel;
+		struct i810_channel *write_channel;
+
+		/* OSS buffer management stuff */
+		void *rawbuf;
+		dma_addr_t dma_handle;
+		unsigned buforder;
+		unsigned numfrag;
+		unsigned fragshift;
+
+		/* our buffer acts like a circular ring */
+		unsigned hwptr;		/* where dma last started, updated by update_ptr */
+		unsigned swptr;		/* where driver last clear/filled, updated by read/write */
+		int count;		/* bytes to be consumed or been generated by dma machine */
+		unsigned total_bytes;	/* total bytes dmaed by hardware */
+
+		unsigned error;		/* number of over/underruns */
+		wait_queue_head_t wait;	/* put process on wait queue when no more space in buffer */
+
+		/* redundant, but makes calculations easier */
+		/* what the hardware uses */
+		unsigned dmasize;
+		unsigned fragsize;
+		unsigned fragsamples;
+
+		/* what we tell the user to expect */
+		unsigned userfrags;
+		unsigned userfragsize;
+
+		/* OSS stuff */
+		unsigned mapped:1;
+		unsigned ready:1;
+		unsigned update_flag;
+		unsigned ossfragsize;
+		unsigned ossmaxfrags;
+		unsigned subdivision;
+	} dmabuf;
+};
+
+
+struct i810_card {
+	unsigned int magic;
+
+	/* We keep i810 cards in a linked list */
+	struct i810_card *next;
+
+	/* The i810 has a certain amount of cross channel interaction
+	   so we use a single per card lock */
+	spinlock_t lock;
+	
+	/* Control AC97 access serialization */
+	spinlock_t ac97_lock;
+
+	/* PCI device stuff */
+	struct pci_dev * pci_dev;
+	u16 pci_id;
+	u16 pci_id_internal; /* used to access card_cap[] */
+#ifdef CONFIG_PM	
+	u16 pm_suspended;
+	u32 pm_save_state[64/sizeof(u32)];
+	int pm_saved_mixer_settings[SOUND_MIXER_NRDEVICES][NR_AC97];
+#endif
+	/* soundcore stuff */
+	int dev_audio;
+
+	/* structures for abstraction of hardware facilities, codecs, banks and channels*/
+	u16    ac97_id_map[NR_AC97];
+	struct ac97_codec *ac97_codec[NR_AC97];
+	struct i810_state *states[NR_HW_CH];
+	struct i810_channel *channel;	/* 1:1 to states[] but diff. lifetime */
+	dma_addr_t chandma;
+
+	u16 ac97_features;
+	u16 ac97_status;
+	u16 channels;
+	
+	/* hardware resources */
+	unsigned long ac97base;
+	unsigned long iobase;
+	u32 irq;
+
+	unsigned long ac97base_mmio_phys;
+	unsigned long iobase_mmio_phys;
+	u_int8_t *ac97base_mmio;
+	u_int8_t *iobase_mmio;
+
+	int           use_mmio;
+	
+	/* Function support */
+	struct i810_channel *(*alloc_pcm_channel)(struct i810_card *);
+	struct i810_channel *(*alloc_rec_pcm_channel)(struct i810_card *);
+	struct i810_channel *(*alloc_rec_mic_channel)(struct i810_card *);
+	void (*free_pcm_channel)(struct i810_card *, int chan);
+
+	/* We have a *very* long init time possibly, so use this to block */
+	/* attempts to open our devices before we are ready (stops oops'es) */
+	int initializing;
+};
+
+/* extract register offset from codec struct */
+#define IO_REG_OFF(codec) (((struct i810_card *) codec->private_data)->ac97_id_map[codec->id])
+
+#define I810_IOREAD(size, type, card, off)				\
+({									\
+	type val;							\
+	if (card->use_mmio)						\
+		val=read##size(card->iobase_mmio+off);			\
+	else								\
+		val=in##size(card->iobase+off);				\
+	val;								\
+})
+
+#define I810_IOREADL(card, off)		I810_IOREAD(l, u32, card, off)
+#define I810_IOREADW(card, off)		I810_IOREAD(w, u16, card, off)
+#define I810_IOREADB(card, off)		I810_IOREAD(b, u8,  card, off)
+
+#define I810_IOWRITE(size, val, card, off)				\
+({									\
+	if (card->use_mmio)						\
+		write##size(val, card->iobase_mmio+off);		\
+	else								\
+		out##size(val, card->iobase+off);			\
+})
+
+#define I810_IOWRITEL(val, card, off)	I810_IOWRITE(l, val, card, off)
+#define I810_IOWRITEW(val, card, off)	I810_IOWRITE(w, val, card, off)
+#define I810_IOWRITEB(val, card, off)	I810_IOWRITE(b, val, card, off)
+
+#define GET_CIV(card, port) MODULOP2(I810_IOREADB((card), (port) + OFF_CIV), SG_LEN)
+#define GET_LVI(card, port) MODULOP2(I810_IOREADB((card), (port) + OFF_LVI), SG_LEN)
+
+/* set LVI from CIV */
+#define CIV_TO_LVI(card, port, off) \
+	I810_IOWRITEB(MODULOP2(GET_CIV((card), (port)) + (off), SG_LEN), (card), (port) + OFF_LVI)
+
+static struct i810_card *devs = NULL;
+
+static int i810_open_mixdev(struct inode *inode, struct file *file);
+static int i810_ioctl_mixdev(struct inode *inode, struct file *file,
+			     unsigned int cmd, unsigned long arg);
+static u16 i810_ac97_get(struct ac97_codec *dev, u8 reg);
+static void i810_ac97_set(struct ac97_codec *dev, u8 reg, u16 data);
+static u16 i810_ac97_get_mmio(struct ac97_codec *dev, u8 reg);
+static void i810_ac97_set_mmio(struct ac97_codec *dev, u8 reg, u16 data);
+static u16 i810_ac97_get_io(struct ac97_codec *dev, u8 reg);
+static void i810_ac97_set_io(struct ac97_codec *dev, u8 reg, u16 data);
+
+static struct i810_channel *i810_alloc_pcm_channel(struct i810_card *card)
+{
+	if(card->channel[1].used==1)
+		return NULL;
+	card->channel[1].used=1;
+	return &card->channel[1];
+}
+
+static struct i810_channel *i810_alloc_rec_pcm_channel(struct i810_card *card)
+{
+	if(card->channel[0].used==1)
+		return NULL;
+	card->channel[0].used=1;
+	return &card->channel[0];
+}
+
+static struct i810_channel *i810_alloc_rec_mic_channel(struct i810_card *card)
+{
+	if(card->channel[2].used==1)
+		return NULL;
+	card->channel[2].used=1;
+	return &card->channel[2];
+}
+
+static void i810_free_pcm_channel(struct i810_card *card, int channel)
+{
+	card->channel[channel].used=0;
+}
+
+static int i810_valid_spdif_rate ( struct ac97_codec *codec, int rate )
+{
+	unsigned long id = 0L;
+
+	id = (i810_ac97_get(codec, AC97_VENDOR_ID1) << 16);
+	id |= i810_ac97_get(codec, AC97_VENDOR_ID2) & 0xffff;
+#ifdef DEBUG
+	printk ( "i810_audio: codec = %s, codec_id = 0x%08lx\n", codec->name, id);
+#endif
+	switch ( id ) {
+		case 0x41445361: /* AD1886 */
+			if (rate == 48000) {
+				return 1;
+			}
+			break;
+		default: /* all other codecs, until we know otherwiae */
+			if (rate == 48000 || rate == 44100 || rate == 32000) {
+				return 1;
+			}
+			break;
+	}
+	return (0);
+}
+
+/* i810_set_spdif_output
+ * 
+ *  Configure the S/PDIF output transmitter. When we turn on
+ *  S/PDIF, we turn off the analog output. This may not be
+ *  the right thing to do.
+ *
+ *  Assumptions:
+ *     The DSP sample rate must already be set to a supported
+ *     S/PDIF rate (32kHz, 44.1kHz, or 48kHz) or we abort.
+ */
+static int i810_set_spdif_output(struct i810_state *state, int slots, int rate)
+{
+	int	vol;
+	int	aud_reg;
+	int	r = 0;
+	struct ac97_codec *codec = state->card->ac97_codec[0];
+
+	if(!codec->codec_ops->digital) {
+		state->card->ac97_status &= ~SPDIF_ON;
+	} else {
+		if ( slots == -1 ) { /* Turn off S/PDIF */
+			codec->codec_ops->digital(codec, 0, 0, 0);
+			/* If the volume wasn't muted before we turned on S/PDIF, unmute it */
+			if ( !(state->card->ac97_status & VOL_MUTED) ) {
+				aud_reg = i810_ac97_get(codec, AC97_MASTER_VOL_STEREO);
+				i810_ac97_set(codec, AC97_MASTER_VOL_STEREO, (aud_reg & ~VOL_MUTED));
+			}
+			state->card->ac97_status &= ~(VOL_MUTED | SPDIF_ON);
+			return 0;
+		}
+
+		vol = i810_ac97_get(codec, AC97_MASTER_VOL_STEREO);
+		state->card->ac97_status = vol & VOL_MUTED;
+		
+		r = codec->codec_ops->digital(codec, slots, rate, 0);
+
+		if(r)
+			state->card->ac97_status |= SPDIF_ON;
+		else
+			state->card->ac97_status &= ~SPDIF_ON;
+
+		/* Mute the analog output */
+		/* Should this only mute the PCM volume??? */
+		i810_ac97_set(codec, AC97_MASTER_VOL_STEREO, (vol | VOL_MUTED));
+	}
+	return r;
+}
+
+/* i810_set_dac_channels
+ *
+ *  Configure the codec's multi-channel DACs
+ *
+ *  The logic is backwards. Setting the bit to 1 turns off the DAC. 
+ *
+ *  What about the ICH? We currently configure it using the
+ *  SNDCTL_DSP_CHANNELS ioctl.  If we're turnning on the DAC, 
+ *  does that imply that we want the ICH set to support
+ *  these channels?
+ *  
+ *  TODO:
+ *    vailidate that the codec really supports these DACs
+ *    before turning them on. 
+ */
+static void i810_set_dac_channels(struct i810_state *state, int channel)
+{
+	int	aud_reg;
+	struct ac97_codec *codec = state->card->ac97_codec[0];
+	
+	/* No codec, no setup */
+	
+	if(codec == NULL)
+		return;
+
+	aud_reg = i810_ac97_get(codec, AC97_EXTENDED_STATUS);
+	aud_reg |= AC97_EA_PRI | AC97_EA_PRJ | AC97_EA_PRK;
+	state->card->ac97_status &= ~(SURR_ON | CENTER_LFE_ON);
+
+	switch ( channel ) {
+		case 2: /* always enabled */
+			break;
+		case 4:
+			aud_reg &= ~AC97_EA_PRJ;
+			state->card->ac97_status |= SURR_ON;
+			break;
+		case 6:
+			aud_reg &= ~(AC97_EA_PRJ | AC97_EA_PRI | AC97_EA_PRK);
+			state->card->ac97_status |= SURR_ON | CENTER_LFE_ON;
+			break;
+		default:
+			break;
+	}
+	i810_ac97_set(codec, AC97_EXTENDED_STATUS, aud_reg);
+
+}
+
+
+/* set playback sample rate */
+static unsigned int i810_set_dac_rate(struct i810_state * state, unsigned int rate)
+{	
+	struct dmabuf *dmabuf = &state->dmabuf;
+	u32 new_rate;
+	struct ac97_codec *codec=state->card->ac97_codec[0];
+	
+	if(!(state->card->ac97_features&0x0001))
+	{
+		dmabuf->rate = clocking;
+#ifdef DEBUG
+		printk("Asked for %d Hz, but ac97_features says we only do %dHz.  Sorry!\n",
+		       rate,clocking);
+#endif		       
+		return clocking;
+	}
+			
+	if (rate > 48000)
+		rate = 48000;
+	if (rate < 8000)
+		rate = 8000;
+	dmabuf->rate = rate;
+		
+	/*
+	 *	Adjust for misclocked crap
+	 */
+	rate = ( rate * clocking)/48000;
+	if(strict_clocking && rate < 8000) {
+		rate = 8000;
+		dmabuf->rate = (rate * 48000)/clocking;
+	}
+
+        new_rate=ac97_set_dac_rate(codec, rate);
+	if(new_rate != rate) {
+		dmabuf->rate = (new_rate * 48000)/clocking;
+	}
+#ifdef DEBUG
+	printk("i810_audio: called i810_set_dac_rate : asked for %d, got %d\n", rate, dmabuf->rate);
+#endif
+	rate = new_rate;
+	return dmabuf->rate;
+}
+
+/* set recording sample rate */
+static unsigned int i810_set_adc_rate(struct i810_state * state, unsigned int rate)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	u32 new_rate;
+	struct ac97_codec *codec=state->card->ac97_codec[0];
+	
+	if(!(state->card->ac97_features&0x0001))
+	{
+		dmabuf->rate = clocking;
+		return clocking;
+	}
+			
+	if (rate > 48000)
+		rate = 48000;
+	if (rate < 8000)
+		rate = 8000;
+	dmabuf->rate = rate;
+
+	/*
+	 *	Adjust for misclocked crap
+	 */
+	 
+	rate = ( rate * clocking)/48000;
+	if(strict_clocking && rate < 8000) {
+		rate = 8000;
+		dmabuf->rate = (rate * 48000)/clocking;
+	}
+
+	new_rate = ac97_set_adc_rate(codec, rate);
+	
+	if(new_rate != rate) {
+		dmabuf->rate = (new_rate * 48000)/clocking;
+		rate = new_rate;
+	}
+#ifdef DEBUG
+	printk("i810_audio: called i810_set_adc_rate : rate = %d/%d\n", dmabuf->rate, rate);
+#endif
+	return dmabuf->rate;
+}
+
+/* get current playback/recording dma buffer pointer (byte offset from LBA),
+   called with spinlock held! */
+   
+static inline unsigned i810_get_dma_addr(struct i810_state *state, int rec)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned int civ, offset, port, port_picb, bytes = 2;
+	
+	if (!dmabuf->enable)
+		return 0;
+
+	if (rec)
+		port = dmabuf->read_channel->port;
+	else
+		port = dmabuf->write_channel->port;
+
+	if(state->card->pci_id == PCI_DEVICE_ID_SI_7012) {
+		port_picb = port + OFF_SR;
+		bytes = 1;
+	} else
+		port_picb = port + OFF_PICB;
+
+	do {
+		civ = GET_CIV(state->card, port);
+		offset = I810_IOREADW(state->card, port_picb);
+		/* Must have a delay here! */ 
+		if(offset == 0)
+			udelay(1);
+		/* Reread both registers and make sure that that total
+		 * offset from the first reading to the second is 0.
+		 * There is an issue with SiS hardware where it will count
+		 * picb down to 0, then update civ to the next value,
+		 * then set the new picb to fragsize bytes.  We can catch
+		 * it between the civ update and the picb update, making
+		 * it look as though we are 1 fragsize ahead of where we
+		 * are.  The next to we get the address though, it will
+		 * be back in the right place, and we will suddenly think
+		 * we just went forward dmasize - fragsize bytes, causing
+		 * totally stupid *huge* dma overrun messages.  We are
+		 * assuming that the 1us delay is more than long enough
+		 * that we won't have to worry about the chip still being
+		 * out of sync with reality ;-)
+		 */
+	} while (civ != GET_CIV(state->card, port) || offset != I810_IOREADW(state->card, port_picb));
+		 
+	return (((civ + 1) * dmabuf->fragsize - (bytes * offset))
+		% dmabuf->dmasize);
+}
+
+/* Stop recording (lock held) */
+static inline void __stop_adc(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	struct i810_card *card = state->card;
+
+	dmabuf->enable &= ~ADC_RUNNING;
+	I810_IOWRITEB(0, card, PI_CR);
+	// wait for the card to acknowledge shutdown
+	while( I810_IOREADB(card, PI_CR) != 0 ) ;
+	// now clear any latent interrupt bits (like the halt bit)
+	if(card->pci_id == PCI_DEVICE_ID_SI_7012)
+		I810_IOWRITEB( I810_IOREADB(card, PI_PICB), card, PI_PICB );
+	else
+		I810_IOWRITEB( I810_IOREADB(card, PI_SR), card, PI_SR );
+	I810_IOWRITEL( I810_IOREADL(card, GLOB_STA) & INT_PI, card, GLOB_STA);
+}
+
+static void stop_adc(struct i810_state *state)
+{
+	struct i810_card *card = state->card;
+	unsigned long flags;
+
+	spin_lock_irqsave(&card->lock, flags);
+	__stop_adc(state);
+	spin_unlock_irqrestore(&card->lock, flags);
+}
+
+static inline void __start_adc(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+
+	if (dmabuf->count < dmabuf->dmasize && dmabuf->ready && !dmabuf->enable &&
+	    (dmabuf->trigger & PCM_ENABLE_INPUT)) {
+		dmabuf->enable |= ADC_RUNNING;
+		// Interrupt enable, LVI enable, DMA enable
+		I810_IOWRITEB(0x10 | 0x04 | 0x01, state->card, PI_CR);
+	}
+}
+
+static void start_adc(struct i810_state *state)
+{
+	struct i810_card *card = state->card;
+	unsigned long flags;
+
+	spin_lock_irqsave(&card->lock, flags);
+	__start_adc(state);
+	spin_unlock_irqrestore(&card->lock, flags);
+}
+
+/* stop playback (lock held) */
+static inline void __stop_dac(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	struct i810_card *card = state->card;
+
+	dmabuf->enable &= ~DAC_RUNNING;
+	I810_IOWRITEB(0, card, PO_CR);
+	// wait for the card to acknowledge shutdown
+	while( I810_IOREADB(card, PO_CR) != 0 ) ;
+	// now clear any latent interrupt bits (like the halt bit)
+	if(card->pci_id == PCI_DEVICE_ID_SI_7012)
+		I810_IOWRITEB( I810_IOREADB(card, PO_PICB), card, PO_PICB );
+	else
+		I810_IOWRITEB( I810_IOREADB(card, PO_SR), card, PO_SR );
+	I810_IOWRITEL( I810_IOREADL(card, GLOB_STA) & INT_PO, card, GLOB_STA);
+}
+
+static void stop_dac(struct i810_state *state)
+{
+	struct i810_card *card = state->card;
+	unsigned long flags;
+
+	spin_lock_irqsave(&card->lock, flags);
+	__stop_dac(state);
+	spin_unlock_irqrestore(&card->lock, flags);
+}	
+
+static inline void __start_dac(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+
+	if (dmabuf->count > 0 && dmabuf->ready && !dmabuf->enable &&
+	    (dmabuf->trigger & PCM_ENABLE_OUTPUT)) {
+		dmabuf->enable |= DAC_RUNNING;
+		// Interrupt enable, LVI enable, DMA enable
+		I810_IOWRITEB(0x10 | 0x04 | 0x01, state->card, PO_CR);
+	}
+}
+static void start_dac(struct i810_state *state)
+{
+	struct i810_card *card = state->card;
+	unsigned long flags;
+
+	spin_lock_irqsave(&card->lock, flags);
+	__start_dac(state);
+	spin_unlock_irqrestore(&card->lock, flags);
+}
+
+#define DMABUF_DEFAULTORDER (16-PAGE_SHIFT)
+#define DMABUF_MINORDER 1
+
+/* allocate DMA buffer, playback and recording buffer should be allocated separately */
+static int alloc_dmabuf(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	void *rawbuf= NULL;
+	int order, size;
+	struct page *page, *pend;
+
+	/* If we don't have any oss frag params, then use our default ones */
+	if(dmabuf->ossmaxfrags == 0)
+		dmabuf->ossmaxfrags = 4;
+	if(dmabuf->ossfragsize == 0)
+		dmabuf->ossfragsize = (PAGE_SIZE<<DMABUF_DEFAULTORDER)/dmabuf->ossmaxfrags;
+	size = dmabuf->ossfragsize * dmabuf->ossmaxfrags;
+
+	if(dmabuf->rawbuf && (PAGE_SIZE << dmabuf->buforder) == size)
+		return 0;
+	/* alloc enough to satisfy the oss params */
+	for (order = DMABUF_DEFAULTORDER; order >= DMABUF_MINORDER; order--) {
+		if ( (PAGE_SIZE<<order) > size )
+			continue;
+		if ((rawbuf = pci_alloc_consistent(state->card->pci_dev,
+						   PAGE_SIZE << order,
+						   &dmabuf->dma_handle)))
+			break;
+	}
+	if (!rawbuf)
+		return -ENOMEM;
+
+
+#ifdef DEBUG
+	printk("i810_audio: allocated %ld (order = %d) bytes at %p\n",
+	       PAGE_SIZE << order, order, rawbuf);
+#endif
+
+	dmabuf->ready  = dmabuf->mapped = 0;
+	dmabuf->rawbuf = rawbuf;
+	dmabuf->buforder = order;
+	
+	/* now mark the pages as reserved; otherwise remap_page_range doesn't do what we want */
+	pend = virt_to_page(rawbuf + (PAGE_SIZE << order) - 1);
+	for (page = virt_to_page(rawbuf); page <= pend; page++)
+		SetPageReserved(page);
+
+	return 0;
+}
+
+/* free DMA buffer */
+static void dealloc_dmabuf(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	struct page *page, *pend;
+
+	if (dmabuf->rawbuf) {
+		/* undo marking the pages as reserved */
+		pend = virt_to_page(dmabuf->rawbuf + (PAGE_SIZE << dmabuf->buforder) - 1);
+		for (page = virt_to_page(dmabuf->rawbuf); page <= pend; page++)
+			ClearPageReserved(page);
+		pci_free_consistent(state->card->pci_dev, PAGE_SIZE << dmabuf->buforder,
+				    dmabuf->rawbuf, dmabuf->dma_handle);
+	}
+	dmabuf->rawbuf = NULL;
+	dmabuf->mapped = dmabuf->ready = 0;
+}
+
+static int prog_dmabuf(struct i810_state *state, unsigned rec)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	struct i810_channel *c;
+	struct sg_item *sg;
+	unsigned long flags;
+	int ret;
+	unsigned fragint;
+	int i;
+
+	spin_lock_irqsave(&state->card->lock, flags);
+	if(dmabuf->enable & DAC_RUNNING)
+		__stop_dac(state);
+	if(dmabuf->enable & ADC_RUNNING)
+		__stop_adc(state);
+	dmabuf->total_bytes = 0;
+	dmabuf->count = dmabuf->error = 0;
+	dmabuf->swptr = dmabuf->hwptr = 0;
+	spin_unlock_irqrestore(&state->card->lock, flags);
+
+	/* allocate DMA buffer, let alloc_dmabuf determine if we are already
+	 * allocated well enough or if we should replace the current buffer
+	 * (assuming one is already allocated, if it isn't, then allocate it).
+	 */
+	if ((ret = alloc_dmabuf(state)))
+		return ret;
+
+	/* FIXME: figure out all this OSS fragment stuff */
+	/* I did, it now does what it should according to the OSS API.  DL */
+	/* We may not have realloced our dmabuf, but the fragment size to
+	 * fragment number ratio may have changed, so go ahead and reprogram
+	 * things
+	 */
+	dmabuf->dmasize = PAGE_SIZE << dmabuf->buforder;
+	dmabuf->numfrag = SG_LEN;
+	dmabuf->fragsize = dmabuf->dmasize/dmabuf->numfrag;
+	dmabuf->fragsamples = dmabuf->fragsize >> 1;
+	dmabuf->fragshift = ffs(dmabuf->fragsize) - 1;
+	dmabuf->userfragsize = dmabuf->ossfragsize;
+	dmabuf->userfrags = dmabuf->dmasize/dmabuf->ossfragsize;
+
+	memset(dmabuf->rawbuf, 0, dmabuf->dmasize);
+
+	if(dmabuf->ossmaxfrags == 4) {
+		fragint = 8;
+	} else if (dmabuf->ossmaxfrags == 8) {
+		fragint = 4;
+	} else if (dmabuf->ossmaxfrags == 16) {
+		fragint = 2;
+	} else {
+		fragint = 1;
+	}
+	/*
+	 *	Now set up the ring 
+	 */
+	if(dmabuf->read_channel)
+		c = dmabuf->read_channel;
+	else
+		c = dmabuf->write_channel;
+	while(c != NULL) {
+		sg=&c->sg[0];
+		/*
+		 *	Load up 32 sg entries and take an interrupt at half
+		 *	way (we might want more interrupts later..) 
+		 */
+	  
+		for(i=0;i<dmabuf->numfrag;i++)
+		{
+			sg->busaddr=(u32)dmabuf->dma_handle+dmabuf->fragsize*i;
+			// the card will always be doing 16bit stereo
+			sg->control=dmabuf->fragsamples;
+			if(state->card->pci_id == PCI_DEVICE_ID_SI_7012)
+				sg->control <<= 1;
+			sg->control|=CON_BUFPAD;
+			// set us up to get IOC interrupts as often as needed to
+			// satisfy numfrag requirements, no more
+			if( ((i+1) % fragint) == 0) {
+				sg->control|=CON_IOC;
+			}
+			sg++;
+		}
+		spin_lock_irqsave(&state->card->lock, flags);
+		I810_IOWRITEB(2, state->card, c->port+OFF_CR);   /* reset DMA machine */
+		while( I810_IOREADB(state->card, c->port+OFF_CR) & 0x02 ) ;
+		I810_IOWRITEL((u32)state->card->chandma +
+		    c->num*sizeof(struct i810_channel),
+		    state->card, c->port+OFF_BDBAR);
+		CIV_TO_LVI(state->card, c->port, 0);
+
+		spin_unlock_irqrestore(&state->card->lock, flags);
+
+		if(c != dmabuf->write_channel)
+			c = dmabuf->write_channel;
+		else
+			c = NULL;
+	}
+	
+	/* set the ready flag for the dma buffer */
+	dmabuf->ready = 1;
+
+#ifdef DEBUG
+	printk("i810_audio: prog_dmabuf, sample rate = %d, format = %d,\n\tnumfrag = %d, "
+	       "fragsize = %d dmasize = %d\n",
+	       dmabuf->rate, dmabuf->fmt, dmabuf->numfrag,
+	       dmabuf->fragsize, dmabuf->dmasize);
+#endif
+
+	return 0;
+}
+
+static void __i810_update_lvi(struct i810_state *state, int rec)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	int x, port;
+	int trigger;
+	int count, fragsize;
+	void (*start)(struct i810_state *);
+
+	count = dmabuf->count;
+	if (rec) {
+		port = dmabuf->read_channel->port;
+		trigger = PCM_ENABLE_INPUT;
+		start = __start_adc;
+		count = dmabuf->dmasize - count;
+	} else {
+		port = dmabuf->write_channel->port;
+		trigger = PCM_ENABLE_OUTPUT;
+		start = __start_dac;
+	}
+
+	/* Do not process partial fragments. */
+	fragsize = dmabuf->fragsize;
+	if (count < fragsize)
+		return;
+
+	/* if we are currently stopped, then our CIV is actually set to our
+	 * *last* sg segment and we are ready to wrap to the next.  However,
+	 * if we set our LVI to the last sg segment, then it won't wrap to
+	 * the next sg segment, it won't even get a start.  So, instead, when
+	 * we are stopped, we set both the LVI value and also we increment
+	 * the CIV value to the next sg segment to be played so that when
+	 * we call start, things will operate properly.  Since the CIV can't
+	 * be written to directly for this purpose, we set the LVI to CIV + 1
+	 * temporarily.  Once the engine has started we set the LVI to its
+	 * final value.
+	 */
+	if (!dmabuf->enable && dmabuf->ready) {
+		if (!(dmabuf->trigger & trigger))
+			return;
+
+		CIV_TO_LVI(state->card, port, 1);
+
+		start(state);
+		while (!(I810_IOREADB(state->card, port + OFF_CR) & ((1<<4) | (1<<2))))
+			;
+	}
+
+	/* MASKP2(swptr, fragsize) - 1 is the tail of our transfer */
+	x = MODULOP2(MASKP2(dmabuf->swptr, fragsize) - 1, dmabuf->dmasize);
+	x >>= dmabuf->fragshift;
+	I810_IOWRITEB(x, state->card, port + OFF_LVI);
+}
+
+static void i810_update_lvi(struct i810_state *state, int rec)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned long flags;
+
+	if(!dmabuf->ready)
+		return;
+	spin_lock_irqsave(&state->card->lock, flags);
+	__i810_update_lvi(state, rec);
+	spin_unlock_irqrestore(&state->card->lock, flags);
+}
+
+/* update buffer manangement pointers, especially, dmabuf->count and dmabuf->hwptr */
+static void i810_update_ptr(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned hwptr;
+	unsigned fragmask, dmamask;
+	int diff;
+
+	fragmask = MASKP2(~0, dmabuf->fragsize);
+	dmamask = MODULOP2(~0, dmabuf->dmasize);
+
+	/* error handling and process wake up for ADC */
+	if (dmabuf->enable == ADC_RUNNING) {
+		/* update hardware pointer */
+		hwptr = i810_get_dma_addr(state, 1) & fragmask;
+		diff = (hwptr - dmabuf->hwptr) & dmamask;
+#if defined(DEBUG_INTERRUPTS) || defined(DEBUG_MMAP)
+		printk("ADC HWP %d,%d,%d\n", hwptr, dmabuf->hwptr, diff);
+#endif
+		dmabuf->hwptr = hwptr;
+		dmabuf->total_bytes += diff;
+		dmabuf->count += diff;
+		if (dmabuf->count > dmabuf->dmasize) {
+			/* buffer underrun or buffer overrun */
+			/* this is normal for the end of a read */
+			/* only give an error if we went past the */
+			/* last valid sg entry */
+			if (GET_CIV(state->card, PI_BASE) !=
+			    GET_LVI(state->card, PI_BASE)) {
+				printk(KERN_WARNING "i810_audio: DMA overrun on read\n");
+				dmabuf->error++;
+			}
+		}
+		if (diff)
+			wake_up(&dmabuf->wait);
+	}
+	/* error handling and process wake up for DAC */
+	if (dmabuf->enable == DAC_RUNNING) {
+		/* update hardware pointer */
+		hwptr = i810_get_dma_addr(state, 0) & fragmask;
+		diff = (hwptr - dmabuf->hwptr) & dmamask;
+#if defined(DEBUG_INTERRUPTS) || defined(DEBUG_MMAP)
+		printk("DAC HWP %d,%d,%d\n", hwptr, dmabuf->hwptr, diff);
+#endif
+		dmabuf->hwptr = hwptr;
+		dmabuf->total_bytes += diff;
+		dmabuf->count -= diff;
+		if (dmabuf->count < 0) {
+			/* buffer underrun or buffer overrun */
+			/* this is normal for the end of a write */
+			/* only give an error if we went past the */
+			/* last valid sg entry */
+			if (GET_CIV(state->card, PO_BASE) !=
+			    GET_LVI(state->card, PO_BASE)) {
+				printk(KERN_WARNING "i810_audio: DMA overrun on write\n");
+				printk("i810_audio: CIV %d, LVI %d, hwptr %x, "
+					"count %d\n",
+					GET_CIV(state->card, PO_BASE),
+					GET_LVI(state->card, PO_BASE),
+					dmabuf->hwptr, dmabuf->count);
+				dmabuf->error++;
+			}
+		}
+		if (diff)
+			wake_up(&dmabuf->wait);
+	}
+}
+
+static inline int i810_get_free_write_space(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	int free;
+
+	i810_update_ptr(state);
+	// catch underruns during playback
+	if (dmabuf->count < 0) {
+		dmabuf->count = 0;
+		dmabuf->swptr = dmabuf->hwptr;
+	}
+	free = dmabuf->dmasize - dmabuf->count;
+	if(free < 0)
+		return(0);
+	return(free);
+}
+
+static inline int i810_get_available_read_data(struct i810_state *state)
+{
+	struct dmabuf *dmabuf = &state->dmabuf;
+	int avail;
+
+	i810_update_ptr(state);
+	// catch overruns during record
+	if (dmabuf->count > dmabuf->dmasize) {
+		dmabuf->count = dmabuf->dmasize;
+		dmabuf->swptr = dmabuf->hwptr;
+	}
+	avail = dmabuf->count;
+	if(avail < 0)
+		return(0);
+	return(avail);
+}
+
+static inline void fill_partial_frag(struct dmabuf *dmabuf)
+{
+	unsigned fragsize;
+	unsigned swptr, len;
+
+	fragsize = dmabuf->fragsize;
+	swptr = dmabuf->swptr;
+	len = fragsize - MODULOP2(dmabuf->swptr, fragsize);
+	if (len == fragsize)
+		return;
+
+	memset(dmabuf->rawbuf + swptr, '\0', len);
+	dmabuf->swptr = MODULOP2(swptr + len, dmabuf->dmasize);
+	dmabuf->count += len;
+}
+
+static int drain_dac(struct i810_state *state, int signals_allowed)
+{
+	DECLARE_WAITQUEUE(wait, current);
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned long flags;
+	unsigned long tmo;
+	int count;
+
+	if (!dmabuf->ready)
+		return 0;
+	if(dmabuf->mapped) {
+		stop_dac(state);
+		return 0;
+	}
+
+	spin_lock_irqsave(&state->card->lock, flags);
+
+	fill_partial_frag(dmabuf);
+
+	/* 
+	 * This will make sure that our LVI is correct, that our
+	 * pointer is updated, and that the DAC is running.  We
+	 * have to force the setting of dmabuf->trigger to avoid
+	 * any possible deadlocks.
+	 */
+	dmabuf->trigger = PCM_ENABLE_OUTPUT;
+	__i810_update_lvi(state, 0);
+
+	spin_unlock_irqrestore(&state->card->lock, flags);
+
+	add_wait_queue(&dmabuf->wait, &wait);
+	for (;;) {
+
+		spin_lock_irqsave(&state->card->lock, flags);
+		i810_update_ptr(state);
+		count = dmabuf->count;
+
+		/* It seems that we have to set the current state to
+		 * TASK_INTERRUPTIBLE every time to make the process
+		 * really go to sleep.  This also has to be *after* the
+		 * update_ptr() call because update_ptr is likely to
+		 * do a wake_up() which will unset this before we ever
+		 * try to sleep, resuling in a tight loop in this code
+		 * instead of actually sleeping and waiting for an
+		 * interrupt to wake us up!
+		 */
+		__set_current_state(signals_allowed ?
+				    TASK_INTERRUPTIBLE : TASK_UNINTERRUPTIBLE);
+		spin_unlock_irqrestore(&state->card->lock, flags);
+
+		if (count <= 0)
+			break;
+
+                if (signal_pending(current) && signals_allowed) {
+                        break;
+                }
+
+		/*
+		 * set the timeout to significantly longer than it *should*
+		 * take for the DAC to drain the DMA buffer
+		 */
+		tmo = (count * HZ) / (dmabuf->rate);
+		if (!schedule_timeout(tmo >= 2 ? tmo : 2)){
+			printk(KERN_ERR "i810_audio: drain_dac, dma timeout?\n");
+			count = 0;
+			break;
+		}
+	}
+	set_current_state(TASK_RUNNING);
+	remove_wait_queue(&dmabuf->wait, &wait);
+	if(count > 0 && signal_pending(current) && signals_allowed)
+		return -ERESTARTSYS;
+	stop_dac(state);
+	return 0;
+}
+
+static void i810_channel_interrupt(struct i810_card *card)
+{
+	int i, count;
+	
+#ifdef DEBUG_INTERRUPTS
+	printk("CHANNEL ");
+#endif
+	for(i=0;i<NR_HW_CH;i++)
+	{
+		struct i810_state *state = card->states[i];
+		struct i810_channel *c;
+		struct dmabuf *dmabuf;
+		unsigned long port;
+		u16 status;
+		
+		if(!state)
+			continue;
+		if(!state->dmabuf.ready)
+			continue;
+		dmabuf = &state->dmabuf;
+		if(dmabuf->enable & DAC_RUNNING) {
+			c=dmabuf->write_channel;
+		} else if(dmabuf->enable & ADC_RUNNING) {
+			c=dmabuf->read_channel;
+		} else	/* This can occur going from R/W to close */
+			continue;
+		
+		port = c->port;
+
+		if(card->pci_id == PCI_DEVICE_ID_SI_7012)
+			status = I810_IOREADW(card, port + OFF_PICB);
+		else
+			status = I810_IOREADW(card, port + OFF_SR);
+
+#ifdef DEBUG_INTERRUPTS
+		printk("NUM %d PORT %X IRQ ( ST%d ", c->num, c->port, status);
+#endif
+		if(status & DMA_INT_COMPLETE)
+		{
+			/* only wake_up() waiters if this interrupt signals
+			 * us being beyond a userfragsize of data open or
+			 * available, and i810_update_ptr() does that for
+			 * us
+			 */
+			i810_update_ptr(state);
+#ifdef DEBUG_INTERRUPTS
+			printk("COMP %d ", dmabuf->hwptr /
+					dmabuf->fragsize);
+#endif
+		}
+		if(status & (DMA_INT_LVI | DMA_INT_DCH))
+		{
+			/* wake_up() unconditionally on LVI and DCH */
+			i810_update_ptr(state);
+			wake_up(&dmabuf->wait);
+#ifdef DEBUG_INTERRUPTS
+			if(status & DMA_INT_LVI)
+				printk("LVI ");
+			if(status & DMA_INT_DCH)
+				printk("DCH -");
+#endif
+			count = dmabuf->count;
+			if(dmabuf->enable & ADC_RUNNING)
+				count = dmabuf->dmasize - count;
+			if (count >= (int)dmabuf->fragsize) {
+				I810_IOWRITEB(I810_IOREADB(card, port+OFF_CR) | 1, card, port+OFF_CR);
+#ifdef DEBUG_INTERRUPTS
+				printk(" CONTINUE ");
+#endif
+			} else {
+				if (dmabuf->enable & DAC_RUNNING)
+					__stop_dac(state);
+				if (dmabuf->enable & ADC_RUNNING)
+					__stop_adc(state);
+				dmabuf->enable = 0;
+#ifdef DEBUG_INTERRUPTS
+				printk(" STOP ");
+#endif
+			}
+		}
+		if(card->pci_id == PCI_DEVICE_ID_SI_7012)
+			I810_IOWRITEW(status & DMA_INT_MASK, card, port + OFF_PICB);
+		else
+			I810_IOWRITEW(status & DMA_INT_MASK, card, port + OFF_SR);
+	}
+#ifdef DEBUG_INTERRUPTS
+	printk(")\n");
+#endif
+}
+
+static irqreturn_t i810_interrupt(int irq, void *dev_id, struct pt_regs *regs)
+{
+	struct i810_card *card = (struct i810_card *)dev_id;
+	u32 status;
+
+	spin_lock(&card->lock);
+
+	status = I810_IOREADL(card, GLOB_STA);
+
+	if(!(status & INT_MASK)) 
+	{
+		spin_unlock(&card->lock);
+		return IRQ_NONE;  /* not for us */
+	}
+
+	if(status & (INT_PO|INT_PI|INT_MC))
+		i810_channel_interrupt(card);
+
+ 	/* clear 'em */
+	I810_IOWRITEL(status & INT_MASK, card, GLOB_STA);
+	spin_unlock(&card->lock);
+	return IRQ_HANDLED;
+}
+
+/* in this loop, dmabuf.count signifies the amount of data that is
+   waiting to be copied to the user's buffer.  It is filled by the dma
+   machine and drained by this loop. */
+
+static ssize_t i810_read(struct file *file, char *buffer, size_t count, loff_t *ppos)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct i810_card *card=state ? state->card : 0;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	ssize_t ret;
+	unsigned long flags;
+	unsigned int swptr;
+	int cnt;
+	int pending;
+        DECLARE_WAITQUEUE(waita, current);
+
+#ifdef DEBUG2
+	printk("i810_audio: i810_read called, count = %d\n", count);
+#endif
+
+	if (ppos != &file->f_pos)
+		return -ESPIPE;
+	if (dmabuf->mapped)
+		return -ENXIO;
+	if (dmabuf->enable & DAC_RUNNING)
+		return -ENODEV;
+	if (!dmabuf->read_channel) {
+		dmabuf->ready = 0;
+		dmabuf->read_channel = card->alloc_rec_pcm_channel(card);
+		if (!dmabuf->read_channel) {
+			return -EBUSY;
+		}
+	}
+	if (!dmabuf->ready && (ret = prog_dmabuf(state, 1)))
+		return ret;
+	if (!access_ok(VERIFY_WRITE, buffer, count))
+		return -EFAULT;
+	ret = 0;
+
+	pending = 0;
+
+        add_wait_queue(&dmabuf->wait, &waita);
+	while (count > 0) {
+		set_current_state(TASK_INTERRUPTIBLE);
+		spin_lock_irqsave(&card->lock, flags);
+                if (PM_SUSPENDED(card)) {
+                        spin_unlock_irqrestore(&card->lock, flags);
+                        schedule();
+                        if (signal_pending(current)) {
+                                if (!ret) ret = -EAGAIN;
+                                break;
+                        }
+                        continue;
+                }
+		cnt = i810_get_available_read_data(state);
+		swptr = dmabuf->swptr;
+		// this is to make the copy_to_user simpler below
+		if(cnt > (dmabuf->dmasize - swptr))
+			cnt = dmabuf->dmasize - swptr;
+		spin_unlock_irqrestore(&card->lock, flags);
+
+		if (cnt > count)
+			cnt = count;
+		if (cnt <= 0) {
+			unsigned long tmo;
+			/*
+			 * Don't let us deadlock.  The ADC won't start if
+			 * dmabuf->trigger isn't set.  A call to SETTRIGGER
+			 * could have turned it off after we set it to on
+			 * previously.
+			 */
+			dmabuf->trigger = PCM_ENABLE_INPUT;
+			/*
+			 * This does three things.  Updates LVI to be correct,
+			 * makes sure the ADC is running, and updates the
+			 * hwptr.
+			 */
+			i810_update_lvi(state,1);
+			if (file->f_flags & O_NONBLOCK) {
+				if (!ret) ret = -EAGAIN;
+				goto done;
+			}
+			/* Set the timeout to how long it would take to fill
+			 * two of our buffers.  If we haven't been woke up
+			 * by then, then we know something is wrong.
+			 */
+			tmo = (dmabuf->dmasize * HZ * 2) / (dmabuf->rate * 4);
+			/* There are two situations when sleep_on_timeout returns, one is when
+			   the interrupt is serviced correctly and the process is waked up by
+			   ISR ON TIME. Another is when timeout is expired, which means that
+			   either interrupt is NOT serviced correctly (pending interrupt) or it
+			   is TOO LATE for the process to be scheduled to run (scheduler latency)
+			   which results in a (potential) buffer overrun. And worse, there is
+			   NOTHING we can do to prevent it. */
+			if (!schedule_timeout(tmo >= 2 ? tmo : 2)) {
+#ifdef DEBUG
+				printk(KERN_ERR "i810_audio: recording schedule timeout, "
+				       "dmasz %u fragsz %u count %i hwptr %u swptr %u\n",
+				       dmabuf->dmasize, dmabuf->fragsize, dmabuf->count,
+				       dmabuf->hwptr, dmabuf->swptr);
+#endif
+				/* a buffer overrun, we delay the recovery until next time the
+				   while loop begin and we REALLY have space to record */
+			}
+			if (signal_pending(current)) {
+				ret = ret ? ret : -ERESTARTSYS;
+				goto done;
+			}
+			continue;
+		}
+
+		if (copy_to_user(buffer, dmabuf->rawbuf + swptr, cnt)) {
+			if (!ret) ret = -EFAULT;
+			goto done;
+		}
+
+		swptr = MODULOP2(swptr + cnt, dmabuf->dmasize);
+
+		spin_lock_irqsave(&card->lock, flags);
+
+                if (PM_SUSPENDED(card)) {
+                        spin_unlock_irqrestore(&card->lock, flags);
+                        continue;
+                }
+		dmabuf->swptr = swptr;
+		pending = dmabuf->count -= cnt;
+		spin_unlock_irqrestore(&card->lock, flags);
+
+		count -= cnt;
+		buffer += cnt;
+		ret += cnt;
+	}
+ done:
+	pending = dmabuf->dmasize - pending;
+	if (dmabuf->enable || pending >= dmabuf->userfragsize)
+		i810_update_lvi(state, 1);
+        set_current_state(TASK_RUNNING);
+        remove_wait_queue(&dmabuf->wait, &waita);
+
+	return ret;
+}
+
+/* in this loop, dmabuf.count signifies the amount of data that is waiting to be dma to
+   the soundcard.  it is drained by the dma machine and filled by this loop. */
+static ssize_t i810_write(struct file *file, const char *buffer, size_t count, loff_t *ppos)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct i810_card *card=state ? state->card : 0;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	ssize_t ret;
+	unsigned long flags;
+	unsigned int swptr = 0;
+	int pending;
+	int cnt;
+        DECLARE_WAITQUEUE(waita, current);
+
+#ifdef DEBUG2
+	printk("i810_audio: i810_write called, count = %d\n", count);
+#endif
+
+	if (ppos != &file->f_pos)
+		return -ESPIPE;
+	if (dmabuf->mapped)
+		return -ENXIO;
+	if (dmabuf->enable & ADC_RUNNING)
+		return -ENODEV;
+	if (!dmabuf->write_channel) {
+		dmabuf->ready = 0;
+		dmabuf->write_channel = card->alloc_pcm_channel(card);
+		if(!dmabuf->write_channel)
+			return -EBUSY;
+	}
+	if (!dmabuf->ready && (ret = prog_dmabuf(state, 0)))
+		return ret;
+	if (!access_ok(VERIFY_READ, buffer, count))
+		return -EFAULT;
+	ret = 0;
+
+	pending = 0;
+
+        add_wait_queue(&dmabuf->wait, &waita);
+	while (count > 0) {
+		set_current_state(TASK_INTERRUPTIBLE);
+		spin_lock_irqsave(&state->card->lock, flags);
+                if (PM_SUSPENDED(card)) {
+                        spin_unlock_irqrestore(&card->lock, flags);
+                        schedule();
+                        if (signal_pending(current)) {
+                                if (!ret) ret = -EAGAIN;
+                                break;
+                        }
+                        continue;
+                }
+
+		cnt = i810_get_free_write_space(state);
+		swptr = dmabuf->swptr;
+		/* Bound the maximum size to how much we can copy to the
+		 * dma buffer before we hit the end.  If we have more to
+		 * copy then it will get done in a second pass of this
+		 * loop starting from the beginning of the buffer.
+		 */
+		if(cnt > (dmabuf->dmasize - swptr))
+			cnt = dmabuf->dmasize - swptr;
+		spin_unlock_irqrestore(&state->card->lock, flags);
+
+#ifdef DEBUG2
+		printk(KERN_INFO "i810_audio: i810_write: %d bytes available space\n", cnt);
+#endif
+		if (cnt > count)
+			cnt = count;
+		if (cnt <= 0) {
+			unsigned long tmo;
+			// There is data waiting to be played
+			/*
+			 * Force the trigger setting since we would
+			 * deadlock with it set any other way
+			 */
+			dmabuf->trigger = PCM_ENABLE_OUTPUT;
+			i810_update_lvi(state,0);
+			if (file->f_flags & O_NONBLOCK) {
+				if (!ret) ret = -EAGAIN;
+				goto ret;
+			}
+			/* Not strictly correct but works */
+			tmo = (dmabuf->dmasize * HZ * 2) / (dmabuf->rate * 4);
+			/* There are two situations when sleep_on_timeout returns, one is when
+			   the interrupt is serviced correctly and the process is waked up by
+			   ISR ON TIME. Another is when timeout is expired, which means that
+			   either interrupt is NOT serviced correctly (pending interrupt) or it
+			   is TOO LATE for the process to be scheduled to run (scheduler latency)
+			   which results in a (potential) buffer underrun. And worse, there is
+			   NOTHING we can do to prevent it. */
+			if (!schedule_timeout(tmo >= 2 ? tmo : 2)) {
+#ifdef DEBUG
+				printk(KERN_ERR "i810_audio: playback schedule timeout, "
+				       "dmasz %u fragsz %u count %i hwptr %u swptr %u\n",
+				       dmabuf->dmasize, dmabuf->fragsize, dmabuf->count,
+				       dmabuf->hwptr, dmabuf->swptr);
+#endif
+				/* a buffer underrun, we delay the recovery until next time the
+				   while loop begin and we REALLY have data to play */
+				//return ret;
+			}
+			if (signal_pending(current)) {
+				if (!ret) ret = -ERESTARTSYS;
+				goto ret;
+			}
+			continue;
+		}
+		if (copy_from_user(dmabuf->rawbuf+swptr,buffer,cnt)) {
+			if (!ret) ret = -EFAULT;
+			goto ret;
+		}
+
+		swptr = MODULOP2(swptr + cnt, dmabuf->dmasize);
+
+		spin_lock_irqsave(&state->card->lock, flags);
+                if (PM_SUSPENDED(card)) {
+                        spin_unlock_irqrestore(&card->lock, flags);
+                        continue;
+                }
+
+		dmabuf->swptr = swptr;
+		pending = dmabuf->count += cnt;
+
+		count -= cnt;
+		buffer += cnt;
+		ret += cnt;
+		spin_unlock_irqrestore(&state->card->lock, flags);
+	}
+ret:
+	if (dmabuf->enable || pending >= dmabuf->userfragsize)
+		i810_update_lvi(state, 0);
+        set_current_state(TASK_RUNNING);
+        remove_wait_queue(&dmabuf->wait, &waita);
+
+	return ret;
+}
+
+/* No kernel lock - we have our own spinlock */
+static unsigned int i810_poll(struct file *file, struct poll_table_struct *wait)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned long flags;
+	unsigned int mask = 0;
+
+	if(!dmabuf->ready)
+		return 0;
+	poll_wait(file, &dmabuf->wait, wait);
+	spin_lock_irqsave(&state->card->lock, flags);
+	if (dmabuf->enable & ADC_RUNNING ||
+	    dmabuf->trigger & PCM_ENABLE_INPUT) {
+		if (i810_get_available_read_data(state) >= 
+		    (signed)dmabuf->userfragsize)
+			mask |= POLLIN | POLLRDNORM;
+	}
+	if (dmabuf->enable & DAC_RUNNING ||
+	    dmabuf->trigger & PCM_ENABLE_OUTPUT) {
+		if (i810_get_free_write_space(state) >=
+		    (signed)dmabuf->userfragsize)
+			mask |= POLLOUT | POLLWRNORM;
+	}
+	spin_unlock_irqrestore(&state->card->lock, flags);
+	return mask;
+}
+
+static int i810_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	int ret = -EINVAL;
+	unsigned long size;
+
+	lock_kernel();
+	if (vma->vm_flags & VM_WRITE) {
+		if (!dmabuf->write_channel &&
+		    (dmabuf->write_channel =
+		     state->card->alloc_pcm_channel(state->card)) == NULL) {
+			ret = -EBUSY;
+			goto out;
+		}
+	}
+	if (vma->vm_flags & VM_READ) {
+		if (!dmabuf->read_channel &&
+		    (dmabuf->read_channel = 
+		     state->card->alloc_rec_pcm_channel(state->card)) == NULL) {
+			ret = -EBUSY;
+			goto out;
+		}
+	}
+	if ((ret = prog_dmabuf(state, 0)) != 0)
+		goto out;
+
+	ret = -EINVAL;
+	if (vma->vm_pgoff != 0)
+		goto out;
+	size = vma->vm_end - vma->vm_start;
+	if (size > (PAGE_SIZE << dmabuf->buforder))
+		goto out;
+	ret = -EAGAIN;
+	if (remap_page_range(vma->vm_start, virt_to_phys(dmabuf->rawbuf),
+			     size, vma->vm_page_prot))
+		goto out;
+	dmabuf->mapped = 1;
+	dmabuf->trigger = 0;
+	ret = 0;
+#ifdef DEBUG_MMAP
+	printk("i810_audio: mmap'ed %ld bytes of data space\n", size);
+#endif
+out:
+	unlock_kernel();
+	return ret;
+}
+
+static int i810_ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct i810_channel *c = NULL;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned long flags;
+	audio_buf_info abinfo;
+	count_info cinfo;
+	unsigned int i_glob_cnt;
+	int val = 0, ret;
+	struct ac97_codec *codec = state->card->ac97_codec[0];
+
+#ifdef DEBUG
+	printk("i810_audio: i810_ioctl, arg=0x%x, cmd=", arg ? *(int *)arg : 0);
+#endif
+
+	switch (cmd) 
+	{
+	case OSS_GETVERSION:
+#ifdef DEBUG
+		printk("OSS_GETVERSION\n");
+#endif
+		return put_user(SOUND_VERSION, (int *)arg);
+
+	case SNDCTL_DSP_RESET:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_RESET\n");
+#endif
+		spin_lock_irqsave(&state->card->lock, flags);
+		if (dmabuf->enable == DAC_RUNNING) {
+			c = dmabuf->write_channel;
+			__stop_dac(state);
+		}
+		if (dmabuf->enable == ADC_RUNNING) {
+			c = dmabuf->read_channel;
+			__stop_adc(state);
+		}
+		if (c != NULL) {
+			I810_IOWRITEB(2, state->card, c->port+OFF_CR);   /* reset DMA machine */
+			while ( I810_IOREADB(state->card, c->port+OFF_CR) & 2 )
+				cpu_relax();
+			I810_IOWRITEL((u32)state->card->chandma +
+			    c->num*sizeof(struct i810_channel),
+			    state->card, c->port+OFF_BDBAR);
+			CIV_TO_LVI(state->card, c->port, 0);
+		}
+
+		spin_unlock_irqrestore(&state->card->lock, flags);
+		synchronize_irq();
+		dmabuf->ready = 0;
+		dmabuf->swptr = dmabuf->hwptr = 0;
+		dmabuf->count = dmabuf->total_bytes = 0;
+		return 0;
+
+	case SNDCTL_DSP_SYNC:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SYNC\n");
+#endif
+		if (dmabuf->enable != DAC_RUNNING || file->f_flags & O_NONBLOCK)
+			return 0;
+		if((val = drain_dac(state, 1)))
+			return val;
+		dmabuf->total_bytes = 0;
+		return 0;
+
+	case SNDCTL_DSP_SPEED: /* set smaple rate */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SPEED\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+		if (val >= 0) {
+			if (file->f_mode & FMODE_WRITE) {
+				if ( (state->card->ac97_status & SPDIF_ON) ) {  /* S/PDIF Enabled */
+					/* AD1886 only supports 48000, need to check that */
+					if ( i810_valid_spdif_rate ( codec, val ) ) {
+						/* Set DAC rate */
+                                        	i810_set_spdif_output ( state, -1, 0 );
+						stop_dac(state);
+						dmabuf->ready = 0;
+						spin_lock_irqsave(&state->card->lock, flags);
+						i810_set_dac_rate(state, val);
+						spin_unlock_irqrestore(&state->card->lock, flags);
+						/* Set S/PDIF transmitter rate. */
+						i810_set_spdif_output ( state, AC97_EA_SPSA_3_4, val );
+	                                        if ( ! (state->card->ac97_status & SPDIF_ON) ) {
+							val = dmabuf->rate;
+						}
+					} else { /* Not a valid rate for S/PDIF, ignore it */
+						val = dmabuf->rate;
+					}
+				} else {
+					stop_dac(state);
+					dmabuf->ready = 0;
+					spin_lock_irqsave(&state->card->lock, flags);
+					i810_set_dac_rate(state, val);
+					spin_unlock_irqrestore(&state->card->lock, flags);
+				}
+			}
+			if (file->f_mode & FMODE_READ) {
+				stop_adc(state);
+				dmabuf->ready = 0;
+				spin_lock_irqsave(&state->card->lock, flags);
+				i810_set_adc_rate(state, val);
+				spin_unlock_irqrestore(&state->card->lock, flags);
+			}
+		}
+		return put_user(dmabuf->rate, (int *)arg);
+
+	case SNDCTL_DSP_STEREO: /* set stereo or mono channel */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_STEREO\n");
+#endif
+		if (dmabuf->enable & DAC_RUNNING) {
+			stop_dac(state);
+		}
+		if (dmabuf->enable & ADC_RUNNING) {
+			stop_adc(state);
+		}
+		return put_user(1, (int *)arg);
+
+	case SNDCTL_DSP_GETBLKSIZE:
+		if (file->f_mode & FMODE_WRITE) {
+			if (!dmabuf->ready && (val = prog_dmabuf(state, 0)))
+				return val;
+		}
+		if (file->f_mode & FMODE_READ) {
+			if (!dmabuf->ready && (val = prog_dmabuf(state, 1)))
+				return val;
+		}
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETBLKSIZE %d\n", dmabuf->userfragsize);
+#endif
+		return put_user(dmabuf->userfragsize, (int *)arg);
+
+	case SNDCTL_DSP_GETFMTS: /* Returns a mask of supported sample format*/
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETFMTS\n");
+#endif
+		return put_user(AFMT_S16_LE, (int *)arg);
+
+	case SNDCTL_DSP_SETFMT: /* Select sample format */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SETFMT\n");
+#endif
+		return put_user(AFMT_S16_LE, (int *)arg);
+
+	case SNDCTL_DSP_CHANNELS:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_CHANNELS\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+
+		if (val > 0) {
+			if (dmabuf->enable & DAC_RUNNING) {
+				stop_dac(state);
+			}
+			if (dmabuf->enable & ADC_RUNNING) {
+				stop_adc(state);
+			}
+		} else {
+			return put_user(state->card->channels, (int *)arg);
+		}
+
+		/* ICH and ICH0 only support 2 channels */
+		if ( state->card->pci_id == PCI_DEVICE_ID_INTEL_82801AA_5
+		     || state->card->pci_id == PCI_DEVICE_ID_INTEL_82801AB_5) 
+			return put_user(2, (int *)arg);
+	
+		/* Multi-channel support was added with ICH2. Bits in */
+		/* Global Status and Global Control register are now  */
+		/* used to indicate this.                             */
+
+                i_glob_cnt = I810_IOREADL(state->card, GLOB_CNT);
+
+		/* Current # of channels enabled */
+		if ( i_glob_cnt & 0x0100000 )
+			ret = 4;
+		else if ( i_glob_cnt & 0x0200000 )
+			ret = 6;
+		else
+			ret = 2;
+
+		switch ( val ) {
+			case 2: /* 2 channels is always supported */
+				I810_IOWRITEL(i_glob_cnt & 0xffcfffff,
+				     state->card, GLOB_CNT);
+				/* Do we need to change mixer settings????  */
+				break;
+			case 4: /* Supported on some chipsets, better check first */
+				if ( state->card->channels >= 4 ) {
+					I810_IOWRITEL((i_glob_cnt & 0xffcfffff) | 0x100000,
+					      state->card, GLOB_CNT);
+					/* Do we need to change mixer settings??? */
+				} else {
+					val = ret;
+				}
+				break;
+			case 6: /* Supported on some chipsets, better check first */
+				if ( state->card->channels >= 6 ) {
+					I810_IOWRITEL((i_glob_cnt & 0xffcfffff) | 0x200000,
+					      state->card, GLOB_CNT);
+					/* Do we need to change mixer settings??? */
+				} else {
+					val = ret;
+				}
+				break;
+			default: /* nothing else is ever supported by the chipset */
+				val = ret;
+				break;
+		}
+
+		return put_user(val, (int *)arg);
+
+	case SNDCTL_DSP_POST: /* the user has sent all data and is notifying us */
+		/* we update the swptr to the end of the last sg segment then return */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_POST\n");
+#endif
+		if(!dmabuf->ready || (dmabuf->enable != DAC_RUNNING))
+			return 0;
+		if((dmabuf->swptr % dmabuf->fragsize) != 0) {
+			val = dmabuf->fragsize - (dmabuf->swptr % dmabuf->fragsize);
+			dmabuf->swptr += val;
+			dmabuf->count += val;
+		}
+		return 0;
+
+	case SNDCTL_DSP_SUBDIVIDE:
+		if (dmabuf->subdivision)
+			return -EINVAL;
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+		if (val != 1 && val != 2 && val != 4)
+			return -EINVAL;
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SUBDIVIDE %d\n", val);
+#endif
+		dmabuf->subdivision = val;
+		dmabuf->ready = 0;
+		return 0;
+
+	case SNDCTL_DSP_SETFRAGMENT:
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+
+		dmabuf->ossfragsize = 1<<(val & 0xffff);
+		dmabuf->ossmaxfrags = (val >> 16) & 0xffff;
+		if (!dmabuf->ossfragsize || !dmabuf->ossmaxfrags)
+			return -EINVAL;
+		/*
+		 * Bound the frag size into our allowed range of 256 - 4096
+		 */
+		if (dmabuf->ossfragsize < 256)
+			dmabuf->ossfragsize = 256;
+		else if (dmabuf->ossfragsize > 4096)
+			dmabuf->ossfragsize = 4096;
+		/*
+		 * The numfrags could be something reasonable, or it could
+		 * be 0xffff meaning "Give me as much as possible".  So,
+		 * we check the numfrags * fragsize doesn't exceed our
+		 * 64k buffer limit, nor is it less than our 8k minimum.
+		 * If it fails either one of these checks, then adjust the
+		 * number of fragments, not the size of them.  It's OK if
+		 * our number of fragments doesn't equal 32 or anything
+		 * like our hardware based number now since we are using
+		 * a different frag count for the hardware.  Before we get
+		 * into this though, bound the maxfrags to avoid overflow
+		 * issues.  A reasonable bound would be 64k / 256 since our
+		 * maximum buffer size is 64k and our minimum frag size is
+		 * 256.  On the other end, our minimum buffer size is 8k and
+		 * our maximum frag size is 4k, so the lower bound should
+		 * be 2.
+		 */
+
+		if(dmabuf->ossmaxfrags > 256)
+			dmabuf->ossmaxfrags = 256;
+		else if (dmabuf->ossmaxfrags < 2)
+			dmabuf->ossmaxfrags = 2;
+
+		val = dmabuf->ossfragsize * dmabuf->ossmaxfrags;
+		while (val < 8192) {
+		    val <<= 1;
+		    dmabuf->ossmaxfrags <<= 1;
+		}
+		while (val > 65536) {
+		    val >>= 1;
+		    dmabuf->ossmaxfrags >>= 1;
+		}
+		dmabuf->ready = 0;
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SETFRAGMENT 0x%x, %d, %d\n", val,
+			dmabuf->ossfragsize, dmabuf->ossmaxfrags);
+#endif
+
+		return 0;
+
+	case SNDCTL_DSP_GETOSPACE:
+		if (!(file->f_mode & FMODE_WRITE))
+			return -EINVAL;
+		if (!dmabuf->ready && (val = prog_dmabuf(state, 0)) != 0)
+			return val;
+		spin_lock_irqsave(&state->card->lock, flags);
+		i810_update_ptr(state);
+		abinfo.fragsize = dmabuf->userfragsize;
+		abinfo.fragstotal = dmabuf->userfrags;
+		if (dmabuf->mapped)
+ 			abinfo.bytes = dmabuf->dmasize;
+  		else
+ 			abinfo.bytes = i810_get_free_write_space(state);
+		abinfo.fragments = abinfo.bytes / dmabuf->userfragsize;
+		spin_unlock_irqrestore(&state->card->lock, flags);
+#if defined(DEBUG) || defined(DEBUG_MMAP)
+		printk("SNDCTL_DSP_GETOSPACE %d, %d, %d, %d\n", abinfo.bytes,
+			abinfo.fragsize, abinfo.fragments, abinfo.fragstotal);
+#endif
+		return copy_to_user((void *)arg, &abinfo, sizeof(abinfo)) ? -EFAULT : 0;
+
+	case SNDCTL_DSP_GETOPTR:
+		if (!(file->f_mode & FMODE_WRITE))
+			return -EINVAL;
+		if (!dmabuf->ready && (val = prog_dmabuf(state, 0)) != 0)
+			return val;
+		spin_lock_irqsave(&state->card->lock, flags);
+		val = i810_get_free_write_space(state);
+		cinfo.bytes = dmabuf->total_bytes;
+		cinfo.ptr = dmabuf->hwptr;
+		cinfo.blocks = val/dmabuf->userfragsize;
+		if (dmabuf->mapped && (dmabuf->trigger & PCM_ENABLE_OUTPUT)) {
+			dmabuf->count += val;
+			dmabuf->swptr = (dmabuf->swptr + val) % dmabuf->dmasize;
+			__i810_update_lvi(state, 0);
+		}
+		spin_unlock_irqrestore(&state->card->lock, flags);
+#if defined(DEBUG) || defined(DEBUG_MMAP)
+		printk("SNDCTL_DSP_GETOPTR %d, %d, %d, %d\n", cinfo.bytes,
+			cinfo.blocks, cinfo.ptr, dmabuf->count);
+#endif
+		return copy_to_user((void *)arg, &cinfo, sizeof(cinfo)) ? -EFAULT : 0;
+
+	case SNDCTL_DSP_GETISPACE:
+		if (!(file->f_mode & FMODE_READ))
+			return -EINVAL;
+		if (!dmabuf->ready && (val = prog_dmabuf(state, 1)) != 0)
+			return val;
+		spin_lock_irqsave(&state->card->lock, flags);
+		abinfo.bytes = i810_get_available_read_data(state);
+		abinfo.fragsize = dmabuf->userfragsize;
+		abinfo.fragstotal = dmabuf->userfrags;
+		abinfo.fragments = abinfo.bytes / dmabuf->userfragsize;
+		spin_unlock_irqrestore(&state->card->lock, flags);
+#if defined(DEBUG) || defined(DEBUG_MMAP)
+		printk("SNDCTL_DSP_GETISPACE %d, %d, %d, %d\n", abinfo.bytes,
+			abinfo.fragsize, abinfo.fragments, abinfo.fragstotal);
+#endif
+		return copy_to_user((void *)arg, &abinfo, sizeof(abinfo)) ? -EFAULT : 0;
+
+	case SNDCTL_DSP_GETIPTR:
+		if (!(file->f_mode & FMODE_READ))
+			return -EINVAL;
+		if (!dmabuf->ready && (val = prog_dmabuf(state, 0)) != 0)
+			return val;
+		spin_lock_irqsave(&state->card->lock, flags);
+		val = i810_get_available_read_data(state);
+		cinfo.bytes = dmabuf->total_bytes;
+		cinfo.blocks = val/dmabuf->userfragsize;
+		cinfo.ptr = dmabuf->hwptr;
+		if (dmabuf->mapped && (dmabuf->trigger & PCM_ENABLE_INPUT)) {
+			dmabuf->count -= val;
+			dmabuf->swptr = (dmabuf->swptr + val) % dmabuf->dmasize;
+			__i810_update_lvi(state, 1);
+		}
+		spin_unlock_irqrestore(&state->card->lock, flags);
+#if defined(DEBUG) || defined(DEBUG_MMAP)
+		printk("SNDCTL_DSP_GETIPTR %d, %d, %d, %d\n", cinfo.bytes,
+			cinfo.blocks, cinfo.ptr, dmabuf->count);
+#endif
+		return copy_to_user((void *)arg, &cinfo, sizeof(cinfo)) ? -EFAULT : 0;
+
+	case SNDCTL_DSP_NONBLOCK:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_NONBLOCK\n");
+#endif
+		file->f_flags |= O_NONBLOCK;
+		return 0;
+
+	case SNDCTL_DSP_GETCAPS:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETCAPS\n");
+#endif
+	    return put_user(DSP_CAP_REALTIME|DSP_CAP_TRIGGER|DSP_CAP_MMAP|DSP_CAP_BIND,
+			    (int *)arg);
+
+	case SNDCTL_DSP_GETTRIGGER:
+		val = 0;
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETTRIGGER 0x%x\n", dmabuf->trigger);
+#endif
+		return put_user(dmabuf->trigger, (int *)arg);
+
+	case SNDCTL_DSP_SETTRIGGER:
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+#if defined(DEBUG) || defined(DEBUG_MMAP)
+		printk("SNDCTL_DSP_SETTRIGGER 0x%x\n", val);
+#endif
+		/* silently ignore invalid PCM_ENABLE_xxx bits,
+		 * like the other drivers do
+		 */
+		if (!(file->f_mode & FMODE_READ ))
+			val &= ~PCM_ENABLE_INPUT;
+		if (!(file->f_mode & FMODE_WRITE ))
+			val &= ~PCM_ENABLE_OUTPUT;
+		if((file->f_mode & FMODE_READ) && !(val & PCM_ENABLE_INPUT) && dmabuf->enable == ADC_RUNNING) {
+			stop_adc(state);
+		}
+		if((file->f_mode & FMODE_WRITE) && !(val & PCM_ENABLE_OUTPUT) && dmabuf->enable == DAC_RUNNING) {
+			stop_dac(state);
+		}
+		dmabuf->trigger = val;
+		if((val & PCM_ENABLE_OUTPUT) && !(dmabuf->enable & DAC_RUNNING)) {
+			if (!dmabuf->write_channel) {
+				dmabuf->ready = 0;
+				dmabuf->write_channel = state->card->alloc_pcm_channel(state->card);
+				if (!dmabuf->write_channel)
+					return -EBUSY;
+			}
+			if (!dmabuf->ready && (ret = prog_dmabuf(state, 0)))
+				return ret;
+			if (dmabuf->mapped) {
+				spin_lock_irqsave(&state->card->lock, flags);
+				i810_update_ptr(state);
+				dmabuf->count = 0;
+				dmabuf->swptr = dmabuf->hwptr;
+				dmabuf->count = i810_get_free_write_space(state);
+				dmabuf->swptr = (dmabuf->swptr + dmabuf->count) % dmabuf->dmasize;
+				spin_unlock_irqrestore(&state->card->lock, flags);
+			}
+			i810_update_lvi(state, 0);
+			start_dac(state);
+		}
+		if((val & PCM_ENABLE_INPUT) && !(dmabuf->enable & ADC_RUNNING)) {
+			if (!dmabuf->read_channel) {
+				dmabuf->ready = 0;
+				dmabuf->read_channel = state->card->alloc_rec_pcm_channel(state->card);
+				if (!dmabuf->read_channel)
+					return -EBUSY;
+			}
+			if (!dmabuf->ready && (ret = prog_dmabuf(state, 1)))
+				return ret;
+			if (dmabuf->mapped) {
+				spin_lock_irqsave(&state->card->lock, flags);
+				i810_update_ptr(state);
+				dmabuf->swptr = dmabuf->hwptr;
+				dmabuf->count = 0;
+				spin_unlock_irqrestore(&state->card->lock, flags);
+			}
+			i810_update_lvi(state, 1);
+			start_adc(state);
+		}
+		return 0;
+
+	case SNDCTL_DSP_SETDUPLEX:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SETDUPLEX\n");
+#endif
+		return -EINVAL;
+
+	case SNDCTL_DSP_GETODELAY:
+		if (!(file->f_mode & FMODE_WRITE))
+			return -EINVAL;
+		spin_lock_irqsave(&state->card->lock, flags);
+		i810_update_ptr(state);
+		val = dmabuf->count;
+		spin_unlock_irqrestore(&state->card->lock, flags);
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETODELAY %d\n", dmabuf->count);
+#endif
+		return put_user(val, (int *)arg);
+
+	case SOUND_PCM_READ_RATE:
+#ifdef DEBUG
+		printk("SOUND_PCM_READ_RATE %d\n", dmabuf->rate);
+#endif
+		return put_user(dmabuf->rate, (int *)arg);
+
+	case SOUND_PCM_READ_CHANNELS:
+#ifdef DEBUG
+		printk("SOUND_PCM_READ_CHANNELS\n");
+#endif
+		return put_user(2, (int *)arg);
+
+	case SOUND_PCM_READ_BITS:
+#ifdef DEBUG
+		printk("SOUND_PCM_READ_BITS\n");
+#endif
+		return put_user(AFMT_S16_LE, (int *)arg);
+
+	case SNDCTL_DSP_SETSPDIF: /* Set S/PDIF Control register */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_SETSPDIF\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+
+		/* Check to make sure the codec supports S/PDIF transmitter */
+
+		if((state->card->ac97_features & 4)) {
+			/* mask out the transmitter speed bits so the user can't set them */
+			val &= ~0x3000;
+
+			/* Add the current transmitter speed bits to the passed value */
+			ret = i810_ac97_get(codec, AC97_SPDIF_CONTROL);
+			val |= (ret & 0x3000);
+
+			i810_ac97_set(codec, AC97_SPDIF_CONTROL, val);
+			if(i810_ac97_get(codec, AC97_SPDIF_CONTROL) != val ) {
+				printk(KERN_ERR "i810_audio: Unable to set S/PDIF configuration to 0x%04x.\n", val);
+				return -EFAULT;
+			}
+		}
+#ifdef DEBUG
+		else 
+			printk(KERN_WARNING "i810_audio: S/PDIF transmitter not avalible.\n");
+#endif
+		return put_user(val, (int *)arg);
+
+	case SNDCTL_DSP_GETSPDIF: /* Get S/PDIF Control register */
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETSPDIF\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+
+		/* Check to make sure the codec supports S/PDIF transmitter */
+
+		if(!(state->card->ac97_features & 4)) {
+#ifdef DEBUG
+			printk(KERN_WARNING "i810_audio: S/PDIF transmitter not avalible.\n");
+#endif
+			val = 0;
+		} else {
+			val = i810_ac97_get(codec, AC97_SPDIF_CONTROL);
+		}
+		//return put_user((val & 0xcfff), (int *)arg);
+		return put_user(val, (int *)arg);
+   			
+	case SNDCTL_DSP_GETCHANNELMASK:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_GETCHANNELMASK\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+		
+		/* Based on AC'97 DAC support, not ICH hardware */
+		val = DSP_BIND_FRONT;
+		if ( state->card->ac97_features & 0x0004 )
+			val |= DSP_BIND_SPDIF;
+
+		if ( state->card->ac97_features & 0x0080 )
+			val |= DSP_BIND_SURR;
+		if ( state->card->ac97_features & 0x0140 )
+			val |= DSP_BIND_CENTER_LFE;
+
+		return put_user(val, (int *)arg);
+
+	case SNDCTL_DSP_BIND_CHANNEL:
+#ifdef DEBUG
+		printk("SNDCTL_DSP_BIND_CHANNEL\n");
+#endif
+		if (get_user(val, (int *)arg))
+			return -EFAULT;
+		if ( val == DSP_BIND_QUERY ) {
+			val = DSP_BIND_FRONT; /* Always report this as being enabled */
+			if ( state->card->ac97_status & SPDIF_ON ) 
+				val |= DSP_BIND_SPDIF;
+			else {
+				if ( state->card->ac97_status & SURR_ON )
+					val |= DSP_BIND_SURR;
+				if ( state->card->ac97_status & CENTER_LFE_ON )
+					val |= DSP_BIND_CENTER_LFE;
+			}
+		} else {  /* Not a query, set it */
+			if (!(file->f_mode & FMODE_WRITE))
+				return -EINVAL;
+			if ( dmabuf->enable == DAC_RUNNING ) {
+				stop_dac(state);
+			}
+			if ( val & DSP_BIND_SPDIF ) {  /* Turn on SPDIF */
+				/*  Ok, this should probably define what slots
+				 *  to use. For now, we'll only set it to the
+				 *  defaults:
+				 * 
+				 *   non multichannel codec maps to slots 3&4
+				 *   2 channel codec maps to slots 7&8
+				 *   4 channel codec maps to slots 6&9
+				 *   6 channel codec maps to slots 10&11
+				 *
+				 *  there should be some way for the app to
+				 *  select the slot assignment.
+				 */
+	
+				i810_set_spdif_output ( state, AC97_EA_SPSA_3_4, dmabuf->rate );
+				if ( !(state->card->ac97_status & SPDIF_ON) )
+					val &= ~DSP_BIND_SPDIF;
+			} else {
+				int mask;
+				int channels;
+
+				/* Turn off S/PDIF if it was on */
+				if ( state->card->ac97_status & SPDIF_ON ) 
+					i810_set_spdif_output ( state, -1, 0 );
+				
+				mask = val & (DSP_BIND_FRONT | DSP_BIND_SURR | DSP_BIND_CENTER_LFE);
+				switch (mask) {
+					case DSP_BIND_FRONT:
+						channels = 2;
+						break;
+					case DSP_BIND_FRONT|DSP_BIND_SURR:
+						channels = 4;
+						break;
+					case DSP_BIND_FRONT|DSP_BIND_SURR|DSP_BIND_CENTER_LFE:
+						channels = 6;
+						break;
+					default:
+						val = DSP_BIND_FRONT;
+						channels = 2;
+						break;
+				}
+				i810_set_dac_channels ( state, channels );
+
+				/* check that they really got turned on */
+				if (!(state->card->ac97_status & SURR_ON))
+					val &= ~DSP_BIND_SURR;
+				if (!(state->card->ac97_status & CENTER_LFE_ON))
+					val &= ~DSP_BIND_CENTER_LFE;
+			}
+		}
+		return put_user(val, (int *)arg);
+		
+	case SNDCTL_DSP_MAPINBUF:
+	case SNDCTL_DSP_MAPOUTBUF:
+	case SNDCTL_DSP_SETSYNCRO:
+	case SOUND_PCM_WRITE_FILTER:
+	case SOUND_PCM_READ_FILTER:
+#ifdef DEBUG
+		printk("SNDCTL_* -EINVAL\n");
+#endif
+		return -EINVAL;
+	}
+	return -EINVAL;
+}
+
+static int i810_open(struct inode *inode, struct file *file)
+{
+	int i = 0;
+	struct i810_card *card = devs;
+	struct i810_state *state = NULL;
+	struct dmabuf *dmabuf = NULL;
+
+	/* find an avaiable virtual channel (instance of /dev/dsp) */
+	while (card != NULL) {
+		/*
+		 * If we are initializing and then fail, card could go
+		 * away unuexpectedly while we are in the for() loop.
+		 * So, check for card on each iteration before we check
+		 * for card->initializing to avoid a possible oops.
+		 * This usually only matters for times when the driver is
+		 * autoloaded by kmod.
+		 */
+		for (i = 0; i < 50 && card && card->initializing; i++) {
+			set_current_state(TASK_UNINTERRUPTIBLE);
+			schedule_timeout(HZ/20);
+		}
+		for (i = 0; i < NR_HW_CH && card && !card->initializing; i++) {
+			if (card->states[i] == NULL) {
+				state = card->states[i] = (struct i810_state *)
+					kmalloc(sizeof(struct i810_state), GFP_KERNEL);
+				if (state == NULL)
+					return -ENOMEM;
+				memset(state, 0, sizeof(struct i810_state));
+				dmabuf = &state->dmabuf;
+				goto found_virt;
+			}
+		}
+		card = card->next;
+	}
+	/* no more virtual channel avaiable */
+	if (!state)
+		return -ENODEV;
+
+found_virt:
+	/* initialize the virtual channel */
+	state->virt = i;
+	state->card = card;
+	state->magic = I810_STATE_MAGIC;
+	init_waitqueue_head(&dmabuf->wait);
+	init_MUTEX(&state->open_sem);
+	file->private_data = state;
+	dmabuf->trigger = 0;
+
+	/* allocate hardware channels */
+	if(file->f_mode & FMODE_READ) {
+		if((dmabuf->read_channel = card->alloc_rec_pcm_channel(card)) == NULL) {
+			kfree (card->states[i]);
+			card->states[i] = NULL;
+			return -EBUSY;
+		}
+		dmabuf->trigger |= PCM_ENABLE_INPUT;
+		i810_set_adc_rate(state, 8000);
+	}
+	if(file->f_mode & FMODE_WRITE) {
+		if((dmabuf->write_channel = card->alloc_pcm_channel(card)) == NULL) {
+			/* make sure we free the record channel allocated above */
+			if(file->f_mode & FMODE_READ)
+				card->free_pcm_channel(card,dmabuf->read_channel->num);
+			kfree (card->states[i]);
+			card->states[i] = NULL;
+			return -EBUSY;
+		}
+		/* Initialize to 8kHz?  What if we don't support 8kHz? */
+		/*  Let's change this to check for S/PDIF stuff */
+	
+		dmabuf->trigger |= PCM_ENABLE_OUTPUT;
+		if ( spdif_locked ) {
+			i810_set_dac_rate(state, spdif_locked);
+			i810_set_spdif_output(state, AC97_EA_SPSA_3_4, spdif_locked);
+		} else {
+			i810_set_dac_rate(state, 8000);
+			/* Put the ACLink in 2 channel mode by default */
+			i = I810_IOREADL(card, GLOB_CNT);
+			I810_IOWRITEL(i & 0xffcfffff, card, GLOB_CNT);
+		}
+	}
+		
+	/* set default sample format. According to OSS Programmer's Guide  /dev/dsp
+	   should be default to unsigned 8-bits, mono, with sample rate 8kHz and
+	   /dev/dspW will accept 16-bits sample, but we don't support those so we
+	   set it immediately to stereo and 16bit, which is all we do support */
+	dmabuf->fmt |= I810_FMT_16BIT | I810_FMT_STEREO;
+	dmabuf->ossfragsize = 0;
+	dmabuf->ossmaxfrags  = 0;
+	dmabuf->subdivision  = 0;
+
+	state->open_mode |= file->f_mode & (FMODE_READ | FMODE_WRITE);
+
+	return 0;
+}
+
+static int i810_release(struct inode *inode, struct file *file)
+{
+	struct i810_state *state = (struct i810_state *)file->private_data;
+	struct i810_card *card = state->card;
+	struct dmabuf *dmabuf = &state->dmabuf;
+	unsigned long flags;
+
+	lock_kernel();
+
+	/* stop DMA state machine and free DMA buffers/channels */
+	if(dmabuf->trigger & PCM_ENABLE_OUTPUT) {
+		drain_dac(state, 0);
+	}
+	if(dmabuf->trigger & PCM_ENABLE_INPUT) {
+		stop_adc(state);
+	}
+	spin_lock_irqsave(&card->lock, flags);
+	dealloc_dmabuf(state);
+	if (file->f_mode & FMODE_WRITE) {
+		state->card->free_pcm_channel(state->card, dmabuf->write_channel->num);
+	}
+	if (file->f_mode & FMODE_READ) {
+		state->card->free_pcm_channel(state->card, dmabuf->read_channel->num);
+	}
+
+	state->card->states[state->virt] = NULL;
+	kfree(state);
+	spin_unlock_irqrestore(&card->lock, flags);
+	unlock_kernel();
+
+	return 0;
+}
+
+static /*const*/ struct file_operations i810_audio_fops = {
+	.owner		= THIS_MODULE,
+	.llseek		= no_llseek,
+	.read		= i810_read,
+	.write		= i810_write,
+	.poll		= i810_poll,
+	.ioctl		= i810_ioctl,
+	.mmap		= i810_mmap,
+	.open		= i810_open,
+	.release	= i810_release,
+};
+
+/* Write AC97 codec registers */
+
+static u16 i810_ac97_get_mmio(struct ac97_codec *dev, u8 reg)
+{
+	struct i810_card *card = dev->private_data;
+	int count = 100;
+	u16 reg_set = IO_REG_OFF(dev) | (reg&0x7f);
+	
+	while(count-- && (readb(card->iobase_mmio + CAS) & 1)) 
+		udelay(1);
+	
+#ifdef DEBUG_MMIO
+	{
+		u16 ans = readw(card->ac97base_mmio + reg_set);
+		printk(KERN_DEBUG "i810_audio: ac97_get_mmio(%d) -> 0x%04X\n", ((int) reg_set) & 0xffff, (u32) ans);
+		return ans;
+	}
+#else
+	return readw(card->ac97base_mmio + reg_set);
+#endif
+}
+
+static u16 i810_ac97_get_io(struct ac97_codec *dev, u8 reg)
+{
+	struct i810_card *card = dev->private_data;
+	int count = 100;
+	u16 reg_set = IO_REG_OFF(dev) | (reg&0x7f);
+	
+	while(count-- && (I810_IOREADB(card, CAS) & 1))
+		udelay(1);
+	
+	return inw(card->ac97base + reg_set);
+}
+
+static void i810_ac97_set_mmio(struct ac97_codec *dev, u8 reg, u16 data)
+{
+	struct i810_card *card = dev->private_data;
+	int count = 100;
+	u16 reg_set = IO_REG_OFF(dev) | (reg&0x7f);
+	
+	while(count-- && (readb(card->iobase_mmio + CAS) & 1)) 
+		udelay(1);
+	
+	writew(data, card->ac97base_mmio + reg_set);
+
+#ifdef DEBUG_MMIO
+	printk(KERN_DEBUG "i810_audio: ac97_set_mmio(0x%04X, %d)\n", (u32) data, ((int) reg_set) & 0xffff);
+#endif
+}
+
+static void i810_ac97_set_io(struct ac97_codec *dev, u8 reg, u16 data)
+{
+	struct i810_card *card = dev->private_data;
+	int count = 100;
+	u16 reg_set = IO_REG_OFF(dev) | (reg&0x7f);
+	
+	while(count-- && (I810_IOREADB(card, CAS) & 1))
+		udelay(1);
+	
+        outw(data, card->ac97base + reg_set);
+}
+
+static u16 i810_ac97_get(struct ac97_codec *dev, u8 reg)
+{
+	struct i810_card *card = dev->private_data;
+	u16 ret;
+	
+	spin_lock(&card->ac97_lock);
+	if (card->use_mmio) {
+		ret = i810_ac97_get_mmio(dev, reg);
+	}
+	else {
+		ret = i810_ac97_get_io(dev, reg);
+	}
+	spin_unlock(&card->ac97_lock);
+	
+	return ret;
+}
+
+static void i810_ac97_set(struct ac97_codec *dev, u8 reg, u16 data)
+{
+	struct i810_card *card = dev->private_data;
+	
+	spin_lock(&card->ac97_lock);
+	if (card->use_mmio) {
+		i810_ac97_set_mmio(dev, reg, data);
+	}
+	else {
+		i810_ac97_set_io(dev, reg, data);
+	}
+	spin_unlock(&card->ac97_lock);
+}
+
+
+/* OSS /dev/mixer file operation methods */
+
+static int i810_open_mixdev(struct inode *inode, struct file *file)
+{
+	int i;
+	int minor = MINOR(inode->i_rdev);
+	struct i810_card *card = devs;
+
+	for (card = devs; card != NULL; card = card->next) {
+		/*
+		 * If we are initializing and then fail, card could go
+		 * away unuexpectedly while we are in the for() loop.
+		 * So, check for card on each iteration before we check
+		 * for card->initializing to avoid a possible oops.
+		 * This usually only matters for times when the driver is
+		 * autoloaded by kmod.
+		 */
+		for (i = 0; i < 50 && card && card->initializing; i++) {
+			set_current_state(TASK_UNINTERRUPTIBLE);
+			schedule_timeout(HZ/20);
+		}
+		for (i = 0; i < NR_AC97 && card && !card->initializing; i++) 
+			if (card->ac97_codec[i] != NULL &&
+			    card->ac97_codec[i]->dev_mixer == minor) {
+				file->private_data = card->ac97_codec[i];
+				return 0;
+			}
+	}
+	return -ENODEV;
+}
+
+static int i810_ioctl_mixdev(struct inode *inode, struct file *file, unsigned int cmd,
+				unsigned long arg)
+{
+	struct ac97_codec *codec = (struct ac97_codec *)file->private_data;
+
+	return codec->mixer_ioctl(codec, cmd, arg);
+}
+
+static /*const*/ struct file_operations i810_mixer_fops = {
+	.owner		= THIS_MODULE,
+	.llseek		= no_llseek,
+	.ioctl		= i810_ioctl_mixdev,
+	.open		= i810_open_mixdev,
+};
+
+/* AC97 codec initialisation.  These small functions exist so we don't
+   duplicate code between module init and apm resume */
+
+static inline int i810_ac97_exists(struct i810_card *card, int ac97_number)
+{
+	u32 reg = I810_IOREADL(card, GLOB_STA);
+	switch (ac97_number) {
+	case 0:
+		return reg & (1<<8);
+	case 1: 
+		return reg & (1<<9);
+	case 2:
+		return reg & (1<<28);
+	}
+	return 0;
+}
+
+static inline int i810_ac97_enable_variable_rate(struct ac97_codec *codec)
+{
+	i810_ac97_set(codec, AC97_EXTENDED_STATUS, 9);
+	i810_ac97_set(codec,AC97_EXTENDED_STATUS,
+		      i810_ac97_get(codec, AC97_EXTENDED_STATUS)|0xE800);
+	
+	return (i810_ac97_get(codec, AC97_EXTENDED_STATUS)&1);
+}
+
+
+static int i810_ac97_probe_and_powerup(struct i810_card *card,struct ac97_codec *codec)
+{
+	/* Returns 0 on failure */
+	int i;
+
+	if (ac97_probe_codec(codec) == 0) return 0;
+	
+	/* power it all up */
+	i810_ac97_set(codec, AC97_POWER_CONTROL,
+		      i810_ac97_get(codec, AC97_POWER_CONTROL) & ~0x7f00);
+
+	/* wait for analog ready */
+	for (i=100; i && ((i810_ac97_get(codec, AC97_POWER_CONTROL) & 0xf) != 0xf); i--)
+	{
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		schedule_timeout(HZ/20);
+	} 
+	return i;
+}
+
+static int is_new_ich(u16 pci_id)
+{
+	switch (pci_id) {
+	case PCI_DEVICE_ID_INTEL_82801DB_5:
+	case PCI_DEVICE_ID_INTEL_82801EB_5:
+	case PCI_DEVICE_ID_INTEL_ESB_5:
+	case PCI_DEVICE_ID_INTEL_ICH6_18:
+		return 1;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static inline int ich_use_mmio(struct i810_card *card)
+{
+	return is_new_ich(card->pci_id) && card->use_mmio;
+}
+
+/**
+ *	i810_ac97_power_up_bus	-	bring up AC97 link
+ *	@card : ICH audio device to power up
+ *
+ *	Bring up the ACLink AC97 codec bus
+ */
+ 
+static int i810_ac97_power_up_bus(struct i810_card *card)
+{	
+	u32 reg = I810_IOREADL(card, GLOB_CNT);
+	int i;
+	int primary_codec_id = 0;
+
+	if((reg&2)==0)	/* Cold required */
+		reg|=2;
+	else
+		reg|=4;	/* Warm */
+		
+	reg&=~8;	/* ACLink on */
+	
+	/* At this point we deassert AC_RESET # */
+	I810_IOWRITEL(reg , card, GLOB_CNT);
+
+	/* We must now allow time for the Codec initialisation.
+	   600mS is the specified time */
+	   	
+	for(i=0;i<10;i++)
+	{
+		if((I810_IOREADL(card, GLOB_CNT)&4)==0)
+			break;
+
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		schedule_timeout(HZ/20);
+	}
+	if(i==10)
+	{
+		printk(KERN_ERR "i810_audio: AC'97 reset failed.\n");
+		return 0;
+	}
+
+	set_current_state(TASK_UNINTERRUPTIBLE);
+	schedule_timeout(HZ/2);
+
+	/*
+	 *	See if the primary codec comes ready. This must happen
+	 *	before we start doing DMA stuff
+	 */	
+	/* see i810_ac97_init for the next 10 lines (jsaw) */
+	if (card->use_mmio)
+		readw(card->ac97base_mmio);
+	else
+		inw(card->ac97base);
+	if (ich_use_mmio(card)) {
+		primary_codec_id = (int) readl(card->iobase_mmio + SDM) & 0x3;
+		printk(KERN_INFO "i810_audio: Primary codec has ID %d\n",
+		       primary_codec_id);
+	}
+
+	if(! i810_ac97_exists(card, primary_codec_id))
+	{
+		printk(KERN_INFO "i810_audio: Codec not ready.. wait.. ");
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		schedule_timeout(HZ);	/* actually 600mS by the spec */
+
+		if(i810_ac97_exists(card, primary_codec_id))
+			printk("OK\n");
+		else 
+			printk("no response.\n");
+	}
+	if (card->use_mmio)
+		readw(card->ac97base_mmio);
+	else
+		inw(card->ac97base);
+	return 1;
+}
+
+static int __devinit i810_ac97_init(struct i810_card *card)
+{
+	int num_ac97 = 0;
+	int ac97_id;
+	int total_channels = 0;
+	int nr_ac97_max = card_cap[card->pci_id_internal].nr_ac97;
+	struct ac97_codec *codec;
+	u16 eid;
+	u32 reg;
+
+	if(!i810_ac97_power_up_bus(card)) return 0;
+
+	/* Number of channels supported */
+	/* What about the codec?  Just because the ICH supports */
+	/* multiple channels doesn't mean the codec does.       */
+	/* we'll have to modify this in the codec section below */
+	/* to reflect what the codec has.                       */
+	/* ICH and ICH0 only support 2 channels so don't bother */
+	/* to check....                                         */
+
+	card->channels = 2;
+	reg = I810_IOREADL(card, GLOB_STA);
+	if ( reg & 0x0200000 )
+		card->channels = 6;
+	else if ( reg & 0x0100000 )
+		card->channels = 4;
+	printk(KERN_INFO "i810_audio: Audio Controller supports %d channels.\n", card->channels);
+	printk(KERN_INFO "i810_audio: Defaulting to base 2 channel mode.\n");
+	reg = I810_IOREADL(card, GLOB_CNT);
+	I810_IOWRITEL(reg & 0xffcfffff, card, GLOB_CNT);
+		
+	for (num_ac97 = 0; num_ac97 < NR_AC97; num_ac97++) 
+		card->ac97_codec[num_ac97] = NULL;
+
+	/*@FIXME I don't know, if I'm playing to safe here... (jsaw) */
+	if ((nr_ac97_max > 2) && !card->use_mmio) nr_ac97_max = 2;
+
+	for (num_ac97 = 0; num_ac97 < nr_ac97_max; num_ac97++) {
+		/* codec reset */
+		printk(KERN_INFO "i810_audio: Resetting connection %d\n", num_ac97);
+		if (card->use_mmio)
+			readw(card->ac97base_mmio + 0x80*num_ac97);
+		else
+			inw(card->ac97base + 0x80*num_ac97);
+
+		/* If we have the SDATA_IN Map Register, as on ICH4, we
+		   do not loop thru all possible codec IDs but thru all 
+		   possible IO channels. Bit 0:1 of SDM then holds the 
+		   last codec ID spoken to. 
+		*/
+		if (ich_use_mmio(card)) {
+			ac97_id = (int) readl(card->iobase_mmio + SDM) & 0x3;
+			printk(KERN_INFO "i810_audio: Connection %d with codec id %d\n",
+			       num_ac97, ac97_id);
+		}
+		else {
+			ac97_id = num_ac97;
+		}
+
+		/* The ICH programmer's reference says you should   */
+		/* check the ready status before probing. So we chk */
+		/*   What do we do if it's not ready?  Wait and try */
+		/*   again, or abort?                               */
+		if (!i810_ac97_exists(card, ac97_id)) {
+			if(num_ac97 == 0)
+				printk(KERN_ERR "i810_audio: Primary codec not ready.\n");
+		}
+		
+		if ((codec = ac97_alloc_codec()) == NULL)
+			return -ENOMEM;
+
+		/* initialize some basic codec information, other fields will be filled
+		   in ac97_probe_codec */
+		codec->private_data = card;
+		codec->id = ac97_id;
+		card->ac97_id_map[ac97_id] = num_ac97 * 0x80;
+
+		if (card->use_mmio) {	
+			codec->codec_read = i810_ac97_get_mmio;
+			codec->codec_write = i810_ac97_set_mmio;
+		}
+		else {
+			codec->codec_read = i810_ac97_get_io;
+			codec->codec_write = i810_ac97_set_io;
+		}
+	
+		if(!i810_ac97_probe_and_powerup(card,codec)) {
+			printk(KERN_ERR "i810_audio: timed out waiting for codec %d analog ready.\n", ac97_id);
+			ac97_release_codec(codec);
+			break;	/* it didn't work */
+		}
+		/* Store state information about S/PDIF transmitter */
+		card->ac97_status = 0;
+		
+		/* Don't attempt to get eid until powerup is complete */
+		eid = i810_ac97_get(codec, AC97_EXTENDED_ID);
+
+		if(eid==0xFFFF)
+		{
+			printk(KERN_WARNING "i810_audio: no codec attached ?\n");
+			ac97_release_codec(codec);
+			break;
+		}
+		
+		/* Check for an AC97 1.0 soft modem (ID1) */
+		
+		if(codec->modem)
+		{
+			printk(KERN_WARNING "i810_audio: codec %d is a softmodem - skipping.\n", ac97_id);
+			ac97_release_codec(codec);
+			continue;
+		}
+		
+		card->ac97_features = eid;
+
+		/* Now check the codec for useful features to make up for
+		   the dumbness of the 810 hardware engine */
+
+		if(!(eid&0x0001))
+			printk(KERN_WARNING "i810_audio: only 48Khz playback available.\n");
+		else
+		{
+			if(!i810_ac97_enable_variable_rate(codec)) {
+				printk(KERN_WARNING "i810_audio: Codec refused to allow VRA, using 48Khz only.\n");
+				card->ac97_features&=~1;
+			}			
+		}
+   		
+		/* Turn on the amplifier */
+
+		codec->codec_write(codec, AC97_POWER_CONTROL, 
+			 codec->codec_read(codec, AC97_POWER_CONTROL) & ~0x8000);
+				
+		/* Determine how many channels the codec(s) support   */
+		/*   - The primary codec always supports 2            */
+		/*   - If the codec supports AMAP, surround DACs will */
+		/*     automaticlly get assigned to slots.            */
+		/*     * Check for surround DACs and increment if     */
+		/*       found.                                       */
+		/*   - Else check if the codec is revision 2.2        */
+		/*     * If surround DACs exist, assign them to slots */
+		/*       and increment channel count.                 */
+
+		/* All of this only applies to ICH2 and above. ICH    */
+		/* and ICH0 only support 2 channels.  ICH2 will only  */
+		/* support multiple codecs in a "split audio" config. */
+		/* as described above.                                */
+
+		/* TODO: Remove all the debugging messages!           */
+
+		if((eid & 0xc000) == 0) /* primary codec */
+			total_channels += 2; 
+
+		if(eid & 0x200) { /* GOOD, AMAP support */
+			if (eid & 0x0080) /* L/R Surround channels */
+				total_channels += 2;
+			if (eid & 0x0140) /* LFE and Center channels */
+				total_channels += 2;
+			printk("i810_audio: AC'97 codec %d supports AMAP, total channels = %d\n", ac97_id, total_channels);
+		} else if (eid & 0x0400) {  /* this only works on 2.2 compliant codecs */
+			eid &= 0xffcf;
+			if((eid & 0xc000) != 0)	{
+				switch ( total_channels ) {
+					case 2:
+						/* Set dsa1, dsa0 to 01 */
+						eid |= 0x0010;
+						break;
+					case 4:
+						/* Set dsa1, dsa0 to 10 */
+						eid |= 0x0020;
+						break;
+					case 6:
+						/* Set dsa1, dsa0 to 11 */
+						eid |= 0x0030;
+						break;
+				}
+				total_channels += 2;
+			}
+			i810_ac97_set(codec, AC97_EXTENDED_ID, eid);
+			eid = i810_ac97_get(codec, AC97_EXTENDED_ID);
+			printk("i810_audio: AC'97 codec %d, new EID value = 0x%04x\n", ac97_id, eid);
+			if (eid & 0x0080) /* L/R Surround channels */
+				total_channels += 2;
+			if (eid & 0x0140) /* LFE and Center channels */
+				total_channels += 2;
+			printk("i810_audio: AC'97 codec %d, DAC map configured, total channels = %d\n", ac97_id, total_channels);
+		} else {
+			printk("i810_audio: AC'97 codec %d Unable to map surround DAC's (or DAC's not present), total channels = %d\n", ac97_id, total_channels);
+		}
+
+		if ((codec->dev_mixer = register_sound_mixer(&i810_mixer_fops, -1)) < 0) {
+			printk(KERN_ERR "i810_audio: couldn't register mixer!\n");
+			ac97_release_codec(codec);
+			break;
+		}
+
+		card->ac97_codec[num_ac97] = codec;
+	}
+
+	/* pick the minimum of channels supported by ICHx or codec(s) */
+	card->channels = (card->channels > total_channels)?total_channels:card->channels;
+
+	return num_ac97;
+}
+
+static void __devinit i810_configure_clocking (void)
+{
+	struct i810_card *card;
+	struct i810_state *state;
+	struct dmabuf *dmabuf;
+	unsigned int i, offset, new_offset;
+	unsigned long flags;
+
+	card = devs;
+	/* We could try to set the clocking for multiple cards, but can you even have
+	 * more than one i810 in a machine?  Besides, clocking is global, so unless
+	 * someone actually thinks more than one i810 in a machine is possible and
+	 * decides to rewrite that little bit, setting the rate for more than one card
+	 * is a waste of time.
+	 */
+	if(card != NULL) {
+		state = card->states[0] = (struct i810_state *)
+					kmalloc(sizeof(struct i810_state), GFP_KERNEL);
+		if (state == NULL)
+			return;
+		memset(state, 0, sizeof(struct i810_state));
+		dmabuf = &state->dmabuf;
+
+		dmabuf->write_channel = card->alloc_pcm_channel(card);
+		state->virt = 0;
+		state->card = card;
+		state->magic = I810_STATE_MAGIC;
+		init_waitqueue_head(&dmabuf->wait);
+		init_MUTEX(&state->open_sem);
+		dmabuf->fmt = I810_FMT_STEREO | I810_FMT_16BIT;
+		dmabuf->trigger = PCM_ENABLE_OUTPUT;
+		i810_set_spdif_output(state, -1, 0);
+		i810_set_dac_channels(state, 2);
+		i810_set_dac_rate(state, 48000);
+		if(prog_dmabuf(state, 0) != 0) {
+			goto config_out_nodmabuf;
+		}
+		if(dmabuf->dmasize < 16384) {
+			goto config_out;
+		}
+		dmabuf->count = dmabuf->dmasize;
+		CIV_TO_LVI(card, dmabuf->write_channel->port, -1);
+		local_irq_save(flags);
+		start_dac(state);
+		offset = i810_get_dma_addr(state, 0);
+		mdelay(50);
+		new_offset = i810_get_dma_addr(state, 0);
+		stop_dac(state);
+		local_irq_restore(flags);
+		i = new_offset - offset;
+#ifdef DEBUG_INTERRUPTS
+		printk("i810_audio: %d bytes in 50 milliseconds\n", i);
+#endif
+		if(i == 0)
+			goto config_out;
+		i = i / 4 * 20;
+		if (i > 48500 || i < 47500) {
+			clocking = clocking * clocking / i;
+			printk("i810_audio: setting clocking to %d\n", clocking);
+		}
+config_out:
+		dealloc_dmabuf(state);
+config_out_nodmabuf:
+		state->card->free_pcm_channel(state->card,state->dmabuf.write_channel->num);
+		kfree(state);
+		card->states[0] = NULL;
+	}
+}
+
+/* install the driver, we do not allocate hardware channel nor DMA buffer now, they are defered 
+   until "ACCESS" time (in prog_dmabuf called by open/read/write/ioctl/mmap) */
+   
+static int __devinit i810_probe(struct pci_dev *pci_dev, const struct pci_device_id *pci_id)
+{
+	struct i810_card *card;
+
+	if (pci_enable_device(pci_dev))
+		return -EIO;
+
+	if (pci_set_dma_mask(pci_dev, I810_DMA_MASK)) {
+		printk(KERN_ERR "i810_audio: architecture does not support"
+		       " 32bit PCI busmaster DMA\n");
+		return -ENODEV;
+	}
+	
+	if ((card = kmalloc(sizeof(struct i810_card), GFP_KERNEL)) == NULL) {
+		printk(KERN_ERR "i810_audio: out of memory\n");
+		return -ENOMEM;
+	}
+	memset(card, 0, sizeof(*card));
+
+	card->initializing = 1;
+	card->pci_dev = pci_dev;
+	card->pci_id = pci_id->device;
+	card->ac97base = pci_resource_start (pci_dev, 0);
+	card->iobase = pci_resource_start (pci_dev, 1);
+
+	if (!(card->ac97base) || !(card->iobase)) {
+		card->ac97base = 0;
+		card->iobase = 0;
+	}
+
+	/* if chipset could have mmio capability, check it */ 
+	if (card_cap[pci_id->driver_data].flags & CAP_MMIO) {
+		card->ac97base_mmio_phys = pci_resource_start (pci_dev, 2);
+		card->iobase_mmio_phys = pci_resource_start (pci_dev, 3);
+
+		if ((card->ac97base_mmio_phys) && (card->iobase_mmio_phys)) {
+			card->use_mmio = 1;
+		}
+		else {
+			card->ac97base_mmio_phys = 0;
+			card->iobase_mmio_phys = 0;
+		}
+	}
+
+	if (!(card->use_mmio) && (!(card->iobase) || !(card->ac97base))) {
+		printk(KERN_ERR "i810_audio: No I/O resources available.\n");
+		goto out_mem;
+	}
+
+	card->irq = pci_dev->irq;
+	card->next = devs;
+	card->magic = I810_CARD_MAGIC;
+#ifdef CONFIG_PM
+	card->pm_suspended=0;
+#endif
+	spin_lock_init(&card->lock);
+	spin_lock_init(&card->ac97_lock);
+	devs = card;
+
+	pci_set_master(pci_dev);
+
+	printk(KERN_INFO "i810: %s found at IO 0x%04lx and 0x%04lx, "
+	       "MEM 0x%04lx and 0x%04lx, IRQ %d\n",
+	       card_names[pci_id->driver_data], 
+	       card->iobase, card->ac97base, 
+	       card->ac97base_mmio_phys, card->iobase_mmio_phys,
+	       card->irq);
+
+	card->alloc_pcm_channel = i810_alloc_pcm_channel;
+	card->alloc_rec_pcm_channel = i810_alloc_rec_pcm_channel;
+	card->alloc_rec_mic_channel = i810_alloc_rec_mic_channel;
+	card->free_pcm_channel = i810_free_pcm_channel;
+
+	if ((card->channel = pci_alloc_consistent(pci_dev,
+	    sizeof(struct i810_channel)*NR_HW_CH, &card->chandma)) == NULL) {
+		printk(KERN_ERR "i810: cannot allocate channel DMA memory\n");
+		goto out_mem;
+	}
+
+	{ /* We may dispose of this altogether some time soon, so... */
+		struct i810_channel *cp = card->channel;
+
+		cp[0].offset = 0;
+		cp[0].port = 0x00;
+		cp[0].num = 0;
+		cp[1].offset = 0;
+		cp[1].port = 0x10;
+		cp[1].num = 1;
+		cp[2].offset = 0;
+		cp[2].port = 0x20;
+		cp[2].num = 2;
+	}
+
+	/* claim our iospace and irq */
+	if (!request_region(card->iobase, 64, card_names[pci_id->driver_data])) {
+		printk(KERN_ERR "i810_audio: unable to allocate region %lx\n", card->iobase);
+		goto out_region1;
+	}
+	if (!request_region(card->ac97base, 256, card_names[pci_id->driver_data])) {
+		printk(KERN_ERR "i810_audio: unable to allocate region %lx\n", card->ac97base);
+		goto out_region2;
+	}
+
+	if (request_irq(card->irq, &i810_interrupt, SA_SHIRQ,
+			card_names[pci_id->driver_data], card)) {
+		printk(KERN_ERR "i810_audio: unable to allocate irq %d\n", card->irq);
+		goto out_pio;
+	}
+
+	if (card->use_mmio) {
+		if (request_mem_region(card->ac97base_mmio_phys, 512, "ich_audio MMBAR")) {
+			if ((card->ac97base_mmio = ioremap(card->ac97base_mmio_phys, 512))) { /*@FIXME can ioremap fail? don't know (jsaw) */
+				if (request_mem_region(card->iobase_mmio_phys, 256, "ich_audio MBBAR")) {
+					if ((card->iobase_mmio = ioremap(card->iobase_mmio_phys, 256))) {
+						printk(KERN_INFO "i810: %s mmio at 0x%04lx and 0x%04lx\n",
+						       card_names[pci_id->driver_data], 
+						       (unsigned long) card->ac97base_mmio, 
+						       (unsigned long) card->iobase_mmio); 
+					}
+					else {
+						iounmap(card->ac97base_mmio);
+						release_mem_region(card->ac97base_mmio_phys, 512);
+						release_mem_region(card->iobase_mmio_phys, 512);
+						card->use_mmio = 0;
+					}
+				}
+				else {
+					iounmap(card->ac97base_mmio);
+					release_mem_region(card->ac97base_mmio_phys, 512);
+					card->use_mmio = 0;
+				}
+			}
+		}
+		else {
+			card->use_mmio = 0;
+		}
+	}
+
+	/* initialize AC97 codec and register /dev/mixer */
+	if (i810_ac97_init(card) <= 0) {
+		free_irq(card->irq, card);
+		goto out_iospace;
+	}
+	pci_set_drvdata(pci_dev, card);
+
+	if(clocking == 0) {
+		clocking = 48000;
+		i810_configure_clocking();
+	}
+
+	/* register /dev/dsp */
+	if ((card->dev_audio = register_sound_dsp(&i810_audio_fops, -1)) < 0) {
+		int i;
+		printk(KERN_ERR "i810_audio: couldn't register DSP device!\n");
+		free_irq(card->irq, card);
+		for (i = 0; i < NR_AC97; i++)
+		if (card->ac97_codec[i] != NULL) {
+			unregister_sound_mixer(card->ac97_codec[i]->dev_mixer);
+			ac97_release_codec(card->ac97_codec[i]);
+		}
+		goto out_iospace;
+	}
+
+ 	card->initializing = 0;
+	return 0;
+
+out_iospace:
+	if (card->use_mmio) {
+		iounmap(card->ac97base_mmio);
+		iounmap(card->iobase_mmio);
+		release_mem_region(card->ac97base_mmio_phys, 512);
+		release_mem_region(card->iobase_mmio_phys, 256);
+	}
+out_pio:	
+	release_region(card->ac97base, 256);
+out_region2:
+	release_region(card->iobase, 64);
+out_region1:
+	pci_free_consistent(pci_dev, sizeof(struct i810_channel)*NR_HW_CH,
+	    card->channel, card->chandma);
+out_mem:
+	kfree(card);
+	return -ENODEV;
+}
+
+static void __devexit i810_remove(struct pci_dev *pci_dev)
+{
+	int i;
+	struct i810_card *card = pci_get_drvdata(pci_dev);
+	/* free hardware resources */
+	free_irq(card->irq, devs);
+	release_region(card->iobase, 64);
+	release_region(card->ac97base, 256);
+	pci_free_consistent(pci_dev, sizeof(struct i810_channel)*NR_HW_CH,
+			    card->channel, card->chandma);
+	if (card->use_mmio) {
+		iounmap(card->ac97base_mmio);
+		iounmap(card->iobase_mmio);
+		release_mem_region(card->ac97base_mmio_phys, 512);
+		release_mem_region(card->iobase_mmio_phys, 256);
+	}
+
+	/* unregister audio devices */
+	for (i = 0; i < NR_AC97; i++)
+		if (card->ac97_codec[i] != NULL) {
+			unregister_sound_mixer(card->ac97_codec[i]->dev_mixer);
+			ac97_release_codec(card->ac97_codec[i]);
+			card->ac97_codec[i] = NULL;
+		}
+	unregister_sound_dsp(card->dev_audio);
+	kfree(card);
+}
+
+#ifdef CONFIG_PM
+static int i810_pm_suspend(struct pci_dev *dev, u32 pm_state)
+{
+        struct i810_card *card = pci_get_drvdata(dev);
+        struct i810_state *state;
+	unsigned long flags;
+	struct dmabuf *dmabuf;
+	int i,num_ac97;
+#ifdef DEBUG
+	printk("i810_audio: i810_pm_suspend called\n");
+#endif
+	if(!card) return 0;
+	spin_lock_irqsave(&card->lock, flags);
+	card->pm_suspended=1;
+	for(i=0;i<NR_HW_CH;i++) {
+		state = card->states[i];
+		if(!state) continue;
+		/* this happens only if there are open files */
+		dmabuf = &state->dmabuf;
+		if(dmabuf->enable & DAC_RUNNING ||
+		   (dmabuf->count && (dmabuf->trigger & PCM_ENABLE_OUTPUT))) {
+			state->pm_saved_dac_rate=dmabuf->rate;
+			stop_dac(state);
+		} else {
+			state->pm_saved_dac_rate=0;
+		}
+		if(dmabuf->enable & ADC_RUNNING) {
+			state->pm_saved_adc_rate=dmabuf->rate;	
+			stop_adc(state);
+		} else {
+			state->pm_saved_adc_rate=0;
+		}
+		dmabuf->ready = 0;
+		dmabuf->swptr = dmabuf->hwptr = 0;
+		dmabuf->count = dmabuf->total_bytes = 0;
+	}
+
+	spin_unlock_irqrestore(&card->lock, flags);
+
+	/* save mixer settings */
+	for (num_ac97 = 0; num_ac97 < NR_AC97; num_ac97++) {
+		struct ac97_codec *codec = card->ac97_codec[num_ac97];
+		if(!codec) continue;
+		for(i=0;i< SOUND_MIXER_NRDEVICES ;i++) {
+			if((supported_mixer(codec,i)) &&
+			   (codec->read_mixer)) {
+				card->pm_saved_mixer_settings[i][num_ac97]=
+					codec->read_mixer(codec,i);
+			}
+		}
+	}
+	pci_save_state(dev,card->pm_save_state); /* XXX do we need this? */
+	pci_disable_device(dev); /* disable busmastering */
+	pci_set_power_state(dev,3); /* Zzz. */
+
+	return 0;
+}
+
+
+static int i810_pm_resume(struct pci_dev *dev)
+{
+	int num_ac97,i=0;
+	struct i810_card *card=pci_get_drvdata(dev);
+	pci_enable_device(dev);
+	pci_restore_state (dev,card->pm_save_state);
+
+	/* observation of a toshiba portege 3440ct suggests that the 
+	   hardware has to be more or less completely reinitialized from
+	   scratch after an apm suspend.  Works For Me.   -dan */
+
+	i810_ac97_power_up_bus(card);
+
+	for (num_ac97 = 0; num_ac97 < NR_AC97; num_ac97++) {
+		struct ac97_codec *codec = card->ac97_codec[num_ac97];
+		/* check they haven't stolen the hardware while we were
+		   away */
+		if(!codec || !i810_ac97_exists(card,num_ac97)) {
+			if(num_ac97) continue;
+			else BUG();
+		}
+		if(!i810_ac97_probe_and_powerup(card,codec)) BUG();
+		
+		if((card->ac97_features&0x0001)) {
+			/* at probe time we found we could do variable
+			   rates, but APM suspend has made it forget
+			   its magical powers */
+			if(!i810_ac97_enable_variable_rate(codec)) BUG();
+		}
+		/* we lost our mixer settings, so restore them */
+		for(i=0;i< SOUND_MIXER_NRDEVICES ;i++) {
+			if(supported_mixer(codec,i)){
+				int val=card->
+					pm_saved_mixer_settings[i][num_ac97];
+				codec->mixer_state[i]=val;
+				codec->write_mixer(codec,i,
+						   (val  & 0xff) ,
+						   ((val >> 8)  & 0xff) );
+			}
+		}
+	}
+
+	/* we need to restore the sample rate from whatever it was */
+	for(i=0;i<NR_HW_CH;i++) {
+		struct i810_state * state=card->states[i];
+		if(state) {
+			if(state->pm_saved_adc_rate)
+				i810_set_adc_rate(state,state->pm_saved_adc_rate);
+			if(state->pm_saved_dac_rate)
+				i810_set_dac_rate(state,state->pm_saved_dac_rate);
+		}
+	}
+
+	
+        card->pm_suspended = 0;
+
+	/* any processes that were reading/writing during the suspend
+	   probably ended up here */
+	for(i=0;i<NR_HW_CH;i++) {
+		struct i810_state *state = card->states[i];
+		if(state) wake_up(&state->dmabuf.wait);
+        }
+
+	return 0;
+}	
+#endif /* CONFIG_PM */
+
+MODULE_AUTHOR("");
+MODULE_DESCRIPTION("Intel 810 audio support");
+MODULE_LICENSE("GPL");
+MODULE_PARM(ftsodell, "i");
+MODULE_PARM(clocking, "i");
+MODULE_PARM(strict_clocking, "i");
+MODULE_PARM(spdif_locked, "i");
+
+#define I810_MODULE_NAME "intel810_audio"
+
+static struct pci_driver i810_pci_driver = {
+	.name		= I810_MODULE_NAME,
+	.id_table	= i810_pci_tbl,
+	.probe		= i810_probe,
+	.remove		= __devexit_p(i810_remove),
+#ifdef CONFIG_PM
+	.suspend	= i810_pm_suspend,
+	.resume		= i810_pm_resume,
+#endif /* CONFIG_PM */
+};
+
+
+static int __init i810_init_module (void)
+{
+	printk(KERN_INFO "Intel 810 + AC97 Audio, version "
+	       DRIVER_VERSION ", " __TIME__ " " __DATE__ "\n");
+
+	if (!pci_register_driver(&i810_pci_driver)) {
+		pci_unregister_driver(&i810_pci_driver);
+                return -ENODEV;
+	}
+	if(ftsodell != 0) {
+		printk("i810_audio: ftsodell is now a deprecated option.\n");
+	}
+	if(spdif_locked > 0 ) {
+		if(spdif_locked == 32000 || spdif_locked == 44100 || spdif_locked == 48000) {
+			printk("i810_audio: Enabling S/PDIF at sample rate %dHz.\n", spdif_locked);
+		} else {
+			printk("i810_audio: S/PDIF can only be locked to 32000, 44100, or 48000Hz.\n");
+			spdif_locked = 0;
+		}
+	}
+	
+	return 0;
+}
+
+static void __exit i810_cleanup_module (void)
+{
+	pci_unregister_driver(&i810_pci_driver);
+}
+
+module_init(i810_init_module);
+module_exit(i810_cleanup_module);
+
+/*
+Local Variables:
+c-basic-offset: 8
+End:
+*/
diff -uNr linux-2.4.37.9/drivers/video/amithlon.h linux-2.4.37.9-amithlon/drivers/video/amithlon.h
--- linux-2.4.37.9/drivers/video/amithlon.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/amithlon.h	2010-02-17 20:04:06.000000000 -0500
@@ -0,0 +1,84 @@
+#ifndef AMITHLON_H
+#define AMITHLON_H
+
+typedef struct {
+  unsigned int sx;
+  unsigned int sy;
+  unsigned int width;
+  unsigned int height;
+  unsigned long colour;
+  unsigned int vxres;
+} amithlon_fill;
+
+typedef struct {
+  unsigned int sx;
+  unsigned int sy;
+  unsigned int dx;
+  unsigned int dy;
+  unsigned long offset;
+  unsigned int Bpp;
+  unsigned long colour;
+  unsigned int vxres;
+} amithlon_line;
+
+typedef struct {
+  unsigned int sx;
+  unsigned int sy;
+  unsigned int dx;
+  unsigned int dy;
+  unsigned int width;
+  unsigned int height;
+  unsigned int vxres;
+} amithlon_copy;
+
+typedef struct {
+  unsigned int sx;
+  unsigned int sy;
+  unsigned int dx;
+  unsigned int dy;
+  unsigned int width;
+  unsigned int height;
+  unsigned int spitch;
+  unsigned int dpitch;
+  unsigned int op;
+  unsigned int oldpitch;
+  unsigned int Bpp;
+} amithlon_copy_complete;
+
+typedef struct {
+  unsigned int sx;
+  unsigned int sy;
+  unsigned int width;
+  unsigned int height;
+  unsigned int colour0;
+  unsigned int colour1;
+  unsigned int offset;
+  unsigned int pitch;
+  char*    data;
+  unsigned char rop3;
+  unsigned int vxres;
+} amithlon_blittemplate;
+
+typedef struct {
+  unsigned int* data;
+  unsigned char* red;
+  unsigned char* green;
+  unsigned char* blue;
+} amithlon_setcursor;
+
+typedef struct {
+  unsigned int x;
+  unsigned int y;
+  unsigned int on;
+} amithlon_poscursor;
+
+#define AMITHLON_FILL_RECT 91827364
+#define AMITHLON_COPY_RECT 91827365
+#define AMITHLON_BLIT_TEMP 91827366
+#define AMITHLON_SET_CURSOR 91827367
+#define AMITHLON_POS_CURSOR 91827368
+#define AMITHLON_COPY_RECT_COMPLETE 91827369
+#define AMITHLON_DRAW_LINE 91827370
+#define MATROX_CROSS_4MB 0x76287492
+#define AMITHLON_MAXCLOCK 0x76287493
+#endif
diff -uNr linux-2.4.37.9/drivers/video/aty/atyfb_base.c linux-2.4.37.9-amithlon/drivers/video/aty/atyfb_base.c
--- linux-2.4.37.9/drivers/video/aty/atyfb_base.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/aty/atyfb_base.c	2010-02-21 10:06:01.000000000 -0500
@@ -1476,8 +1476,10 @@
     yres = ((par->crtc.v_tot_disp>>16) & 0x7ff)+1;
     xoffset = (var->xoffset+7) & ~7;
     yoffset = var->yoffset;
+#if 0
     if (xoffset+xres > par->crtc.vxres || yoffset+yres > par->crtc.vyres)
         return -EINVAL;
+#endif
     par->crtc.xoffset = xoffset;
     par->crtc.yoffset = yoffset;
     set_off_pitch(par, info);
diff -uNr linux-2.4.37.9/drivers/video/aty128fb.c linux-2.4.37.9-amithlon/drivers/video/aty128fb.c
--- linux-2.4.37.9/drivers/video/aty128fb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/aty128fb.c	2010-02-21 20:59:59.000000000 -0500
@@ -77,7 +77,7 @@
 #include <asm/vc_ioctl.h>
 #endif
 #ifdef CONFIG_BOOTX_TEXT
-#include <asm/btext.h>
+#include <asm/bootx.h>
 #endif /* CONFIG_BOOTX_TEXT */
 
 #include <video/fbcon.h>
@@ -528,7 +528,7 @@
 _aty_ld_pll(unsigned int pll_index,
 			const struct fb_info_aty128 *info)
 {       
-    aty_st_8(CLOCK_CNTL_INDEX, pll_index & 0x3F);
+    aty_st_8(CLOCK_CNTL_INDEX, pll_index & 0x2F);
     return aty_ld_le32(CLOCK_CNTL_DATA);
 }
 
@@ -537,7 +537,7 @@
 _aty_st_pll(unsigned int pll_index, u32 val,
 			const struct fb_info_aty128 *info)
 {
-    aty_st_8(CLOCK_CNTL_INDEX, (pll_index & 0x3F) | PLL_WR_EN);
+    aty_st_8(CLOCK_CNTL_INDEX, (pll_index & 0x2F) | PLL_WR_EN);
     aty_st_le32(CLOCK_CNTL_DATA, val);
 }
 
@@ -800,7 +800,9 @@
     aty_st_le32(CRTC_OFFSET, crtc->offset);
     aty_st_le32(CRTC_OFFSET_CNTL, crtc->offset_cntl);
     /* Disable ATOMIC updating.  Is this the right place? */
+#if 1
     aty_st_pll(PPLL_CNTL, aty_ld_pll(PPLL_CNTL) & ~(0x00030000));
+#endif
 }
 
 
@@ -847,13 +849,13 @@
     /* convert (and round up) and validate */
     xres = (xres + 7) & ~7;
     xoffset = (xoffset + 7) & ~7;
-
+#if 0
     if (vxres < xres + xoffset)
 	vxres = xres + xoffset;
 
     if (vyres < yres + yoffset)
 	vyres = yres + yoffset;
-
+#endif
     /* convert depth into ATI register depth */
     dst = depth_to_dst(depth);
 
@@ -1078,7 +1080,7 @@
     
     if (on) {
 	reg = aty_ld_le32(LVDS_GEN_CNTL);
-	reg |= LVDS_ON | LVDS_EN | LVDS_BLON | LVDS_DIGION;
+	reg |= LVDS_ON | LVDS_EN;
 	reg &= ~LVDS_DISPLAY_DIS;
 	aty_st_le32(LVDS_GEN_CNTL, reg);
 #ifdef CONFIG_PMAC_BACKLIGHT
@@ -1351,7 +1353,7 @@
     }
 #endif /* CONFIG_FB_COMPAT_XPMAC */
 #if defined(CONFIG_BOOTX_TEXT)
-    btext_update_display(info->frame_buffer_phys,
+    bootx_update_display(info->frame_buffer_phys,
 		    (((par->crtc.h_total>>16) & 0xff)+1)*8,
 		    ((par->crtc.v_total>>16) & 0x7ff)+1,
 		    par->crtc.bpp,
@@ -1477,11 +1479,16 @@
 
     if ((err = aty128_decode_var(var, &par, info)))
 	return err;
-
-    aty128_encode_var(var, &par, info);
-
-    if ((var->activate & FB_ACTIVATE_MASK) == FB_ACTIVATE_TEST)
-	return 0;
+	
+	{
+		int get_out=0;
+		if ((var->activate & FB_ACTIVATE_MASK) == FB_ACTIVATE_TEST)
+		get_out=1;
+		aty128_encode_var(var, &par, info);
+		if (get_out)
+		return 0;
+	}
+	
 
     oldxres = display->var.xres;
     oldyres = display->var.yres;
@@ -1636,10 +1643,10 @@
 
     xoffset = (var->xoffset +7) & ~7;
     yoffset = var->yoffset;
-
+#if 0
     if (xoffset+xres > par->crtc.vxres || yoffset+yres > par->crtc.vyres)
         return -EINVAL;
-
+#endif
     par->crtc.xoffset = xoffset;
     par->crtc.yoffset = yoffset;
 
@@ -1753,7 +1760,7 @@
     if (!options || !*options)
 	return 0;
 
-    while ((this_opt = strsep(&options, ",")) != 0) {
+    while (this_opt = strsep(&options, ",")) {
 	if (!strncmp(this_opt, "font:", 5)) {
 	    char *p;
 	    int i;
@@ -2019,7 +2026,7 @@
 	if ((err = pci_enable_device(pdev))) {
 		printk(KERN_ERR "aty128fb: Cannot enable PCI device: %d\n",
 				err);
-		return -ENODEV;
+		goto err_out;
 	}
 
 	fb_addr = pci_resource_start(pdev, 0);
@@ -2525,7 +2532,7 @@
  */
 #define BACKLIGHT_LVDS_OFF
 /* That one prevents proper CRT output with LCD off */
-#undef BACKLIGHT_DAC_OFF
+#define BACKLIGHT_DAC_OFF
 
 static int
 aty128_set_backlight_enable(int on, int level, void* data)
@@ -2537,15 +2544,7 @@
 		on = 0;
 	reg |= LVDS_BL_MOD_EN | LVDS_BLON;
 	if (on && level > BACKLIGHT_OFF) {
-		reg |= LVDS_DIGION;
-		if ((reg & LVDS_ON) == 0) {
-			reg &= ~LVDS_BLON;
-			aty_st_le32(LVDS_GEN_CNTL, reg);
-			(void)aty_ld_le32(LVDS_GEN_CNTL);
-			mdelay(10);
-			reg |= LVDS_BLON;
-			aty_st_le32(LVDS_GEN_CNTL, reg);
-		}
+
 		reg &= ~LVDS_BL_MOD_LEVEL_MASK;
 		reg |= (backlight_conv[level] << LVDS_BL_MOD_LEVEL_SHIFT);
 #ifdef BACKLIGHT_LVDS_OFF
diff -uNr linux-2.4.37.9/drivers/video/aty128.h linux-2.4.37.9-amithlon/drivers/video/aty128.h
--- linux-2.4.37.9/drivers/video/aty128.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/aty128.h	2010-02-20 09:55:39.000000000 -0500
@@ -390,7 +390,7 @@
 #define LVDS_FRAME_MOD_NO			0x00000000
 #define LVDS_FRAME_MOD_2_LEVELS			0x00000010
 #define LVDS_FRAME_MOD_4_LEVELS			0x00000020
-#define LVDS_RST_FM				0x00000040
+
 #define LVDS_EN					0x00000080
 
 /* CRTC2_GEN_CNTL constants */
diff -uNr linux-2.4.37.9/drivers/video/clgenfb.c linux-2.4.37.9-amithlon/drivers/video/clgenfb.c
--- linux-2.4.37.9/drivers/video/clgenfb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/clgenfb.c	2010-02-20 10:06:58.000000000 -0500
@@ -879,14 +879,14 @@
 		_par->var.xoffset = 0;
 	if (_par->var.yoffset < 0)
 		_par->var.yoffset = 0;
-
+#if 0
 	/* truncate xoffset and yoffset to maximum if too high */
 	if (_par->var.xoffset > _par->var.xres_virtual - _par->var.xres)
 		_par->var.xoffset = _par->var.xres_virtual - _par->var.xres - 1;
 
 	if (_par->var.yoffset > _par->var.yres_virtual - _par->var.yres)
 		_par->var.yoffset = _par->var.yres_virtual - _par->var.yres - 1;
-
+#endif
 	switch (_par->var.bits_per_pixel) {
 	case 1:
 		_par->line_length = _par->var.xres_virtual / 8;
diff -uNr linux-2.4.37.9/drivers/video/Config.in linux-2.4.37.9-amithlon/drivers/video/Config.in
--- linux-2.4.37.9/drivers/video/Config.in	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/Config.in	2010-03-06 10:57:55.000000000 -0500
@@ -238,7 +238,6 @@
    if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
       tristate '  Virtual Frame Buffer support (ONLY FOR TESTING!) (EXPERIMENTAL)' CONFIG_FB_VIRTUAL
    fi
-
    bool '  Advanced low level driver options' CONFIG_FBCON_ADVANCED
    if [ "$CONFIG_FBCON_ADVANCED" = "y" ]; then
       tristate '    Monochrome support' CONFIG_FBCON_MFB
diff -uNr linux-2.4.37.9/drivers/video/cyber2000fb.c linux-2.4.37.9-amithlon/drivers/video/cyber2000fb.c
--- linux-2.4.37.9/drivers/video/cyber2000fb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/cyber2000fb.c	2010-02-20 10:07:45.000000000 -0500
@@ -1069,12 +1069,12 @@
 
 	if (!(var->vmode & FB_VMODE_YWRAP))
 		y_bottom += var->yres;
-
+#if 0
 	if (var->xoffset > (var->xres_virtual - var->xres))
 		return -EINVAL;
 	if (y_bottom > cfb->fb.var.yres_virtual)
 		return -EINVAL;
-
+#endif
 	if (cyber2000fb_update_start(cfb, var))
 		return -EINVAL;
 
diff -uNr linux-2.4.37.9/drivers/video/fbcon.c linux-2.4.37.9-amithlon/drivers/video/fbcon.c
--- linux-2.4.37.9/drivers/video/fbcon.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/fbcon.c	2010-02-17 20:04:06.000000000 -0500
@@ -221,7 +221,7 @@
 static void fbcon_bmove_rec(struct display *p, int sy, int sx, int dy, int dx,
 			    int height, int width, u_int y_break);
 
-static int fbcon_show_logo(void);
+int fbcon_show_logo(void);
 
 #ifdef CONFIG_MAC
 /*
@@ -2135,7 +2135,81 @@
     return n<0 ? d>>-n : d<<n;
 }
 
-static int __init fbcon_show_logo( void )
+static int do_logo=1;
+static int do_timer_logo=0;
+
+void disable_logo(void)
+{
+  do_logo=0;
+}
+
+int fbcon_show_logo_internal(int turn);
+
+void maybe_show_logo(void)
+{
+  if (do_timer_logo && do_logo)
+    fbcon_show_logo_internal(1);
+}
+
+static int offset=0;
+static int dir=1;
+
+#define USE_OUR_LOGO 1
+#define FANCY_BOUNCE 1
+static int calc_logo_pos(struct display* p, int* xp, int* yp, int move)
+{
+  static int xpos=100;
+  static int ypos=0;
+  static int xfrac=0;
+  static int yfrac=0;
+  static int dx=2*65536;
+  static int dy=0;
+  static int tillturn=1;
+
+  int doturn;
+
+  if (move) {
+    xfrac+=dx;
+    yfrac+=dy;
+    xpos+=(xfrac>>16);
+    ypos+=(yfrac>>16);
+    xfrac&=0xffff;
+    yfrac&=0xffff;
+    
+    if (xpos<0) {
+      xpos=-xpos;
+      dx=-dx;
+    }
+    if (xpos>p->var.xres-LOGO_W) {
+      xpos=(p->var.xres-LOGO_W)-(xpos-(p->var.xres-LOGO_W));
+      dx=-dx;
+    }
+    
+    if (ypos>p->var.yres-LOGO_H) {
+      ypos=(p->var.yres-LOGO_H)-(ypos-(p->var.yres-LOGO_H));
+      dy=-dy;
+    }
+    else
+      dy+=3000;
+    dy-=(dy/4000);
+    dx-=(dx/8000);
+  }
+
+  *xp=xpos;
+  *yp=ypos;
+  doturn=!tillturn;
+  if (!tillturn)
+    tillturn=5;
+  else
+    tillturn--;
+  return doturn;
+}
+
+
+#define TURNUP 1
+#define TURNNEED 3
+
+int fbcon_show_logo_internal(int turn)
 {
     struct display *p = &fb_display[fg_console]; /* draw to vt in foreground */
     int depth = p->var.bits_per_pixel;
@@ -2143,21 +2217,35 @@
     unsigned char *fb = p->screen_base;
     unsigned char *logo;
     unsigned char *dst, *src;
-    int i, j, n, x1, y1, x;
+    int i, j, n, x1, y1, x,y;
     int logo_depth, done = 0;
+    int offbytes=0;
+    static int turncount=0;
+    static int need_cmap=1;
 
     /* Return if the frame buffer is not mapped */
     if (!fb)
 	return 0;
 	
+	if (!do_logo)
+	return 0;
+	
+	do_timer_logo = 1;
+	
     /*
      * Set colors if visual is PSEUDOCOLOR and we have enough colors, or for
      * DIRECTCOLOR
      * We don't have to set the colors for the 16-color logo, since that logo
      * uses the standard VGA text console palette
      */
-    if ((p->visual == FB_VISUAL_PSEUDOCOLOR && depth >= 8) ||
-	(p->visual == FB_VISUAL_DIRECTCOLOR && depth >= 24))
+    if (need_cmap) { /* only do this the first time */
+      if ((p->visual == FB_VISUAL_PSEUDOCOLOR && depth >= 8) ||
+	  (p->visual == FB_VISUAL_DIRECTCOLOR && depth >= 24)) {
+	int is_truecolor = (p->visual == FB_VISUAL_DIRECTCOLOR);
+	int use_256 = (!is_truecolor && depth >= 8) ||
+	  (is_truecolor && depth >= 24);
+	
+	offbytes=0;
 	for (i = 0; i < LINUX_LOGO_COLORS; i += n) {
 	    n = LINUX_LOGO_COLORS - i;
 	    if (n > 16)
@@ -2166,17 +2254,19 @@
 	    palette_cmap.start = 32 + i;
 	    palette_cmap.len   = n;
 	    for( j = 0; j < n; ++j ) {
-		palette_cmap.red[j]   = (linux_logo_red[i+j] << 8) |
-					linux_logo_red[i+j];
-		palette_cmap.green[j] = (linux_logo_green[i+j] << 8) |
-					linux_logo_green[i+j];
-		palette_cmap.blue[j]  = (linux_logo_blue[i+j] << 8) |
-					linux_logo_blue[i+j];
+		palette_cmap.red[j]   = (linux_logo_red[i+j+offbytes] << 8) |
+					linux_logo_red[i+j+offbytes];
+		palette_cmap.green[j] = (linux_logo_green[i+j+offbytes] << 8) |
+					linux_logo_green[i+j+offbytes];
+		palette_cmap.blue[j]  = (linux_logo_blue[i+j+offbytes] << 8) |
+					linux_logo_blue[i+j+offbytes];
 	    }
 	    p->fb_info->fbops->fb_set_cmap(&palette_cmap, 1, fg_console,
 					   p->fb_info);
 	}
-	
+	}
+	}
+	need_cmap=0;
     if (depth >= 8) {
 	logo = linux_logo;
 	logo_depth = 8;
@@ -2192,10 +2282,51 @@
     
     if (p->fb_info->fbops->fb_rasterimg)
     	p->fb_info->fbops->fb_rasterimg(p->fb_info, 1);
-
+#if !USE_OUR_LOGO
+	y=0;
     for (x = 0; x < smp_num_cpus * (LOGO_W + 8) &&
     	 x < p->var.xres - (LOGO_W + 8); x += (LOGO_W + 8)) {
-    	 
+#else
+    if (p->var.xres>LOGO_W)
+    { 
+#ifdef LOGO_FRAMES
+      static int lastjiffies;
+      int nowjiffies=jiffies;
+
+      x=0;
+      y=0;
+#if FANCY_BOUNCE
+      if (console_loglevel<1)
+	calc_logo_pos(p,&x,&y,turn);
+#endif
+      offbytes=offset;
+
+      if (turn) {
+	turncount+=TURNUP;
+	if (turncount>=TURNNEED) 
+	  turncount-=TURNNEED;
+	else
+	  turn=0;
+      }
+      
+
+      if (turn) {
+	if (nowjiffies!=lastjiffies) {
+	  offset=(offset+1)%LOGO_FRAMES;
+	  lastjiffies=nowjiffies;
+	}
+      }
+#else
+      offbytes=0;
+      x=offset;
+      y=0;
+      if (offset==p->var.xres-LOGO_W && dir==1)
+	dir=-1;
+      if (offset==0 && dir==-1)
+	dir=1;
+      offset+=dir;
+#endif
+#endif     	 
 #if defined(CONFIG_FBCON_CFB16) || defined(CONFIG_FBCON_CFB24) || \
     defined(CONFIG_FBCON_CFB32) || defined(CONFIG_FB_SBUS)
         if (p->visual == FB_VISUAL_DIRECTCOLOR) {
@@ -2210,10 +2341,10 @@
 
 	    if (depth >= 24 && (depth % 8) == 0) {
 		/* have at least 8 bits per color */
-		src = logo;
+		src = logo+offbytes*LOGO_W*LOGO_H;
 		bdepth = depth/8;
 		for( y1 = 0; y1 < LOGO_H; y1++ ) {
-		    dst = fb + y1*line + x*bdepth;
+		    dst = fb + (y1+y)*line + x*bdepth;
 		    for( x1 = 0; x1 < LOGO_W; x1++, src++ ) {
 			val = (*src << redshift) |
 			      (*src << greenshift) |
@@ -2289,13 +2420,15 @@
 	    greenshift = p->var.green.offset - (8-p->var.green.length);
 	    blueshift  = p->var.blue.offset  - (8-p->var.blue.length);
 
-	    src = logo;
+	    src = logo+offbytes*LOGO_W*LOGO_H;
 	    for( y1 = 0; y1 < LOGO_H; y1++ ) {
-		dst = fb + y1*line + x*bdepth;
+		dst = fb + (y1+y)*line + x*bdepth;
 		for( x1 = 0; x1 < LOGO_W; x1++, src++ ) {
 		    val = safe_shift((linux_logo_red[*src-32]   & redmask), redshift) |
 		          safe_shift((linux_logo_green[*src-32] & greenmask), greenshift) |
 		          safe_shift((linux_logo_blue[*src-32]  & bluemask), blueshift);
+		          if (!(*src))
+		          val=0;
 		    if (bdepth == 4 && !((long)dst & 3)) {
 			/* Some cards require 32bit access */
 			fb_writel (val, dst);
@@ -2319,9 +2452,9 @@
 #endif
 #if defined(CONFIG_FBCON_CFB4)
 	if (depth == 4 && p->type == FB_TYPE_PACKED_PIXELS) {
-		src = logo;
+		src = logo+offbytes*LOGO_W*LOGO_H;
 		for( y1 = 0; y1 < LOGO_H; y1++) {
-			dst = fb + y1*line + x/2;
+			dst = fb + (y1+y)*line + x/2;
 			for( x1 = 0; x1 < LOGO_W/2; x1++) {
 				u8 q = *src++;
 				q = (q << 4) | (q >> 4);
@@ -2335,9 +2468,9 @@
 	if (depth == 8 && p->type == FB_TYPE_PACKED_PIXELS) {
 	    /* depth 8 or more, packed, with color registers */
 		
-	    src = logo;
+	    src = logo+offbytes*LOGO_W*LOGO_H;
 	    for( y1 = 0; y1 < LOGO_H; y1++ ) {
-		dst = fb + y1*line + x;
+		dst = fb + (y1+y)*line + x;
 		for( x1 = 0; x1 < LOGO_W; x1++ )
 		    fb_writeb (*src++, dst++);
 	    }
@@ -2496,7 +2629,10 @@
 	return 0;
 }
 #endif /* CONFIG_PM */
-
+int fbcon_show_logo(void)
+{
+		return fbcon_show_logo_internal(0);
+}
 /*
  *  The console `switch' structure for the frame buffer based console
  */
@@ -2549,6 +2685,7 @@
 EXPORT_SYMBOL(fbcon_redraw_bmove);
 EXPORT_SYMBOL(fbcon_redraw_clear);
 EXPORT_SYMBOL(fbcon_dummy);
+EXPORT_SYMBOL(fbcon_show_logo);
 EXPORT_SYMBOL(fb_con);
 
 MODULE_LICENSE("GPL");
diff -uNr linux-2.4.37.9/drivers/video/fbcon-cfb32.c linux-2.4.37.9-amithlon/drivers/video/fbcon-cfb32.c
--- linux-2.4.37.9/drivers/video/fbcon-cfb32.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/fbcon-cfb32.c	2010-02-21 10:07:39.000000000 -0500
@@ -17,8 +17,8 @@
 
 #include <video/fbcon.h>
 #include <video/fbcon-cfb32.h>
-
-
+#include "amithlon.h"
+#include <asm/uaccess.h>
     /*
      *  32 bpp packed pixels
      */
@@ -110,6 +110,32 @@
 	rectfill(dest, width * 4, lines, bgx, bytes);
 }
 
+void fbcon_cfb32_clear_amy(struct vc_data *conp, struct display *p, int sy, int sx,
+		       int height, int width, u32 colour)
+{
+    u8 *dest;
+    int bytes = p->next_line, lines = height;
+    u32 bgx;
+
+    p->next_line = p->line_length ? p->line_length : p->var.xres_virtual<<2;
+    bytes = p->next_line;
+
+//    bytes = p->var.xres_virtual * 4;
+    dest = p->screen_base + sy * bytes + sx * 4;
+
+    bgx = colour;
+//	printk(KERN_INFO "sy:%d  sx:%d  height:%d  width:%d\n",sy,sx,height,width);
+
+    //width *= fontwidth(p)/4;
+/*    if (width * 16 == bytes)
+	rectfill(dest, lines * width * 4, 1, bgx, bytes);
+    else
+	rectfill(dest, width * 4, lines, bgx, bytes); */
+//	printk(KERN_INFO "-----------\n");
+	printk(KERN_INFO "dest:%d  width:%d  lines:%d  bgx:%d  bytes:%d\n",dest,width,lines,bgx,bytes);
+	rectfill(dest, width, lines, bgx, bytes);
+}
+
 void fbcon_cfb32_putc(struct vc_data *conp, struct display *p, int c, int yy,
 		      int xx)
 {
diff -uNr linux-2.4.37.9/drivers/video/fbmem.c linux-2.4.37.9-amithlon/drivers/video/fbmem.c
--- linux-2.4.37.9/drivers/video/fbmem.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/fbmem.c	2010-02-17 20:04:06.000000000 -0500
@@ -708,14 +708,14 @@
     return fbidx;
 }
 #endif
-
+extern void disable_logo(void);
 static int
 fb_open(struct inode *inode, struct file *file)
 {
 	int fbidx = GET_FB_IDX(inode->i_rdev);
 	struct fb_info *info;
 	int res = 0;
-
+	disable_logo();
 #ifdef CONFIG_KMOD
 	if (!(info = registered_fb[fbidx]))
 		try_to_load(fbidx);
@@ -928,6 +928,14 @@
 	        return 0;
     }
 
+    if (!strncmp(options, "dovesa",6)) {
+      for (i = 0; i < NUM_FB_DRIVERS; i++) {
+	if (strcmp(fb_drivers[i].name,"vesa"))
+	  fb_drivers[i].init = NULL;
+      }
+      return 0;
+    }
+
     if (!strncmp(options, "map:", 4)) {
 	    options += 4;
 	    if (*options)
diff -uNr linux-2.4.37.9/drivers/video/matrox/matroxfb_accel.c linux-2.4.37.9-amithlon/drivers/video/matrox/matroxfb_accel.c
--- linux-2.4.37.9/drivers/video/matrox/matroxfb_accel.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/matrox/matroxfb_accel.c	2010-02-20 10:11:33.000000000 -0500
@@ -188,6 +188,156 @@
 	CRITEND
 }
 
+int matrox_blittemplate(struct matrox_fb_info* minfo,
+			 u_int32_t fgx, u_int32_t bgx, 
+			 int sy, int sx, 
+			 int height, int width, 
+			 int offset, char* data, int pitch,
+			 unsigned char rop3)	
+{
+	u_int32_t ar0;
+	int i;
+
+	return -EINVAL;
+
+	CRITFLAGS
+
+	DBG_HEAVY("matrox_cfbX_putc");
+
+	CRITBEGIN
+
+	mga_fifo(7);
+	ar0 = width - 1;
+	mga_outl(M_FXBNDRY, ((sx+ar0)<<16) | sx);
+	mga_outl(M_DWGCTL, M_DWG_ILOAD | M_DWG_SGNZERO | M_DWG_SHIFTZERO | M_DWG_BMONOWF | M_DWG_REPLACE);
+	mga_outl(M_FCOL, fgx);
+	mga_outl(M_BCOL, bgx);
+	mga_outl(M_AR5, 0);
+	mga_outl(M_AR3, 0);
+	mga_outl(M_AR0, ar0);
+	mga_ydstlen(sy, height);
+	
+	for (i = height; i > 0; i--) {
+	  mga_memcpy_toio(ACCESS_FBINFO(mmio.vbase), 0, data, (width+7)>>8);
+	  data+=pitch;
+	}
+	WaitTillIdle();
+	CRITEND
+	return 0;  
+}
+
+void matrox_rectcopy(struct matrox_fb_info* minfo, 
+		     int sy, int sx, int dy, int dx, int height, int width,
+		     int vxres) {
+	int pixx = vxres;
+	int start, end;
+	CRITFLAGS
+
+	DBG("matrox_cfbX_bmove")
+
+	CRITBEGIN
+
+	if ((dy < sy) || ((dy == sy) && (dx <= sx))) {
+		mga_fifo(2);
+		mga_outl(M_DWGCTL, M_DWG_BITBLT | M_DWG_SHIFTZERO | M_DWG_SGNZERO |
+			 M_DWG_BFCOL | M_DWG_REPLACE);
+		mga_outl(M_AR5, pixx);
+		width--;
+		start = sy*pixx+sx+curr_ydstorg(MINFO);
+		end = start+width;
+	} else {
+		mga_fifo(3);
+		mga_outl(M_DWGCTL, M_DWG_BITBLT | M_DWG_SHIFTZERO | M_DWG_BFCOL | M_DWG_REPLACE);
+		mga_outl(M_SGN, 5);
+		mga_outl(M_AR5, -pixx);
+		width--;
+		end = (sy+height-1)*pixx+sx+curr_ydstorg(MINFO);
+		start = end+width;
+		dy += height-1;
+	}
+	mga_fifo(4);
+	mga_outl(M_AR0, end);
+	mga_outl(M_AR3, start);
+	mga_outl(M_FXBNDRY, ((dx+width)<<16) | dx);
+	mga_ydstlen(dy, height);
+	WaitTillIdle();
+
+	CRITEND
+}
+
+int matrox_rectcopy_complete(struct matrox_fb_info* minfo, 
+			      int sy, int sx, int dy, int dx, 
+			      int height, int width,
+			      int spitch, int dpitch, int op,
+			      int oldpitch, int Bpp) {
+	int pixx = spitch;
+	int start, end;
+	int myop;
+	unsigned int p1,p2;
+	unsigned int org;
+
+	CRITFLAGS
+	  
+	switch (op) {
+	case 0x0c: myop=M_DWG_REPLACE; break;
+	case 0x06: myop=M_DWG_XOR; break;
+	default: return -EINVAL;
+	}
+
+	p1=sy*spitch+sx;
+	p2=dy*dpitch+dx;
+
+	org=dy*dpitch*Bpp;
+	if (ACCESS_FBINFO(capable.srcorg)) {
+	  mga_outl(M_DSTORG,org);
+	  dy=0;
+	}
+	if (dy>=4096)
+	  return -EINVAL;
+
+	DBG("matrox_cfbX_bmove")
+
+	CRITBEGIN
+
+	mga_fifo(1);
+	mga_outl(M_PITCH, dpitch);
+	WaitTillIdle();
+
+	mga_fifo(3);
+	if (p2 <= p1) {
+		mga_outl(M_DWGCTL, M_DWG_BITBLT | M_DWG_SHIFTZERO | M_DWG_SGNZERO |
+			 M_DWG_BFCOL | myop);
+		mga_outl(M_AR5, spitch);
+		width--;
+		start = sy*spitch+sx+curr_ydstorg(MINFO);
+		end = start+width;
+	} else {
+		mga_outl(M_DWGCTL, M_DWG_BITBLT | M_DWG_SHIFTZERO | M_DWG_BFCOL | myop);
+		mga_outl(M_SGN, 5);
+		mga_outl(M_AR5, -spitch);
+		width--;
+		end = (sy+height-1)*spitch+sx+curr_ydstorg(MINFO);
+		start = end+width;
+		dy += height-1;
+	}
+	mga_fifo(5);
+	mga_outl(M_AR0, end);
+	mga_outl(M_AR3, start);
+	mga_outl(M_FXBNDRY, ((dx+width)<<16) | dx);
+	mga_ydstlen(dy, height);
+	WaitTillIdle();
+
+	mga_outl(M_PITCH, oldpitch);
+	if (ACCESS_FBINFO(capable.srcorg)) {
+	  mga_outl(M_DSTORG,0);
+	}
+	WaitTillIdle();
+
+	CRITEND
+	return 0;
+}
+
+
 #ifdef FBCON_HAS_CFB4
 static void matrox_cfb4_bmove(struct display* p, int sy, int sx, int dy, int dx, int height, int width) {
 	int pixx, start, end;
@@ -244,8 +394,8 @@
 }
 #endif
 
-static void matroxfb_accel_clear(WPMINFO u_int32_t color, int sy, int sx, int height,
-		int width) {
+void matroxfb_accel_clear(WPMINFO u_int32_t color, int sy, int sx, int height,
+			  int width) {
 	CRITFLAGS
 
 	DBG("matroxfb_accel_clear")
diff -uNr linux-2.4.37.9/drivers/video/matrox/matroxfb_base.c linux-2.4.37.9-amithlon/drivers/video/matrox/matroxfb_base.c
--- linux-2.4.37.9/drivers/video/matrox/matroxfb_base.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/matrox/matroxfb_base.c	2010-02-21 20:55:09.000000000 -0500
@@ -101,7 +101,7 @@
 
 /* make checkconfig does not check included files... */
 #include <linux/config.h>
-
+#include "../amithlon.h"
 #include "matroxfb_base.h"
 #include "matroxfb_misc.h"
 #include "matroxfb_accel.h"
@@ -446,6 +446,7 @@
 	} else {
 		dsp = fb_display + con;
 	}
+#if 0
 	if (var->vmode & FB_VMODE_YWRAP) {
 		return -EINVAL;
 	} else {
@@ -453,6 +454,7 @@
 		    var->yoffset+dsp->var.yres > dsp->var.yres_virtual)
 			return -EINVAL;
 	}
+#endif
 	if (con == ACCESS_FBINFO(currcon))
 		matrox_pan_var(PMINFO var);
 	dsp->var.xoffset = var->xoffset;
@@ -702,11 +704,12 @@
 		var->yres = var->yres_virtual;
 	if (var->xres_virtual < var->xres)
 		var->xres = var->xres_virtual;
+#if 0
 	if (var->xoffset + var->xres > var->xres_virtual)
 		var->xoffset = var->xres_virtual - var->xres;
 	if (var->yoffset + var->yres > var->yres_virtual)
 		var->yoffset = var->yres_virtual - var->yres;
-
+#endif
 	if (bpp == 16 && var->green.length == 5) {
 		bpp--; /* an artifical value - 15 */
 	}
@@ -1177,6 +1180,24 @@
 	.name	 = "Panellink output",
 };
 
+void matrox_rectcopy(struct matrox_fb_info* minfo, 
+		     int sy, int sx, int dy, int dx, int height, int width,
+		     int vxres);
+int matrox_rectcopy_complete(struct matrox_fb_info* minfo, 
+			     int sy, int sx, int dy, int dx, 
+			     int height, int width,
+			     int spitch, int dpitch, int op,
+			     int oldpitch, int Bpp);
+
+void matroxfb_accel_clear(WPMINFO u_int32_t color, int sy, int sx, int height,
+			  int width);
+int matrox_blittemplate(struct matrox_fb_info* minfo,
+			u_int32_t fgx, u_int32_t bgx, 
+			int sy, int sx, 
+			int height, int width, 
+			int offset, char* data, int pitch,
+			unsigned char rop3);
+
 static int matroxfb_ioctl(struct inode *inode, struct file *file,
 			  unsigned int cmd, unsigned long arg, int con,
 			  struct fb_info *info)
@@ -1423,6 +1444,88 @@
 				return 0;
 				
 			}
+		case MATROX_CROSS_4MB:
+			{
+				if (put_user(ACCESS_FBINFO(capable.cross4MB), (u_int32_t*)arg))
+					return -EFAULT;
+				return 0;
+			}
+ 	        case AMITHLON_MAXCLOCK:
+			{
+				if (put_user(ACCESS_FBINFO(max_pixel_clock), (u_int32_t*)arg))
+					return -EFAULT;
+				return 0;
+			}
+	        case AMITHLON_COPY_RECT: 
+			{ /* Copy rectangle */
+				amithlon_copy ac;
+				
+				if (copy_from_user(&ac, (void *) arg, sizeof(ac)))
+					return -EFAULT;
+				matrox_rectcopy(minfo,
+						ac.sy,
+						ac.sx,
+						ac.dy,
+						ac.dx,
+						ac.height,
+						ac.width,
+						ac.vxres);
+				return 0;
+			}
+
+	        case AMITHLON_COPY_RECT_COMPLETE: 
+			{ /* Copy rectangle */
+				amithlon_copy_complete acr;
+				
+				if (copy_from_user(&acr, (void *) arg, sizeof(acr)))
+					return -EFAULT;
+				return matrox_rectcopy_complete(minfo,
+								acr.sy,
+								acr.sx,
+								acr.dy,
+								acr.dx,
+								acr.height,
+								acr.width,
+								acr.spitch,
+								acr.dpitch,
+								acr.op,
+								acr.oldpitch,
+								acr.Bpp);
+			}
+
+	       case AMITHLON_FILL_RECT: 
+		       { /* Fill rectangle */
+			       amithlon_fill af;
+			       
+			       if (copy_from_user(&af, (void *) arg, sizeof(af)))
+				       return -EFAULT;
+			       matroxfb_accel_clear(PMINFO
+						    af.colour,
+						    af.sy,
+						    af.sx,
+						    af.height,
+						    af.width);
+			       return 0;
+		       }
+	      case AMITHLON_BLIT_TEMP: { /* Blit Template */
+		      amithlon_blittemplate ab;
+		      int answer=0;
+		      
+		      if (copy_from_user(&ab, (void *) arg, sizeof(ab)))
+			      return -EFAULT;
+		      answer=matrox_blittemplate(minfo,
+						 ab.colour0,
+						 ab.colour1,
+						 ab.sy,
+						 ab.sx,
+						 ab.height,
+						 ab.width,
+						 ab.offset,
+						 ab.data,
+						 ab.pitch,
+						 ab.rop3);
+		      return answer;
+	      }
 		case MATROXFB_TVOQUERYCTRL:
 			{
 				struct matroxfb_queryctrl qctrl;
diff -uNr linux-2.4.37.9/drivers/video/radeonfb.c linux-2.4.37.9-amithlon/drivers/video/radeonfb.c
--- linux-2.4.37.9/drivers/video/radeonfb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/radeonfb.c	2010-02-21 21:04:39.000000000 -0500
@@ -1,112 +1,23 @@
 /*
- *	drivers/video/radeonfb.c
  *	framebuffer driver for ATI Radeon chipset video boards
  *
  *	Copyright 2000	Ani Joshi <ajoshi@kernel.crashing.org>
  *
+ *	Amithlon conversion by Gary Colville (bombcrater@garycvl.f2s.com)
  *
- *	ChangeLog:
- *	2000-08-03	initial version 0.0.1
- *	2000-09-10	more bug fixes, public release 0.0.5
- *	2001-02-19	mode bug fixes, 0.0.7
- *	2001-07-05	fixed scrolling issues, engine initialization,
- *			and minor mode tweaking, 0.0.9
- *	2001-09-07	Radeon VE support, Nick Kurshev
- *			blanking, pan_display, and cmap fixes, 0.1.0
- *	2001-10-10	Radeon 7500 and 8500 support, and experimental
- *			flat panel support, 0.1.1
- *	2001-11-17	Radeon M6 (ppc) support, Daniel Berlin, 0.1.2
- *	2001-11-18	DFP fixes, Kevin Hendricks, 0.1.3
- *	2001-11-29	more cmap, backlight fixes, Benjamin Herrenschmidt
- *	2002-01-18	DFP panel detection via BIOS, Michael Clark, 0.1.4
- *	2002-06-02	console switching, mode set fixes, accel fixes
- *	2002-06-03	MTRR support, Peter Horton, 0.1.5
- *	2002-09-21	rv250, r300, m9 initial support,
- *			added mirror option, 0.1.6
- *	2003-04-10	accel engine fixes, 0.1.7
- *	2003-04-12	Mac PowerBook sleep fixes, Benjamin Herrenschmidt,
- *			0.1.8
- *
- * Other change (--BenH)
- * 
- * 	2003-01-01	- Tweaks for PLL on some iBooks
- * 			- Fix SURFACE_CNTL usage on r9000	
- *      2003-03-23	- Added new Power Management code from ATI
- *      		- Added default PLL values for r300 from lkml
- *      		- Fix mirror ioctl result code (that ioctl still need some
- *      		  rework to actually use the second head)
- *      2003-03-26	- Never set TMDS_PLL_EN, it seem to break more than
- *                        just old r300's
- *      2003-04-02	- Got final word from ATI, TMDS_PLL_EN has to be flipped
- *      		  depending if we are dealing with an "RV" card or not
- *      		- Comsetic changes to sleep code, make it a bit more robust
- *      		  hopefully
- *      		- Fix 800x600-8 mode accel (Daniel Mantione)
- *      		- Fix scaling on LCDs (not yet preserving aspect ratio though)
- *      		- Properly set scroll mode to SCROLL_YREDRAW when accel
- *      		  is disabled from fbset
- *      		- Add some more radeon PCI IDs & default PLL values
- *      2003-04-05	- Update the code that retreive the panel infos from the
- *                        BIOS to match what XFree is doing
- *                      - Avoid a divide by 0 when failing to retreive those infos
- *      2003-04-07	- Fix the M6 video RAM workaround
- *      		- Some bits in the PM code were flipped, fix that.
- *      		- RB2D_DSTCACHE_MODE shouldn't be cleared on r300 (and
- *      		  maybe not on others according to a comment in XFree, but
- *      		  we keep working code for now).
- *      		- Use ROP3_S for rectangle fill
- *      2003-04-10      - Re-change the pitch workaround. We now align the pitch
- *      		  when accel is enabled for a given mode, and we don't when
- *      		  accel is disabled. That should properly deal with all cases
- *      		  and allows us to remove the "special case" accel code
- *      		- Bring in XFree workaround to not write the same value to
- *      		  the PLL (can cause blanking of some panels)
- *      		- Bring in some of Peter Horton fixes (accel reset, cleanups)
- *      		  still some more to get in though...
- *      		- Back to use of ROP3_P for rectangle fill (hrm...)
- *      2003-04-11	- Properly reset accel engine on each console switch so
- *      		  we work around switching from XFree leaving it in a weird
- *      		  state. Also extend the comparison of values causing us to
- *      		  reload the mode on console switch.
- *      2003-04-30	- For BIOS returned LCD infos, assume high sync polarity
- *      2003-07-08	- Fix an oops during boot related to disp not beeing initialized
- *      		  when modedb called us back for set_var. Remove bogus refs to
- *      		  RADEON_PM chip, this is really a mach64 chip, not a Radeon.
- *      		  Add some DFP blanking support
- *      2003-07-11	- Merged with Ani's 0.1.8 version
- *      
- *	Special thanks to ATI DevRel team for their hardware donations,
- *	and for spending the time to fix the power management code !
- *	
- *	Note: This driver in in bad need of beeing completely re-organized.
- *	      My long term plans, if I ever get enough time for that, is
- *	      to split the actual mode setting code so it can properly 
- *	      work on any head, the probe code, which will be stuffed with
- *	      OF parsing on PPC and i2c fallback (look at what XFree does)
- *	      and the PM code ought to be in a separate file. --BenH.
+ *      Known bugs:
  *
+ *			- Only FILL_RECT and COPY_RECT functions benefit from
+ *			  hardware acceleration. 
+ *			- DVI output non-functional on some chipsets
+ *			- Flat Panel detection is buggy.
+ *			- Hardware acceleration breaks on screen widths not a
+ *			  multiple of 64 pixels (ie, 800x600).
  *
- *      Known Bugs:
- *      
- *       - Incompatible with ATI FireGL drivers. They are playing with things
- *         like MC_FB_LOCATION behind our back. Not much we can do. This is
- *         becoming a real problem as DRI is also playing with those and the
- *         GATOS CVS as well in a different way.
- *         We should really define _once for all_ the way we want those setup
- *         and do it the same way everywhere or we won't be able to keep
- *         compatibility with radeonfb.
- *         IMHO, the proper setup is what radeon_fixup_apertures() does on
- *         PPC when SET_MC_FB_FROM_APERTURE is defined (not the case currently
- *         because of compatiblity problems with DRI). This is, I think, also
- *         what GATOS does. We shall ask ATI what they do in the FireGL drivers
- *       - We don't preserve aspect ratio on scaled modes on LCDs yet
- *       - The way we retreive the BIOS informations probably doesn't work with
- *         anything but the primary card since we need a "live" BIOS image in
- *         memory to find the tables configured by the BIOS during POST stage.
  */
 
 
-#define RADEON_VERSION	"0.1.8-ben"
+#define RADEON_VERSION	"3.0.0-amt"
 
 
 #include <linux/config.h>
@@ -176,8 +87,7 @@
 #define RTRACE		if(0) printk
 #endif
 
-#define MAX_MAPPED_VRAM (2048*2048*4)
-#define MIN_MAPPED_VRAM (1024*768*1)
+
 
 enum radeon_chips {
 	RADEON_QD,
@@ -203,8 +113,6 @@
 	RADEON_If,
 	RADEON_Ig,
 	RADEON_Y_,
-	RADEON_Ya,
-	RADEON_Yd,
 	RADEON_Ld,
 	RADEON_Le,
 	RADEON_Lf,
@@ -219,8 +127,9 @@
 	RADEON_NH,
 	RADEON_NI,
 	RADEON_AP,
-	RADEON_AQ,
 	RADEON_AR,
+	RADEON_9800SE,
+	RADEON_9600,
 };
 
 enum radeon_arch {
@@ -242,47 +151,46 @@
 	const char *name;
 	unsigned char arch;
 } radeon_chip_info[] __devinitdata = {
-	{ "QD", RADEON_R100 },
-	{ "QE", RADEON_R100 },
-	{ "QF", RADEON_R100 },
-	{ "QG", RADEON_R100 },
-	{ "VE QY", RADEON_RV100 },
-	{ "VE QZ", RADEON_RV100 },
-	{ "M7 LW", RADEON_M7 },
-	{ "M7 LX", RADEON_M7 },
-	{ "M6 LY", RADEON_M6 },
-	{ "M6 LZ", RADEON_M6 },
-	{ "8500 QL", RADEON_R200 },
-	{ "8500 QN", RADEON_R200 },
-	{ "8500 QO", RADEON_R200 },
-	{ "8500 Ql", RADEON_R200 },
-	{ "8500 BB", RADEON_R200 },
-	{ "9100 QM", RADEON_R200 },
-	{ "7500 QW", RADEON_RV200 },
-	{ "7500 QX", RADEON_RV200 },
-	{ "9000 Id", RADEON_RV250 },
-	{ "9000 Ie", RADEON_RV250 },
-	{ "9000 If", RADEON_RV250 },
-	{ "9000 Ig", RADEON_RV250 },
-	{ "9200 Y", RADEON_RV280 },
-	{ "9200 Ya", RADEON_RV280 },
-	{ "9200 Yd", RADEON_RV280 },
-	{ "M9 Ld", RADEON_M9 },
-	{ "M9 Le", RADEON_M9 },
-	{ "M9 Lf", RADEON_M9 },
-	{ "M9 Lg", RADEON_M9 },
-	{ "9700 ND", RADEON_R300 },
-	{ "9700 NE", RADEON_R300 },
-	{ "9700 NF", RADEON_R350 },
-	{ "9700 NG", RADEON_R350 },
-	{ "9700 AE", RADEON_R300 },
-	{ "9700 AF", RADEON_R300 },
-	{ "9500 AD", RADEON_R300 },
-	{ "9800 NH", RADEON_R350 },
-	{ "9800 NI", RADEON_R350 },
-	{ "9600 AP", RADEON_RV350 },
-	{ "9600 AQ", RADEON_RV350 },
-	{ "9600 AR", RADEON_RV350 },
+	{ "Radeon R100/QD", RADEON_R100 },
+	{ "Radeon R100/QE", RADEON_R100 },
+	{ "Radeon R100/QF", RADEON_R100 },
+	{ "Radeon R100/QG", RADEON_R100 },
+	{ "Radeon VE", RADEON_RV100 },
+	{ "Radeon VE", RADEON_RV100 },
+	{ "Radeon M7", RADEON_M7 },
+	{ "Radeon M7", RADEON_M7 },
+	{ "Radeon M6", RADEON_M6 },
+	{ "Radeon M6", RADEON_M6 },
+	{ "Radeon 8500 QL", RADEON_R200 },
+	{ "Radeon 8500 QN", RADEON_R200 },
+	{ "Radeon 8500 QO", RADEON_R200 },
+	{ "Radeon 8500 Ql", RADEON_R200 },
+	{ "Radeon 8500 BB", RADEON_R200 },
+	{ "Radeon 9100 QM", RADEON_R200 },
+	{ "Radeon 7500 QW", RADEON_RV200 },
+	{ "Radeon 7500 QX", RADEON_RV200 },
+	{ "Radeon 9000 Id", RADEON_RV250 },
+	{ "Radeon 9000 Ie", RADEON_RV250 },
+	{ "Radeon 9000 If", RADEON_RV250 },
+	{ "Radeon 9000 Ig", RADEON_RV250 },
+	{ "Radeon 9200 Y", RADEON_RV280 },
+	{ "Radeon M9 Ld", RADEON_M9 },
+	{ "Radeon M9 Le", RADEON_M9 },
+	{ "Radeon M9 Lf", RADEON_M9 },
+	{ "Radeon M9 Lg", RADEON_M9 },
+	{ "Radeon 9700 ND", RADEON_R300 },
+	{ "Radeon 9700 NE", RADEON_R300 },
+	{ "Radeon 9700 NF", RADEON_R350 },
+	{ "Radeon 9700 NG", RADEON_R350 },
+	{ "Radeon 9700 AE", RADEON_R300 },
+	{ "Radeon 9700 AF", RADEON_R300 },
+	{ "Radeon 9500 AD", RADEON_R300 },
+	{ "Radeon 9800 NH", RADEON_R350 },
+	{ "Radeon 9800 NI", RADEON_R350 },
+	{ "Radeon 9600 AP", RADEON_RV350 },
+	{ "Radeon 9600 AR", RADEON_RV350 },
+	{ "Radeon 9800SE ", RADEON_R350 },
+	{ "Radeon 9600 ", RADEON_RV350 },
 };
 
 
@@ -333,12 +241,11 @@
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_NH, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_NH},
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_NI, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_NI},
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_Y_, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_Y_},
-	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_Ya, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_Ya},
-	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_Yd, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_Yd},
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_AD, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_AD},
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_AP, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_AP},
-	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_AQ, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_AQ},
 	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_AR, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_AR},
+	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_9800SE, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_9800SE},
+	{ PCI_VENDOR_ID_ATI, PCI_DEVICE_ID_ATI_RADEON_9600, PCI_ANY_ID, PCI_ANY_ID, 0, 0, RADEON_9600},
 	{ 0, }
 };
 MODULE_DEVICE_TABLE(pci, radeonfb_pci_table);
@@ -499,11 +406,11 @@
 	int currcon;
 	struct display *currcon_display;
 
-	struct { u8 red, green, blue, pad; } palette[256];
+	struct { u8 red, green, blue, alpha; } palette[256];
 
 	short chipset;
 	unsigned char arch;
-	unsigned int video_ram;
+	int video_ram;
 	u8 rev;
 	int pitch, bpp, depth;
 	int xres, yres, pixclock;
@@ -537,9 +444,6 @@
 #if defined(FBCON_HAS_CFB16)
                 u_int16_t cfb16[16];
 #endif
-#if defined(FBCON_HAS_CFB24)
-                u_int32_t cfb24[16];
-#endif  
 #if defined(FBCON_HAS_CFB32)
                 u_int32_t cfb32[16];
 #endif  
@@ -559,7 +463,7 @@
 
 
 static struct fb_var_screeninfo radeonfb_default_var = {
-        640, 480, 640, 480, 0, 0, 8, 0,
+        640, 480, 640, 480, 0, 0, 8, 1,
         {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0},
         0, 0, -1, -1, 0, 39721, 40, 24, 32, 11, 96, 2,
         0, FB_VMODE_NONINTERLACED
@@ -715,7 +619,7 @@
 {
 	if (var->bits_per_pixel != 16)
 		return var->bits_per_pixel;
-	return (var->green.length == 6) ? 16 : 15;
+        return (var->green.length == 5) ? 15 : 16;
 }
 
 
@@ -724,6 +628,7 @@
 	u32 clock_cntl_index, mclk_cntl, rbbm_soft_reset;
 	u32 host_path_cntl;
 
+	RTRACE("Radeon engine reset!\n");
 	radeon_engine_flush (rinfo);
 
     	/* Some ASICs have bugs with dynamic-on feature, which are  
@@ -871,6 +776,9 @@
 static struct display_switch fbcon_radeon32;
 #endif
 
+#include "amithlon.h"
+#include <asm/uaccess.h>
+
 
 /*
  * prototypes
@@ -939,7 +847,6 @@
 #endif /* CONFIG_PMAC_BACKLIGHT */
 
 static struct fb_ops radeon_fb_ops = {
-	owner:			THIS_MODULE,
 	fb_get_fix:		radeonfb_get_fix,
 	fb_get_var:		radeonfb_get_var,
 	fb_set_var:		radeonfb_set_var,
@@ -1389,6 +1296,7 @@
 	printk("radeonfb: detected DFP panel size from EDID: %dx%d\n",
 		rinfo->panel_xres, rinfo->panel_yres);
 
+
 	rinfo->got_dfpinfo = 1;
 
 	return 1;
@@ -1467,6 +1375,12 @@
 	printk("radeonfb: detected DFP panel size from BIOS: %dx%d\n",
 		rinfo->panel_xres, rinfo->panel_yres);
 
+/*	if (rinfo->panel_xres == 0)
+	     {
+		rinfo->panel_xres = 1280;
+		rinfo->panel_xres = 1024;
+	     } */
+
 	rinfo->got_dfpinfo = 1;
 	return 1;
 }
@@ -1630,7 +1544,6 @@
 				  const struct pci_device_id *ent)
 {
 	struct radeonfb_info *rinfo;
-	struct fb_info *fb_info;
 	struct radeon_chip_info *rci = &radeon_chip_info[ent->driver_data];
 	u32 tmp;
 	int i, j;
@@ -1645,7 +1558,6 @@
 
 	memset (rinfo, 0, sizeof (struct radeonfb_info));
 
-	fb_info = (struct fb_info *)rinfo;
 	rinfo->pdev = pdev;
 	strncpy(rinfo->name, rci->name, 16);
 	rinfo->arch = rci->arch;
@@ -1773,7 +1685,7 @@
 		switch (pdev->device) {
 			case PCI_DEVICE_ID_ATI_RADEON_LY:
 			case PCI_DEVICE_ID_ATI_RADEON_LZ:
-				rinfo->video_ram = 8192 * 1024;
+				rinfo->video_ram = 1024 * 1024;
 				break;
 			default:
 				break;
@@ -1830,16 +1742,8 @@
 		}
 	}
 
-	fb_info->mapped_vram = min_t(unsigned int, MAX_MAPPED_VRAM, rinfo->video_ram);
-	do {
-		rinfo->fb_base = (unsigned long) ioremap (rinfo->fb_base_phys,
-				  		  fb_info->mapped_vram);
-		if (rinfo->fb_base)
-			break;
-
-		fb_info->mapped_vram /= 2;
-	} while(fb_info->mapped_vram > MIN_MAPPED_VRAM);
-	
+	rinfo->fb_base = (unsigned long) ioremap (rinfo->fb_base_phys,
+				  		  rinfo->video_ram);
 	if (!rinfo->fb_base) {
 		printk ("radeonfb: cannot map FB\n");
 		iounmap ((void*)rinfo->mmio_base);
@@ -1850,7 +1754,6 @@
 		kfree (rinfo);
 		return -ENODEV;
 	}
-	RTRACE(KERN_INFO "radeonfb: mapped %dk videoram\n", fb_info->mapped_vram/1024);
 
 	/* currcon not yet configured, will be set by first switch */
 	rinfo->currcon = -1;
@@ -1979,6 +1882,8 @@
 {
 	unsigned long temp;
 
+	RTRACE("Radeon engine init!\n");
+
 	/* disable 3D engine */
 	OUTREG(RB3D_CNTL, 0);
 
@@ -2045,6 +1950,8 @@
 {
 	struct fb_info *info;
 
+	RTRACE("Set FB info\n");
+
 	info = &rinfo->info;
 
 	strcpy (info->modename, rinfo->name);
@@ -2072,6 +1979,8 @@
         struct fb_info *info;
         struct display *disp;
 
+	RTRACE("Init disp\n");
+
         info = &rinfo->info;
         disp = &rinfo->disp;
         
@@ -2112,6 +2021,8 @@
 {
         int accel;  
                 
+	RTRACE("Set dispsw\n");
+
         accel = disp->var.accel_flags & FB_ACCELF_TEXT;
                 
         disp->dispsw_data = NULL;
@@ -2140,7 +2051,7 @@
                 case 16:
                         disp->dispsw = accel ? &fbcon_radeon16 : &fbcon_cfb16;
                         disp->dispsw_data = &rinfo->con_cmap.cfb16;
-                        disp->visual = FB_VISUAL_DIRECTCOLOR;
+                        disp->visual = FB_VISUAL_TRUECOLOR;
                         if (accel)
 				disp->line_length = (disp->var.xres_virtual * 2 + 0x3f) & ~0x3f;
 			else
@@ -2148,23 +2059,11 @@
                         break;
 #endif  /* FBCON_HAS_CFB16 */
 
-#ifdef FBCON_HAS_CFB24       
-                case 24:
-                        disp->dispsw = &fbcon_cfb24;
-                        disp->dispsw_data = &rinfo->con_cmap.cfb24;
-                        disp->visual = FB_VISUAL_DIRECTCOLOR;
-                        if (accel)
-				disp->line_length = (disp->var.xres_virtual * 3 + 0x3f) & ~0x3f;
-			else
-				disp->line_length = disp->var.xres_virtual * 3;
-                        break;
-#endif /* FBCON_HAS_CFB24 */
-
 #ifdef FBCON_HAS_CFB32
                 case 32:
                         disp->dispsw = accel ? &fbcon_radeon32 : &fbcon_cfb32;
                         disp->dispsw_data = &rinfo->con_cmap.cfb32;
-                        disp->visual = FB_VISUAL_DIRECTCOLOR;
+                        disp->visual = FB_VISUAL_TRUECOLOR;
                         if (accel)
 				disp->line_length = (disp->var.xres_virtual * 4 + 0x3f) & ~0x3f;
 			else
@@ -2185,6 +2084,8 @@
 {
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
                 
+	RTRACE("Installing CMap\n");
+
         if (con != rinfo->currcon)
                 return;
                 
@@ -2214,14 +2115,13 @@
                 {-1, -1}
         };
         int i;
-	struct fb_info *fb_info = (struct fb_info *)rinfo;
-                
+          RTRACE("Maximise\n");      
         /* use highest possible virtual resolution */
-        if (v->xres_virtual == -1 && v->yres_virtual == -1) {
+ /*       if (v->xres_virtual == -1 && v->yres_virtual == -1) {
                 printk("radeonfb: using max available virtual resolution\n");
                 for (i=0; modes[i].xres != -1; i++) {
                         if (modes[i].xres * nom / den * modes[i].yres <
-                            fb_info->mapped_vram / 2)
+                            rinfo->video_ram / 2)
                                 break;
                 }
                 if (modes[i].xres == -1) {
@@ -2234,15 +2134,15 @@
                 printk("radeonfb: virtual resolution set to max of %dx%d\n",
                         v->xres_virtual, v->yres_virtual);
         } else if (v->xres_virtual == -1) {
-                v->xres_virtual = (fb_info->mapped_vram * den /   
+                v->xres_virtual = (rinfo->video_ram * den /   
                                 (nom * v->yres_virtual * 2)) & ~15;
         } else if (v->yres_virtual == -1) {
                 v->xres_virtual = (v->xres_virtual + 15) & ~15;
-                v->yres_virtual = fb_info->mapped_vram * den /
+                v->yres_virtual = rinfo->video_ram * den /
                         (nom * v->xres_virtual *2);
         } else {
                 if (v->xres_virtual * nom / den * v->yres_virtual >
-                        fb_info->mapped_vram) {
+                        rinfo->video_ram) {
                         return -EINVAL;
                 }
         }
@@ -2255,11 +2155,31 @@
                 return -EINVAL;
                 
         if (v->yres_virtual < v->yres)
-                return -EINVAL;
-                                
-        return 0;
+                return -EINVAL; */
+
+/*	return -EINVAL; */
+        
+                v->xres_virtual = v->xres;  
+                v->yres_virtual = v->yres;
+                        
+         return 0;
 }
                         
+static void set_palette_entry(struct radeonfb_info *rinfo, unsigned idx, unsigned red, unsigned grn, unsigned blu)
+{
+       OUTREG(PALETTE_INDEX, idx);
+       OUTREG(PALETTE_DATA, (red << 16) | (grn << 8) | blu);
+
+       udelay(1);      /* is this necessary ? */
+}
+
+static void new_reset_palette(struct radeonfb_info *rinfo)
+{
+       unsigned idx;
+
+       for(idx = 0; idx < 256; ++idx)
+               set_palette_entry(rinfo, idx, idx, idx, idx);
+}
 
 
 /*
@@ -2272,13 +2192,16 @@
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
         struct display *disp;  
         
+	RTRACE("Get fix\n");
+
         disp = (con < 0) ? rinfo->info.disp : &fb_display[con];
 
         memset (fix, 0, sizeof (struct fb_fix_screeninfo));
 	sprintf (fix->id, "ATI Radeon %s", rinfo->name);
         
         fix->smem_start = rinfo->fb_base_phys;
-        fix->smem_len = rinfo->video_ram;
+        fix->smem_len = rinfo->video_ram; 
+
 
         fix->type = disp->type;
         fix->type_aux = disp->type_aux;
@@ -2321,6 +2244,7 @@
         struct fb_var_screeninfo v;
         int nom, den, accel;
         unsigned chgvar = 1;
+	RTRACE("Set var\n");
 
         disp = (con < 0) ? rinfo->info.disp : &fb_display[con];
 
@@ -2349,10 +2273,7 @@
 		case 9 ... 16:
 			v.bits_per_pixel = 16;
 			break;
-		case 17 ... 24:
-			v.bits_per_pixel = 24;
-			break;
-		case 25 ... 32:
+		case 17 ... 32:
 			v.bits_per_pixel = 32;
 			break;
 		default:
@@ -2382,7 +2303,7 @@
                         	disp->line_length = (v.xres_virtual * 2 + 0x3f) & ~0x3f;
 			else
                         	disp->line_length = v.xres_virtual * 2;
-			disp->visual = FB_VISUAL_DIRECTCOLOR;
+                        disp->visual = FB_VISUAL_TRUECOLOR;
 			v.red.offset = 10;
 			v.green.offset = 5;
 			v.blue.offset = 0;
@@ -2396,7 +2317,7 @@
                         	disp->line_length = (v.xres_virtual * 2 + 0x3f) & ~0x3f;
 			else
                         	disp->line_length = v.xres_virtual * 2;
-                        disp->visual = FB_VISUAL_DIRECTCOLOR;
+                        disp->visual = FB_VISUAL_TRUECOLOR;
                         v.red.offset = 11;
                         v.green.offset = 5;
                         v.blue.offset = 0;
@@ -2407,22 +2328,6 @@
                         break;  
 #endif
                         
-#ifdef FBCON_HAS_CFB24
-                case 24:
-                        nom = 4;
-                        den = 1;
-			if (accel)
-                        	disp->line_length = (v.xres_virtual * 3 + 0x3f) & ~0x3f;
-			else
-                        	disp->line_length = v.xres_virtual * 3;
-                        disp->visual = FB_VISUAL_DIRECTCOLOR;
-                        v.red.offset = 16;
-                        v.green.offset = 8;
-                        v.blue.offset = 0;
-                        v.red.length = v.blue.length = v.green.length = 8;
-                        v.transp.offset = v.transp.length = 0;
-                        break;
-#endif
 #ifdef FBCON_HAS_CFB32
                 case 32:
                         nom = 4;
@@ -2432,6 +2337,7 @@
 			else
                         	disp->line_length = v.xres_virtual * 4;
                         disp->visual = FB_VISUAL_DIRECTCOLOR;
+                        disp->visual = FB_VISUAL_TRUECOLOR;
                         v.red.offset = 16;
                         v.green.offset = 8;
                         v.blue.offset = 0;
@@ -2446,9 +2352,6 @@
                         return -EINVAL;
         }
 
-	if (((v.xres_virtual * v.yres_virtual * nom) / den) > info->mapped_vram)
-		return -EINVAL;
-
         if (radeonfb_do_maximize(rinfo, var, &v, nom, den) < 0)
                 return -EINVAL;  
                 
@@ -2487,6 +2390,8 @@
 
         if (real)
         	radeon_load_video_mode (rinfo, &v);
+        if( v.bits_per_pixel > 8)
+               new_reset_palette(rinfo);
 	if (accel && real) {
 		if (radeon_engine_init(rinfo) < 0) {
                         var->accel_flags &= ~FB_ACCELF_TEXT;
@@ -2525,6 +2430,8 @@
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
         struct display *disp;
                 
+	RTRACE("Get CMap\n");
+
         disp = (con < 0) ? rinfo->info.disp : &fb_display[con];
         
         if (con == rinfo->currcon) {
@@ -2547,6 +2454,8 @@
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
         struct display *disp;
         unsigned int cmap_len;
+
+	RTRACE("Set CMap\n");
                 
         disp = (con < 0) ? rinfo->info.disp : &fb_display[con];
   
@@ -2568,15 +2477,17 @@
 
 
 
-static int radeonfb_pan_display (struct fb_var_screeninfo *var, int con,
+/*static int radeonfb_pan_display (struct fb_var_screeninfo *var, int con,
                                  struct fb_info *info)
 {
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
+
+	RTRACE("Panning display\n");
                         
         if (((var->xoffset + var->xres) > var->xres_virtual)
             || ((var->yoffset + var->yres) > var->yres_virtual))
                return -EINVAL;
-                        
+                       
         if (rinfo->asleep)
                 return 0;
 
@@ -2584,9 +2495,49 @@
                              * var->bits_per_pixel / 8) & ~7);
                 
         return 0;
+} */
+
+static int radeonfb_pan_display (struct fb_var_screeninfo *var, int con,
+                                 struct fb_info *info)
+{
+        struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
+        u32 offset, xoffset, yoffset;
+                
+        xoffset = (var->xoffset + 7) & ~7;
+        yoffset = var->yoffset;
+#if 0                
+        if ((xoffset + var->xres > var->xres_virtual) || (yoffset+var->yres >
+                var->yres_virtual))
+                return -EINVAL;
+#endif                
+        offset = ((yoffset * var->xres + xoffset) * var->bits_per_pixel) >> 6;
+         
+//        OUTREG(CRTC_OFFSET, offset);
+        OUTREG(CRTC_OFFSET, ((var->yoffset * var->xres_virtual + var->xoffset)
+                             * var->bits_per_pixel / 8) & ~7);
+        
+        return 0;
 }
 
 
+static void fbcon_radeon_bmove_amy(struct radeonfb_info *rinfo, int srcy, int srcx,
+			       int dsty, int dstx, int height, int width);
+int radeon_rectcopy_complete(struct radeonfb_info *rinfo, 
+			   int sy, int sx, 
+			   int dy, int dx,
+			   int height, int width,
+			   int spitch, int dpitch,
+			   int op,
+			   int oldpitch, int Bpp);
+
+static void radeon_rectfill(struct radeonfb_info *rinfo,
+			    int dsty, int dstx,
+			    int height, int width,
+			    u32 clr);
+
+static void radeon_drawline(struct radeonfb_info *rinfo,
+			     int sy, int sx, int dy, int dx, u32 clr);
+
 static int radeonfb_ioctl (struct inode *inode, struct file *file, unsigned int cmd,
                            unsigned long arg, int con, struct fb_info *info)
 {
@@ -2596,9 +2547,73 @@
 	int rc;
 
 	switch (cmd) {
-		/*
-		 * TODO:  set mirror accordingly for non-Mobility chipsets with 2 CRTC's
-		 */
+	 case AMITHLON_FILL_RECT: 
+		{
+	     		amithlon_fill af;
+	     		if (copy_from_user(&af, (void *) arg, sizeof(af)))
+		 		return -EFAULT;
+	     		radeon_rectfill(rinfo,
+			af.sy,
+			af.sx,
+			af.height,
+			af.width,
+			af.colour);
+	     		return 0;
+		}
+	 case AMITHLON_COPY_RECT: 
+		{ 
+	   		amithlon_copy ac;
+	     		if (copy_from_user(&ac, (void *) arg, sizeof(ac)))
+		 		return -EFAULT;
+	     		fbcon_radeon_bmove_amy(rinfo,
+			ac.sy,
+			ac.sx,
+			ac.dy,
+			ac.dx,
+			ac.height,
+			ac.width);
+	     		return 0;
+		}
+/*	case AMITHLON_COPY_RECT_COMPLETE: 
+	  {
+		    amithlon_copy_complete acr;
+		    int answer;
+		    if (copy_from_user(&acr, (void *) arg, sizeof(acr)))
+			      return -EFAULT;
+		    answer=radeon_rectcopy_complete(rinfo,
+					  acr.sy,
+					  acr.sx,
+					  acr.dy,
+					  acr.dx,
+					  acr.height,
+					  acr.width,
+					  acr.spitch,
+					  acr.dpitch,
+					  acr.op,
+					  acr.oldpitch,
+					  acr.Bpp);
+		    return answer;
+          } */
+		case AMITHLON_DRAW_LINE: {
+	  		amithlon_line al;
+	        	if (copy_from_user(&al, (void *) arg, sizeof(al)))
+	 			return -EFAULT;
+     			radeon_drawline(rinfo,
+					al.sy,
+					al.sx,
+					al.dy,
+					al.dx,
+					al.colour);
+     			return 0; 
+		}
+	case AMITHLON_MAXCLOCK:
+	  {
+	    unsigned int answer=240000;
+
+	    if (put_user(answer, (u_int32_t*)arg))
+	      return -EFAULT;
+	    return 0;
+	  }
 		case FBIO_RADEON_SET_MIRROR:
 			switch (rinfo->arch) {
 				case RADEON_M6:
@@ -2672,10 +2687,17 @@
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
         struct display *disp, *old_disp;
         struct fb_cmap *cmap;
-        int switchmode = 0;
+        int switchmode = 1;
         
+	RTRACE("== Going in ==\n");
+	RTRACE("FBbase : %d  FBLocBase : %d\n",rinfo->fb_base, rinfo->fb_local_base);
+	RTRACE("FB Phys: %d\n",rinfo->fb_base_phys);
+	RTRACE("Bpp: %d  Depth: %d \n", rinfo->bpp, rinfo->depth);
+	RTRACE("X: %d  Y:%d \n", rinfo->xres, rinfo->yres);
+	RTRACE("Screen Base: %d\n",rinfo->disp.screen_base);
+
         disp = (con < 0) ? rinfo->info.disp : &fb_display[con];
-        old_disp = rinfo->currcon_display;
+        old_disp = rinfo->currcon_display; 
                 
         if (rinfo->currcon >= 0) {
                 cmap = &(rinfo->currcon_display->cmap);
@@ -2701,20 +2723,25 @@
 	rinfo->currcon = con;
 	rinfo->currcon_display = disp;
 	disp->var.activate = FB_ACTIVATE_NOW;
-        
-        if (switchmode) {
+     
+        if (switchmode) { 
                 radeonfb_set_var (&disp->var, con, info);
                 do_install_cmap(con, info);
-        } else {
-		if (radeon_engine_init(rinfo) < 0) {
+        } else { 
+		if (radeon_engine_init(rinfo) < 0) { 
                         disp->var.accel_flags &= ~FB_ACCELF_TEXT;
                         switchmode = 1;
 			goto try_again;
 		}
-        }
+        }  
 
         radeon_set_dispsw (rinfo, disp);
 
+	RTRACE("== Going out ==\n");
+	RTRACE("FBbase : %d  FBLocBase : %d\n",rinfo->fb_base, rinfo->fb_local_base);
+	RTRACE("Bpp: %d  Depth: %d \n", rinfo->bpp, rinfo->depth);
+	RTRACE("X: %d  Y:%d \n", rinfo->xres, rinfo->yres);
+
         return 0;
 }
 
@@ -2809,11 +2836,11 @@
 	
 	if (regno > 255)
 		return 1;
-     
- 	*red = (rinfo->palette[regno].red<<8) | rinfo->palette[regno].red; 
-    	*green = (rinfo->palette[regno].green<<8) | rinfo->palette[regno].green;
-    	*blue = (rinfo->palette[regno].blue<<8) | rinfo->palette[regno].blue;
-    	*transp = 0;
+
+        *red    = (unsigned) rinfo->palette[regno].red << 8;
+        *green  = (unsigned) rinfo->palette[regno].green << 8;
+        *blue   = (unsigned) rinfo->palette[regno].blue << 8;
+        *transp = (unsigned) rinfo->palette[regno].alpha << 8;
 
 	return 0;
 }                            
@@ -2821,23 +2848,22 @@
 
 
 static int radeon_setcolreg (unsigned regno, unsigned red, unsigned green,
-                             unsigned blue, unsigned transp, struct fb_info *info)
+                             unsigned blue, unsigned alpha, struct fb_info *info)
 {
         struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
-	u32 pindex;
 
 	if (regno > 255)
 		return 1;
 
-	red >>= 8;
-	green >>= 8;
-	blue >>= 8;
-	rinfo->palette[regno].red = red;
-	rinfo->palette[regno].green = green;
-	rinfo->palette[regno].blue = blue;
-
-        /* default */
-        pindex = regno;
+       red     >>= 8;
+       green   >>= 8;
+       blue    >>= 8;
+       alpha   >>= 8;
+
+       rinfo->palette[regno].red       = red;
+       rinfo->palette[regno].green     = green;
+       rinfo->palette[regno].blue      = blue;
+       rinfo->palette[regno].alpha     = alpha;
 
         if (!rinfo->asleep) {
         	u32 dac_cntl2, vclk_cntl;
@@ -2852,63 +2878,36 @@
 			OUTREG(DAC_CNTL2, dac_cntl2);
 		}
 
-		if (rinfo->bpp == 16) {
-			pindex = regno * 8;
+		if (rinfo->bpp == 8) {
+                set_palette_entry(rinfo, regno, red, green, blue);
+                return 0;
+    		 }
+
+	       if(regno > 15)
+ 	              return 1;
 
-			if (rinfo->depth == 16 && regno > 63)
-				return 1;
-			if (rinfo->depth == 15 && regno > 31)
-				return 1;
-
-			/* For 565, the green component is mixed one order below */
-			if (rinfo->depth == 16) {
-		                OUTREG8(PALETTE_INDEX, pindex>>1);
-	       	         	OUTREG(PALETTE_DATA, (rinfo->palette[regno>>1].red << 16) |
-	                        	(green << 8) | (rinfo->palette[regno>>1].blue));
-	                	green = rinfo->palette[regno<<1].green;
-	        	}
-		}
+  	       if(rinfo->bpp == 32) {
 
-		if (rinfo->depth != 16 || regno < 32) {
-			OUTREG8(PALETTE_INDEX, pindex);
-			OUTREG(PALETTE_DATA, (red << 16) | (green << 8) | blue);
+   	             rinfo->con_cmap.cfb32[regno] = (red << 16) | (green << 8) | blue;
+    	             return 0;
 		}
 
 		OUTPLL(VCLK_ECP_CNTL, vclk_cntl);
 	}
- 	if (regno < 16) {
-        	switch (rinfo->depth) {
-#ifdef FBCON_HAS_CFB16
-		        case 15:
-        			rinfo->con_cmap.cfb16[regno] = (regno << 10) | (regno << 5) |
-				                       	 	  regno;   
-			        break;
-		        case 16:
-        			rinfo->con_cmap.cfb16[regno] = (regno << 11) | (regno << 5) |
-				                       	 	  regno;   
-			        break;
-#endif
-#ifdef FBCON_HAS_CFB24   
-                        case 24:
-                                rinfo->con_cmap.cfb24[regno] = (regno << 16) | (regno << 8) | regno;
-                                break;
-#endif
-#ifdef FBCON_HAS_CFB32
-	        	case 32: {
-            			u32 i;    
-   
-  		       		i = (regno << 8) | regno;
-            			rinfo->con_cmap.cfb32[regno] = (i << 16) | i;
-		        	break;
-        		}
-#endif
-                }
-        }
-        return 0;
+        red     >>= 3;
+        green   >>= 2;
+        blue    >>= 3;
+ 
+        if(rinfo->depth == 15)
+                green >>= 1;
+        else
+                red <<= 1;
+  
+        rinfo->con_cmap.cfb16[regno] = (red << 10) | (green << 5) | blue;
 
+        return 0;
 }
 
-
 static void radeon_save_state (struct radeonfb_info *rinfo,
                                struct radeon_regs *save)
 {
@@ -3028,6 +3027,8 @@
 	vTotal = vSyncEnd + mode->upper_margin;
 	pixClock = mode->pixclock;
 	
+	RTRACE("Load video mode\n");
+
 	if ((primary_mon == MT_DFP) || (primary_mon == MT_LCD)) {
                 /* Force the native video mode of the LCD monitor.
                  * This is complicated, because when the hardware
@@ -3181,6 +3182,7 @@
 
 	rinfo->bpp = mode->bits_per_pixel;
 	rinfo->depth = depth;
+	printk("Radeon BPP: %d\n",rinfo->bpp);
 
 	RTRACE("pixclock = %lu\n", (unsigned long)pixClock);
 	RTRACE("freq = %lu\n", (unsigned long)freq);
@@ -4453,6 +4455,68 @@
 	radeon_engine_idle();
 }
 
+static void fbcon_radeon_bmove_amy(struct radeonfb_info *rinfo, int srcy, int srcx,
+			       int dsty, int dstx, int height, int width)
+{
+	//struct radeonfb_info *rinfo = (struct radeonfb_info *)(p->fb_info);
+	u32 dp_cntl = DST_LAST_PEL;
+	u32 dp_cntl_save = 0;
+
+
+	if (srcy < dsty) {
+		srcy += height - 1;
+		dsty += height - 1;
+	} else
+		dp_cntl |= DST_Y_TOP_TO_BOTTOM;
+
+	if (srcx < dstx) {
+		srcx += width - 1;
+		dstx += width - 1;
+	} else
+		dp_cntl |= DST_X_LEFT_TO_RIGHT;
+
+	dp_cntl_save = INREG(DP_CNTL);
+
+	radeon_fifo_wait(6);
+	OUTREG(DP_GUI_MASTER_CNTL, (rinfo->dp_gui_master_cntl |
+				    GMC_BRUSH_NONE |
+				    GMC_SRC_DATATYPE_COLOR |
+				    ROP3_S |
+				    DP_SRC_SOURCE_MEMORY));
+	OUTREG(DP_WRITE_MSK, 0xffffffff);
+	OUTREG(DP_CNTL, dp_cntl);
+	OUTREG(SRC_Y_X, (srcy << 16) | srcx);
+	OUTREG(DST_Y_X, (dsty << 16) | dstx);
+	OUTREG(DST_HEIGHT_WIDTH, (height << 16) | width);
+
+	radeon_fifo_wait(1);
+	OUTREG(DP_CNTL, dp_cntl_save);
+
+	radeon_engine_idle();
+}
+
+
+
+
+static void radeon_drawline(struct radeonfb_info *rinfo,
+			     int sy, int sx, int dy, int dx, u32 clr)
+{
+	radeon_fifo_wait(4);
+	OUTREG(DP_GUI_MASTER_CNTL, (rinfo->dp_gui_master_cntl |
+		GMC_CLR_CMP_CNTL_DIS |
+		GMC_SRC_DATATYPE_COLOR |
+		GMC_BRUSH_SOLID_COLOR |
+		ROP3_PATCOPY));
+	OUTREG(DP_BRUSH_BKGD_CLR, clr);
+	OUTREG(DP_BRUSH_FRGD_CLR, clr);
+	OUTREG(DP_WRITE_MSK, 0xffffffff);
+
+	radeon_fifo_wait(2);
+	OUTREG(DST_LINE_START, (sy<<16)|(sx & 0xffff));
+	OUTREG(DST_LINE_END, (dy<<16)|(dx & 0xffff));
+	radeon_engine_idle();
+		
+}
 
 
 static void radeon_rectfill(struct radeonfb_info *rinfo,
@@ -4503,7 +4567,7 @@
 	bmove:			fbcon_radeon_bmove,
 	clear:			fbcon_radeon8_clear,
 	putc:			fbcon_cfb8_putc,
-	putcs:			fbcon_cfb8_putcs,
+	putcs:			fbcon_cfb8_putc,
 	revc:			fbcon_cfb8_revc,
 	clear_margins:		fbcon_cfb8_clear_margins,
 	fontwidthmask:		FONTWIDTH(4)|FONTWIDTH(8)|FONTWIDTH(12)|FONTWIDTH(16)
@@ -4577,3 +4641,39 @@
 };
 #endif
 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff -uNr linux-2.4.37.9/drivers/video/radeon.h linux-2.4.37.9-amithlon/drivers/video/radeon.h
--- linux-2.4.37.9/drivers/video/radeon.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/radeon.h	2010-02-21 20:40:17.000000000 -0500
@@ -389,7 +389,7 @@
 #define RADEON_BIOS_5_SCRATCH		       0x0024
 #define RADEON_BIOS_6_SCRATCH		       0x0028
 #define RADEON_BIOS_7_SCRATCH		       0x002c
-
+#define HDP_SOFT_RESET                             (1 << 26)
 #define TV_DAC_CNTL                            0x088c
 #define GPIOPAD_MASK                           0x0198
 #define GPIOPAD_A                              0x019c
diff -uNr linux-2.4.37.9/drivers/video/riva/accel.c linux-2.4.37.9-amithlon/drivers/video/riva/accel.c
--- linux-2.4.37.9/drivers/video/riva/accel.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/accel.c	2005-12-21 14:48:05.000000000 -0500
@@ -9,6 +9,7 @@
  */
 
 #include "rivafb.h"
+#include <asm/uaccess.h>
 
 /* acceleration routines */
 
@@ -40,7 +41,85 @@
 	wait_for_idle(rinfo);
 }
 
-static void riva_rectfill(struct rivafb_info *rinfo, int sy,
+void riva_rectcopy(struct rivafb_info *rinfo, int sy, int sx, int dy, int dx,
+		   int height, int width, u_int color)
+{
+    RIVA_FIFO_FREE(rinfo->riva, Blt, 3);
+    rinfo->riva.Blt->TopLeftSrc  = (sy << 16) | sx;
+    rinfo->riva.Blt->TopLeftDst  = (dy << 16) | dx;
+    rinfo->riva.Blt->WidthHeight = (height  << 16) | width;
+}
+
+int riva_rectcopy_complete(struct rivafb_info *rinfo, 
+			   int sy, int sx, 
+			   int dy, int dx,
+			   int height, int width,
+			   int spitch, int dpitch,
+			   int op,
+			   int oldpitch, int Bpp)
+{
+  int off0;
+  int off1;
+
+  printk(KERN_ERR "NV: sy:%d sx:%d dy:%d dx:%d h:%d W:%d\n",sy,sx,dy,dx,height,width);
+  printk(KERN_ERR "NV: sp:%d dp:%d op:%d oldp:%d bpp:%d\n",spitch,dpitch,op,oldpitch,Bpp);
+
+  spitch*=Bpp;
+  dpitch*=Bpp;
+
+  if (dpitch!=spitch) {
+    off0=dy*dpitch;
+    off1=sy*spitch;
+    dy=sy=0;
+  }
+  else {
+    int min=dy<sy?dy:sy;
+    off0=min*dpitch;
+    off1=min*spitch;
+    dy-=min;
+    sy-=min;
+  }
+  printk(KERN_ERR "NV: dy:%d sy:%d off0:%d off1:%d\n",dy,sy,off0,off1);
+
+  if (dy>=8192 || sy>=8192)
+    return -EINVAL;
+
+  setPitches(&(rinfo->riva),
+	     dpitch,
+	     spitch,
+	     oldpitch*Bpp,
+	     oldpitch*Bpp,
+	     off0,
+	     off1);
+  wait_for_idle(rinfo);
+
+  
+  RIVA_FIFO_FREE(rinfo->riva, Rop, 1);
+  rinfo->riva.Rop->Rop3 = (op&0x0f)*0x11;
+
+  printk("NV: Using Rop %d\n",(op&0x0f)*11);
+
+  RIVA_FIFO_FREE(rinfo->riva, Blt, 3);
+  rinfo->riva.Blt->TopLeftSrc  = (sy << 16) | sx;
+  rinfo->riva.Blt->TopLeftDst  = (dy << 16) | dx;
+  rinfo->riva.Blt->WidthHeight = (height  << 16) | width;
+
+  RIVA_FIFO_FREE(rinfo->riva, Rop, 1);
+  rinfo->riva.Rop->Rop3 = 0xCC;
+
+  wait_for_idle(rinfo);
+  setPitches(&(rinfo->riva),
+	     oldpitch*Bpp,
+	     oldpitch*Bpp,
+	     oldpitch*Bpp,
+	     oldpitch*Bpp,
+	     0,
+	     0);
+  return 0;
+}
+
+
+void riva_rectfill(struct rivafb_info *rinfo, int sy,
 			  int sx, int height, int width, u_int color)
 {
 	RIVA_FIFO_FREE(rinfo->riva, Bitmap, 1);
@@ -51,6 +130,128 @@
 	rinfo->riva.Bitmap->UnclippedRectangle[0].WidthHeight = (width << 16) | height;
 }
 
+void riva_drawline(struct rivafb_info *rinfo, int sy,
+		   int sx, int dy, int dx, 
+		   unsigned long offset, u_int color)
+{
+  setPitches(&(rinfo->riva),
+	     (&(rinfo->riva))->CurrentState->pitch0,
+	     (&(rinfo->riva))->CurrentState->pitch1,
+	     (&(rinfo->riva))->CurrentState->pitch2,
+	     (&(rinfo->riva))->CurrentState->pitch3,
+	     offset,
+	     offset);
+  wait_for_idle(rinfo);
+  
+  RIVA_FIFO_FREE(rinfo->riva, Line, 5);
+  
+  rinfo->riva.Line->Color = color;
+  
+  rinfo->riva.Line->Lin[0].point0     = (sy << 16) | (sx & 0xffff); 
+  rinfo->riva.Line->Lin[0].point1     = (dy << 16) | (dx & 0xffff); 
+  rinfo->riva.Line->Lin[1].point0     = (dy << 16) | (dx & 0xffff); 
+  rinfo->riva.Line->Lin[1].point1     = ((dy+1) << 16) | (dx & 0xffff); 
+
+  wait_for_idle(rinfo);
+  setPitches(&(rinfo->riva),
+	     (&(rinfo->riva))->CurrentState->pitch0,
+	     (&(rinfo->riva))->CurrentState->pitch1,
+	     (&(rinfo->riva))->CurrentState->pitch2,
+	     (&(rinfo->riva))->CurrentState->pitch3,
+	     0,
+	     0);
+}
+
+static u8 byte_rev[256] = {
+	0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
+	0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 
+	0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 
+	0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 
+	0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 
+	0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 
+	0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 
+	0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 
+	0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1, 
+	0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9, 
+	0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 
+	0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd, 
+	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3, 
+	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 
+	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7, 
+	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
+};
+
+static void riva_setrop3(struct rivafb_info *rinfo, unsigned char x)
+{
+  RIVA_FIFO_FREE(rinfo->riva, Rop, 1);
+  rinfo->riva.Rop->Rop3 = x; 
+}
+
+int riva_blittemplate(struct rivafb_info *rinfo,
+		      u_int colour0, u_int colour1,
+		      int sy, int sx, 
+		      int height, int width, 
+		      int offset, char* data, int pitch,
+		      unsigned char rop3)
+{
+    volatile u32 *d;
+    int i, j, cnt;
+    int maskwidth=width+offset;
+    int wc=(maskwidth+31)>>5;
+    int fifoind;
+    int infifo;
+    u8  kdat[64];
+    
+    
+    riva_setrop3(rinfo, rop3);
+    RIVA_FIFO_FREE(rinfo->riva, Bitmap, 7);
+    rinfo->riva.Bitmap->ClipE.TopLeft     = (sy << 16) | (sx & 0xFFFF);
+    rinfo->riva.Bitmap->ClipE.BottomRight = ((sy+height) << 16) | ((sx+width) & 0xffff);
+    rinfo->riva.Bitmap->Color0E           = colour0;
+    rinfo->riva.Bitmap->Color1E           = colour1;
+    rinfo->riva.Bitmap->WidthHeightInE  = (height << 16) | (wc*32);
+    rinfo->riva.Bitmap->WidthHeightOutE = (height << 16) | (wc*32);
+    rinfo->riva.Bitmap->PointE          = (sy << 16) | ((sx-offset) & 0xFFFF);
+    
+    d = &rinfo->riva.Bitmap->MonochromeData01E;
+    infifo=0;
+    fifoind=0;
+    
+    for (i=0;i<height;i++) {
+	u32* ldata=(u32*)data;
+	for (j=wc;j;j--) {
+	    if (!infifo) {
+		if (j>16)
+		    cnt=16;
+		else
+		    cnt=j;
+		if (copy_from_user(kdat,ldata,cnt<<2)) {
+		    riva_setrop3(rinfo, 0xcc);
+		    return -EFAULT;
+		}
+		RIVA_FIFO_FREE(rinfo->riva, Bitmap, cnt);
+		
+		infifo=cnt;
+		fifoind=0;
+		ldata+=cnt;
+	    }
+	    {
+	      int ind=fifoind<<2;
+	      u32 val=((u32)byte_rev[kdat[ind+3]]<<24) |
+		((u32)byte_rev[kdat[ind+2]]<<16) |
+		((u32)byte_rev[kdat[ind+1]]<<8) |
+		((u32)byte_rev[kdat[ind+0]]<<0);
+	      d[fifoind]=val;
+	    }
+	    fifoind++;
+	    infifo--;
+	}
+	data+=pitch;
+    }
+    riva_setrop3(rinfo, 0xcc);
+    return 0;
+}
+
 static void fbcon_riva_bmove(struct display *p, int sy, int sx, int dy, int dx,
 			    int height, int width)
 {
@@ -88,24 +289,7 @@
 			      bottom_width, right_start, bgx);
 }
 
-static u8 byte_rev[256] = {
-	0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
-	0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8, 
-	0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4, 
-	0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc, 
-	0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2, 
-	0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa, 
-	0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 
-	0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe, 
-	0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1, 
-	0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9, 
-	0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5, 
-	0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd, 
-	0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3, 
-	0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb, 
-	0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7, 
-	0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
-};
+
 
 static inline void fbcon_reverse_order(u32 *l)
 {
@@ -153,10 +337,8 @@
 		for (j = 0; j < cnt; j++) {
 			if (w <= 8) 
 				cdat2 = *cdat++;
-			else {
-				cdat2 = *(u16*)cdat;
-				cdat += sizeof(u16);
-			}
+			else
+				cdat2 = *((u16*)cdat)++;
 			fbcon_reverse_order(&cdat2);
 			d[j] = cdat2;
 		}
@@ -255,7 +437,7 @@
 	putcs:		fbcon_riva8_putcs,
 	revc:		fbcon_riva8_revc,
 	clear_margins:	fbcon_riva8_clear_margins,
-#endif	
+#endif
 	fontwidthmask:	FONTWIDTHRANGE(4, 16)
 };
 #endif
@@ -302,8 +484,8 @@
 
 static inline void convert_bgcolor_16(u32 *col)
 {
-	*col = ((*col & 0x0000F800) << 8)
-             | ((*col & 0x000007E0) << 5)
+	*col = ((*col & 0x00007C00) << 9)
+             | ((*col & 0x000003E0) << 6)
              | ((*col & 0x0000001F) << 3)
              |          0xFF000000;
 }
diff -uNr linux-2.4.37.9/drivers/video/riva/fbdev.c linux-2.4.37.9-amithlon/drivers/video/riva/fbdev.c
--- linux-2.4.37.9/drivers/video/riva/fbdev.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/fbdev.c	2005-12-26 04:26:14.000000000 -0500
@@ -1,12 +1,9 @@
 /*
- * linux/drivers/video/riva/fbdev.c
+ * linux/drivers/video/riva/fbdev.c - nVidia RIVA 128/TNT/TNT2 fb driver
  *
- * nVidia RIVA 128/TNT/TNT2/GeForce2/3 fb driver
- *
- * Maintained by Ani Joshi <ajoshi@kernel.crashing.org>
+ * Maintained by Ani Joshi <ajoshi@shell.unixbox.com>
  *
  * Copyright 1999-2000 Jeff Garzik
- * Copyright 2000-2003 Ani Joshi
  *
  * Contributors:
  *
@@ -17,6 +14,8 @@
  *
  *	Jindrich Makovicka:  Accel code help, hw cursor, mtrr
  *
+ *	Paul Richards:  Bug fixes, updates
+ *
  * Initial template from skeletonfb.c, created 28 Dec 1997 by Geert Uytterhoeven
  * Includes riva_hw.c from nVidia, see copyright below.
  * KGI code provided the basis for state storage, init, and mode switching.
@@ -25,10 +24,16 @@
  * License.  See the file COPYING in the main directory of this archive
  * for more details.
  *
- * Known bugs and issues:
- *	restoring text mode fails
- *	doublescan modes are broken
- *	option 'noaccel' has no effect
+ *
+ *
+ *	   Amithlon conversion by Gary Colville (bombcrater@garycvl.f2s.com)
+ *
+ *	   Known bugs:
+ *
+ *			- Hardware line drawing broken on NV20/25/30
+ *			- No autodetection of flat panels on DVI
+ *			- No resolution scaling
+ *
  */
 
 #include <linux/config.h>
@@ -58,7 +63,7 @@
 
 
 /* version number of this driver */
-#define RIVAFB_VERSION "0.9.4"
+#define RIVAFB_VERSION "3.0.0-amt"
 
 
 
@@ -117,7 +122,7 @@
 static void rivafb_blank(int blank, struct fb_info *info);
 
 extern void riva_setup_accel(struct rivafb_info *rinfo);
-extern void wait_for_idle(struct rivafb_info *rinfo);
+extern inline void wait_for_idle(struct rivafb_info *rinfo);
 
 
 
@@ -131,23 +136,96 @@
 	CH_RIVA_128 = 0,
 	CH_RIVA_TNT,
 	CH_RIVA_TNT2,
-	CH_RIVA_UTNT2,	/* UTNT2 */
-	CH_RIVA_VTNT2,	/* VTNT2 */
-	CH_RIVA_UVTNT2,	/* VTNT2 */
-	CH_RIVA_ITNT2,	/* ITNT2 */
+	CH_RIVA_UTNT2,
+	CH_RIVA_VTNT2,
+	CH_RIVA_UVTNT2,
+	CH_RIVA_ITNT2,
 	CH_GEFORCE_SDR,
 	CH_GEFORCE_DDR,
 	CH_QUADRO,
 	CH_GEFORCE2_MX,
+	CH_GEFORCE2_MX2,
+	CH_GEFORCE2_GO,
 	CH_QUADRO2_MXR,
 	CH_GEFORCE2_GTS,
+	CH_GEFORCE2_GTS2,
 	CH_GEFORCE2_ULTRA,
 	CH_QUADRO2_PRO,
-	CH_GEFORCE2_GO,
-        CH_GEFORCE3,
-        CH_GEFORCE3_1,
-        CH_GEFORCE3_2,
-        CH_QUADRO_DDC
+	CH_GEFORCE4_MX_460,
+	CH_GEFORCE4_MX_440,
+	CH_GEFORCE4_MX_420,
+	CH_GEFORCE4_440_GO,
+	CH_GEFORCE4_420_GO,
+	CH_GEFORCE4_420_GO_M32,
+	CH_QUADRO4_500XGL,
+	CH_GEFORCE4_440_GO_M64,
+	CH_QUADRO4_200,
+	CH_QUADRO4_550XGL,
+	CH_QUADRO4_500_GOGL,
+	CH_GEFORCE3,
+	CH_GEFORCE3_1,
+	CH_GEFORCE3_2,
+	CH_QUADRO_DDC,
+	CH_GEFORCE4_TI_4600,
+	CH_GEFORCE4_TI_4400,
+	CH_GEFORCE4_TI_4200,
+	CH_QUADRO4_900XGL,
+	CH_QUADRO4_750XGL,
+	CH_QUADRO4_700XGL, /* new stuff below */
+	CH_GEFORCE4_MX_440_SE,
+	CH_GEFORCE4_460_GO,
+	CH_GEFORCE4_410_GO_M16,
+	CH_GEFORCE4_440_8X,
+	CH_GEFORCE4_440SE_8X,
+	CH_GEFORCE4_420_8X,
+	CH_GEFORCE4_448_GO,
+	CH_GEFORCE4_488_GO,
+	CH_QUADRO4_580_XGL,
+	CH_QUADRO4_280_NVS,
+	CH_QUADRO4_380_XGL,
+	CH_IGEFORCE2,
+	CH_GEFORCE4_TI_4800,
+	CH_GEFORCE4_TI_4800_8X,
+	CH_GEFORCE4_TI_4800_SE,
+	CH_QUADRO4_980_XGL,
+	CH_QUADRO4_780_XGL,
+	CH_QUADRO4_700_GOGL,
+	CH_GEFORCE_FX_5800_ULTRA,
+	CH_GEFORCE_FX_5800,
+	CH_QUADRO_FX_2000,
+	CH_QUADRO_FX_1000,
+	CH_GEFORCE_FX_5600_ULTRA,
+	CH_GEFORCE_FX_5600,
+	CH_GEFORCE_FX_5600SE,
+	CH_GEFORCE_FX_GO5600,
+	CH_GEFORCE_FX_GO5650,
+	CH_QUADRO_FX_GO700,
+	CH_GEFORCE_FX_5200,
+	CH_GEFORCE_FX_5200_ULTRA,
+	CH_GEFORCE_FX_5200_1,
+	CH_GEFORCE_FX_5200SE,
+	CH_GEFORCE_FX_GO5200,
+	CH_GEFORCE_FX_GO5250,
+	CH_GEFORCE_FX_GO5250_32,
+	CH_GEFORCE_FX_GO_5200,
+	CH_QUADRO_NVS_280_PCI,
+	CH_QUADRO_FX_500,
+	CH_GEFORCE_FX_GO5300,
+	CH_GEFORCE_FX_GO5100,
+	CH_GEFORCE_FX_5900_ULTRA,
+	CH_GEFORCE_FX_5900,
+	CH_GEFORCE_FX_5900XT,
+	CH_GEFORCE_FX_5950_ULTRA,
+	CH_GEFORCE_FX_5700_ULTRA,
+	CH_GEFORCE_FX_5700,
+	CH_GEFORCE_FX_5700LE,
+	CH_GEFORCE_FX_5700VE,
+	CH_GEFORCE_FX_GO5700_1,
+	CH_GEFORCE_FX_GO5700_2,
+	CH_GEFORCE_FX_5500,
+	CH_GEFORCE_FX_5100,
+	CH_GEFORCE_FX_5900ZT,
+	CH_GEFORCE_MX_4000
 };
 
 /* directly indexed by riva_chips enum, above */
@@ -162,19 +240,91 @@
 	{ "RIVA-VTNT2", NV_ARCH_04 },
 	{ "RIVA-UVTNT2", NV_ARCH_04 },
 	{ "RIVA-ITNT2", NV_ARCH_04 },
-	{ "GeForce-SDR", NV_ARCH_10},
-	{ "GeForce-DDR", NV_ARCH_10},
-	{ "Quadro", NV_ARCH_10},
-	{ "GeForce2-MX", NV_ARCH_10},
-	{ "Quadro2-MXR", NV_ARCH_10},
-	{ "GeForce2-GTS", NV_ARCH_10},
-	{ "GeForce2-ULTRA", NV_ARCH_10},
-	{ "Quadro2-PRO", NV_ARCH_10},
-        { "GeForce2-Go", NV_ARCH_10},
-        { "GeForce3", NV_ARCH_20}, 
-        { "GeForce3 Ti 200", NV_ARCH_20},
-        { "GeForce3 Ti 500", NV_ARCH_20},
-        { "Quadro DDC", NV_ARCH_20}
+	{ "GeForce-SDR", NV_ARCH_10 },
+	{ "GeForce-DDR", NV_ARCH_10 },
+	{ "Quadro", NV_ARCH_10 },
+	{ "GeForce2-MX", NV_ARCH_10 },
+	{ "GeForce2-MX", NV_ARCH_10 },
+	{ "GeForce2-GO", NV_ARCH_10 },
+	{ "Quadro2-MXR", NV_ARCH_10 },
+	{ "GeForce2-GTS", NV_ARCH_10 },
+	{ "GeForce2-GTS", NV_ARCH_10 },
+	{ "GeForce2-ULTRA", NV_ARCH_10 },
+	{ "Quadro2-PRO", NV_ARCH_10 },
+	{ "GeForce4-MX-460", NV_ARCH_20 },
+	{ "GeForce4-MX-440", NV_ARCH_20 },
+	{ "GeForce4-MX-420", NV_ARCH_20 },
+	{ "GeForce4-440-GO", NV_ARCH_20 },
+	{ "GeForce4-420-GO", NV_ARCH_20 },
+	{ "GeForce4-420-GO-M32", NV_ARCH_20 },
+	{ "Quadro4-500-XGL", NV_ARCH_20 },
+	{ "GeForce4-440-GO-M64", NV_ARCH_20 },
+	{ "Quadro4-200", NV_ARCH_20 },
+	{ "Quadro4-550-XGL", NV_ARCH_20 },
+	{ "Quadro4-500-GOGL", NV_ARCH_20 },
+	{ "GeForce3", NV_ARCH_20 },
+	{ "GeForce3 Ti 200", NV_ARCH_20 },
+	{ "GeForce3 Ti 500", NV_ARCH_20 },
+	{ "Quadro DDC", NV_ARCH_20 },
+	{ "GeForce4 Ti 4600", NV_ARCH_20 },
+	{ "GeForce4 Ti 4400", NV_ARCH_20 },
+	{ "GeForce4 Ti 4200", NV_ARCH_20 },
+	{ "Quadro4-900-XGL", NV_ARCH_20 },
+	{ "Quadro4-750-XGL", NV_ARCH_20 },
+	{ "Quadro4-700-XGL", NV_ARCH_20 },
+	{ "GeForce 4 MX440SE" , NV_ARCH_20 },
+	{ "GeForce 4 460 GO" , NV_ARCH_20 },
+	{ "GeForce 4 410 GO M16" , NV_ARCH_20 },
+	{ "GeForce 4 440 AGP 8X" , NV_ARCH_20 },
+	{ "GeForce 4 440SE AGP 8X" , NV_ARCH_20 },
+	{ "GeForce 4 420 AGP 8X" , NV_ARCH_20 },
+	{ "GeForce 4 448 GO" , NV_ARCH_20 },
+	{ "GeForce 4 488 GO" , NV_ARCH_20 },
+	{ "Quadro 4 580 XGL" , NV_ARCH_20 },
+	{ "Quadro 4 280 NVS" , NV_ARCH_20 },
+	{ "Quadro 4 380 XGL" , NV_ARCH_20 },
+	{ "NForce 2 IGP" , NV_ARCH_20 },
+	{ "GeForce 4 Ti 4800" , NV_ARCH_20 },
+	{ "GeForce 4 Ti 4800 AGP 8X" , NV_ARCH_20 },
+	{ "GeForce 4 Ti 4800SE" , NV_ARCH_20 },
+	{ "Quadro 4 980 XGL" , NV_ARCH_20 },
+	{ "Quadro 4 780 XGL" , NV_ARCH_20 },
+	{ "Quadro 4 700 GOGL" , NV_ARCH_20 },
+	{ "GeForce FX 5800 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5800" , NV_ARCH_30 },
+	{ "Quadro FX 2000" , NV_ARCH_30 },
+	{ "Quadro FX 1000" , NV_ARCH_30 },
+	{ "GeForce FX 5600 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5600" , NV_ARCH_30 },
+	{ "GeForce FX 5600SE" , NV_ARCH_30 },
+	{ "GeForce FX GO5600" , NV_ARCH_30 },
+	{ "GeForce FX GO5650" , NV_ARCH_30 },
+	{ "Quadro FX GO700" , NV_ARCH_30 },
+	{ "GeForce FX 5200" , NV_ARCH_30 },
+	{ "GeForce 5200 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5200" , NV_ARCH_30 },
+	{ "GeForce FX 5200SE" , NV_ARCH_30 },
+	{ "GeForce FX GO5200" , NV_ARCH_30 },
+	{ "GeForce FX GO5250" , NV_ARCH_30 },
+	{ "GeForce FX GO5250 M32" , NV_ARCH_30 },
+	{ "GeForce FX GO5200" , NV_ARCH_30 },
+	{ "Quadro FX 500" , NV_ARCH_30 },
+	{ "GeForce FX GO5300" , NV_ARCH_30 },
+	{ "GeForce FX GO5100" , NV_ARCH_30 },
+	{ "GeForce FX 5900 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5900/5900XT" , NV_ARCH_30 },
+	{ "GeForce FX 5900XT" , NV_ARCH_30 },
+	{ "GeForce FX 5950 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5700 Ultra" , NV_ARCH_30 },
+	{ "GeForce FX 5700" , NV_ARCH_30 },
+	{ "GeForce FX 5700LE" , NV_ARCH_30 },
+	{ "GeForce FX 5700VE" , NV_ARCH_30 },
+	{ "GeForce FX GO 5700" , NV_ARCH_30 },
+	{ "GeForce FX GO 5700" , NV_ARCH_30 },
+	{ "GeForce FX 5500" , NV_ARCH_30 },
+	{ "GeForce FX 5100" , NV_ARCH_30 },
+	{ "GeForce FX 5900ZT" , NV_ARCH_30 },
+	{ "GeForce MX 4000", NV_ARCH_20 }
 };
 
 static struct pci_device_id rivafb_pci_tbl[] __devinitdata = {
@@ -201,27 +351,167 @@
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX,
 	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_MX },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2,
-	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_MX },
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_MX2 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_GO },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR,
 	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO2_MXR },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS,
 	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_GTS },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2,
-	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_GTS },
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_GTS2 },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA,
 	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_ULTRA },
 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO,
 	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO2_PRO },
-        { PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO,
-          PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE2_GO },
-        { PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3,
-          PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3 },
-        { PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3_1,
-          PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3_1 },
-        { PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3_2,
-          PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3_2 },
-        { PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_DDC,
-          PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_DDC },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_MX_460 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_MX_440 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_MX_420 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_440_GO },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_420_GO },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_420_GO_M32 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_500XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_440_GO_M64 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_200,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_200 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_550XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_500_GOGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3_1,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3_1 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE3_2,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE3_2 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_DDC,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_DDC },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4600 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4400 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4200 },
+ 	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_900XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_750XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_700XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_MX_440_SE },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_460_GO },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_410_GO_M16 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_440_8X },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_440SE_8X },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_420_8X },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_448_GO },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_488_GO },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_580_XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_280_NVS },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_380_XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_IGEFORCE2,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_IGEFORCE2 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4800 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4800_8X },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE4_TI_4800_SE },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_980_XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_780_XGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO4_700_GOGL },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5800_ULTRA },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5800 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_FX_2000 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_FX_1000 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5600_ULTRA },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5600 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5600SE },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5600 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5650 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_FX_GO700 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5200 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5200_ULTRA },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5200_1 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5200SE }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5200 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5250 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5250_32 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO_5200 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_QUADRO_FX_500 },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5300 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5100 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5900_ULTRA }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5900 }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5900XT }, 
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5950_ULTRA  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5700_ULTRA  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5700  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5700LE  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5700VE  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5700_1  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_GO5700_2  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5500  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5100  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_FX_5900ZT  },
+	{ PCI_VENDOR_ID_NVIDIA, PCI_DEVICE_ID_NVIDIA_GEFORCE_MX_4000,
+	  PCI_ANY_ID, PCI_ANY_ID, 0, 0, CH_GEFORCE_MX_4000  },
 	{ 0, } /* terminate list */
 };
 MODULE_DEVICE_TABLE(pci, rivafb_pci_tbl);
@@ -278,12 +568,14 @@
 
 /* command line data, set in rivafb_setup() */
 static char fontname[40] __initdata = { 0 };
-static char noaccel __initdata = 0;
-static char nomove = 0;
-static char nohwcursor __initdata = 0;
-static char noblink = 0;
+static int noaccel __initdata = 0;
+static int nomove = 0;
+static int nohwcursor __initdata = 0;
+static int noblink = 0;
+static int flatpanel __initdata = -1; /* Autodetect later */
+static int forceCRTC __initdata = -1;
 #ifdef CONFIG_MTRR
-static char nomtrr __initdata = 0;
+static int nomtrr __initdata = 0;
 #endif
 
 #ifndef MODULE
@@ -445,7 +737,7 @@
 	if (rinfo->cursor->vbl_cnt && --rinfo->cursor->vbl_cnt == 0) {
 		rinfo->cursor->on ^= 1;
 		if (rinfo->cursor->on)
-			*(rinfo->riva.CURSORPOS) = (rinfo->cursor->pos.x & 0xFFFF)
+			rinfo->riva.PRAMDAC[0x0000300/4] = (rinfo->cursor->pos.x & 0xFFFF)
 						   | (rinfo->cursor->pos.y << 16);
 		rinfo->riva.ShowHideCursor(&rinfo->riva, rinfo->cursor->on);
 		if (!noblink)
@@ -530,10 +822,16 @@
  * CALLED FROM:
  * riva_load_video_mode()
  */
-static void rivafb_download_cursor(struct rivafb_info *rinfo)
+static void rivafb_download_cursor(struct rivafb_info *rinfo, int level)
 {
 	int i, save;
 	int *image;
+	static int maxlevel=0;
+	
+	if (level<maxlevel)
+	  return;
+	if (level>maxlevel)
+	  maxlevel=level;
 	
 	if (!rinfo->cursor) return;
 
@@ -646,7 +944,7 @@
 		if (c->last_move_delay <= 1) { /* rapid cursor movement */
 			c->vbl_cnt = CURSOR_SHOW_DELAY;
 		} else {
-			*(rinfo->riva.CURSORPOS) = (x & 0xFFFF) | (y << 16);
+			rinfo->riva.PRAMDAC[0x0000300/4] = (x & 0xFFFF) | (y << 16);
 			rinfo->riva.ShowHideCursor(&rinfo->riva, 1);
 			if (!noblink) c->vbl_cnt = CURSOR_HIDE_DELAY;
 			c->on = 1;
@@ -658,6 +956,81 @@
 }
 
 
+static void rivafb_amithlon_poscursor(struct rivafb_info *rinfo,
+				      unsigned int x,
+				      unsigned int y,
+				      unsigned int on)
+{
+	struct riva_cursor *c = rinfo->cursor;
+
+	if (!c)	return;
+
+	if (!on)
+	  x=y=0xffffffff;
+
+	if (c->pos.x == x && c->pos.y == y)
+		return;
+	c->enable = 0;
+	c->pos.x = x;
+	c->pos.y = y;
+	rinfo->riva.PRAMDAC[0x0000300/4] = (rinfo->cursor->pos.x & 0xFFFF) | (rinfo->cursor->pos.y << 16);
+//	*(rinfo->riva.CURSORPOS) = (x & 0xFFFF) | (y << 16);
+	rinfo->riva.ShowHideCursor(&rinfo->riva, on);
+}
+
+static void rivafb_amithlon_setcursor(struct rivafb_info *rinfo, 
+				      unsigned int* data,
+				      unsigned char* red,
+				      unsigned char* green,
+				      unsigned char* blue)
+{
+	struct riva_cursor *c = rinfo->cursor;
+	int i, j, idx;
+	int width,height;
+
+	width=height=32;
+	if (c) {
+		if (width > MAX_CURS) width = MAX_CURS;
+		if (height > MAX_CURS) height = MAX_CURS;
+
+		c->size.x = width;
+		c->size.y = height;
+		
+		idx = 0;
+
+		for (i = 0; i < height; i++) {
+		  int p1,p2;
+		  p1=data[2*i];
+		  p2=data[2*i+1];
+		  
+		  for (j = 0; j < width; j++,idx++) {
+		    int b1,b2,v;
+		    unsigned int colour;
+
+		    b1=!!(p1&(1<<(31-j)));
+		    b2=!!(p2&(1<<(31-j)));
+		    v=b1+2*b2;
+
+		    colour=(((((unsigned int)red[v])>>3)&0x1f)<<10) |
+		      (((((unsigned int)green[v])>>3)&0x1f)<<5) |
+		      (((((unsigned int)blue[v])>>3)&0x1f)<<0) | 
+		      0x8000;
+		    if (!v)
+		      colour=0;
+
+		    c->image[idx] = colour;
+		  }
+		  for (j = width; j < MAX_CURS; j++,idx++)
+		    c->image[idx] = TRANSPARENT_COLOR;
+		}
+		for (i = height; i < MAX_CURS; i++)
+		  for (j = 0; j < MAX_CURS; j++,idx++)
+		    c->image[idx] = TRANSPARENT_COLOR;
+	}
+	rivafb_download_cursor(rinfo,1);
+}
+
+
 
 /* ------------------------------------------------------------------------- *
  *
@@ -886,9 +1259,10 @@
 	hEnd = (hDisplaySize + video_mode->right_margin +
 		video_mode->hsync_len) / 8 - 1;
 	hTotal = (hDisplaySize + video_mode->right_margin +
-		  video_mode->hsync_len + video_mode->left_margin) / 8 - 1;
+		  video_mode->hsync_len + video_mode->left_margin) / 8 - 5;
 	hBlankStart = hDisplay;
-	hBlankEnd = hTotal;
+	hBlankEnd = hTotal + 4;
+
 	height = video_mode->yres_virtual;
 	vDisplay = video_mode->yres - 1;
 	vStart = video_mode->yres + video_mode->lower_margin - 1;
@@ -897,28 +1271,12 @@
 	vTotal = video_mode->yres + video_mode->lower_margin +
 		 video_mode->vsync_len + video_mode->upper_margin + 2;
 	vBlankStart = vDisplay;
-	vBlankEnd = vTotal;
+	vBlankEnd = vTotal + 1;
 	dotClock = 1000000000 / video_mode->pixclock;
 
 	memcpy(&newmode, &reg_template, sizeof(struct riva_regs));
 
-	newmode.ext.screen = SetBitField(hBlankEnd,6:6,4:4)
-                  | SetBitField(vBlankStart,10:10,3:3)
-                  | SetBitField(vStart,10:10,2:2)
-                  | SetBitField(vDisplay,10:10,1:1)
-                  | SetBitField(vTotal,10:10,0:0);
-    
-    	newmode.ext.horiz  = SetBitField(hTotal,8:8,0:0)
-                  | SetBitField(hDisplay,8:8,1:1)
-                  | SetBitField(hBlankStart,8:8,2:2)
-                  | SetBitField(hStart,8:8,3:3);
-
-    	newmode.ext.extra  = SetBitField(vTotal,11:11,0:0)
-                    | SetBitField(vDisplay,11:11,2:2)
-                    | SetBitField(vStart,11:11,4:4)
-                    | SetBitField(vBlankStart,11:11,6:6);
-
-	if (rinfo->riva.flatPanel) {
+	if (rinfo->FlatPanel) {
 		vStart = vTotal - 3;
 		vEnd = vTotal - 2;
 		vBlankStart = vStart;
@@ -927,14 +1285,13 @@
 		hBlankEnd = hTotal + 4;
 	}
 
-	newmode.crtc[0x0] = Set8Bits (hTotal - 4);
+	newmode.crtc[0x0] = Set8Bits (hTotal); 
 	newmode.crtc[0x1] = Set8Bits (hDisplay);
 	newmode.crtc[0x2] = Set8Bits (hBlankStart);
-	newmode.crtc[0x3] = SetBitField(hBlankEnd,4:0,4:0)
-                | SetBit(7);
+	newmode.crtc[0x3] = SetBitField (hBlankEnd, 4: 0, 4:0) | SetBit (7);
 	newmode.crtc[0x4] = Set8Bits (hStart);
 	newmode.crtc[0x5] = SetBitField (hBlankEnd, 5: 5, 7:7)
- 		| SetBitField (hEnd, 4: 0, 4:0);
+		| SetBitField (hEnd, 4: 0, 4:0);
 	newmode.crtc[0x6] = SetBitField (vTotal, 7: 0, 7:0);
 	newmode.crtc[0x7] = SetBitField (vTotal, 8: 8, 0:0)
 		| SetBitField (vDisplay, 8: 8, 1:1)
@@ -950,42 +1307,65 @@
 	newmode.crtc[0x11] = SetBitField (vEnd, 3: 0, 3:0)
 		| SetBit (5);
 	newmode.crtc[0x12] = Set8Bits (vDisplay);
-	newmode.crtc[0x13] = ((width / 8) * ((bpp + 1) / 8)) & 0xFF;
+	newmode.crtc[0x13] = (width / 8) * ((bpp + 1) / 8);
 	newmode.crtc[0x15] = Set8Bits (vBlankStart);
-	newmode.crtc[0x16] = Set8Bits (vBlankEnd + 1);
+	newmode.crtc[0x16] = Set8Bits (vBlankEnd);
+
+	newmode.ext.screen = SetBitField(hBlankEnd,6:6,4:4)
+		| SetBitField(vBlankStart,10:10,3:3)
+		| SetBitField(vStart,10:10,2:2)
+		| SetBitField(vDisplay,10:10,1:1)
+		| SetBitField(vTotal,10:10,0:0);
+	newmode.ext.horiz  = SetBitField(hTotal,8:8,0:0) 
+		| SetBitField(hDisplay,8:8,1:1)
+		| SetBitField(hBlankStart,8:8,2:2)
+		| SetBitField(hStart,8:8,3:3);
+	newmode.ext.extra  = SetBitField(vTotal,11:11,0:0)
+		| SetBitField(vDisplay,11:11,2:2)
+		| SetBitField(vStart,11:11,4:4)
+		| SetBitField(vBlankStart,11:11,6:6); 
 
+	/* CalcStateExt does this already */
+	/*
 	newmode.ext.bpp = bpp;
 	newmode.ext.width = width;
 	newmode.ext.height = height;
+	*/
+	newmode.ext.interlace = 0xff; /* interlace off */
+
+	if(rinfo->riva.Architecture >= NV_ARCH_10)
+		rinfo->riva.CURSOR = (U032 *)(rinfo->fb_base + rinfo->riva.CursorStart);
 
 	rinfo->riva.CalcStateExt(&rinfo->riva, &newmode.ext, bpp, width,
-				  hDisplaySize, hDisplay, hStart, hEnd,
-				  hTotal, height, vDisplay, vStart, vEnd,
-				  vTotal, dotClock);
+				  hDisplaySize, height, dotClock);
 
 	newmode.ext.scale = rinfo->riva.PRAMDAC[0x00000848/4] & 0xfff000ff;
-
-	if (rinfo->riva.flatPanel) {
+	if(rinfo->FlatPanel == 1) {
 		newmode.ext.pixel |= (1 << 7);
-		newmode.ext.scale |= (1 << 8);
-	}
-
-	newmode.ext.vpll2 = rinfo->riva.PRAMDAC[0x00000520/4];
-
-#if defined(__powerpc__)
-	/*
-	 * XXX only Mac cards use second DAC for flat panel
-	 */
-	if (rinfo->riva.flatPanel) {
-		newmode.ext.pllsel |= 0x20000800;
-		newmode.ext.vpll2 = newmode.ext.vpll;
+		newmode.ext.scale |= (1 << 8) ;
 	}
-#endif
+	if(rinfo->SecondCRTC) {
+		newmode.ext.head  = rinfo->riva.PCRTC0[0x00000860/4] & ~0x00001000;
+		newmode.ext.head2 = rinfo->riva.PCRTC0[0x00002860/4] | 0x00001000;
+		newmode.ext.crtcOwner = 3;
+		//newmode.ext.pllsel |= 0x20000800;
+		//newmode.ext.vpll2 = newmode.ext.vpll;
+		newmode.ext.vpll2 = rinfo->riva.PRAMDAC0[0x00000520/4];
+	} else if(rinfo->riva.twoHeads) {
+		newmode.ext.head  =  rinfo->riva.PCRTC0[0x00000860/4] | 0x00001000;
+		newmode.ext.head2 =  rinfo->riva.PCRTC0[0x00002860/4] & ~0x00001000;
+		newmode.ext.crtcOwner = 0;
+		newmode.ext.vpll2 = rinfo->riva.PRAMDAC0[0x00000520/4];
+	}
+
+	newmode.ext.cursorConfig = 0x02000100;
+	newmode.ext.vpllB = 0;
+	newmode.ext.vpll2B = 0;
 	rinfo->current_state = newmode;
 	riva_load_state(rinfo, &rinfo->current_state);
 
 	rinfo->riva.LockUnlock(&rinfo->riva, 0); /* important for HW cursor */
-	rivafb_download_cursor(rinfo);
+	rivafb_download_cursor(rinfo,0);
 
 	rivafb_blank(0, (struct fb_info *)rinfo);
 }
@@ -1391,6 +1771,7 @@
 		break;
 	case NV_ARCH_10:	/* FIXME: ID for GeForce */
 	case NV_ARCH_20:
+	case NV_ARCH_30:
 		fix->accel = FB_ACCEL_NV4;
 		break;
 
@@ -1427,6 +1808,7 @@
 	int nom, den;		/* translating from pixels->bytes */
 	int accel;
 	unsigned chgvar = 0;
+	int i;
 
 	DPRINTK("ENTER\n");
 
@@ -1577,6 +1959,12 @@
 	riva_load_video_mode(rivainfo, &v);
 	if (accel) riva_setup_accel(rivainfo);
 
+
+        for (i = 0; i < 256; i++) {
+        	VGA_WR08(rivainfo->riva.PCIO, 0x03D4, i);
+	        printk(KERN_INFO PFX "0x%02X - 0x%02X\n", i, VGA_RD08(rivainfo->riva.PCIO, 0x03D5));
+        }
+
 	DPRINTK("EXIT, returning 0\n");
 	return 0;
 }
@@ -1668,11 +2056,12 @@
 
 	assert(rivainfo != NULL);
 
+#if 0
 	if (var->xoffset > (var->xres_virtual - var->xres))
 		return -EINVAL;
 	if (var->yoffset > (var->yres_virtual - var->yres))
 		return -EINVAL;
-
+#endif
 	dsp = (con < 0) ? rivainfo->info.disp : &fb_display[con];
 
 	if (var->vmode & FB_VMODE_YWRAP) {
@@ -1680,9 +2069,11 @@
 		    || var->yoffset >= dsp->var.yres_virtual
 		    || var->xoffset) return -EINVAL;
 	} else {
+#if 0
 		if (var->xoffset + dsp->var.xres > dsp->var.xres_virtual ||
 		    var->yoffset + dsp->var.yres > dsp->var.yres_virtual)
 			return -EINVAL;
+#endif
 	}
 
 	base = var->yoffset * dsp->line_length + var->xoffset;
@@ -1704,21 +2095,208 @@
 	return 0;
 }
 
+#include "../amithlon.h"
+#include <asm/uaccess.h>
+
+void riva_rectfill(struct rivafb_info *rinfo, int sy,
+		   int sx, int height, int width, u_int color);
+void riva_rectcopy(struct rivafb_info *rinfo, int sy, int sx, int dy, int dx,
+		   int height, int width);
+int riva_blittemplate(struct rivafb_info *rinfo,
+		      u_int colour0, u_int colour1,
+		      int sy, int sx, 
+		      int height, int width, 
+		      int offset, char* data, int pitch,
+		      unsigned char rop3);
+int riva_rectcopy_complete(struct rivafb_info *rinfo, 
+			   int sy, int sx, 
+			   int dy, int dx,
+			   int height, int width,
+			   int spitch, int dpitch,
+			   int op,
+			   int oldpitch, int Bpp);
+void riva_drawline(struct rivafb_info *rinfo, int sy,
+		   int sx, int dy, int dx, 
+		   unsigned long offset, u_int color);
+void fbcon_cfb32_clear_amy(struct vc_data *conp, struct display *p, int sy, int sx,
+		       int height, int width, u32 colour);
+
+static inline void wait_for_idle(struct rivafb_info *rinfo)
+{
+    while (rinfo->riva.Busy(&rinfo->riva));
+}
+
+
 static int rivafb_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
 			unsigned long arg, int con, struct fb_info *info)
 {
 	struct rivafb_info *rivainfo = (struct rivafb_info *)info;
 
+	struct display *xdisp;
+	struct vc_data *vdata;
+
+	int amy_accel;
+
+	amy_accel = 1;	
+	switch(rivainfo->riva.Architecture)
+		{
+		case NV_ARCH_20:
+		case NV_ARCH_30:
+			amy_accel = 0;
+		}
+
 	DPRINTK("ENTER\n");
 
 	assert(rivainfo != NULL);
 
-	/* no rivafb-specific ioctls */
+	xdisp = info->disp;
+	vdata = info->display_fg;
 
-	DPRINTK("EXIT, returning -EINVAL\n");
+	switch(cmd) {
+	 case AMITHLON_FILL_RECT: 
+		{
+	     		amithlon_fill af;
+	     		if (copy_from_user(&af, (void *) arg, sizeof(af)))
+		 		return -EFAULT;
+	     		riva_rectfill(rivainfo,
+			af.sy,
+			af.sx,
+			af.height,
+			af.width,
+			af.colour);
+	     		wait_for_idle(rivainfo);
+	     		return 0;
+		}
+	case AMITHLON_DRAW_LINE: 
+		{
+			if (amy_accel == 1) {
+	     			amithlon_line al;
+		        	if (copy_from_user(&al, (void *) arg, sizeof(al)))
+		 			return -EFAULT;
+	     			riva_drawline(rivainfo,
+						al.sy,
+						al.sx,
+						al.dy,
+						al.dx,
+						al.offset,
+						al.colour);
+	     			wait_for_idle(rivainfo);
+	     			return 0; 
+				}
+				else
+				{
+					return -EINVAL;
+				}
+		}
+	 case AMITHLON_COPY_RECT: 
+		{ 
+	   		amithlon_copy ac;
+	     		if (copy_from_user(&ac, (void *) arg, sizeof(ac)))
+		 		return -EFAULT;
+	     		riva_rectcopy(rivainfo,
+			ac.sy,
+			ac.sx,
+			ac.dy,
+			ac.dx,
+			ac.height,
+			ac.width);
+	     		wait_for_idle(rivainfo);
+	     		return 0;
+		}
 
-	return -EINVAL;
-}
+
+	case AMITHLON_COPY_RECT_COMPLETE: 
+	  {
+		    amithlon_copy_complete acr;
+		    int answer;
+		    if (copy_from_user(&acr, (void *) arg, sizeof(acr)))
+			      return -EFAULT;
+		    answer=riva_rectcopy_complete(rivainfo,
+					  acr.sy,
+					  acr.sx,
+					  acr.dy,
+					  acr.dx,
+					  acr.height,
+					  acr.width,
+					  acr.spitch,
+					  acr.dpitch,
+					  acr.op,
+					  acr.oldpitch,
+					  acr.Bpp);
+		    wait_for_idle(rivainfo);
+		    return answer;
+          }
+
+	 case AMITHLON_BLIT_TEMP: 
+		{ 
+		 if (amy_accel == 1)
+		     {
+		     amithlon_blittemplate ab;
+		     int answer=0;
+		     if (copy_from_user(&ab, (void *) arg, sizeof(ab)))
+			 return -EFAULT;
+		     answer=riva_blittemplate(rivainfo,
+				      ab.colour0,
+				      ab.colour1,
+				      ab.sy,
+				      ab.sx,
+				      ab.height,
+				      ab.width,
+				      ab.offset,
+				      ab.data,
+				      ab.pitch,
+				      ab.rop3);
+		     wait_for_idle(rivainfo);
+		     return answer; 
+			}
+			else
+			{
+			return -EINVAL;
+			}
+		}
+
+
+	case AMITHLON_MAXCLOCK:
+	  {
+	    unsigned int answer=rivainfo->dclk_max/1000;
+
+	    if (put_user(answer, (u_int32_t*)arg))
+	      return -EFAULT;
+	    return 0;
+	  }
+	case AMITHLON_SET_CURSOR:
+	  {
+	    unsigned int data[64];
+	    unsigned char red[4];
+	    unsigned char green[4];
+	    unsigned char blue[4];
+	    amithlon_setcursor asc;
+
+	    if (copy_from_user(&asc, (void *) arg, sizeof(asc)))
+	      return -EFAULT;
+	    if (copy_from_user(data, asc.data, 64*sizeof(unsigned int)))
+	      return -EFAULT;
+	    if (copy_from_user(red, asc.red, 4*sizeof(unsigned char)))
+	      return -EFAULT;
+	    if (copy_from_user(green, asc.green, 4*sizeof(unsigned char)))
+	      return -EFAULT;
+	    if (copy_from_user(blue, asc.blue, 4*sizeof(unsigned char)))
+	      return -EFAULT;
+	    rivafb_amithlon_setcursor(rivainfo,data,red,green,blue);
+	    return 0;
+	  }
+	case AMITHLON_POS_CURSOR:
+	  {
+	    amithlon_poscursor apc;
+	    if (copy_from_user(&apc, (void *) arg, sizeof(apc)))
+	      return -EFAULT;
+	    rivafb_amithlon_poscursor(rivainfo,apc.x,apc.y,apc.on);
+	    return 0;
+	  } 
+	 default:
+	    return -EINVAL; 
+
+}}
 
 static int rivafb_rasterimg(struct fb_info *info, int start)
 {
@@ -1841,7 +2419,7 @@
 	if (rinfo->use_default_var)
 		/* We will use the modified default var */
 		rinfo->disp.var = rivafb_default_var;
-
+	
 	return 0;
 }
 
@@ -1858,6 +2436,12 @@
 	disp = &rinfo->disp;
 
 	disp->var = rivafb_default_var;
+
+	switch(rinfo->riva.Architecture)
+		{
+		case NV_ARCH_30:
+//			noaccel = 1;
+		}
 	
 	if (noaccel)
 		disp->var.accel_flags &= ~FB_ACCELF_TEXT;
@@ -1939,28 +2523,29 @@
 	/* jump to detailed timing block section */
 	block += 54;
 
-        rinfo->clock = (block[0] + (block[1] << 8));
-        rinfo->panel_xres = (block[2] + ((block[4] & 0xf0) << 4));
-        rinfo->hblank = (block[3] + ((block[4] & 0x0f) << 8));
-        rinfo->panel_yres = (block[5] + ((block[7] & 0xf0) << 4));
-        rinfo->vblank = (block[6] + ((block[7] & 0x0f) << 8));
-        rinfo->hOver_plus = (block[8] + ((block[11] & 0xc0) << 2));
-        rinfo->hSync_width = (block[9] + ((block[11] & 0x30) << 4));
-        rinfo->vOver_plus = ((block[10] >> 4) + ((block[11] & 0x0c) << 2));
-        rinfo->vSync_width = ((block[10] & 0x0f) + ((block[11] & 0x03) << 4));
-        rinfo->interlaced = ((block[17] & 0x80) >> 7);
-        rinfo->synct = ((block[17] & 0x18) >> 3);
-        rinfo->misc = ((block[17] & 0x06) >> 1);
-        rinfo->hAct_high = rinfo->vAct_high = 0;
-        if (rinfo->synct == 3) {
-                if (rinfo->misc & 2)
-                        rinfo->hAct_high = 1;
-                if (rinfo->misc & 1)
-                        rinfo->vAct_high = 1;
+	rinfo->clock = (block[0] + (block[1] << 8));
+	rinfo->panel_xres = (block[2] + ((block[4] & 0xf0) << 4));
+	rinfo->hblank = (block[3] + ((block[4] & 0x0f) << 8));
+	rinfo->panel_yres = (block[5] + ((block[7] & 0xf0) << 4));
+	rinfo->vblank = (block[6] + ((block[7] & 0x0f) << 8));
+	rinfo->hOver_plus = (block[8] + ((block[11] & 0xc0) << 2));
+	rinfo->hSync_width = (block[9] + ((block[11] & 0x30) << 4));
+	rinfo->vOver_plus = ((block[10] >> 4) + ((block[11] & 0x0c) << 2));
+	rinfo->vSync_width = ((block[10] & 0x0f) + ((block[11] & 0x03) << 4));
+	rinfo->interlaced = ((block[17] & 0x80) >> 7);
+	rinfo->synct = ((block[17] & 0x18) >> 3);
+	rinfo->misc = ((block[17] & 0x06) >> 1);
+	rinfo->hAct_high = rinfo->vAct_high = 0;
+	if (rinfo->synct == 3) {
+		if (rinfo->misc & 2)
+			rinfo->hAct_high = 1;
+		if (rinfo->misc & 1)
+			rinfo->vAct_high = 1;
 	}
 
-	printk("rivafb: detected DFP panel size from EDID: %dx%d\n",
-		rinfo->panel_xres, rinfo->panel_yres);
+	printk(KERN_INFO PFX
+			"detected DFP panel size from EDID: %dx%d\n", 
+			rinfo->panel_xres, rinfo->panel_yres);
 
 	rinfo->got_dfpinfo = 1;
 
@@ -2020,7 +2605,8 @@
 	if (riva_dfp_parse_EDID(rinfo))
 		riva_update_default_var(rinfo);
 
-	rinfo->riva.flatPanel = rinfo->got_dfpinfo;
+	if (rinfo->got_dfpinfo == 1) /* if user specified flatpanel, we respect that */
+		rinfo->FlatPanel = 1;
 }
 
 
@@ -2049,6 +2635,14 @@
 	rinfo->drvr_name = rci->name;
 	rinfo->riva.Architecture = rci->arch_rev;
 
+	rinfo->Chipset = pd->device;
+	printk(KERN_INFO PFX "nVidia device/chipset %X\n", rinfo->Chipset);
+	
+	rinfo->FlatPanel = flatpanel;
+	if (flatpanel == 1)
+		printk(KERN_INFO PFX "flatpanel support enabled\n");
+	rinfo->forceCRTC = forceCRTC;
+	
 	rinfo->pd = pd;
 	rinfo->base0_region_size = pci_resource_len(pd, 0);
 	rinfo->base1_region_size = pci_resource_len(pd, 1);
@@ -2061,104 +2655,74 @@
 		cmd |= (PCI_COMMAND_IO | PCI_COMMAND_MEMORY);
 		pci_write_config_word(pd, PCI_COMMAND, cmd);
 	}
- 
+	
 	rinfo->ctrl_base_phys = pci_resource_start(rinfo->pd, 0);
 	rinfo->fb_base_phys = pci_resource_start(rinfo->pd, 1);
 
+	if (!request_mem_region(rinfo->ctrl_base_phys,
+				rinfo->base0_region_size, "rivafb")) {
+		printk(KERN_ERR PFX "cannot reserve MMIO region\n");
+		goto err_out_kfree;
+	}
+
 	rinfo->ctrl_base = ioremap(rinfo->ctrl_base_phys,
 				   rinfo->base0_region_size);
 	if (!rinfo->ctrl_base) {
 		printk(KERN_ERR PFX "cannot ioremap MMIO base\n");
-		goto err_out_free_base1;
+		goto err_out_free_base0;
 	}
 	
 	riva_get_EDID(rinfo);
 
 	riva_get_dfpinfo(rinfo);
 
-	rinfo->riva.EnableIRQ = 0;
-	rinfo->riva.PRAMDAC = (unsigned *)(rinfo->ctrl_base + 0x00680000);
-	rinfo->riva.PFB = (unsigned *)(rinfo->ctrl_base + 0x00100000);
-	rinfo->riva.PFIFO = (unsigned *)(rinfo->ctrl_base + 0x00002000);
-	rinfo->riva.PGRAPH = (unsigned *)(rinfo->ctrl_base + 0x00400000);
-	rinfo->riva.PEXTDEV = (unsigned *)(rinfo->ctrl_base + 0x00101000);
-	rinfo->riva.PTIMER = (unsigned *)(rinfo->ctrl_base + 0x00009000);
-	rinfo->riva.PMC = (unsigned *)(rinfo->ctrl_base + 0x00000000);
-	rinfo->riva.FIFO = (unsigned *)(rinfo->ctrl_base + 0x00800000);
-
-	rinfo->riva.PCIO = (U008 *)(rinfo->ctrl_base + 0x00601000);
-	rinfo->riva.PDIO = (U008 *)(rinfo->ctrl_base + 0x00681000);
-	rinfo->riva.PVIO = (U008 *)(rinfo->ctrl_base + 0x000C0000);
-
-	rinfo->riva.IO = (MISCin(rinfo) & 0x01) ? 0x3D0 : 0x3B0;
-
-	if (rinfo->riva.Architecture == NV_ARCH_03) {
-		/*
-		 * We have to map the full BASE_1 aperture for Riva128's
-		 * because they use the PRAMIN set in "framebuffer" space
+	switch (rinfo->riva.Architecture) {
+	case NV_ARCH_03:
+		/* Riva128's PRAMIN is in the "framebuffer" space
+		 * Since these cards were never made with more than 8 megabytes
+		 * we can safely allocate this seperately.
 		 */
-		if (!request_mem_region(rinfo->fb_base_phys,
-					rinfo->base1_region_size, "rivafb")) {
-			printk(KERN_ERR PFX "cannot reserve FB region\n");
-			goto err_out_free_base0;
-		}
-	
-		rinfo->fb_base = ioremap(rinfo->fb_base_phys,
-					 rinfo->base1_region_size);
-		if (!rinfo->fb_base) {
-			printk(KERN_ERR PFX "cannot ioremap FB base\n");
+		if (!request_mem_region(rinfo->fb_base_phys + 0x00C00000,
+					 0x00008000, "rivafb")) {
+			printk(KERN_ERR PFX "cannot reserve PRAMIN region\n");
 			goto err_out_iounmap_ctrl;
 		}
-	}
-
-
-	switch (rinfo->riva.Architecture) {
-	case NV_ARCH_03:
-		rinfo->riva.PRAMIN = (unsigned *)(rinfo->fb_base + 0x00C00000);
+		rinfo->riva.PRAMIN = ioremap(rinfo->fb_base_phys + 0x00C00000,
+				 0x00008000);
+		if (!rinfo->riva.PRAMIN) {
+			printk(KERN_ERR PFX "cannot ioremap PRAMIN region\n");
+			goto err_out_free_nv3_pramin;
+		}
 		break;
 	case NV_ARCH_04:
 	case NV_ARCH_10:
 	case NV_ARCH_20:
-		rinfo->riva.PCRTC = (unsigned *)(rinfo->ctrl_base + 0x00600000);
+	case NV_ARCH_30:
+		rinfo->riva.PCRTC0 = (unsigned *)(rinfo->ctrl_base + 0x00600000);
 		rinfo->riva.PRAMIN = (unsigned *)(rinfo->ctrl_base + 0x00710000);
 		break;
 	}
 
-#if defined(__powerpc__)
-	/*
-	 * XXX Mac cards use the second DAC for the panel
-	 */
-	if (rinfo->riva.flatPanel) {
-		printk("rivafb: using second CRTC\n");
-		rinfo->riva.PCIO = rinfo->riva.PCIO + 0x2000;
-		rinfo->riva.PCRTC = rinfo->riva.PCRTC + 0x800;
-		rinfo->riva.PRAMDAC = rinfo->riva.PRAMDAC + 0x800;
-		rinfo->riva.PDIO = rinfo->riva.PDIO + 0x2000;
-	}
-#endif
+	riva_common_setup(rinfo);
 
-	RivaGetConfig(&rinfo->riva);
+	if (rinfo->riva.Architecture == NV_ARCH_03) {
+		rinfo->riva.PCRTC = rinfo->riva.PCRTC0 = rinfo->riva.PGRAPH;
+	}
 
 	rinfo->ram_amount = rinfo->riva.RamAmountKBytes * 1024;
 	rinfo->dclk_max = rinfo->riva.MaxVClockFreqKHz * 1000;
 
-	if (rinfo->riva.Architecture != NV_ARCH_03) {
-		/*
-		 * Now the _normal_ chipsets can just map the amount of
-		 * real physical ram instead of the whole aperture
-		 */
-		if (!request_mem_region(rinfo->fb_base_phys,
-					rinfo->ram_amount, "rivafb")) {
-			printk(KERN_ERR PFX "cannot reserve FB region\n");
-			goto err_out_free_base0;
-		}
+	if (!request_mem_region(rinfo->fb_base_phys,
+				rinfo->ram_amount, "rivafb")) {
+		printk(KERN_ERR PFX "cannot reserve FB region\n");
+		goto err_out_iounmap_nv3_pramin;
+	}
 	
-		rinfo->fb_base = ioremap(rinfo->fb_base_phys,
-					 rinfo->ram_amount);
-		if (!rinfo->fb_base) {
-			printk(KERN_ERR PFX "cannot ioremap FB base\n");
-			goto err_out_iounmap_ctrl;
-		}
+	rinfo->fb_base = ioremap(rinfo->fb_base_phys,
+				 rinfo->ram_amount);
+	if (!rinfo->fb_base) {
+		printk(KERN_ERR PFX "cannot ioremap FB base\n");
+		goto err_out_free_base1;
 	}
 
 #ifdef CONFIG_MTRR
@@ -2215,12 +2779,19 @@
 	rivafb_exit_cursor(rinfo);
 /* err_out_iounmap_fb: */
 	iounmap(rinfo->fb_base);
+err_out_free_base1:
+	release_mem_region(rinfo->fb_base_phys, rinfo->ram_amount);
+err_out_iounmap_nv3_pramin:
+	if (rinfo->riva.Architecture == NV_ARCH_03) 
+		iounmap((caddr_t)rinfo->riva.PRAMIN);
+err_out_free_nv3_pramin:
+	if (rinfo->riva.Architecture == NV_ARCH_03)
+		release_mem_region(rinfo->fb_base_phys + 0x00C00000, 0x00008000);
 err_out_iounmap_ctrl:
 	iounmap(rinfo->ctrl_base);
-err_out_free_base1:
-	release_mem_region(rinfo->fb_base_phys, rinfo->base1_region_size);
 err_out_free_base0:
 	release_mem_region(rinfo->ctrl_base_phys, rinfo->base0_region_size);
+err_out_kfree:
 	kfree(rinfo);
 err_out:
 	return -ENODEV;
@@ -2255,6 +2826,11 @@
 	release_mem_region(board->fb_base_phys,
 			   board->ram_amount);
 
+	if (board->riva.Architecture == NV_ARCH_03) {
+		iounmap((caddr_t)board->riva.PRAMIN);
+		release_mem_region(board->fb_base_phys + 0x00C00000, 0x00008000);
+	}
+	
 	kfree(board);
 
 	pci_set_drvdata(pd, NULL);
@@ -2300,6 +2876,16 @@
 		} else if (!strncmp(this_opt, "nomtrr", 6)) {
 			nomtrr = 1;
 #endif
+		} else if (!strncmp(this_opt, "forceCRTC", 9)) {
+			char *p;
+			
+			p = this_opt + 9;
+			if (!*p || !*(++p)) continue; 
+			forceCRTC = *p - '0';
+			if (forceCRTC < 0 || forceCRTC > 1) 
+				forceCRTC = -1;
+		} else if (!strncmp(this_opt, "flatpanel", 9)) {
+			flatpanel = 1;
 		} else if (!strncmp(this_opt, "nohwcursor", 10)) {
 			nohwcursor = 1;
 		} else
@@ -2333,6 +2919,7 @@
 	err = pci_module_init(&rivafb_driver);
 	if (err)
 		return err;
+	pci_register_driver(&rivafb_driver);
 	return 0;
 }
 
@@ -2356,6 +2943,11 @@
 MODULE_PARM_DESC(nohwcursor, "Disables hardware cursor (0 or 1=disabled) (default=0)");
 MODULE_PARM(noblink, "i");
 MODULE_PARM_DESC(noblink, "Disables hardware cursor blinking (0 or 1=disabled) (default=0)");
+MODULE_PARM(flatpanel, "i");
+MODULE_PARM_DESC(flatpanel, "Enables experimental flat panel support for some chipsets. (0 or 1=enabled) (default=0)");
+MODULE_PARM(forceCRTC, "i");
+MODULE_PARM_DESC(forceCRTC, "Forces usage of a particular CRTC in case autodetection fails. (0 or 1) (default=autodetect)");
+
 #ifdef CONFIG_MTRR
 MODULE_PARM(nomtrr, "i");
 MODULE_PARM_DESC(nomtrr, "Disables MTRR support (0 or 1=disabled) (default=0)");
@@ -2363,5 +2955,5 @@
 #endif /* MODULE */
 
 MODULE_AUTHOR("Ani Joshi, maintainer");
-MODULE_DESCRIPTION("Framebuffer driver for nVidia Riva 128, TNT, TNT2");
+MODULE_DESCRIPTION("Framebuffer driver for nVidia Riva 128, TNT, TNT2, and the GeForce series");
 MODULE_LICENSE("GPL");
diff -uNr linux-2.4.37.9/drivers/video/riva/Makefile linux-2.4.37.9-amithlon/drivers/video/riva/Makefile
--- linux-2.4.37.9/drivers/video/riva/Makefile	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/Makefile	2005-12-14 16:47:26.000000000 -0500
@@ -9,7 +9,7 @@
 
 O_TARGET := rivafb.o
 
-obj-y    := fbdev.o riva_hw.o accel.o
+obj-y    := fbdev.o nv_setup.o riva_hw.o accel.o
 obj-m    := $(O_TARGET)
 
 include $(TOPDIR)/Rules.make
diff -uNr linux-2.4.37.9/drivers/video/riva/nv4ref.h linux-2.4.37.9-amithlon/drivers/video/riva/nv4ref.h
--- linux-2.4.37.9/drivers/video/riva/nv4ref.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/nv4ref.h	2000-02-29 14:07:04.000000000 -0500
@@ -41,7 +41,7 @@
  * GPL licensing note -- nVidia is allowing a liberal interpretation of
  * the documentation restriction above, to merely say that this nVidia's
  * copyright and disclaimer should be included with all code derived
- * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 
+ * from this source.  -- Jeff Garzik <jgarzik@mandrakesoft.com>, 01/Nov/99 
  */
 
  /***************************************************************************\
diff -uNr linux-2.4.37.9/drivers/video/riva/nv_setup.c linux-2.4.37.9-amithlon/drivers/video/riva/nv_setup.c
--- linux-2.4.37.9/drivers/video/riva/nv_setup.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/nv_setup.c	2005-12-14 16:53:28.000000000 -0500
@@ -0,0 +1,213 @@
+/* $XConsortium: nv_driver.c /main/3 1996/10/28 05:13:37 kaleb $ */
+/*
+ * Copyright 1996-1997  David J. McKay
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * DAVID J. MCKAY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
+ * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+/*
+ * GPL licensing note -- nVidia is allowing a liberal interpretation of
+ * the documentation restriction above, to merely say that this nVidia's
+ * copyright and disclaimer should be included with all code derived
+ * from this source.  -- Jeff Garzik <jgarzik@mandrakesoft.com>, 01/Nov/99 
+ */
+
+/* Hacked together from mga driver and 3.3.4 NVIDIA driver by Jarno Paananen
+   <jpaana@s2.org> */
+
+/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/nv_setup.c,v 1.18 2002/08/0
+5 20:47:06 mvojkovi Exp $ */
+
+#include <linux/delay.h>
+#include <linux/pci_ids.h>
+#include "nv_type.h"
+#include "rivafb.h"
+#include "nvreg.h"
+
+
+#ifndef CONFIG_PCI		/* sanity check */
+#error This driver requires PCI support.
+#endif
+
+#define PFX "rivafb: "
+
+static inline unsigned char MISCin(struct rivafb_info *rinfo)
+{
+	return (VGA_RD08(rinfo->riva.PVIO, 0x3cc));
+}
+
+static Bool 
+riva_is_connected(struct rivafb_info *rinfo, Bool second)
+{
+	volatile U032 *PRAMDAC = rinfo->riva.PRAMDAC0;
+	U032 reg52C, reg608;
+	Bool present;
+
+	if(second) PRAMDAC += 0x800;
+
+	reg52C = PRAMDAC[0x052C/4];
+	reg608 = PRAMDAC[0x0608/4];
+
+	PRAMDAC[0x0608/4] = reg608 & ~0x00010000;
+
+	PRAMDAC[0x052C/4] = reg52C & 0x0000FEEE;
+	mdelay(1); 
+	PRAMDAC[0x052C/4] |= 1;
+
+	rinfo->riva.PRAMDAC0[0x0610/4] = 0x94050140;
+	rinfo->riva.PRAMDAC0[0x0608/4] |= 0x00001000;
+
+	mdelay(1);
+
+	present = (PRAMDAC[0x0608/4] & (1 << 28)) ? TRUE : FALSE;
+
+	rinfo->riva.PRAMDAC0[0x0608/4] &= 0x0000EFFF;
+
+	PRAMDAC[0x052C/4] = reg52C;
+	PRAMDAC[0x0608/4] = reg608;
+
+	return present;
+}
+
+static void
+riva_override_CRTC(struct rivafb_info *rinfo)
+{
+	printk(KERN_INFO PFX
+		"Detected CRTC controller %i being used\n",
+		rinfo->SecondCRTC ? 1 : 0);
+
+	if(rinfo->forceCRTC != -1) {
+		printk(KERN_INFO PFX
+			"Forcing usage of CRTC %i\n", rinfo->forceCRTC);
+		rinfo->SecondCRTC = rinfo->forceCRTC;
+	}
+}
+
+static void
+riva_is_second(struct rivafb_info *rinfo)
+{
+	if(rinfo->FlatPanel == 1) {
+		switch(rinfo->Chipset) {
+		/*case NV_CHIP_GEFORCE4_440_GO:
+		case NV_CHIP_GEFORCE4_440_GO_M64:
+		case NV_CHIP_GEFORCE4_420_GO:
+		case NV_CHIP_GEFORCE4_420_GO_M32:
+		case NV_CHIP_QUADRO4_500_GOGL:
+			rinfo->SecondCRTC = TRUE;
+			break;*/
+		default:
+			rinfo->SecondCRTC = FALSE;
+			break;
+		}
+	} else {
+		if(riva_is_connected(rinfo, 0)) {
+			if(rinfo->riva.PRAMDAC0[0x0000052C/4] & 0x100)
+				rinfo->SecondCRTC = TRUE;
+			else
+				rinfo->SecondCRTC = FALSE;
+		} else
+		if (riva_is_connected(rinfo, 1)) {
+			if(rinfo->riva.PRAMDAC0[0x0000252C/4] & 0x100)
+				rinfo->SecondCRTC = TRUE;
+			else
+				rinfo->SecondCRTC = FALSE;
+		} else /* default */
+			rinfo->SecondCRTC = FALSE;
+	}
+
+	riva_override_CRTC(rinfo);
+}
+
+void
+riva_common_setup(struct rivafb_info *rinfo)
+{
+	rinfo->riva.EnableIRQ = 0;
+	rinfo->riva.PRAMDAC0 = (unsigned *)(rinfo->ctrl_base + 0x00680000);
+	rinfo->riva.PFB = (unsigned *)(rinfo->ctrl_base + 0x00100000);
+	rinfo->riva.PFIFO = (unsigned *)(rinfo->ctrl_base + 0x00002000);
+	rinfo->riva.PGRAPH = (unsigned *)(rinfo->ctrl_base + 0x00400000);
+	rinfo->riva.PEXTDEV = (unsigned *)(rinfo->ctrl_base + 0x00101000);
+	rinfo->riva.PTIMER = (unsigned *)(rinfo->ctrl_base + 0x00009000);
+	rinfo->riva.PMC = (unsigned *)(rinfo->ctrl_base + 0x00000000);
+	rinfo->riva.FIFO = (unsigned *)(rinfo->ctrl_base + 0x00800000);
+	rinfo->riva.PCIO0 = (U008 *)(rinfo->ctrl_base + 0x00601000);
+	rinfo->riva.PDIO0 = (U008 *)(rinfo->ctrl_base + 0x00681000);
+	rinfo->riva.PVIO = (U008 *)(rinfo->ctrl_base + 0x000C0000);
+
+	rinfo->riva.IO = (MISCin(rinfo) & 0x01) ? 0x3D0 : 0x3B0;
+
+	if(rinfo->FlatPanel == -1) {
+		switch(rinfo->Chipset) {
+		/*case NV_CHIP_GEFORCE4_440_GO:
+		case NV_CHIP_GEFORCE4_440_GO_M64:
+		case NV_CHIP_GEFORCE4_420_GO:
+		case NV_CHIP_GEFORCE4_420_GO_M32:
+		case NV_CHIP_QUADRO4_500_GOGL:
+		case NV_CHIP_GEFORCE2_GO:
+			printk(KERN_INFO PFX
+				"On a laptop.  Assuming Digital Flat Panel\n");
+			rinfo->FlatPanel = 1;
+			break; */
+		default:
+			break;
+		}
+	}
+	
+	switch (rinfo->Chipset & 0x0ff0) {
+	case 0x0110:
+		if (rinfo->Chipset == NV_CHIP_GEFORCE2_GO)
+			rinfo->SecondCRTC = TRUE; 
+#if defined(__powerpc__)
+		if (rinfo->FlatPanel == 1)
+			rinfo->SecondCRTC = TRUE;
+#endif
+		riva_override_CRTC(rinfo);
+		break;
+	case 0x0170:
+	case 0x0180:
+	case 0x01F0:
+	case 0x0250:
+	case 0x0280:
+		riva_is_second(rinfo);
+		break;
+	default:
+		break;
+	}
+
+	if (rinfo->SecondCRTC) {
+		rinfo->riva.PCIO = rinfo->riva.PCIO0 + 0x2000;
+		rinfo->riva.PCRTC = rinfo->riva.PCRTC0 + 0x800;
+		rinfo->riva.PRAMDAC = rinfo->riva.PRAMDAC0 + 0x800;
+		rinfo->riva.PDIO = rinfo->riva.PDIO0 + 0x2000;
+	} else {
+		rinfo->riva.PCIO = rinfo->riva.PCIO0;
+		rinfo->riva.PCRTC = rinfo->riva.PCRTC0;
+		rinfo->riva.PRAMDAC = rinfo->riva.PRAMDAC0;
+		rinfo->riva.PDIO = rinfo->riva.PDIO0;
+	}
+
+	RivaGetConfig(&rinfo->riva, rinfo->Chipset);
+
+	if (rinfo->FlatPanel == -1) {
+		/* Fix me, need x86 DDC code */
+		rinfo->FlatPanel = 0;
+	}
+	rinfo->riva.flatPanel = (rinfo->FlatPanel > 0) ? TRUE : FALSE;
+}
+
diff -uNr linux-2.4.37.9/drivers/video/riva/nv_type.h linux-2.4.37.9-amithlon/drivers/video/riva/nv_type.h
--- linux-2.4.37.9/drivers/video/riva/nv_type.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/nv_type.h	2005-12-14 16:47:26.000000000 -0500
@@ -0,0 +1,58 @@
+/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/nv_type.h,v 1.35 2002/08/05 20:47:06 mvojkovi Exp $ */
+
+#ifndef __NV_STRUCT_H__
+#define __NV_STRUCT_H__
+
+#define NV_CHIP_RIVA_128            ((PCI_VENDOR_ID_NVIDIA_SGS << 16)| PCI_DEVICE_ID_NVIDIA_RIVA128)
+#define NV_CHIP_TNT                 ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_TNT)
+#define NV_CHIP_TNT2                ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_TNT2)
+#define NV_CHIP_UTNT2               ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_UTNT2)
+#define NV_CHIP_VTNT2               ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_VTNT2)
+#define NV_CHIP_UVTNT2              ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_UVTNT2)
+#define NV_CHIP_ITNT2               ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_ITNT2)
+#define NV_CHIP_GEFORCE_256         ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_GEFORCE_256)
+#define NV_CHIP_GEFORCE_DDR         ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR)
+#define NV_CHIP_QUADRO              ((PCI_VENDOR_ID_NVIDIA << 16)| PCI_DEVICE_ID_NVIDIA_QUADRO)
+#define NV_CHIP_GEFORCE2_MX         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX)
+#define NV_CHIP_GEFORCE2_MX_100     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX_100)
+#define NV_CHIP_QUADRO2_MXR         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR)
+#define NV_CHIP_GEFORCE2_GO         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO)
+#define NV_CHIP_GEFORCE2_GTS        ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS)
+#define NV_CHIP_GEFORCE2_TI         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_TI)
+#define NV_CHIP_GEFORCE2_ULTRA      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA)
+#define NV_CHIP_QUADRO2_PRO         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO)
+#define NV_CHIP_GEFORCE4_MX_460     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460)
+#define NV_CHIP_GEFORCE4_MX_440     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440)
+#define NV_CHIP_GEFORCE4_MX_420     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420)
+#define NV_CHIP_GEFORCE4_440_GO     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO)
+#define NV_CHIP_GEFORCE4_420_GO     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO)
+#define NV_CHIP_GEFORCE4_420_GO_M32 ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32)
+#define NV_CHIP_QUADRO4_500XGL      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL)
+#define NV_CHIP_GEFORCE4_440_GO_M64 ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64)
+#define NV_CHIP_QUADRO4_200         ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_200)
+#define NV_CHIP_QUADRO4_550XGL      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL)
+#define NV_CHIP_QUADRO4_500_GOGL    ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL)
+#define NV_CHIP_0x0180              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0180)
+#define NV_CHIP_0x0181              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0181)
+#define NV_CHIP_0x0182              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0182)
+#define NV_CHIP_0x0188              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0188)
+#define NV_CHIP_0x018A              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x018A)
+#define NV_CHIP_0x018B              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x018B)
+#define NV_CHIP_IGEFORCE2           ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_IGEFORCE2)
+#define NV_CHIP_0x01F0              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x01F0)
+#define NV_CHIP_GEFORCE3            ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE3)
+#define NV_CHIP_GEFORCE3_TI_200     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE3_TI_200)
+#define NV_CHIP_GEFORCE3_TI_500     ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE3_TI_500)
+#define NV_CHIP_QUADRO_DCC          ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO_DCC)
+#define NV_CHIP_GEFORCE4_TI_4600    ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600)
+#define NV_CHIP_GEFORCE4_TI_4400    ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400)
+#define NV_CHIP_GEFORCE4_TI_4200    ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200)
+#define NV_CHIP_QUADRO4_900XGL      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL)
+#define NV_CHIP_QUADRO4_750XGL      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL)
+#define NV_CHIP_QUADRO4_700XGL      ((PCI_VENDOR_ID_NVIDIA << 16) | PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL)
+#define NV_CHIP_0x0280              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0280)
+#define NV_CHIP_0x0281              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0281)
+#define NV_CHIP_0x0288              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0288)
+#define NV_CHIP_0x0289              ((PCI_VENDOR_ID_NVIDIA << 16) | 0x0289)
+
+#endif /* __NV_STRUCT_H__ */
diff -uNr linux-2.4.37.9/drivers/video/riva/rivafb.h linux-2.4.37.9-amithlon/drivers/video/riva/rivafb.h
--- linux-2.4.37.9/drivers/video/riva/rivafb.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/rivafb.h	2010-06-16 22:59:25.000000000 -0400
@@ -92,6 +92,12 @@
 #ifdef CONFIG_MTRR
 	struct { int vram; int vram_valid; } mtrr;
 #endif
+	unsigned int Chipset;
+	int forceCRTC;
+	Bool SecondCRTC;
+	int FlatPanel;
 };
 
+void riva_common_setup(struct rivafb_info*);
+
 #endif /* __RIVAFB_H */
diff -uNr linux-2.4.37.9/drivers/video/riva/riva_hw.c linux-2.4.37.9-amithlon/drivers/video/riva/riva_hw.c
--- linux-2.4.37.9/drivers/video/riva/riva_hw.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/riva_hw.c	2005-12-26 04:17:28.000000000 -0500
@@ -41,13 +41,17 @@
  * GPL licensing note -- nVidia is allowing a liberal interpretation of
  * the documentation restriction above, to merely say that this nVidia's
  * copyright and disclaimer should be included with all code derived
- * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 
+ * from this source.  -- Jeff Garzik <jgarzik@mandrakesoft.com>, 01/Nov/99 
  */
 
-/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_hw.c,v 1.8 2000/02/08 17:19:11 dawes Exp $ */
+/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_hw.c,v 1.33 2002/08/05 20:47:06 mvojkovi Exp $ */
 
+#include <linux/pci_ids.h>
+#include <linux/pci.h>
 #include "riva_hw.h"
 #include "riva_tbl.h"
+#include "nv_type.h"
+
 /*
  * This file is an OS-agnostic file used to make RIVA 128 and RIVA TNT
  * operate identically (except TNT has more memory and better 3D quality.
@@ -73,32 +77,39 @@
 {
     return ((chip->Rop->FifoFree < chip->FifoEmptyCount) || (chip->PGRAPH[0x00000700/4] & 0x01));
 }
-static void nv3LockUnlock
+
+static void vgaLockUnlock
 (
     RIVA_HW_INST *chip,
-    int           LockUnlock
+    int           Lock
 )
 {
-    VGA_WR08(chip->PVIO, 0x3C4, 0x06);
-    VGA_WR08(chip->PVIO, 0x3C5, LockUnlock ? 0x99 : 0x57);
+    U008 cr11;
+    VGA_WR08(chip->PCIO, 0x3D4, 0x11);
+    cr11 = VGA_RD08(chip->PCIO, 0x3D5);
+    if(Lock) cr11 |= 0x80;
+    else cr11 &= ~0x80;
+    VGA_WR08(chip->PCIO, 0x3D5, cr11);
 }
-static void nv4LockUnlock
+static void nv3LockUnlock
 (
     RIVA_HW_INST *chip,
-    int           LockUnlock
+    int           Lock
 )
 {
-    VGA_WR08(chip->PCIO, 0x3D4, 0x1F);
-    VGA_WR08(chip->PCIO, 0x3D5, LockUnlock ? 0x99 : 0x57);
+    VGA_WR08(chip->PVIO, 0x3C4, 0x06);
+    VGA_WR08(chip->PVIO, 0x3C5, Lock ? 0x99 : 0x57);
+    vgaLockUnlock(chip, Lock);
 }
-static void nv10LockUnlock
+static void nv4LockUnlock
 (
     RIVA_HW_INST *chip,
-    int           LockUnlock
+    int           Lock
 )
 {
     VGA_WR08(chip->PCIO, 0x3D4, 0x1F);
-    VGA_WR08(chip->PCIO, 0x3D5, LockUnlock ? 0x99 : 0x57);
+    VGA_WR08(chip->PCIO, 0x3D5, Lock ? 0x99 : 0x57);
+    vgaLockUnlock(chip, Lock);
 }
 
 static int ShowHideCursor
@@ -107,13 +118,13 @@
     int           ShowHide
 )
 {
-    int current;
-    current                     =  chip->CurrentState->cursor1;
+    int cursor;
+    cursor                      =  chip->CurrentState->cursor1;
     chip->CurrentState->cursor1 = (chip->CurrentState->cursor1 & 0xFE) |
-	                          (ShowHide & 0x01);
+                                  (ShowHide & 0x01);
     VGA_WR08(chip->PCIO, 0x3D4, 0x31);
     VGA_WR08(chip->PCIO, 0x3D5, chip->CurrentState->cursor1);
-    return (current & 0x01);
+    return (cursor & 0x01);
 }
 
 /****************************************************************************\
@@ -604,7 +615,7 @@
     nv3_sim_state sim_data;
     unsigned int M, N, P, pll, MClk;
     
-    pll = chip->PRAMDAC[0x00000504/4];
+    pll = chip->PRAMDAC0[0x00000504/4]; 
     M = (pll >> 0) & 0xFF; N = (pll >> 8) & 0xFF; P = (pll >> 16) & 0x0F;
     MClk = (N * chip->CrystalFreqKHz / M) >> P;
     sim_data.pix_bpp        = (char)pixelDepth;
@@ -791,10 +802,10 @@
     nv4_sim_state sim_data;
     unsigned int M, N, P, pll, MClk, NVClk, cfg1;
 
-    pll = chip->PRAMDAC[0x00000504/4];
+    pll = chip->PRAMDAC0[0x00000504/4];
     M = (pll >> 0)  & 0xFF; N = (pll >> 8)  & 0xFF; P = (pll >> 16) & 0x0F;
     MClk  = (N * chip->CrystalFreqKHz / M) >> P;
-    pll = chip->PRAMDAC[0x00000500/4];
+    pll = chip->PRAMDAC0[0x00000500/4];
     M = (pll >> 0)  & 0xFF; N = (pll >> 8)  & 0xFF; P = (pll >> 16) & 0x0F;
     NVClk  = (N * chip->CrystalFreqKHz / M) >> P;
     cfg1 = chip->PFB[0x00000204/4];
@@ -1052,10 +1063,10 @@
     nv10_sim_state sim_data;
     unsigned int M, N, P, pll, MClk, NVClk, cfg1;
 
-    pll = chip->PRAMDAC[0x00000504/4];
+    pll = chip->PRAMDAC0[0x00000504/4];
     M = (pll >> 0)  & 0xFF; N = (pll >> 8)  & 0xFF; P = (pll >> 16) & 0x0F;
     MClk  = (N * chip->CrystalFreqKHz / M) >> P;
-    pll = chip->PRAMDAC[0x00000500/4];
+    pll = chip->PRAMDAC0[0x00000500/4];
     M = (pll >> 0)  & 0xFF; N = (pll >> 8)  & 0xFF; P = (pll >> 16) & 0x0F;
     NVClk  = (N * chip->CrystalFreqKHz / M) >> P;
     cfg1 = chip->PFB[0x00000204/4];
@@ -1081,6 +1092,57 @@
     }
 }
 
+static void nForceUpdateArbitrationSettings
+(
+    unsigned      VClk,
+    unsigned      pixelDepth,
+    unsigned     *burst,
+    unsigned     *lwm,
+    RIVA_HW_INST *chip
+)
+{
+    nv10_fifo_info fifo_data;
+    nv10_sim_state sim_data;
+    unsigned int M, N, P, pll, MClk, NVClk;
+    unsigned int uMClkPostDiv;
+    struct pci_dev *dev;
+
+    dev = pci_find_slot(0, 3);
+    pci_read_config_dword(dev, 0x6C, &uMClkPostDiv);
+    uMClkPostDiv = (uMClkPostDiv >> 8) & 0xf;
+
+    if(!uMClkPostDiv) uMClkPostDiv = 4;
+    MClk = 400000 / uMClkPostDiv;
+
+    pll = chip->PRAMDAC0[0x00000500/4];
+    M = (pll >> 0)  & 0xFF; N = (pll >> 8)  & 0xFF; P = (pll >> 16) & 0x0F;
+    NVClk  = (N * chip->CrystalFreqKHz / M) >> P;
+    sim_data.pix_bpp        = (char)pixelDepth;
+    sim_data.enable_video   = 0;
+    sim_data.enable_mp      = 0;
+
+    dev = pci_find_slot(0, 1);
+    pci_read_config_dword(dev, 0x7C, &sim_data.memory_type);
+    sim_data.memory_type    = (sim_data.memory_type >> 12) & 1;
+
+    sim_data.memory_width   = 64;
+    sim_data.mem_latency    = 3;
+    sim_data.mem_aligned    = 1;
+    sim_data.mem_page_miss  = 10;
+    sim_data.gr_during_vid  = 0;
+    sim_data.pclk_khz       = VClk;
+    sim_data.mclk_khz       = MClk;
+    sim_data.nvclk_khz      = NVClk;
+    nv10CalcArbitration(&fifo_data, &sim_data);
+    if (fifo_data.valid)
+    {
+        int  b = fifo_data.graphics_burst_size >> 4;
+        *burst = 0;
+        while (b >>= 1) (*burst)++;
+        *lwm   = fifo_data.graphics_lwm >> 3;
+    }
+}
+
 /****************************************************************************\
 *                                                                            *
 *                          RIVA Mode State Routines                          *
@@ -1093,7 +1155,6 @@
 static int CalcVClock
 (
     int           clockIn,
-    int           double_scan,
     int          *clockOut,
     int          *mOut,
     int          *nOut,
@@ -1109,18 +1170,23 @@
     DeltaOld = 0xFFFFFFFF;
 
     VClk     = (unsigned)clockIn;
-    if (double_scan)
-        VClk *= 2;
+
+/*    switch (chip->Architecture)
+    {
+	case NV_ARCH_30:
+	    VClk     = (unsigned)clockIn/2;
+	break;
+    }	 */
     
-    if (chip->CrystalFreqKHz == 14318)
+    if (chip->CrystalFreqKHz == 13500)
     {
-        lowM  = 8;
-        highM = 14 - (chip->Architecture == NV_ARCH_03);
+        lowM  = 7;
+        highM = 13 - (chip->Architecture == NV_ARCH_03);
     }
     else
     {
-        lowM  = 7;
-        highM = 13 - (chip->Architecture == NV_ARCH_03);
+        lowM  = 8;
+        highM = 14 - (chip->Architecture == NV_ARCH_03);
     }                      
 
     highP = 4 - (chip->Architecture == NV_ARCH_03);
@@ -1131,7 +1197,8 @@
         {
             for (M = lowM; M <= highM; M++)
             {
-                N    = (VClk * M / chip->CrystalFreqKHz) << P;
+                N    = (VClk << P) * M / chip->CrystalFreqKHz;
+                if(N <= 255) {
                 Freq = (chip->CrystalFreqKHz * N / M) >> P;
                 if (Freq > VClk)
                     DeltaNew = Freq - VClk;
@@ -1148,6 +1215,7 @@
             }
         }
     }
+    }
     return (DeltaOld != 0xFFFFFFFF);
 }
 /*
@@ -1161,15 +1229,7 @@
     int            bpp,
     int            width,
     int            hDisplaySize,
-    int            hDisplay,
-    int            hStart,
-    int            hEnd,
-    int            hTotal,
     int            height,
-    int            vDisplay,
-    int            vStart,
-    int            vEnd,
-    int            vTotal,
     int            dotClock
 )
 {
@@ -1177,15 +1237,14 @@
     /*
      * Save mode parameters.
      */
-    state->bpp    = bpp;
+    state->bpp    = bpp;    /* this is not bitsPerPixel, it's 8,15,16,32 */
     state->width  = width;
     state->height = height;
     /*
      * Extended RIVA registers.
      */
     pixelDepth = (bpp + 1)/8;
-    CalcVClock(dotClock, hDisplaySize < 512,  /* double scan? */
-               &VClk, &m, &n, &p, chip);
+    CalcVClock(dotClock, &VClk, &m, &n, &p, chip);
 
     switch (chip->Architecture)
     {
@@ -1220,29 +1279,39 @@
             state->repaint1 = hDisplaySize < 1280 ? 0x04 : 0x00;
             break;
         case NV_ARCH_10:
-	case NV_ARCH_20:
-            nv10UpdateArbitrationSettings(VClk, 
+        case NV_ARCH_20:
+	case NV_ARCH_30:
+            if((chip->Chipset == NV_CHIP_IGEFORCE2) ||
+               (chip->Chipset == NV_CHIP_0x01F0))
+            {
+                nForceUpdateArbitrationSettings(VClk,
+                                          pixelDepth * 8,
+                                         &(state->arbitration0),
+                                         &(state->arbitration1),
+                                          chip);
+            } else {
+                nv10UpdateArbitrationSettings(VClk, 
                                           pixelDepth * 8, 
                                          &(state->arbitration0),
                                          &(state->arbitration1),
                                           chip);
-            state->cursor0  = 0x00;
-            state->cursor1  = 0xFC;
-            state->cursor2  = 0x00000000;
+            }
+            state->cursor0  = 0x80 | (chip->CursorStart >> 17);
+            state->cursor1  = (chip->CursorStart >> 11) << 2;
+            state->cursor2  = chip->CursorStart >> 24;
             state->pllsel   = 0x10000700;
             state->config   = chip->PFB[0x00000200/4];
             state->general  = bpp == 16 ? 0x00101100 : 0x00100100;
             state->repaint1 = hDisplaySize < 1280 ? 0x04 : 0x00;
             break;
     }
+
+    /* Paul Richards: below if block borks things in kernel for some reason */
+    /* if((bpp != 8) && (chip->Architecture != NV_ARCH_03))
+    state->general |= 0x00000030; */
+
     state->vpll     = (p << 16) | (n << 8) | m;
-    state->screen   = ((hTotal   & 0x040) >> 2)
-                    | ((vDisplay & 0x400) >> 7)
-                    | ((vStart   & 0x400) >> 8)
-                    | ((vDisplay & 0x400) >> 9)
-                    | ((vTotal   & 0x400) >> 10);
     state->repaint0 = (((width/8)*pixelDepth) & 0x700) >> 3;
-    state->horiz    = hTotal     < 260 ? 0x00 : 0x01;
     state->pixel    = pixelDepth > 2   ? 3    : pixelDepth;
     state->offset0  =
     state->offset1  =
@@ -1286,7 +1355,8 @@
             chip->Tri05 = (RivaTexturedTriangle05 *)&(chip->FIFO[0x0000E000/4]);
             break;
         case NV_ARCH_10:
-	case NV_ARCH_20:
+        case NV_ARCH_20:
+	case NV_ARCH_30:
             /*
              * Initialize state for the RivaTriangle3D05 routines.
              */
@@ -1303,7 +1373,7 @@
     RIVA_HW_STATE *state
 )
 {
-    int i;
+    int i, format;
 
     /*
      * Load HW fixed function state.
@@ -1395,69 +1465,102 @@
             chip->PGRAPH[0x0000067C/4] = state->pitch3;
             break;
         case NV_ARCH_10:
-	case NV_ARCH_20:
+        case NV_ARCH_20:
+	case NV_ARCH_30:
+            if(chip->twoHeads) {
+               VGA_WR08(chip->PCIO, 0x03D4, 0x44);
+               VGA_WR08(chip->PCIO, 0x03D5, state->crtcOwner);
+               chip->LockUnlock(chip, 0);
+            }
             LOAD_FIXED_STATE(nv10,PFIFO);
             LOAD_FIXED_STATE(nv10,PRAMIN);
             LOAD_FIXED_STATE(nv10,PGRAPH);
             switch (state->bpp)
             {
                 case 15:
+		    format = 2;
                     LOAD_FIXED_STATE_15BPP(nv10,PRAMIN);
                     LOAD_FIXED_STATE_15BPP(nv10,PGRAPH);
                     chip->Tri03 = (RivaTexturedTriangle03  *)&(chip->FIFO[0x0000E000/4]);
                     break;
                 case 16:
+		    format = 5;
                     LOAD_FIXED_STATE_16BPP(nv10,PRAMIN);
                     LOAD_FIXED_STATE_16BPP(nv10,PGRAPH);
                     chip->Tri03 = (RivaTexturedTriangle03  *)&(chip->FIFO[0x0000E000/4]);
                     break;
                 case 24:
                 case 32:
+		    format = 7;
                     LOAD_FIXED_STATE_32BPP(nv10,PRAMIN);
                     LOAD_FIXED_STATE_32BPP(nv10,PGRAPH);
                     chip->Tri03 = 0L;
                     break;
                 case 8:
                 default:
+		    format = 1;
                     LOAD_FIXED_STATE_8BPP(nv10,PRAMIN);
                     LOAD_FIXED_STATE_8BPP(nv10,PGRAPH);
                     chip->Tri03 = 0L;
                     break;
             }
 
-	    if (chip->Architecture == NV_ARCH_10) {
-            	chip->PGRAPH[0x00000640/4] = state->offset0;
-            	chip->PGRAPH[0x00000644/4] = state->offset1;
-            	chip->PGRAPH[0x00000648/4] = state->offset2;
-            	chip->PGRAPH[0x0000064C/4] = state->offset3;
-            	chip->PGRAPH[0x00000670/4] = state->pitch0;
-            	chip->PGRAPH[0x00000674/4] = state->pitch1;
-            	chip->PGRAPH[0x00000678/4] = state->pitch2;
-            	chip->PGRAPH[0x0000067C/4] = state->pitch3;
-            	chip->PGRAPH[0x00000680/4] = state->pitch3;
-	    } else {
-		chip->PGRAPH[0x00000820/4] = state->offset0;
-		chip->PGRAPH[0x00000824/4] = state->offset1;
-		chip->PGRAPH[0x00000828/4] = state->offset2;
-		chip->PGRAPH[0x0000082C/4] = state->offset3;
-		chip->PGRAPH[0x00000850/4] = state->pitch0;
-		chip->PGRAPH[0x00000854/4] = state->pitch1;
-		chip->PGRAPH[0x00000858/4] = state->pitch2;
-		chip->PGRAPH[0x0000085C/4] = state->pitch3;
-		chip->PGRAPH[0x00000860/4] = state->pitch3;
-		chip->PGRAPH[0x00000864/4] = state->pitch3;
-		chip->PGRAPH[0x000009A4/4] = chip->PFB[0x00000200/4];
-		chip->PGRAPH[0x000009A8/4] = chip->PFB[0x00000204/4];
-	    }
+            if(chip->Architecture == NV_ARCH_10) {
+                chip->PGRAPH[0x00000640/4] = state->offset0;
+                chip->PGRAPH[0x00000644/4] = state->offset1;
+                chip->PGRAPH[0x00000648/4] = state->offset2;
+                chip->PGRAPH[0x0000064C/4] = state->offset3;
+                chip->PGRAPH[0x00000670/4] = state->pitch0;
+                chip->PGRAPH[0x00000674/4] = state->pitch1;
+                chip->PGRAPH[0x00000678/4] = state->pitch2;
+                chip->PGRAPH[0x0000067C/4] = state->pitch3;
+                chip->PGRAPH[0x00000680/4] = state->pitch3;
+        } else {
+        chip->PGRAPH[0x00000820/4] = state->offset0;
+        chip->PGRAPH[0x00000824/4] = state->offset1;
+        chip->PGRAPH[0x00000828/4] = state->offset2;
+        chip->PGRAPH[0x0000082C/4] = state->offset3;
+        chip->PGRAPH[0x00000850/4] = state->pitch0;
+        chip->PGRAPH[0x00000854/4] = state->pitch1;
+        chip->PGRAPH[0x00000858/4] = state->pitch2;
+        chip->PGRAPH[0x0000085C/4] = state->pitch3;
+        chip->PGRAPH[0x00000860/4] = state->pitch3;
+        chip->PGRAPH[0x00000864/4] = state->pitch3;
+        chip->PGRAPH[0x000009A4/4] = chip->PFB[0x00000200/4];
+        chip->PGRAPH[0x000009A8/4] = chip->PFB[0x00000204/4];
+
+        if((chip->Chipset & 0x0ff0) >= 0x0300) {
+        	if(!chip->flatPanel) {
+                	chip->PRAMDAC0[0x0578/4] = state->vpllB;
+                	chip->PRAMDAC0[0x057C/4] = state->vpll2B;
+                }
+		chip->PGRAPH[0x00000724/4] = format | (format << 5);
+                chip->PGRAPH[0x0000008C/4] |= 1;
+                chip->PGRAPH[0x00000890/4] |= 0x00040000;
+        }
+        }
+            if(chip->twoHeads) {
+               chip->PCRTC0[0x00000860/4] = state->head;
+               chip->PCRTC0[0x00002860/4] = state->head2;
+            }
+            chip->PRAMDAC[0x00000404/4] |= (1 << 25);
 
-	    chip->PFB[0x00000240/4] = 0;
-	    chip->PFB[0x00000244/4] = 0;
-	    chip->PFB[0x00000248/4] = 0;
-	    chip->PFB[0x0000024C/4] = 0;
-	    chip->PFB[0x00000250/4] = 0;
-	    chip->PFB[0x00000244/4] = 0;
-	    chip->PFB[0x00000248/4] = 0;
-	    chip->PFB[0x0000024C/4] = 0;
+            chip->PMC[0x00008704/4] = 1;
+            chip->PMC[0x00008140/4] = 0;
+            chip->PMC[0x00008920/4] = 0;
+            chip->PMC[0x00008924/4] = 0;
+            chip->PMC[0x00008908/4] = 0x01ffffff;
+            chip->PMC[0x0000890C/4] = 0x01ffffff;
+            chip->PMC[0x00001588/4] = 0;
+
+            chip->PFB[0x00000240/4] = 0;
+            chip->PFB[0x00000244/4] = 0;
+            chip->PFB[0x00000248/4] = 0;
+            chip->PFB[0x0000024C/4] = 0;
+            chip->PFB[0x00000250/4] = 0;
+            chip->PFB[0x00000254/4] = 0;
+            chip->PFB[0x00000258/4] = 0;
+            chip->PFB[0x0000025C/4] = 0;
 
             chip->PGRAPH[0x00000B00/4] = chip->PFB[0x00000240/4];
             chip->PGRAPH[0x00000B04/4] = chip->PFB[0x00000244/4];
@@ -1533,15 +1636,26 @@
             for (i = 0; i < 4; i++)
                 chip->PGRAPH[0x00000F54/4] = 0x00000000;
 
-	    if (chip->flatPanel) {
-		VGA_WR08(chip->PCIO, 0x3d4, 0x53);
-		VGA_WR08(chip->PCIO, 0x3d5, 0);
-		VGA_WR08(chip->PCIO, 0x3d4, 0x54);
-		VGA_WR08(chip->PCIO, 0x3d5, 0);
-		VGA_WR08(chip->PCIO, 0x3d4, 0x21);
-		VGA_WR08(chip->PCIO, 0x3d5, 0xfa);
-	    }
-            break;
+            chip->PCRTC[0x00000810/4] = state->cursorConfig;
+
+            if(chip->flatPanel) {
+               if((chip->Chipset & 0x0ff0) == 0x0110) {
+                   chip->PRAMDAC[0x0528/4] = state->dither;
+               } else 
+               if((chip->Chipset & 0x0ff0) >= 0x0170) {
+                   chip->PRAMDAC[0x083C/4] = state->dither;
+               }
+            
+               VGA_WR08(chip->PCIO, 0x03D4, 0x53);
+               VGA_WR08(chip->PCIO, 0x03D5, 0);
+               VGA_WR08(chip->PCIO, 0x03D4, 0x54);
+               VGA_WR08(chip->PCIO, 0x03D5, 0);
+               VGA_WR08(chip->PCIO, 0x03D4, 0x21);
+               VGA_WR08(chip->PCIO, 0x03D5, 0xfa);
+            }
+
+            VGA_WR08(chip->PCIO, 0x03D4, 0x41);
+            VGA_WR08(chip->PCIO, 0x03D5, state->extra);
     }
     LOAD_FIXED_STATE(Riva,FIFO);
     UpdateFifoState(chip);
@@ -1566,25 +1680,26 @@
     VGA_WR08(chip->PCIO, 0x03D5, state->cursor0);
     VGA_WR08(chip->PCIO, 0x03D4, 0x31);
     VGA_WR08(chip->PCIO, 0x03D5, state->cursor1);
-    VGA_WR08(chip->PCIO, 0x03D4, 0x41);
-    VGA_WR08(chip->PCIO, 0x03D5, state->extra);
-
-    if (!chip->flatPanel) {
-        chip->PRAMDAC[0x00000508/4]  = state->vpll;
-        chip->PRAMDAC[0x00000520/4]  = state->vpll2;
-        chip->PRAMDAC[0x0000050C/4]  = state->pllsel;
-    } else {
-	chip->PRAMDAC[0x00000848/4]  = state->scale;
-    }
-    chip->PRAMDAC[0x00000300/4]  = state->cursor2;
-    chip->PRAMDAC[0x00000508/4]  = state->vpll;
-    chip->PRAMDAC[0x0000050C/4]  = state->pllsel;
+    VGA_WR08(chip->PCIO, 0x03D4, 0x2F);
+    VGA_WR08(chip->PCIO, 0x03D5, state->cursor2);
+    VGA_WR08(chip->PCIO, 0x03D4, 0x39);
+    VGA_WR08(chip->PCIO, 0x03D5, state->interlace);
+
+    if(!chip->flatPanel) {
+       chip->PRAMDAC0[0x00000508/4] = state->vpll;
+       chip->PRAMDAC0[0x0000050C/4] = state->pllsel;
+       if(chip->twoHeads)
+          chip->PRAMDAC0[0x00000520/4] = state->vpll2;
+    }  else {
+       chip->PRAMDAC[0x00000848/4]  = state->scale;
+    }  
     chip->PRAMDAC[0x00000600/4]  = state->general;
+
     /*
      * Turn off VBlank enable and reset.
      */
-    *(chip->VBLANKENABLE) = 0;
-    *(chip->VBLANK)       = chip->VBlankBit;
+    chip->PCRTC[0x00000140/4] = 0;
+    chip->PCRTC[0x00000100/4] = chip->VBlankBit;
     /*
      * Set interrupt enable.
      */    
@@ -1600,6 +1715,84 @@
     /* Free count from first subchannel */
     chip->FifoEmptyCount = chip->Rop->FifoFree; 
 }
+
+static void LoadStateExt_pitches
+(
+    RIVA_HW_INST  *chip,
+    RIVA_HW_STATE *state
+)
+{
+    int i;
+
+    switch (chip->Architecture)
+    {
+        case NV_ARCH_03:
+            chip->PGRAPH[0x00000630/4] = state->offset0;
+            chip->PGRAPH[0x00000634/4] = state->offset1;
+            chip->PGRAPH[0x00000638/4] = state->offset2;
+            chip->PGRAPH[0x0000063C/4] = state->offset3;
+            chip->PGRAPH[0x00000650/4] = state->pitch0;
+            chip->PGRAPH[0x00000654/4] = state->pitch1;
+            chip->PGRAPH[0x00000658/4] = state->pitch2;
+            chip->PGRAPH[0x0000065C/4] = state->pitch3;
+            break;
+        case NV_ARCH_04:
+            chip->PGRAPH[0x00000640/4] = state->offset0;
+            chip->PGRAPH[0x00000644/4] = state->offset1;
+            chip->PGRAPH[0x00000648/4] = state->offset2;
+            chip->PGRAPH[0x0000064C/4] = state->offset3;
+            chip->PGRAPH[0x00000670/4] = state->pitch0;
+            chip->PGRAPH[0x00000674/4] = state->pitch1;
+            chip->PGRAPH[0x00000678/4] = state->pitch2;
+            chip->PGRAPH[0x0000067C/4] = state->pitch3;
+            break;
+        case NV_ARCH_10:
+	case NV_ARCH_20:
+	case NV_ARCH_30:
+	    if (chip->Architecture == NV_ARCH_10) {
+            	chip->PGRAPH[0x00000640/4] = state->offset0;
+            	chip->PGRAPH[0x00000644/4] = state->offset1;
+            	chip->PGRAPH[0x00000648/4] = state->offset2;
+            	chip->PGRAPH[0x0000064C/4] = state->offset3;
+            	chip->PGRAPH[0x00000670/4] = state->pitch0;
+            	chip->PGRAPH[0x00000674/4] = state->pitch1;
+            	chip->PGRAPH[0x00000678/4] = state->pitch2;
+            	chip->PGRAPH[0x0000067C/4] = state->pitch3;
+            	chip->PGRAPH[0x00000680/4] = state->pitch3;
+	    } else {
+		chip->PGRAPH[0x00000820/4] = state->offset0;
+		chip->PGRAPH[0x00000824/4] = state->offset1;
+		chip->PGRAPH[0x00000828/4] = state->offset2;
+		chip->PGRAPH[0x0000082C/4] = state->offset3;
+		chip->PGRAPH[0x00000850/4] = state->pitch0;
+		chip->PGRAPH[0x00000854/4] = state->pitch1;
+		chip->PGRAPH[0x00000858/4] = state->pitch2;
+		chip->PGRAPH[0x0000085C/4] = state->pitch3;
+		chip->PGRAPH[0x00000860/4] = state->pitch3;
+		chip->PGRAPH[0x00000864/4] = state->pitch3;
+		chip->PGRAPH[0x000009A4/4] = chip->PFB[0x00000200/4];
+		chip->PGRAPH[0x000009A8/4] = chip->PFB[0x00000204/4];
+	    }
+            break;
+    }
+}
+
+void setPitches(RIVA_HW_INST *chip, int pitch0, int pitch1, 
+		int pitch2, int pitch3, int off0, int off1)
+{
+  RIVA_HW_STATE *state;
+  
+  state=chip->CurrentState;
+  state->pitch0=pitch0;
+  state->pitch1=pitch1;
+  state->pitch2=pitch2;
+  state->pitch3=pitch3;
+  state->offset0=off0;
+  state->offset1=off1;
+  LoadStateExt_pitches(chip,state);
+}
+
+
 static void UnloadStateExt
 (
     RIVA_HW_INST  *chip,
@@ -1627,14 +1820,17 @@
     state->cursor0      = VGA_RD08(chip->PCIO, 0x03D5);
     VGA_WR08(chip->PCIO, 0x03D4, 0x31);
     state->cursor1      = VGA_RD08(chip->PCIO, 0x03D5);
-    VGA_WR08(chip->PCIO, 0x03D4, 0x41);
-    state->extra        = VGA_RD08(chip->PCIO, 0x03D5);
-    state->cursor2      = chip->PRAMDAC[0x00000300/4];
-    state->vpll         = chip->PRAMDAC[0x00000508/4];
-    state->vpll2        = chip->PRAMDAC[0x00000520/4];
-    state->pllsel       = chip->PRAMDAC[0x0000050C/4];
+    VGA_WR08(chip->PCIO, 0x03D4, 0x2F);
+    state->cursor2      = VGA_RD08(chip->PCIO, 0x03D5);
+    VGA_WR08(chip->PCIO, 0x03D4, 0x39);
+    state->interlace    = VGA_RD08(chip->PCIO, 0x03D5);
+    state->vpll         = chip->PRAMDAC0[0x00000508/4];
+    state->vpll2        = chip->PRAMDAC0[0x00000520/4];
+    state->vpllB        = chip->PRAMDAC0[0x00000578/4];
+    state->vpll2B       = chip->PRAMDAC0[0x0000057C/4];
+    state->pllsel       = chip->PRAMDAC0[0x0000050C/4];
     state->general      = chip->PRAMDAC[0x00000600/4];
-    state->scale	= chip->PRAMDAC[0x00000848/4];
+    state->scale        = chip->PRAMDAC[0x00000848/4];
     state->config       = chip->PFB[0x00000200/4];
     switch (chip->Architecture)
     {
@@ -1659,7 +1855,8 @@
             state->pitch3   = chip->PGRAPH[0x0000067C/4];
             break;
         case NV_ARCH_10:
-	case NV_ARCH_20:
+        case NV_ARCH_20:
+	case NV_ARCH_30:
             state->offset0  = chip->PGRAPH[0x00000640/4];
             state->offset1  = chip->PGRAPH[0x00000644/4];
             state->offset2  = chip->PGRAPH[0x00000648/4];
@@ -1668,9 +1865,33 @@
             state->pitch1   = chip->PGRAPH[0x00000674/4];
             state->pitch2   = chip->PGRAPH[0x00000678/4];
             state->pitch3   = chip->PGRAPH[0x0000067C/4];
+            if(chip->twoHeads) {
+               state->head     = chip->PCRTC0[0x00000860/4];
+               state->head2    = chip->PCRTC0[0x00002860/4];
+               VGA_WR08(chip->PCIO, 0x03D4, 0x44);
+               state->crtcOwner = VGA_RD08(chip->PCIO, 0x03D5);
+            }
+            VGA_WR08(chip->PCIO, 0x03D4, 0x41);
+            state->extra = VGA_RD08(chip->PCIO, 0x03D5);
+            state->cursorConfig = chip->PCRTC[0x00000810/4];
+
+            if((chip->Chipset & 0x0ff0) == 0x0110) {
+                state->dither = chip->PRAMDAC[0x0528/4];
+            } else 
+            if((chip->Chipset & 0x0ff0) >= 0x0170) {
+                state->dither = chip->PRAMDAC[0x083C/4];
+            }
             break;
     }
 }
+/*static void SetStartAddress
+(
+    RIVA_HW_INST *chip,
+    unsigned      start
+)
+{
+    chip->PCRTC[0x800/4] = start;
+}*/
 static void SetStartAddress
 (
     RIVA_HW_INST *chip,
@@ -1703,6 +1924,7 @@
     VGA_WR08(chip->PCIO, 0x3C0, 0x13);
     VGA_WR08(chip->PCIO, 0x3C0, pan);
 }
+
 static void nv3SetSurfaces2D
 (
     RIVA_HW_INST *chip,
@@ -1857,11 +2079,8 @@
                 break;
         }
     }        
-    chip->CrystalFreqKHz   = (chip->PEXTDEV[0x00000000/4] & 0x00000020) ? 14318 : 13500;
+    chip->CrystalFreqKHz   = (chip->PEXTDEV[0x00000000/4] & 0x00000040) ? 14318 : 13500;
     chip->CURSOR           = &(chip->PRAMIN[0x00008000/4 - 0x0800/4]);
-    chip->CURSORPOS        = &(chip->PRAMDAC[0x0300/4]);
-    chip->VBLANKENABLE     = &(chip->PGRAPH[0x0140/4]);
-    chip->VBLANK           = &(chip->PGRAPH[0x0100/4]);
     chip->VBlankBit        = 0x00000100;
     chip->MaxVClockFreqKHz = 256000;
     /*
@@ -1920,9 +2139,6 @@
     }
     chip->CrystalFreqKHz   = (chip->PEXTDEV[0x00000000/4] & 0x00000040) ? 14318 : 13500;
     chip->CURSOR           = &(chip->PRAMIN[0x00010000/4 - 0x0800/4]);
-    chip->CURSORPOS        = &(chip->PRAMDAC[0x0300/4]);
-    chip->VBLANKENABLE     = &(chip->PCRTC[0x0140/4]);
-    chip->VBLANK           = &(chip->PCRTC[0x0100/4]);
     chip->VBlankBit        = 0x00000001;
     chip->MaxVClockFreqKHz = 350000;
     /*
@@ -1940,41 +2156,57 @@
 }
 static void nv10GetConfig
 (
-    RIVA_HW_INST *chip
+    RIVA_HW_INST *chip,
+    unsigned int chipset
 )
 {
-#if defined(__BIG_ENDIAN)
+    struct pci_dev* dev;
+    int amt;
+
+#ifdef __BIG_ENDIAN
+    /* turn on big endian register access */
     chip->PMC[0x00000004/4] = 0x01000001;
 #endif
+
     /*
      * Fill in chip configuration.
      */
-    switch ((chip->PFB[0x0000020C/4] >> 20) & 0x000000FF)
-    {
-        case 0x02:
-            chip->RamAmountKBytes = 1024 * 2;
-            break;
-        case 0x04:
-            chip->RamAmountKBytes = 1024 * 4;
-            break;
-        case 0x08:
-            chip->RamAmountKBytes = 1024 * 8;
-            break;
-        case 0x10:
-            chip->RamAmountKBytes = 1024 * 16;
-            break;
-        case 0x20:
-            chip->RamAmountKBytes = 1024 * 32;
-            break;
-        case 0x40:
-            chip->RamAmountKBytes = 1024 * 64;
-            break;
-        case 0x80:
-            chip->RamAmountKBytes = 1024 * 128;
-            break;
-        default:
-            chip->RamAmountKBytes = 1024 * 16;
-            break;
+    if(chipset == NV_CHIP_IGEFORCE2) {
+        dev = pci_find_slot(0, 1);
+        pci_read_config_dword(dev, 0x7C, &amt);
+        chip->RamAmountKBytes = (((amt >> 6) & 31) + 1) * 1024;
+    } else if(chipset == NV_CHIP_0x01F0) {
+        dev = pci_find_slot(0, 1);
+        pci_read_config_dword(dev, 0x84, &amt);
+        chip->RamAmountKBytes = (((amt >> 4) & 127) + 1) * 1024;
+    } else {
+        switch ((chip->PFB[0x0000020C/4] >> 20) & 0x000000FF)
+        {
+            case 0x02:
+                chip->RamAmountKBytes = 1024 * 2;
+                break;
+            case 0x04:
+                chip->RamAmountKBytes = 1024 * 4;
+                break;
+            case 0x08:
+                chip->RamAmountKBytes = 1024 * 8;
+                break;
+            case 0x10:
+                chip->RamAmountKBytes = 1024 * 16;
+                break;
+            case 0x20:
+                chip->RamAmountKBytes = 1024 * 32;
+                break;
+            case 0x40:
+                chip->RamAmountKBytes = 1024 * 64;
+                break;
+            case 0x80:
+                chip->RamAmountKBytes = 1024 * 128;
+                break;
+            default:
+                chip->RamAmountKBytes = 1024 * 16;
+                break;
+        }
     }
     switch ((chip->PFB[0x00000000/4] >> 3) & 0x00000003)
     {
@@ -1985,11 +2217,40 @@
             chip->RamBandwidthKBytesPerSec = 1000000;
             break;
     }
-    chip->CrystalFreqKHz   = (chip->PEXTDEV[0x00000000/4] & 0x00000040) ? 14318 : 13500;
-    chip->CURSOR           = &(chip->PRAMIN[0x00010000/4 - 0x0800/4]);
-    chip->CURSORPOS        = &(chip->PRAMDAC[0x0300/4]);
-    chip->VBLANKENABLE     = &(chip->PCRTC[0x0140/4]);
-    chip->VBLANK           = &(chip->PCRTC[0x0100/4]);
+    chip->CrystalFreqKHz = (chip->PEXTDEV[0x0000/4] & (1 << 6)) ? 14318 :
+                                                                  13500;
+
+    switch (chipset & 0x0ff0) {
+    case 0x0170:
+    case 0x0180:
+    case 0x01F0:
+    case 0x0250:
+    case 0x0280:
+    case 0x0300:
+    case 0x0310:
+    case 0x0320:
+    case 0x0330:
+    case 0x0340:
+    case 0x0040:
+    case 0x00C0:
+    case 0x0120:
+    case 0x0130:
+    case 0x0140:
+    case 0x0160:
+    case 0x01D0:
+    case 0x0090:
+    case 0x0210:
+    case 0x0220:
+    case 0x0230:
+       if(chip->PEXTDEV[0x0000/4] & (1 << 22))
+           chip->CrystalFreqKHz = 27000;
+       break;
+    default:
+       break;
+    }
+
+    chip->CursorStart      = (chip->RamAmountKBytes - 128) * 1024;
+    chip->CURSOR           = NULL;  /* can't set this here */
     chip->VBlankBit        = 0x00000001;
     chip->MaxVClockFreqKHz = 350000;
     /*
@@ -2003,11 +2264,42 @@
     chip->SetStartAddress = SetStartAddress;
     chip->SetSurfaces2D   = nv10SetSurfaces2D;
     chip->SetSurfaces3D   = nv10SetSurfaces3D;
-    chip->LockUnlock      = nv10LockUnlock;
+    chip->LockUnlock      = nv4LockUnlock;
+
+    switch(chipset & 0x0ff0) {
+    case 0x0110:
+    case 0x0170:
+    case 0x0180:
+    case 0x01F0:
+    case 0x0250:
+    case 0x0280:
+    case 0x0300:
+    case 0x0310:
+    case 0x0320:
+    case 0x0330:
+    case 0x0340:
+    case 0x0040:
+    case 0x00C0:
+    case 0x0120:
+    case 0x0130:
+    case 0x0140:
+    case 0x0160:
+    case 0x01D0:
+    case 0x0090:
+    case 0x0210:
+    case 0x0220:
+    case 0x0230:
+        chip->twoHeads = TRUE;
+        break;
+    default:
+        chip->twoHeads = FALSE;
+        break;
+    }
 }
 int RivaGetConfig
 (
-    RIVA_HW_INST *chip
+    RIVA_HW_INST *chip,
+    unsigned int chipset
 )
 {
     /*
@@ -2026,12 +2318,14 @@
             nv4GetConfig(chip);
             break;
         case NV_ARCH_10:
-	case NV_ARCH_20:
-            nv10GetConfig(chip);
+        case NV_ARCH_20:
+	case NV_ARCH_30:
+            nv10GetConfig(chip, chipset);
             break;
         default:
             return (-1);
     }
+    chip->Chipset = chipset;
     /*
      * Fill in FIFO pointers.
      */
diff -uNr linux-2.4.37.9/drivers/video/riva/riva_hw.h linux-2.4.37.9-amithlon/drivers/video/riva/riva_hw.h
--- linux-2.4.37.9/drivers/video/riva/riva_hw.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/riva_hw.h	2010-06-16 22:59:25.000000000 -0400
@@ -41,14 +41,28 @@
  * GPL licensing note -- nVidia is allowing a liberal interpretation of
  * the documentation restriction above, to merely say that this nVidia's
  * copyright and disclaimer should be included with all code derived
- * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 
+ * from this source.  -- Jeff Garzik <jgarzik@mandrakesoft.com>, 01/Nov/99 
  */
 
-/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_hw.h,v 1.6 2000/02/08 17:19:12 dawes Exp $ */
+/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_hw.h,v 1.21 2002/10/14 18:22:46 mvojkovi Exp $ */
 #ifndef __RIVA_HW_H__
 #define __RIVA_HW_H__
 #define RIVA_SW_VERSION 0x00010003
 
+#ifndef Bool
+typedef int Bool;
+#endif
+
+#ifndef TRUE
+#define TRUE 1
+#endif
+#ifndef FALSE
+#define FALSE 0
+#endif
+#ifndef NULL
+#define NULL 0
+#endif
+
 /*
  * Typedefs to force certain sized values.
  */
@@ -81,6 +95,7 @@
 #define NV_ARCH_04  0x04
 #define NV_ARCH_10  0x10
 #define NV_ARCH_20  0x20
+#define NV_ARCH_30  0x30
 
 /***************************************************************************\
 *                                                                           *
@@ -99,7 +114,7 @@
 #else
     U016 FifoFree;
     U016 Nop;
-#endif 
+#endif
     U032 reserved01[0x0BB];
     U032 Rop3;
 } RivaRop;
@@ -269,7 +284,7 @@
 #else
     U016 FifoFree;
     U016 Nop;
-#endif    
+#endif
     U032 reserved01[0x0BC];
     U032 TextureOffset;
     U032 TextureFormat;
@@ -299,7 +314,7 @@
 #else
     U016 FifoFree;
     U016 Nop;
-#endif    
+#endif
     U032 reserved01[0x0BB];
     U032 ColorKey;
     U032 TextureOffset;
@@ -337,7 +352,7 @@
 #else
     U016 FifoFree;
     U016 Nop[1];
-#endif    
+#endif
     U032 reserved01[0x0BC];
     U032 Color;             /* source color               0304-0307*/
     U032 Reserved02[0x03e];
@@ -397,6 +412,9 @@
 *                                                                           *
 \***************************************************************************/
 
+#define FP_ENABLE  1
+#define FP_DITHER  2
+
 struct _riva_hw_inst;
 struct _riva_hw_state;
 /*
@@ -409,6 +427,7 @@
      */
     U032 Architecture;
     U032 Version;
+    U032 Chipset;
     U032 CrystalFreqKHz;
     U032 RamAmountKBytes;
     U032 MaxVClockFreqKHz;
@@ -418,12 +437,15 @@
     U032 VBlankBit;
     U032 FifoFreeCount;
     U032 FifoEmptyCount;
+    U032 CursorStart;
     U032 flatPanel;
+    Bool twoHeads;
     /*
      * Non-FIFO registers.
      */
+    volatile U032 *PCRTC0;
     volatile U032 *PCRTC;
-    volatile U032 *PRAMDAC;
+    volatile U032 *PRAMDAC0;
     volatile U032 *PFB;
     volatile U032 *PFIFO;
     volatile U032 *PGRAPH;
@@ -434,16 +456,17 @@
     volatile U032 *FIFO;
     volatile U032 *CURSOR;
     volatile U032 *CURSORPOS;
-    volatile U032 *VBLANKENABLE;
-    volatile U032 *VBLANK;
+    volatile U008 *PCIO0;
     volatile U008 *PCIO;
     volatile U008 *PVIO;
+    volatile U008 *PDIO0;
     volatile U008 *PDIO;
+    volatile U032 *PRAMDAC;
     /*
      * Common chip functions.
      */
     int  (*Busy)(struct _riva_hw_inst *);
-    void (*CalcStateExt)(struct _riva_hw_inst *,struct _riva_hw_state *,int,int,int,int,int,int,int,int,int,int,int,int,int);
+    void (*CalcStateExt)(struct _riva_hw_inst *,struct _riva_hw_state *,int,int,int,int,int);
     void (*LoadStateExt)(struct _riva_hw_inst *,struct _riva_hw_state *);
     void (*UnloadStateExt)(struct _riva_hw_inst *,struct _riva_hw_state *);
     void (*SetStartAddress)(struct _riva_hw_inst *,U032);
@@ -476,10 +499,12 @@
     U032 bpp;
     U032 width;
     U032 height;
+    U032 interlace;
     U032 repaint0;
     U032 repaint1;
     U032 screen;
     U032 scale;
+    U032 dither;
     U032 extra;
     U032 pixel;
     U032 horiz;
@@ -487,9 +512,15 @@
     U032 arbitration1;
     U032 vpll;
     U032 vpll2;
+    U032 vpllB;
+    U032 vpll2B;
     U032 pllsel;
     U032 general;
+    U032 crtcOwner;
+    U032 head; 
+    U032 head2; 
     U032 config;
+    U032 cursorConfig;	
     U032 cursor0;
     U032 cursor1;
     U032 cursor2;
@@ -505,16 +536,16 @@
 /*
  * External routines.
  */
-int RivaGetConfig(RIVA_HW_INST *);
+int RivaGetConfig(RIVA_HW_INST *, unsigned int);
 /*
  * FIFO Free Count. Should attempt to yield processor if RIVA is busy.
  */
 
-#define RIVA_FIFO_FREE(hwinst,hwptr,cnt)                           \
-{                                                                  \
-   while ((hwinst).FifoFreeCount < (cnt))                          \
-	(hwinst).FifoFreeCount = (hwinst).hwptr->FifoFree >> 2;        \
-   (hwinst).FifoFreeCount -= (cnt);                                \
+#define RIVA_FIFO_FREE(hwinst,hwptr,cnt)                            \
+{                                                                   \
+    while ((hwinst).FifoFreeCount < (cnt))                          \
+        (hwinst).FifoFreeCount = (hwinst).hwptr->FifoFree >> 2;     \
+    (hwinst).FifoFreeCount -= (cnt);                                \
 }
 #endif /* __RIVA_HW_H__ */
 
diff -uNr linux-2.4.37.9/drivers/video/riva/riva_tbl.h linux-2.4.37.9-amithlon/drivers/video/riva/riva_tbl.h
--- linux-2.4.37.9/drivers/video/riva/riva_tbl.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/riva/riva_tbl.h	2005-12-14 16:47:26.000000000 -0500
@@ -41,10 +41,12 @@
  * GPL licensing note -- nVidia is allowing a liberal interpretation of
  * the documentation restriction above, to merely say that this nVidia's
  * copyright and disclaimer should be included with all code derived
- * from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01/Nov/99 
+ * from this source.  -- Jeff Garzik <jgarzik@mandrakesoft.com>, 01/Nov/99 
  */
 
-/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_tbl.h,v 1.5 2000/02/08 17:19:12 dawes Exp $ */
+/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/nv/riva_tbl.h,v 1.9 2002/01/30 01:35:03 mvojkovi Exp $ */
+
+
 /*
  * RIVA Fixed Functionality Init Tables.
  */
@@ -69,6 +71,7 @@
     {0x00001800, 0x80000010},
     {0x00002000, 0x80000011},
     {0x00002800, 0x80000012},
+    {0x00003000, 0x80000016},
     {0x00003800, 0x80000013}
 };
 static unsigned nv3TablePFIFO[][2] =
@@ -174,6 +177,8 @@
     {0x00000249, 0x00CC0346},
     {0x0000024C, 0x80000013},
     {0x0000024D, 0x00D70347},
+    {0x00000258, 0x80000016},
+    {0x00000259, 0x00CA034C},
     {0x00000D05, 0x00000000},
     {0x00000D06, 0x00000000},
     {0x00000D07, 0x00000000},
@@ -210,7 +215,10 @@
     {0x00000D2C, 0x10830200},
     {0x00000D2D, 0x00000000},
     {0x00000D2E, 0x00000000},
-    {0x00000D2F, 0x00000000} 
+    {0x00000D2F, 0x00000000},
+    {0x00000D31, 0x00000000},
+    {0x00000D32, 0x00000000},
+    {0x00000D33, 0x00000000}
 };
 static unsigned nv3TablePRAMIN_8BPP[][2] =
 {
@@ -222,7 +230,8 @@
     {0x00000D10, 0x10118203},
     {0x00000D14, 0x10110203},
     {0x00000D18, 0x10110203},
-    {0x00000D1C, 0x10419208}
+    {0x00000D1C, 0x10419208},
+    {0x00000D30, 0x10118203}
 };
 static unsigned nv3TablePRAMIN_15BPP[][2] =
 {
@@ -234,7 +243,8 @@
     {0x00000D10, 0x10118200},
     {0x00000D14, 0x10110200},
     {0x00000D18, 0x10110200},
-    {0x00000D1C, 0x10419208}
+    {0x00000D1C, 0x10419208},
+    {0x00000D30, 0x10118200}
 };
 static unsigned nv3TablePRAMIN_32BPP[][2] =
 {
@@ -246,7 +256,8 @@
     {0x00000D10, 0x10118201},
     {0x00000D14, 0x10110201},
     {0x00000D18, 0x10110201},
-    {0x00000D1C, 0x10419208}
+    {0x00000D1C, 0x10419208},
+    {0x00000D30, 0x10118201}
 };
 static unsigned nv4TableFIFO[][2] =
 {
@@ -370,6 +381,8 @@
     {0x00000009, 0x80011149},
     {0x0000000A, 0x80000015},
     {0x0000000B, 0x8001114A},
+    {0x0000000C, 0x80000016},
+    {0x0000000D, 0x8001114F},
     {0x00000020, 0x80000000},
     {0x00000021, 0x80011142},
     {0x00000022, 0x80000001},
@@ -437,7 +450,10 @@
     {0x00000537, 0x00000000},
     {0x00000538, 0x0000005B},
     {0x0000053A, 0x11401140},
-    {0x0000053B, 0x00000000} 
+    {0x0000053B, 0x00000000},
+    {0x0000053C, 0x0300A01C},
+    {0x0000053E, 0x11401140},
+    {0x0000053F, 0x00000000}
 };
 static unsigned nv4TablePRAMIN_8BPP[][2] =
 {
@@ -452,7 +468,8 @@
     {0x0000052D, 0x00000302},
     {0x0000052E, 0x00000302},
     {0x00000535, 0x00000000},
-    {0x00000539, 0x00000000} 
+    {0x00000539, 0x00000000},
+    {0x0000053D, 0x00000302}
 };
 static unsigned nv4TablePRAMIN_15BPP[][2] =
 {
@@ -467,7 +484,8 @@
     {0x0000052D, 0x00000902},
     {0x0000052E, 0x00000902},
     {0x00000535, 0x00000702},
-    {0x00000539, 0x00000702} 
+    {0x00000539, 0x00000702},
+    {0x0000053D, 0x00000902}
 };
 static unsigned nv4TablePRAMIN_16BPP[][2] =
 {
@@ -482,7 +500,8 @@
     {0x0000052D, 0x00000C02},
     {0x0000052E, 0x00000C02},
     {0x00000535, 0x00000702},
-    {0x00000539, 0x00000702} 
+    {0x00000539, 0x00000702},
+    {0x0000053D, 0x00000C02}
 };
 static unsigned nv4TablePRAMIN_32BPP[][2] =
 {
@@ -497,7 +516,8 @@
     {0x0000052D, 0x00000E02},
     {0x0000052E, 0x00000E02},
     {0x00000535, 0x00000E02},
-    {0x00000539, 0x00000E02} 
+    {0x00000539, 0x00000E02},
+    {0x0000053D, 0x00000E02}
 };
 static unsigned nv10TableFIFO[][2] =
 {
@@ -810,6 +830,8 @@
     {0x00000009, 0x80011149},
     {0x0000000A, 0x80000015},
     {0x0000000B, 0x8001114A},
+    {0x0000000C, 0x80000016},
+    {0x0000000D, 0x80011150},
     {0x00000020, 0x80000000},
     {0x00000021, 0x80011142},
     {0x00000022, 0x80000001},
@@ -831,7 +853,7 @@
     {0x00000502, 0x00000002},
     {0x00000503, 0x00000002},
 #ifdef __BIG_ENDIAN
-    {0x00000508, 0x01088043},
+    {0x00000508, 0x01088043}, 
 #else
     {0x00000508, 0x01008043},
 #endif
@@ -946,7 +968,7 @@
     {0x0000052E, 0x00000902},
     {0x00000535, 0x00000902},
     {0x00000539, 0x00000902}, 
-    {0x0000053D, 0x00000902}, 
+    {0x0000053D, 0x00000902},
     {0x00000541, 0x00000902}
 };
 static unsigned nv10TablePRAMIN_16BPP[][2] =
diff -uNr linux-2.4.37.9/drivers/video/tdfxfb.c linux-2.4.37.9-amithlon/drivers/video/tdfxfb.c
--- linux-2.4.37.9/drivers/video/tdfxfb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/tdfxfb.c	2010-02-21 20:31:54.000000000 -0500
@@ -366,6 +366,9 @@
 #endif
 };
 
+#include "amithlon.h"
+#include <asm/uaccess.h>
+
 /*
  *  Frame buffer device API
  */
@@ -390,6 +393,8 @@
 			   int con,
 			   struct fb_info* info);
 
+static int tdfxfb_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+                           unsigned long arg, int con, struct fb_info *info);
 /*
  *  Interface to the low level console driver
  */
@@ -455,6 +460,18 @@
 static void  do_write_regs(struct banshee_reg* reg);
 static unsigned long do_lfb_size(void);
 
+static void tdfxfb_rectcopy(struct fb_info *info, 
+				int sy, 
+				int sx, 
+				int dy,
+				int dx, 
+				int height, 
+				int width);
+
+static u32 gxres = 0;
+static u32 gyres = 0;
+static u32 gbpp = 0;
+
 /*
  *  Interface used by the world
  */
@@ -478,6 +495,7 @@
 	fb_get_cmap:	tdfxfb_get_cmap,
 	fb_set_cmap:	tdfxfb_set_cmap,
 	fb_pan_display:	tdfxfb_pan_display,
+	fb_ioctl:	tdfxfb_ioctl,
 };
 
 static struct pci_device_id tdfxfb_id_table[] __devinitdata = {
@@ -1065,6 +1083,19 @@
 		 fb_info.current_par.lpitch, 
 		 fb_info.current_par.bpp);
 }
+
+static void tdfxfb_rectcopy(struct fb_info *info, 
+				int sy, 
+				int sx, 
+				int dy,
+				int dx, 
+				int height, 
+				int width) {
+   do_bitblt(sx,sy,dx,dy,width,height, 
+		 fb_info.current_par.lpitch, 
+		 fb_info.current_par.bpp);
+}
+
 static void tdfx_cfb8_putc(struct vc_data* conp,
 			       struct display* p,
 			       int c, int yy,int xx)
@@ -1470,6 +1501,8 @@
     reg.crt[0x09] |= 0x80;
   } else {
     reg.screensize = par->width | (par->height << 12);
+	gxres = par->width;
+	gyres = par->height;
     reg.vidcfg &= ~VIDCFG_HALF_MODE;
   }
   if (par->video & TDFXF_INTERLACE)
@@ -1486,14 +1519,17 @@
     case 24:
       reg.miscinit0 &= ~(1 << 30);
       reg.miscinit0 &= ~(1 << 31);
+      gbpp = 8;
       break;
     case 16:
       reg.miscinit0 |= (1 << 30);
       reg.miscinit0 |= (1 << 31);
+      gbpp = 16;
       break;
     case 32:
       reg.miscinit0 |= (1 << 30);
       reg.miscinit0 &= ~(1 << 31);
+      gbpp = 32;
       break;
   }
 #endif
@@ -1644,10 +1680,6 @@
     break;
   case 24:
   case 32:
-    v.red.offset   = 16;
-    v.green.offset = 8;
-    v.blue.offset  = 0;
-    v.red.length = v.green.length = v.blue.length = 8;
     break;
   }
   v.height = v.width = -1;
@@ -1858,13 +1890,14 @@
 			      struct fb_info* fb) {
   struct fb_info_tdfx* i = (struct fb_info_tdfx*)fb;
 
-  if(nopan)                return -EINVAL;
-  if(var->xoffset)         return -EINVAL;
+//  if(nopan)                return -EINVAL;
+//  if(var->xoffset)         return -EINVAL;
+#if 0
   if(var->yoffset > var->yres_virtual)   return -EINVAL;
   if(nowrap && 
      (var->yoffset + var->yres > var->yres_virtual)) return -EINVAL;
- 
-  if (con==currcon)
+#endif 
+//  if (con==currcon)
     do_pan_var(var,i);
    
   fb_display[con].var.xoffset=var->xoffset;
@@ -1872,6 +1905,44 @@
   return 0;
 }
 
+static int tdfxfb_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+                           unsigned long arg, int con, struct fb_info *info)
+{
+//       struct radeonfb_info *rinfo = (struct radeonfb_info *) info;
+	u32 scrnvar, width, height, bpp, vidcfg, stride, rbpp;
+
+	switch (cmd) {
+	 case AMITHLON_COPY_RECT: 
+		{ 
+	   		amithlon_copy ac;
+	     		if (copy_from_user(&ac, (void *) arg, sizeof(ac)))
+		 		return -EFAULT;
+			scrnvar = tdfx_inl(VIDSCREENSIZE);
+			width = (scrnvar & 2047);
+			height = (scrnvar >> 12);
+			vidcfg = tdfx_inl(VIDPROCCFG);
+			bpp = ((scrnvar >> 18) & 7);
+			rbpp = 8;
+			if (bpp == 4) rbpp = 16;
+			stride = width * ((rbpp+7)>>3);
+ 	   		do_bitblt(ac.sx, ac.sy, 
+				  ac.dx, ac.dy, ac.width, ac.height, stride ,rbpp);
+//			printk(KERN_ERR "sx:%d  sy:%d  dx:%d  dy:%d\n",ac.sx,ac.sy,ac.dx,ac.dy);
+	     		return 0;
+		}
+	case AMITHLON_MAXCLOCK:
+	  {
+	    unsigned int answer=240000;
+
+	    if (put_user(answer, (u_int32_t*)arg))
+	      return -EFAULT;
+	    return 0;
+	  }
+
+	return -EINVAL;
+}
+}
+
 static int tdfxfb_get_cmap(struct fb_cmap *cmap, 
 			   int kspc, 
 			   int con,
@@ -2026,7 +2097,7 @@
 	memset(&var, 0, sizeof(var));
 	
 	if (!mode_option || !fb_find_mode(&var, &fb_info.fb_info,
-					  mode_option, NULL, 0, NULL, 8))
+					  mode_option, NULL, 0, NULL, 0))
 		var = default_mode[0].var;
 
 	noaccel ? (var.accel_flags &= ~FB_ACCELF_TEXT) :
diff -uNr linux-2.4.37.9/drivers/video/vesafb.c linux-2.4.37.9-amithlon/drivers/video/vesafb.c
--- linux-2.4.37.9/drivers/video/vesafb.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/drivers/video/vesafb.c	2010-02-17 20:04:06.000000000 -0500
@@ -169,7 +169,7 @@
 static int vesafb_get_var(struct fb_var_screeninfo *var, int con,
 			 struct fb_info *info)
 {
-	if(con==-1)
+	if(con==-1 || 1)
 		memcpy(var, &vesafb_defined, sizeof(struct fb_var_screeninfo));
 	else
 		*var=fb_display[con].var;
@@ -248,7 +248,10 @@
 			  struct fb_info *info)
 {
 	static int first = 1;
-
+if (var->nonstd==19690901) {
+		vesafb_defined=*var;
+		return 0;
+	}
 	if (var->xres           != vesafb_defined.xres           ||
 	    var->yres           != vesafb_defined.yres           ||
 	    var->xres_virtual   != vesafb_defined.xres_virtual   ||
@@ -257,8 +260,8 @@
 	    var->xoffset                                         ||
 	    var->bits_per_pixel != vesafb_defined.bits_per_pixel ||
 	    var->nonstd) {
-		if (first) {
-			printk(KERN_ERR "Vesafb does not support changing the video mode\n");
+		if (first || 1) {
+			printk(KERN_ERR "Vesafb does not support changing the video mode (%d,%d)\n",var->nonstd,var->xres);
 			first = 0;
 		}
 		return -EINVAL;
@@ -551,12 +554,11 @@
 #endif
 
 	if (!request_mem_region(video_base, video_size, "vesafb")) {
-		printk(KERN_WARNING
-		       "vesafb: abort, cannot reserve video memory at 0x%lx\n",
-			video_base);
-		/* We cannot make this fatal. Sometimes this comes from magic
-		   spaces our resource handlers simply don't know about */
-	}
+ 		printk(KERN_ERR
+  		       "vesafb: abort, cannot reserve video memory at 0x%lx\n",
+  			video_base);
+ 		return -EBUSY;
+  	}
 
         video_vbase = ioremap(video_base, video_size);
 	if (!video_vbase) {
diff -uNr linux-2.4.37.9/fs/Config.in linux-2.4.37.9-amithlon/fs/Config.in
--- linux-2.4.37.9/fs/Config.in	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/fs/Config.in	2010-02-18 07:29:52.000000000 -0500
@@ -170,7 +170,15 @@
 else
    define_tristate CONFIG_ZISOFS_FS n
 fi
-
+if [ "$CONFIG_CRAMFS" = "y" -o "$CONFIG_ZISOFS_FS" = "y" ]; then
+   define_tristate CONFIG_ZLIB_FS_INFLATE y
+else
+  if [ "$CONFIG_CRAMFS" = "m" -o "$CONFIG_ZISOFS_FS" = "m" ]; then
+     define_tristate CONFIG_ZLIB_FS_INFLATE m
+  else
+     define_tristate CONFIG_ZLIB_FS_INFLATE n
+  fi
+fi
 mainmenu_option next_comment
 comment 'Partition Types'
 source fs/partitions/Config.in
diff -uNr linux-2.4.37.9/fs/proc/kmsg.c linux-2.4.37.9-amithlon/fs/proc/kmsg.c
--- linux-2.4.37.9/fs/proc/kmsg.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/fs/proc/kmsg.c	2010-02-17 20:04:11.000000000 -0500
@@ -32,7 +32,10 @@
 static ssize_t kmsg_read(struct file * file, char * buf,
 			 size_t count, loff_t *ppos)
 {
-	return do_syslog(2,buf,count);
+	if (file->f_flags & O_NONBLOCK) 
+	      return do_syslog(102,buf,count);
+	else
+	      return do_syslog(2,buf,count);
 }
 
 static unsigned int kmsg_poll(struct file *file, poll_table * wait)
diff -uNr linux-2.4.37.9/fs/proc/proc_misc.c linux-2.4.37.9-amithlon/fs/proc/proc_misc.c
--- linux-2.4.37.9/fs/proc/proc_misc.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/fs/proc/proc_misc.c	2010-06-16 20:35:32.000000000 -0400
@@ -62,6 +62,7 @@
 extern int get_irq_list(char *);
 #endif
 extern int get_dma_list(char *);
+extern int get_mkbd_status (char *);
 extern int get_locks_status (char *, char **, off_t, int);
 extern int get_swaparea_info (char *);
 #ifdef CONFIG_SGI_DS1286
@@ -221,7 +222,8 @@
 	extern char *linux_banner;
 	int len;
 
-	strcpy(page, linux_banner);
+/*	strcpy(page, linux_banner); */
+	strcpy(page, "Amithlon kernel version 4 (2.4.37.9). Compiled June, 2010. Maintained by Milan M. (milanca@gmail.com).");
 	len = strlen(page);
 	return proc_calc_metrics(page, start, off, count, eof, len);
 }
@@ -457,6 +459,20 @@
 	return proc_calc_metrics(page, start, off, count, eof, len);
 }
 
+#ifdef CONFIG_MKBD
+static int mkbd_read_proc(char *page, char **start, off_t off,
+			  int count, int *eof, void *data)
+{
+	int len = get_mkbd_status(page);
+	if (len <= off+count) *eof = 1;
+	*start = page + off;
+	len -= off;
+	if (len>count) len = count;
+	if (len<0) len = 0;
+	return len;
+}
+#endif
+
 #ifdef CONFIG_SGI_DS1286
 static int ds1286_read_proc(char *page, char **start, off_t off,
 				 int count, int *eof, void *data)
@@ -616,6 +632,9 @@
 		{"filesystems",	filesystems_read_proc},
 		{"dma",		dma_read_proc},
 		{"cmdline",	cmdline_read_proc},
+#ifdef CONFIG_MKBD
+		{"mkbd",	mkbd_read_proc},
+#endif
 #ifdef CONFIG_SGI_DS1286
 		{"rtc",		ds1286_read_proc},
 #endif
diff -uNr linux-2.4.37.9/fs/proc/proc_misc.c~ linux-2.4.37.9-amithlon/fs/proc/proc_misc.c~
--- linux-2.4.37.9/fs/proc/proc_misc.c~	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/fs/proc/proc_misc.c~	2010-02-17 20:04:11.000000000 -0500
@@ -0,0 +1,691 @@
+/*
+ *  linux/fs/proc/proc_misc.c
+ *
+ *  linux/fs/proc/array.c
+ *  Copyright (C) 1992  by Linus Torvalds
+ *  based on ideas by Darren Senn
+ *
+ *  This used to be the part of array.c. See the rest of history and credits
+ *  there. I took this into a separate file and switched the thing to generic
+ *  proc_file_inode_operations, leaving in array.c only per-process stuff.
+ *  Inumbers allocation made dynamic (via create_proc_entry()).  AV, May 1999.
+ *
+ * Changes:
+ * Fulton Green      :  Encapsulated position metric calculations.
+ *			<kernel@FultonGreen.com>
+ */
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/kernel_stat.h>
+#include <linux/tty.h>
+#include <linux/string.h>
+#include <linux/mman.h>
+#include <linux/proc_fs.h>
+#include <linux/ioport.h>
+#include <linux/config.h>
+#include <linux/mm.h>
+#include <linux/pagemap.h>
+#include <linux/swap.h>
+#include <linux/slab.h>
+#include <linux/smp.h>
+#include <linux/signal.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/smp_lock.h>
+#include <linux/seq_file.h>
+#include <linux/sysrq.h>
+
+#include <asm/uaccess.h>
+#include <asm/pgtable.h>
+#include <asm/io.h>
+
+#define LOAD_INT(x) ((x) >> FSHIFT)
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
+/*
+ * Warning: stuff below (imported functions) assumes that its output will fit
+ * into one page. For some of those functions it may be wrong. Moreover, we
+ * have a way to deal with that gracefully. Right now I used straightforward
+ * wrappers, but this needs further analysis wrt potential overflows.
+ */
+extern int get_hardware_list(char *);
+extern int get_stram_list(char *);
+#ifdef CONFIG_MODULES
+extern int get_module_list(char *);
+#endif
+extern int get_device_list(char *);
+extern int get_filesystem_list(char *);
+extern int get_exec_domain_list(char *);
+#ifndef CONFIG_X86
+extern int get_irq_list(char *);
+#endif
+extern int get_dma_list(char *);
+extern int get_mkbd_status (char *);
+extern int get_locks_status (char *, char **, off_t, int);
+extern int get_swaparea_info (char *);
+#ifdef CONFIG_SGI_DS1286
+extern int get_ds1286_status(char *);
+#endif
+
+void proc_sprintf(char *page, off_t *off, int *lenp, const char *format, ...)
+{
+	int len = *lenp;
+	va_list args;
+
+	/* try to only print whole lines */
+	if (len > PAGE_SIZE-512)
+		return;
+
+	va_start(args, format);
+	len += vsnprintf(page + len, PAGE_SIZE-len, format, args);
+	va_end(args);
+
+	if (len <= *off) {
+		*off -= len;
+		len = 0;
+	}
+
+	*lenp = len;
+}
+
+static int proc_calc_metrics(char *page, char **start, off_t off,
+				 int count, int *eof, int len)
+{
+	if (len <= off+count) *eof = 1;
+	*start = page + off;
+	len -= off;
+	if (len>count) len = count;
+	if (len<0) len = 0;
+	return len;
+}
+
+static int loadavg_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int a, b, c;
+	int len;
+
+	a = avenrun[0] + (FIXED_1/200);
+	b = avenrun[1] + (FIXED_1/200);
+	c = avenrun[2] + (FIXED_1/200);
+	len = sprintf(page,"%d.%02d %d.%02d %d.%02d %d/%d %d\n",
+		LOAD_INT(a), LOAD_FRAC(a),
+		LOAD_INT(b), LOAD_FRAC(b),
+		LOAD_INT(c), LOAD_FRAC(c),
+		nr_running, nr_threads, last_pid);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int uptime_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	unsigned long uptime;
+	unsigned long idle;
+	int len;
+
+	uptime = jiffies;
+	idle = init_tasks[0]->times.tms_utime + init_tasks[0]->times.tms_stime;
+
+	/* The formula for the fraction parts really is ((t * 100) / HZ) % 100, but
+	   that would overflow about every five days at HZ == 100.
+	   Therefore the identity a = (a / b) * b + a % b is used so that it is
+	   calculated as (((t / HZ) * 100) + ((t % HZ) * 100) / HZ) % 100.
+	   The part in front of the '+' always evaluates as 0 (mod 100). All divisions
+	   in the above formulas are truncating. For HZ being a power of 10, the
+	   calculations simplify to the version in the #else part (if the printf
+	   format is adapted to the same number of digits as zeroes in HZ.
+	 */
+#if HZ!=100
+	len = sprintf(page,"%lu.%02lu %lu.%02lu\n",
+		uptime / HZ,
+		(((uptime % HZ) * 100) / HZ) % 100,
+		idle / HZ,
+		(((idle % HZ) * 100) / HZ) % 100);
+#else
+	len = sprintf(page,"%lu.%02lu %lu.%02lu\n",
+		uptime / HZ,
+		uptime % HZ,
+		idle / HZ,
+		idle % HZ);
+#endif
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int meminfo_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	struct sysinfo i;
+	int len;
+	int pg_size ;
+
+/*
+ * display in kilobytes.
+ */
+#define K(x) ((x) << (PAGE_SHIFT - 10))
+#define B(x) ((unsigned long long)(x) << PAGE_SHIFT)
+	si_meminfo(&i);
+	si_swapinfo(&i);
+	pg_size = page_cache_size - i.bufferram;
+
+	len = sprintf(page, "        total:    used:    free:  shared: buffers:  cached:\n"
+		"Mem:  %8Lu %8Lu %8Lu %8Lu %8Lu %8Lu\n"
+		"Swap: %8Lu %8Lu %8Lu\n",
+		B(i.totalram), B(i.totalram-i.freeram), B(i.freeram),
+		B(i.sharedram), B(i.bufferram),
+		B(pg_size), B(i.totalswap),
+		B(i.totalswap-i.freeswap), B(i.freeswap));
+	/*
+	 * Tagged format, for easy grepping and expansion.
+	 * The above will go away eventually, once the tools
+	 * have been updated.
+	 */
+	len += sprintf(page+len,
+		"MemTotal:     %8lu kB\n"
+		"MemFree:      %8lu kB\n"
+		"MemShared:    %8lu kB\n"
+		"Buffers:      %8lu kB\n"
+		"Cached:       %8lu kB\n"
+		"SwapCached:   %8lu kB\n"
+		"Active:       %8u kB\n"
+		"Inactive:     %8u kB\n"
+		"HighTotal:    %8lu kB\n"
+		"HighFree:     %8lu kB\n"
+		"LowTotal:     %8lu kB\n"
+		"LowFree:      %8lu kB\n"
+		"SwapTotal:    %8lu kB\n"
+		"SwapFree:     %8lu kB\n",
+		K(i.totalram),
+		K(i.freeram),
+		K(i.sharedram),
+		K(i.bufferram),
+		K(pg_size - swapper_space.nrpages),
+		K(swapper_space.nrpages),
+		K(nr_active_pages),
+		K(nr_inactive_pages),
+		K(i.totalhigh),
+		K(i.freehigh),
+		K(i.totalram-i.totalhigh),
+		K(i.freeram-i.freehigh),
+		K(i.totalswap),
+		K(i.freeswap));
+
+	return proc_calc_metrics(page, start, off, count, eof, len);
+#undef B
+#undef K
+}
+
+static int version_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	extern char *linux_banner;
+	int len;
+
+	strcpy(page, linux_banner);
+	len = strlen(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+extern struct seq_operations cpuinfo_op;
+static int cpuinfo_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &cpuinfo_op);
+}
+static struct file_operations proc_cpuinfo_operations = {
+	open:		cpuinfo_open,
+	read:		seq_read,
+	llseek:		seq_lseek,
+	release:	seq_release,
+};
+
+#ifdef CONFIG_PROC_HARDWARE
+static int hardware_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_hardware_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+#endif
+
+#ifdef CONFIG_STRAM_PROC
+static int stram_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_stram_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+#endif
+
+extern struct seq_operations partitions_op;
+static int partitions_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &partitions_op);
+}
+static struct file_operations proc_partitions_operations = {
+	open:		partitions_open,
+	read:		seq_read,
+	llseek:		seq_lseek,
+	release:	seq_release,
+};
+
+#ifdef CONFIG_MODULES
+static int modules_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_module_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+extern struct seq_operations ksyms_op;
+static int ksyms_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &ksyms_op);
+}
+static struct file_operations proc_ksyms_operations = {
+	open:		ksyms_open,
+	read:		seq_read,
+	llseek:		seq_lseek,
+	release:	seq_release,
+};
+#endif
+
+extern struct seq_operations slabinfo_op;
+extern ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);
+static int slabinfo_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &slabinfo_op);
+}
+static struct file_operations proc_slabinfo_operations = {
+	open:		slabinfo_open,
+	read:		seq_read,
+	write:		slabinfo_write,
+	llseek:		seq_lseek,
+	release:	seq_release,
+};
+
+static int kstat_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int i, len = 0;
+	extern unsigned long total_forks;
+	unsigned long jif = jiffies;
+	unsigned int sum = 0, user = 0, nice = 0, system = 0;
+	int major, disk;
+
+	for (i = 0 ; i < smp_num_cpus; i++) {
+		int cpu = cpu_logical_map(i), j;
+
+		user += kstat.per_cpu_user[cpu];
+		nice += kstat.per_cpu_nice[cpu];
+		system += kstat.per_cpu_system[cpu];
+#if !defined(CONFIG_ARCH_S390)
+		for (j = 0 ; j < NR_IRQS ; j++)
+			sum += kstat.irqs[cpu][j];
+#endif
+	}
+
+	proc_sprintf(page, &off, &len,
+		      "cpu  %u %u %u %lu\n", user, nice, system,
+		      jif * smp_num_cpus - (user + nice + system));
+	for (i = 0 ; i < smp_num_cpus; i++)
+		proc_sprintf(page, &off, &len,
+			"cpu%d %u %u %u %lu\n",
+			i,
+			kstat.per_cpu_user[cpu_logical_map(i)],
+			kstat.per_cpu_nice[cpu_logical_map(i)],
+			kstat.per_cpu_system[cpu_logical_map(i)],
+			jif - (  kstat.per_cpu_user[cpu_logical_map(i)] \
+				   + kstat.per_cpu_nice[cpu_logical_map(i)] \
+				   + kstat.per_cpu_system[cpu_logical_map(i)]));
+	proc_sprintf(page, &off, &len,
+		"page %u %u\n"
+		"swap %u %u\n"
+		"intr %u",
+			kstat.pgpgin >> 1,
+			kstat.pgpgout >> 1,
+			kstat.pswpin,
+			kstat.pswpout,
+			sum
+	);
+#if !defined(CONFIG_ARCH_S390) && !defined(CONFIG_ALPHA)
+	for (i = 0 ; i < NR_IRQS ; i++)
+		proc_sprintf(page, &off, &len,
+			     " %u", kstat_irqs(i));
+#endif
+
+	proc_sprintf(page, &off, &len, "\ndisk_io: ");
+
+	for (major = 0; major < DK_MAX_MAJOR; major++) {
+		for (disk = 0; disk < DK_MAX_DISK; disk++) {
+			int active = kstat.dk_drive[major][disk] +
+				kstat.dk_drive_rblk[major][disk] +
+				kstat.dk_drive_wblk[major][disk];
+			if (active)
+				proc_sprintf(page, &off, &len,
+					"(%u,%u):(%u,%u,%u,%u,%u) ",
+					major, disk,
+					kstat.dk_drive[major][disk],
+					kstat.dk_drive_rio[major][disk],
+					kstat.dk_drive_rblk[major][disk],
+					kstat.dk_drive_wio[major][disk],
+					kstat.dk_drive_wblk[major][disk]
+			);
+		}
+	}
+
+	proc_sprintf(page, &off, &len,
+		"\nctxt %u\n"
+		"btime %lu\n"
+		"processes %lu\n",
+		kstat.context_swtch,
+		xtime.tv_sec - jif / HZ,
+		total_forks);
+
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int devices_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_device_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+#ifndef CONFIG_X86
+#if !defined(CONFIG_ARCH_S390)
+static int interrupts_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_irq_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+#endif
+
+#else /* !CONFIG_X86 */
+
+extern int show_interrupts(struct seq_file *p, void *v);
+static int interrupts_open(struct inode *inode, struct file *file)
+{
+	unsigned size = PAGE_SIZE * (1 + smp_num_cpus / 8);
+	char *buf = kmalloc(size, GFP_KERNEL);
+	struct seq_file *m;
+	int res;
+
+	if (!buf)
+		return -ENOMEM;
+	res = single_open(file, show_interrupts, NULL);
+	if (!res) {
+		m = file->private_data;
+		m->buf = buf;
+		m->size = size;
+	} else
+		kfree(buf);
+	return res;
+}
+static struct file_operations proc_interrupts_operations = {
+	.open		= interrupts_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+#endif /* !CONFIG_X86 */
+
+extern struct file_operations proc_ioports_operations;
+extern struct file_operations proc_iomem_operations;
+
+static int filesystems_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_filesystem_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int dma_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_dma_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int cmdline_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	extern char saved_command_line[];
+	int len = 0;
+
+	proc_sprintf(page, &off, &len, "%s\n", saved_command_line);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+#ifdef CONFIG_MKBD
+static int mkbd_read_proc(char *page, char **start, off_t off,
+			  int count, int *eof, void *data)
+{
+	int len = get_mkbd_status(page);
+	if (len <= off+count) *eof = 1;
+	*start = page + off;
+	len -= off;
+	if (len>count) len = count;
+	if (len<0) len = 0;
+	return len;
+}
+#endif
+
+#ifdef CONFIG_SGI_DS1286
+static int ds1286_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_ds1286_status(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+#endif
+
+static int locks_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len;
+	lock_kernel();
+	len = get_locks_status(page, start, off, count);
+	unlock_kernel();
+	if (len < count) *eof = 1;
+	return len;
+}
+
+static int execdomains_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_exec_domain_list(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int swaps_read_proc(char *page, char **start, off_t off,
+				 int count, int *eof, void *data)
+{
+	int len = get_swaparea_info(page);
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+/*
+ * This function accesses profiling information. The returned data is
+ * binary: the sampling step and the actual contents of the profile
+ * buffer. Use of the program readprofile is recommended in order to
+ * get meaningful info out of these data.
+ */
+static ssize_t read_profile(struct file *file, char *buf,
+			    size_t count, loff_t *ppos)
+{
+	loff_t n = *ppos;
+	unsigned p = n;
+	ssize_t read;
+	char * pnt;
+	unsigned int sample_step = 1 << prof_shift;
+
+	if (p != n || p >= (prof_len+1)*sizeof(unsigned int))
+		return 0;
+	if (count > (prof_len+1)*sizeof(unsigned int) - p)
+		count = (prof_len+1)*sizeof(unsigned int) - p;
+	read = 0;
+
+	while (p < sizeof(unsigned int) && count > 0) {
+		put_user(*((char *)(&sample_step)+p),buf);
+		buf++; p++; count--; read++;
+	}
+	pnt = (char *)prof_buffer + p - sizeof(unsigned int);
+	if (copy_to_user(buf,(void *)pnt,count))
+		return -EFAULT;
+	read += count;
+	*ppos = n + read;
+	return read;
+}
+
+/*
+ * Writing to /proc/profile resets the counters
+ *
+ * Writing a 'profiling multiplier' value into it also re-sets the profiling
+ * interrupt frequency, on architectures that support this.
+ */
+static ssize_t write_profile(struct file * file, const char * buf,
+			     size_t count, loff_t *ppos)
+{
+#ifdef CONFIG_SMP
+	extern int setup_profiling_timer (unsigned int multiplier);
+
+	if (count==sizeof(int)) {
+		unsigned int multiplier;
+
+		if (copy_from_user(&multiplier, buf, sizeof(int)))
+			return -EFAULT;
+
+		if (setup_profiling_timer(multiplier))
+			return -EINVAL;
+	}
+#endif
+
+	memset(prof_buffer, 0, prof_len * sizeof(*prof_buffer));
+	return count;
+}
+
+static struct file_operations proc_profile_operations = {
+	read:		read_profile,
+	write:		write_profile,
+};
+
+#ifdef CONFIG_MAGIC_SYSRQ
+/*
+ * writing 'C' to /proc/sysrq-trigger is like sysrq-C
+ */
+static ssize_t write_sysrq_trigger(struct file *file, const char *buf,
+				     size_t count, loff_t *ppos)
+{
+	if (count) {
+		char c;
+
+		if (get_user(c, buf))
+			return -EFAULT;
+		handle_sysrq(c, NULL, NULL, NULL);
+	}
+	return count;
+}
+
+static struct file_operations proc_sysrq_trigger_operations = {
+	.write		= write_sysrq_trigger,
+};
+#endif
+
+struct proc_dir_entry *proc_root_kcore;
+
+static void create_seq_entry(char *name, mode_t mode, struct file_operations *f)
+{
+	struct proc_dir_entry *entry;
+	entry = create_proc_entry(name, mode, NULL);
+	if (entry)
+		entry->proc_fops = f;
+}
+
+void __init proc_misc_init(void)
+{
+	struct proc_dir_entry *entry;
+	static struct {
+		char *name;
+		int (*read_proc)(char*,char**,off_t,int,int*,void*);
+	} *p, simple_ones[] = {
+		{"loadavg",     loadavg_read_proc},
+		{"uptime",	uptime_read_proc},
+		{"meminfo",	meminfo_read_proc},
+		{"version",	version_read_proc},
+#ifdef CONFIG_PROC_HARDWARE
+		{"hardware",	hardware_read_proc},
+#endif
+#ifdef CONFIG_STRAM_PROC
+		{"stram",	stram_read_proc},
+#endif
+#ifdef CONFIG_MODULES
+		{"modules",	modules_read_proc},
+#endif
+		{"stat",	kstat_read_proc},
+		{"devices",	devices_read_proc},
+#if !defined(CONFIG_ARCH_S390) && !defined(CONFIG_X86)
+		{"interrupts",	interrupts_read_proc},
+#endif
+		{"filesystems",	filesystems_read_proc},
+		{"dma",		dma_read_proc},
+		{"cmdline",	cmdline_read_proc},
+#ifdef CONFIG_MKBD
+		{"mkbd",	mkbd_read_proc},
+#endif
+#ifdef CONFIG_SGI_DS1286
+		{"rtc",		ds1286_read_proc},
+#endif
+		{"locks",	locks_read_proc},
+		{"swaps",	swaps_read_proc},
+		{"execdomains",	execdomains_read_proc},
+		{NULL,}
+	};
+	for (p = simple_ones; p->name; p++)
+		create_proc_read_entry(p->name, 0, NULL, p->read_proc, NULL);
+
+	proc_symlink("mounts", NULL, "self/mounts");
+
+	/* And now for trickier ones */
+	entry = create_proc_entry("kmsg", S_IRUSR, &proc_root);
+	if (entry)
+		entry->proc_fops = &proc_kmsg_operations;
+	create_seq_entry("cpuinfo", 0, &proc_cpuinfo_operations);
+#if defined(CONFIG_X86)
+	create_seq_entry("interrupts", 0, &proc_interrupts_operations);
+#endif
+	create_seq_entry("ioports", 0, &proc_ioports_operations);
+	create_seq_entry("iomem", 0, &proc_iomem_operations);
+	create_seq_entry("partitions", 0, &proc_partitions_operations);
+	create_seq_entry("slabinfo",S_IWUSR|S_IRUGO,&proc_slabinfo_operations);
+#ifdef CONFIG_MODULES
+	create_seq_entry("ksyms", 0, &proc_ksyms_operations);
+#endif
+	proc_root_kcore = create_proc_entry("kcore", S_IRUSR, NULL);
+	if (proc_root_kcore) {
+		proc_root_kcore->proc_fops = &proc_kcore_operations;
+		proc_root_kcore->size =
+				(size_t)high_memory - PAGE_OFFSET + PAGE_SIZE;
+	}
+	if (prof_shift) {
+		entry = create_proc_entry("profile", S_IWUSR | S_IRUGO, NULL);
+		if (entry) {
+			entry->proc_fops = &proc_profile_operations;
+			entry->size = (1+prof_len) * sizeof(unsigned int);
+		}
+	}
+#ifdef CONFIG_MAGIC_SYSRQ
+	entry = create_proc_entry("sysrq-trigger", S_IWUSR, NULL);
+	if (entry)
+		entry->proc_fops = &proc_sysrq_trigger_operations;
+#endif
+#ifdef CONFIG_PPC32
+	{
+		extern struct file_operations ppc_htab_operations;
+		entry = create_proc_entry("ppc_htab", S_IRUGO|S_IWUSR, NULL);
+		if (entry)
+			entry->proc_fops = &ppc_htab_operations;
+	}
+#endif
+}
diff -uNr linux-2.4.37.9/include/asm-i386/irq.h linux-2.4.37.9-amithlon/include/asm-i386/irq.h
--- linux-2.4.37.9/include/asm-i386/irq.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/asm-i386/irq.h	2010-02-17 20:04:05.000000000 -0500
@@ -26,7 +26,7 @@
 #ifdef CONFIG_X86_IO_APIC
 #define NR_IRQS 224
 #else
-#define NR_IRQS 16
+#define NR_IRQS 32
 #endif
 
 static __inline__ int irq_cannonicalize(int irq)
diff -uNr linux-2.4.37.9/include/asm-i386/processor.h linux-2.4.37.9-amithlon/include/asm-i386/processor.h
--- linux-2.4.37.9/include/asm-i386/processor.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/asm-i386/processor.h	2010-02-18 08:20:53.000000000 -0500
@@ -264,7 +264,7 @@
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap's.
  */
-#define TASK_UNMAPPED_BASE	(TASK_SIZE / 3)
+#define TASK_UNMAPPED_BASE	(TASK_SIZE / 12 * 11)
 
 /*
  * Size of io_bitmap in longwords: 32 is ports 0-0x3ff.
diff -uNr linux-2.4.37.9/include/linux/ainstr_fm.h linux-2.4.37.9-amithlon/include/linux/ainstr_fm.h
--- linux-2.4.37.9/include/linux/ainstr_fm.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/ainstr_fm.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,132 @@
+/*
+ *  Advanced Linux Sound Architecture
+ *
+ *  FM (OPL2/3) Instrument Format
+ *  Copyright (c) 2000 Uros Bizjak <uros@kss-loka.si>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __AINSTR_FM_H
+#define __AINSTR_FM_H
+
+#ifndef __KERNEL__
+#include <asm/types.h>
+#include <asm/byteorder.h>
+#endif
+
+/*
+ *  share types (share ID 1)
+ */
+
+#define FM_SHARE_FILE		0
+
+/*
+ * FM operator
+ */
+
+typedef struct fm_operator {
+	unsigned char am_vib;
+	unsigned char ksl_level;
+	unsigned char attack_decay;
+	unsigned char sustain_release;
+	unsigned char wave_select;
+} fm_operator_t;
+
+/*
+ *  Instrument
+ */
+
+#define FM_PATCH_OPL2	0x01		/* OPL2 2 operators FM instrument */
+#define FM_PATCH_OPL3	0x02		/* OPL3 4 operators FM instrument */
+
+typedef struct {
+	unsigned int share_id[4];	/* share id - zero = no sharing */
+	unsigned char type;		/* instrument type */
+
+	fm_operator_t op[4];
+	unsigned char feedback_connection[2];
+
+	unsigned char echo_delay;
+	unsigned char echo_atten;
+	unsigned char chorus_spread;
+	unsigned char trnsps;
+	unsigned char fix_dur;
+	unsigned char modes;
+	unsigned char fix_key;
+} fm_instrument_t;
+
+/*
+ *
+ *    Kernel <-> user space
+ *    Hardware (CPU) independent section
+ *
+ *    * = zero or more
+ *    + = one or more
+ *
+ *    fm_xinstrument	FM_STRU_INSTR
+ *
+ */
+
+#define FM_STRU_INSTR	__cpu_to_be32(('I'<<24)|('N'<<16)|('S'<<8)|'T')
+
+/*
+ * FM operator
+ */
+
+typedef struct fm_xoperator {
+	__u8 am_vib;
+	__u8 ksl_level;
+	__u8 attack_decay;
+	__u8 sustain_release;
+	__u8 wave_select;
+} fm_xoperator_t;
+
+/*
+ *  Instrument
+ */
+
+typedef struct fm_xinstrument {
+	__u32 stype;			/* structure type */
+
+	__u32 share_id[4];		/* share id - zero = no sharing */
+	__u8 type;			/* instrument type */
+
+	fm_xoperator_t op[4];		/* fm operators */
+	__u8 feedback_connection[2];
+
+	__u8 echo_delay;
+	__u8 echo_atten;
+	__u8 chorus_spread;
+	__u8 trnsps;
+	__u8 fix_dur;
+	__u8 modes;
+	__u8 fix_key;
+} fm_xinstrument_t;
+
+#ifdef __KERNEL__
+
+#include "seq_instr.h"
+
+extern char *snd_seq_fm_id;
+
+int snd_seq_fm_init(snd_seq_kinstr_ops_t * ops,
+		    snd_seq_kinstr_ops_t * next);
+
+#endif
+
+#endif	/* __SEQ_INSTR_SIMPLE_H */
diff -uNr linux-2.4.37.9/include/linux/ainstr_gf1.h linux-2.4.37.9-amithlon/include/linux/ainstr_gf1.h
--- linux-2.4.37.9/include/linux/ainstr_gf1.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/ainstr_gf1.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,227 @@
+/*
+ *  Advanced Linux Sound Architecture
+ *
+ *  GF1 (GUS) Patch Instrument Format
+ *  Copyright (c) 1994-99 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __AINSTR_GF1_H
+#define __AINSTR_GF1_H
+
+#ifndef __KERNEL__
+#include <asm/types.h>
+#include <asm/byteorder.h>
+#endif
+
+/*
+ *  share types (share ID 1)
+ */
+
+#define GF1_SHARE_FILE			0
+
+/*
+ *  wave formats
+ */
+
+#define GF1_WAVE_16BIT			0x0001  /* 16-bit wave */
+#define GF1_WAVE_UNSIGNED		0x0002  /* unsigned wave */
+#define GF1_WAVE_INVERT			0x0002  /* same as unsigned wave */
+#define GF1_WAVE_BACKWARD		0x0004  /* backward mode (maybe used for reverb or ping-ping loop) */
+#define GF1_WAVE_LOOP			0x0008  /* loop mode */
+#define GF1_WAVE_BIDIR			0x0010  /* bidirectional mode */
+#define GF1_WAVE_STEREO			0x0100	/* stereo mode */
+#define GF1_WAVE_ULAW			0x0200	/* uLaw compression mode */
+
+/*
+ *  Wavetable definitions
+ */
+
+typedef struct gf1_wave {
+	unsigned int share_id[4];	/* share id - zero = no sharing */
+	unsigned int format;		/* wave format */
+
+	struct {
+		unsigned int number;	/* some other ID for this instrument */
+		unsigned int memory;	/* begin of waveform in onboard memory */
+		unsigned char *ptr;	/* pointer to waveform in system memory */
+	} address;
+
+	unsigned int size;		/* size of waveform in samples */
+	unsigned int start;		/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_start;	/* bits loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_end;		/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned short loop_repeat;	/* loop repeat - 0 = forever */
+
+	unsigned char flags;		/* GF1 patch flags */
+	unsigned char pad;
+	unsigned int sample_rate;	/* sample rate in Hz */
+	unsigned int low_frequency;	/* low frequency range */
+	unsigned int high_frequency;	/* high frequency range */
+	unsigned int root_frequency;	/* root frequency range */
+	signed short tune;
+	unsigned char balance;
+	unsigned char envelope_rate[6];
+	unsigned char envelope_offset[6];
+	unsigned char tremolo_sweep;
+	unsigned char tremolo_rate;
+	unsigned char tremolo_depth;
+	unsigned char vibrato_sweep;
+	unsigned char vibrato_rate;
+	unsigned char vibrato_depth;
+	unsigned short scale_frequency;
+	unsigned short scale_factor;	/* 0-2048 or 0-2 */
+  
+	struct gf1_wave *next;
+} gf1_wave_t;
+
+/*
+ *  Instrument
+ */
+
+#define IWFFFF_EXCLUDE_NONE		0x0000	/* exclusion mode - none */
+#define IWFFFF_EXCLUDE_SINGLE		0x0001	/* exclude single - single note from the instrument group */
+#define IWFFFF_EXCLUDE_MULTIPLE		0x0002	/* exclude multiple - stop only same note from this instrument */
+
+#define IWFFFF_EFFECT_NONE		0
+#define IWFFFF_EFFECT_REVERB		1
+#define IWFFFF_EFFECT_CHORUS		2
+#define IWFFFF_EFFECT_ECHO		3
+
+typedef struct {
+	unsigned short exclusion;
+	unsigned short exclusion_group;	/* 0 - none, 1-65535 */
+
+	unsigned char effect1;		/* effect 1 */
+	unsigned char effect1_depth;	/* 0-127 */
+	unsigned char effect2;		/* effect 2 */
+	unsigned char effect2_depth;	/* 0-127 */
+
+	gf1_wave_t *wave;		/* first waveform */
+} gf1_instrument_t;
+
+/*
+ *
+ *    Kernel <-> user space
+ *    Hardware (CPU) independent section
+ *
+ *    * = zero or more
+ *    + = one or more
+ *
+ *    gf1_xinstrument		IWFFFF_STRU_INSTR
+ *      +gf1_xwave		IWFFFF_STRU_WAVE
+ *
+ */
+
+#define GF1_STRU_WAVE		__cpu_to_be32(('W'<<24)|('A'<<16)|('V'<<8)|'E')
+#define GF1_STRU_INSTR		__cpu_to_be32(('I'<<24)|('N'<<16)|('S'<<8)|'T')
+
+/*
+ *  Wavetable definitions
+ */
+
+typedef struct gf1_xwave {
+	__u32 stype;			/* structure type */
+
+	__u32 share_id[4];		/* share id - zero = no sharing */
+	__u32 format;			/* wave format */
+
+	__u32 size;			/* size of waveform in samples */
+	__u32 start;			/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_start;		/* bits loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_end;			/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u16 loop_repeat;		/* loop repeat - 0 = forever */
+
+	__u8 flags;			/* GF1 patch flags */
+	__u8 pad;
+	__u32 sample_rate;		/* sample rate in Hz */
+	__u32 low_frequency;		/* low frequency range */
+	__u32 high_frequency;		/* high frequency range */
+	__u32 root_frequency;		/* root frequency range */
+	__s16 tune;
+	__u8 balance;
+	__u8 envelope_rate[6];
+	__u8 envelope_offset[6];
+	__u8 tremolo_sweep;
+	__u8 tremolo_rate;
+	__u8 tremolo_depth;
+	__u8 vibrato_sweep;
+	__u8 vibrato_rate;
+	__u8 vibrato_depth;
+	__u16 scale_frequency;
+	__u16 scale_factor;		/* 0-2048 or 0-2 */  
+} gf1_xwave_t;
+
+/*
+ *  Instrument
+ */
+
+typedef struct gf1_xinstrument {
+	__u32 stype;
+	
+	__u16 exclusion;
+	__u16 exclusion_group;		/* 0 - none, 1-65535 */
+
+	__u8 effect1;			/* effect 1 */
+	__u8 effect1_depth;		/* 0-127 */
+	__u8 effect2;			/* effect 2 */
+	__u8 effect2_depth;		/* 0-127 */
+} gf1_xinstrument_t;
+
+/*
+ *  Instrument info
+ */
+
+#define GF1_INFO_ENVELOPE		(1<<0)
+#define GF1_INFO_TREMOLO		(1<<1)
+#define GF1_INFO_VIBRATO		(1<<2)
+
+typedef struct gf1_info {
+	unsigned char flags;		/* supported wave flags */
+	unsigned char pad[3];
+	unsigned int features;		/* supported features */
+	unsigned int max8_len;		/* maximum 8-bit wave length */
+	unsigned int max16_len;		/* maximum 16-bit wave length */
+} gf1_info_t;
+
+#ifdef __KERNEL__
+
+#include "seq_instr.h"
+
+extern char *snd_seq_gf1_id;
+
+typedef struct {
+	void *private_data;
+	int (*info)(void *private_data, gf1_info_t *info);
+	int (*put_sample)(void *private_data, gf1_wave_t *wave,
+	                  char *data, long len, int atomic);
+	int (*get_sample)(void *private_data, gf1_wave_t *wave,
+			  char *data, long len, int atomic);
+	int (*remove_sample)(void *private_data, gf1_wave_t *wave,
+			     int atomic);
+	void (*notify)(void *private_data, snd_seq_kinstr_t *instr, int what);
+	snd_seq_kinstr_ops_t kops;
+} snd_gf1_ops_t;
+
+int snd_seq_gf1_init(snd_gf1_ops_t *ops,
+		     void *private_data,
+		     snd_seq_kinstr_ops_t *next);
+
+#endif
+
+#endif /* __SEQ_INSTR_GF1_H */
diff -uNr linux-2.4.37.9/include/linux/ainstr_iw.h linux-2.4.37.9-amithlon/include/linux/ainstr_iw.h
--- linux-2.4.37.9/include/linux/ainstr_iw.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/ainstr_iw.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,375 @@
+/*
+ *  Advanced Linux Sound Architecture
+ *
+ *  InterWave FFFF Instrument Format
+ *  Copyright (c) 1994-99 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __AINSTR_IW_H
+#define __AINSTR_IW_H
+
+#ifndef __KERNEL__
+#include <asm/types.h>
+#include <asm/byteorder.h>
+#endif
+
+/*
+ *  share types (share ID 1)
+ */
+
+#define IWFFFF_SHARE_FILE		0
+
+/*
+ *  wave formats
+ */
+
+#define IWFFFF_WAVE_16BIT		0x0001  /* 16-bit wave */
+#define IWFFFF_WAVE_UNSIGNED		0x0002  /* unsigned wave */
+#define IWFFFF_WAVE_INVERT		0x0002  /* same as unsigned wave */
+#define IWFFFF_WAVE_BACKWARD		0x0004  /* backward mode (maybe used for reverb or ping-ping loop) */
+#define IWFFFF_WAVE_LOOP		0x0008  /* loop mode */
+#define IWFFFF_WAVE_BIDIR		0x0010  /* bidirectional mode */
+#define IWFFFF_WAVE_ULAW		0x0020  /* uLaw compressed wave */
+#define IWFFFF_WAVE_RAM			0x0040  /* wave is _preloaded_ in RAM (it is used for ROM simulation) */
+#define IWFFFF_WAVE_ROM			0x0080  /* wave is in ROM */
+#define IWFFFF_WAVE_STEREO		0x0100	/* wave is stereo */
+
+/*
+ *  Wavetable definitions
+ */
+
+typedef struct iwffff_wave {
+	unsigned int share_id[4];	/* share id - zero = no sharing */
+	unsigned int format;		/* wave format */
+
+	struct {
+		unsigned int number;	/* some other ID for this wave */
+		unsigned int memory;	/* begin of waveform in onboard memory */
+		unsigned char *ptr;	/* pointer to waveform in system memory */
+	} address;
+
+	unsigned int size;		/* size of waveform in samples */
+	unsigned int start;		/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_start;	/* bits loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_end;		/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned short loop_repeat;	/* loop repeat - 0 = forever */
+	unsigned int sample_ratio;	/* sample ratio (44100 * 1024 / rate) */
+	unsigned char attenuation;	/* 0 - 127 (no corresponding midi controller) */
+	unsigned char low_note;		/* lower frequency range for this waveform */
+	unsigned char high_note;	/* higher frequency range for this waveform */
+	unsigned char pad;
+  
+	struct iwffff_wave *next;
+} iwffff_wave_t;
+
+/*
+ *  Layer
+ */
+
+#define IWFFFF_LFO_SHAPE_TRIANGLE	0
+#define IWFFFF_LFO_SHAPE_POSTRIANGLE	1
+
+typedef struct iwffff_lfo {
+	unsigned short freq;		/* (0-2047) 0.01Hz - 21.5Hz */
+	signed short depth;		/* volume +- (0-255) 0.48675dB/step */
+	signed short sweep;		/* 0 - 950 deciseconds */
+	unsigned char shape;		/* see to IWFFFF_LFO_SHAPE_XXXX */
+	unsigned char delay;		/* 0 - 255 deciseconds */
+} iwffff_lfo_t;
+
+#define IWFFFF_ENV_FLAG_RETRIGGER	0x0001	/* flag - retrigger */
+
+#define IWFFFF_ENV_MODE_ONE_SHOT	0x0001	/* mode - one shot */
+#define IWFFFF_ENV_MODE_SUSTAIN		0x0002	/* mode - sustain */
+#define IWFFFF_ENV_MODE_NO_SUSTAIN	0x0003	/* mode - no sustain */
+
+#define IWFFFF_ENV_INDEX_VELOCITY	0x0001	/* index - velocity */
+#define IWFFFF_ENV_INDEX_FREQUENCY	0x0002	/* index - frequency */
+
+typedef struct iwffff_env_point {
+	unsigned short offset;
+	unsigned short rate;
+} iwffff_env_point_t;
+
+typedef struct iwffff_env_record {
+	unsigned short nattack;
+	unsigned short nrelease;
+	unsigned short sustain_offset;
+	unsigned short sustain_rate;
+	unsigned short release_rate;
+	unsigned char hirange;
+	unsigned char pad;
+	struct iwffff_env_record *next;
+	/* points are stored here */
+	/* count of points = nattack + nrelease */
+} iwffff_env_record_t;
+
+typedef struct iwffff_env {
+	unsigned char flags;
+  	unsigned char mode;
+  	unsigned char index;
+	unsigned char pad;
+	struct iwffff_env_record *record;
+} iwffff_env_t;
+
+#define IWFFFF_LAYER_FLAG_RETRIGGER	0x0001	/* retrigger */
+
+#define IWFFFF_LAYER_VELOCITY_TIME	0x0000	/* velocity mode = time */
+#define IWFFFF_LAYER_VELOCITY_RATE	0x0001	/* velocity mode = rate */
+
+#define IWFFFF_LAYER_EVENT_KUP		0x0000	/* layer event - key up */
+#define IWFFFF_LAYER_EVENT_KDOWN	0x0001	/* layer event - key down */
+#define IWFFFF_LAYER_EVENT_RETRIG	0x0002	/* layer event - retrigger */
+#define IWFFFF_LAYER_EVENT_LEGATO	0x0003	/* layer event - legato */
+
+typedef struct iwffff_layer {
+	unsigned char flags;
+	unsigned char velocity_mode;
+      	unsigned char layer_event;
+	unsigned char low_range;	/* range for layer based */
+	unsigned char high_range;	/* on either velocity or frequency */
+	unsigned char pan;		/* pan offset from CC1 (0 left - 127 right) */
+	unsigned char pan_freq_scale;	/* position based on frequency (0-127) */
+	unsigned char attenuation;	/* 0-127 (no corresponding midi controller) */
+	iwffff_lfo_t tremolo;		/* tremolo effect */
+	iwffff_lfo_t vibrato;		/* vibrato effect */
+	unsigned short freq_scale;	/* 0-2048, 1024 is equal to semitone scaling */
+	unsigned char freq_center;	/* center for keyboard frequency scaling */
+	unsigned char pad;
+	iwffff_env_t penv;		/* pitch envelope */
+	iwffff_env_t venv;		/* volume envelope */
+
+	iwffff_wave_t *wave;
+	struct iwffff_layer *next;
+} iwffff_layer_t;
+
+/*
+ *  Instrument
+ */
+
+#define IWFFFF_EXCLUDE_NONE		0x0000	/* exclusion mode - none */
+#define IWFFFF_EXCLUDE_SINGLE		0x0001	/* exclude single - single note from the instrument group */
+#define IWFFFF_EXCLUDE_MULTIPLE		0x0002	/* exclude multiple - stop only same note from this instrument */
+
+#define IWFFFF_LAYER_NONE		0x0000	/* not layered */
+#define IWFFFF_LAYER_ON			0x0001	/* layered */
+#define IWFFFF_LAYER_VELOCITY		0x0002	/* layered by velocity */
+#define IWFFFF_LAYER_FREQUENCY		0x0003	/* layered by frequency */
+
+#define IWFFFF_EFFECT_NONE		0
+#define IWFFFF_EFFECT_REVERB		1
+#define IWFFFF_EFFECT_CHORUS		2
+#define IWFFFF_EFFECT_ECHO		3
+
+typedef struct {
+	unsigned short exclusion;
+	unsigned short layer_type;
+	unsigned short exclusion_group;	/* 0 - none, 1-65535 */
+
+	unsigned char effect1;		/* effect 1 */
+	unsigned char effect1_depth;	/* 0-127 */
+	unsigned char effect2;		/* effect 2 */
+	unsigned char effect2_depth;	/* 0-127 */
+
+	iwffff_layer_t *layer;		/* first layer */
+} iwffff_instrument_t;
+
+/*
+ *
+ *    Kernel <-> user space
+ *    Hardware (CPU) independent section
+ *
+ *    * = zero or more
+ *    + = one or more
+ *
+ *    iwffff_xinstrument		IWFFFF_STRU_INSTR
+ *      +iwffff_xlayer			IWFFFF_STRU_LAYER
+ *        *iwffff_xenv_record		IWFFFF_STRU_ENV_RECT (tremolo)
+ *        *iwffff_xenv_record		IWFFFF_STRU_EVN_RECT (vibrato)
+ *          +iwffff_xwave		IWFFFF_STRU_WAVE
+ *
+ */
+
+#define IWFFFF_STRU_WAVE	__cpu_to_be32(('W'<<24)|('A'<<16)|('V'<<8)|'E')
+#define IWFFFF_STRU_ENV_RECP	__cpu_to_be32(('E'<<24)|('N'<<16)|('R'<<8)|'P')
+#define IWFFFF_STRU_ENV_RECV	__cpu_to_be32(('E'<<24)|('N'<<16)|('R'<<8)|'V')
+#define IWFFFF_STRU_LAYER 	__cpu_to_be32(('L'<<24)|('A'<<16)|('Y'<<8)|'R')
+#define IWFFFF_STRU_INSTR 	__cpu_to_be32(('I'<<24)|('N'<<16)|('S'<<8)|'T')
+
+/*
+ *  Wavetable definitions
+ */
+
+typedef struct iwffff_xwave {
+	__u32 stype;			/* structure type */
+
+	__u32 share_id[4];		/* share id - zero = no sharing */
+
+	__u32 format;			/* wave format */
+	__u32 offset;			/* offset to ROM (address) */
+
+	__u32 size;			/* size of waveform in samples */
+	__u32 start;			/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_start;		/* bits loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_end;			/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u16 loop_repeat;		/* loop repeat - 0 = forever */
+	__u32 sample_ratio;		/* sample ratio (44100 * 1024 / rate) */
+	__u8 attenuation;		/* 0 - 127 (no corresponding midi controller) */
+	__u8 low_note;			/* lower frequency range for this waveform */
+	__u8 high_note;			/* higher frequency range for this waveform */
+	__u8 pad;
+} iwffff_xwave_t;
+
+/*
+ *  Layer
+ */
+
+typedef struct iwffff_xlfo {
+	__u16 freq;			/* (0-2047) 0.01Hz - 21.5Hz */
+	__s16 depth;			/* volume +- (0-255) 0.48675dB/step */
+	__s16 sweep;			/* 0 - 950 deciseconds */
+	__u8 shape;			/* see to ULTRA_IW_LFO_SHAPE_XXXX */
+	__u8 delay;			/* 0 - 255 deciseconds */
+} iwffff_xlfo_t;
+
+typedef struct iwffff_xenv_point {
+	__u16 offset;
+	__u16 rate;
+} iwffff_xenv_point_t;
+
+typedef struct iwffff_xenv_record {
+	__u32 stype;
+	__u16 nattack;
+	__u16 nrelease;
+	__u16 sustain_offset;
+	__u16 sustain_rate;
+	__u16 release_rate;
+	__u8 hirange;
+	__u8 pad;
+	/* points are stored here.. */
+	/* count of points = nattack + nrelease */
+} iwffff_xenv_record_t;
+
+typedef struct iwffff_xenv {
+	__u8 flags;
+  	__u8 mode;
+  	__u8 index;
+	__u8 pad;
+} iwffff_xenv_t;
+
+typedef struct iwffff_xlayer {
+	__u32 stype;
+	__u8 flags;
+	__u8 velocity_mode;
+      	__u8 layer_event;
+	__u8 low_range;			/* range for layer based */
+	__u8 high_range;		/* on either velocity or frequency */
+	__u8 pan;			/* pan offset from CC1 (0 left - 127 right) */
+	__u8 pan_freq_scale;		/* position based on frequency (0-127) */
+	__u8 attenuation;		/* 0-127 (no corresponding midi controller) */
+	iwffff_xlfo_t tremolo;		/* tremolo effect */
+	iwffff_xlfo_t vibrato;		/* vibrato effect */
+	__u16 freq_scale;		/* 0-2048, 1024 is equal to semitone scaling */
+	__u8 freq_center;		/* center for keyboard frequency scaling */
+	__u8 pad;
+	iwffff_xenv_t penv;		/* pitch envelope */
+	iwffff_xenv_t venv;		/* volume envelope */
+} iwffff_xlayer_t;
+
+/*
+ *  Instrument
+ */
+
+typedef struct iwffff_xinstrument {
+	__u32 stype;
+	
+	__u16 exclusion;
+	__u16 layer_type;
+	__u16 exclusion_group;		/* 0 - none, 1-65535 */
+
+	__u8 effect1;			/* effect 1 */
+	__u8 effect1_depth;		/* 0-127 */
+	__u8 effect2;			/* effect 2 */
+	__u8 effect2_depth;		/* 0-127 */
+} iwffff_xinstrument_t;
+
+/*
+ *  ROM support
+ *    InterWave ROMs are Little-Endian (x86)
+ */
+
+#define IWFFFF_ROM_HDR_SIZE	512
+
+typedef struct {
+	__u8 iwave[8];
+	__u8 revision;
+	__u8 series_number;
+	__u8 series_name[16];
+	__u8 date[10];
+	__u16 vendor_revision_major;
+	__u16 vendor_revision_minor;
+	__u32 rom_size;
+	__u8 copyright[128];
+	__u8 vendor_name[64];
+	__u8 description[128];
+} iwffff_rom_header_t;
+
+/*
+ *  Instrument info
+ */
+
+#define IWFFFF_INFO_LFO_VIBRATO		(1<<0)
+#define IWFFFF_INFO_LFO_VIBRATO_SHAPE	(1<<1)
+#define IWFFFF_INFO_LFO_TREMOLO		(1<<2)
+#define IWFFFF_INFO_LFO_TREMOLO_SHAPE	(1<<3)
+
+typedef struct iwffff_info {
+	unsigned int format;		/* supported format bits */
+	unsigned int effects;		/* supported effects (1 << IWFFFF_EFFECT*) */
+	unsigned int lfos;		/* LFO effects */
+	unsigned int max8_len;		/* maximum 8-bit wave length */
+	unsigned int max16_len;		/* maximum 16-bit wave length */
+} iwffff_info_t;
+
+#ifdef __KERNEL__
+
+#include "seq_instr.h"
+
+extern char *snd_seq_iwffff_id;
+
+typedef struct {
+	void *private_data;
+	int (*info)(void *private_data, iwffff_info_t *info);
+	int (*put_sample)(void *private_data, iwffff_wave_t *wave,
+	                  char *data, long len, int atomic);
+	int (*get_sample)(void *private_data, iwffff_wave_t *wave,
+			  char *data, long len, int atomic);
+	int (*remove_sample)(void *private_data, iwffff_wave_t *wave,
+			     int atomic);
+	void (*notify)(void *private_data, snd_seq_kinstr_t *instr, int what);
+	snd_seq_kinstr_ops_t kops;
+} snd_iwffff_ops_t;
+
+int snd_seq_iwffff_init(snd_iwffff_ops_t *ops,
+			void *private_data,
+                        snd_seq_kinstr_ops_t *next);
+
+#endif
+
+#endif /* __SEQ_INSTR_IW_H */
diff -uNr linux-2.4.37.9/include/linux/ainstr_simple.h linux-2.4.37.9-amithlon/include/linux/ainstr_simple.h
--- linux-2.4.37.9/include/linux/ainstr_simple.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/ainstr_simple.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,158 @@
+/*
+ *  Advanced Linux Sound Architecture
+ *
+ *  Simple (MOD player) Instrument Format
+ *  Copyright (c) 1994-99 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __AINSTR_SIMPLE_H
+#define __AINSTR_SIMPLE_H
+
+#ifndef __KERNEL__
+#include <asm/types.h>
+#include <asm/byteorder.h>
+#endif
+
+/*
+ *  share types (share ID 1)
+ */
+
+#define SIMPLE_SHARE_FILE		0
+
+/*
+ *  wave formats
+ */
+
+#define SIMPLE_WAVE_16BIT		0x0001  /* 16-bit wave */
+#define SIMPLE_WAVE_UNSIGNED		0x0002  /* unsigned wave */
+#define SIMPLE_WAVE_INVERT		0x0002  /* same as unsigned wave */
+#define SIMPLE_WAVE_BACKWARD		0x0004  /* backward mode (maybe used for reverb or ping-ping loop) */
+#define SIMPLE_WAVE_LOOP		0x0008  /* loop mode */
+#define SIMPLE_WAVE_BIDIR		0x0010  /* bidirectional mode */
+#define SIMPLE_WAVE_STEREO		0x0100	/* stereo wave */
+#define SIMPLE_WAVE_ULAW		0x0200	/* uLaw compression mode */
+
+/*
+ *  instrument effects
+ */
+
+#define SIMPLE_EFFECT_NONE		0
+#define SIMPLE_EFFECT_REVERB		1
+#define SIMPLE_EFFECT_CHORUS		2
+#define SIMPLE_EFFECT_ECHO		3
+
+/*
+ *  instrument info
+ */
+
+typedef struct simple_instrument_info {
+	unsigned int format;		/* supported format bits */
+	unsigned int effects;		/* supported effects (1 << SIMPLE_EFFECT_*) */
+	unsigned int max8_len;		/* maximum 8-bit wave length */
+	unsigned int max16_len;		/* maximum 16-bit wave length */
+} simple_instrument_info_t;
+
+/*
+ *  Instrument
+ */
+
+typedef struct {
+	unsigned int share_id[4];	/* share id - zero = no sharing */
+	unsigned int format;		/* wave format */
+
+	struct {
+		unsigned int number;	/* some other ID for this instrument */
+		unsigned int memory;	/* begin of waveform in onboard memory */
+		unsigned char *ptr;	/* pointer to waveform in system memory */
+	} address;
+
+	unsigned int size;		/* size of waveform in samples */
+	unsigned int start;		/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_start;	/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned int loop_end;		/* loop end offset in samples * 16 (lowest 4 bits - fraction) */
+	unsigned short loop_repeat;	/* loop repeat - 0 = forever */
+
+	unsigned char effect1;		/* effect 1 */
+	unsigned char effect1_depth;	/* 0-127 */
+	unsigned char effect2;		/* effect 2 */
+	unsigned char effect2_depth;	/* 0-127 */
+} simple_instrument_t;
+
+/*
+ *
+ *    Kernel <-> user space
+ *    Hardware (CPU) independent section
+ *
+ *    * = zero or more
+ *    + = one or more
+ *
+ *    simple_xinstrument	SIMPLE_STRU_INSTR
+ *
+ */
+
+#define SIMPLE_STRU_INSTR	__cpu_to_be32(('I'<<24)|('N'<<16)|('S'<<8)|'T')
+
+/*
+ *  Instrument
+ */
+
+typedef struct simple_xinstrument {
+	__u32 stype;
+
+	__u32 share_id[4];		/* share id - zero = no sharing */
+	__u32 format;			/* wave format */
+
+	__u32 size;			/* size of waveform in samples */
+	__u32 start;			/* start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_start;		/* bits loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u32 loop_end;			/* loop start offset in samples * 16 (lowest 4 bits - fraction) */
+	__u16 loop_repeat;		/* loop repeat - 0 = forever */
+	
+	__u8 effect1;			/* effect 1 */
+	__u8 effect1_depth;		/* 0-127 */
+	__u8 effect2;			/* effect 2 */
+	__u8 effect2_depth;		/* 0-127 */
+} simple_xinstrument_t;
+
+#ifdef __KERNEL__
+
+#include "seq_instr.h"
+
+extern char *snd_seq_simple_id;
+
+typedef struct {
+	void *private_data;
+	int (*info)(void *private_data, simple_instrument_info_t *info);
+	int (*put_sample)(void *private_data, simple_instrument_t *instr,
+	                  char *data, long len, int atomic);
+	int (*get_sample)(void *private_data, simple_instrument_t *instr,
+			  char *data, long len, int atomic);
+	int (*remove_sample)(void *private_data, simple_instrument_t *instr,
+			     int atomic);
+	void (*notify)(void *private_data, snd_seq_kinstr_t *instr, int what);
+	snd_seq_kinstr_ops_t kops;
+} snd_simple_ops_t;
+
+int snd_seq_simple_init(snd_simple_ops_t *ops,
+			void *private_data,
+			snd_seq_kinstr_ops_t *next);
+
+#endif
+
+#endif /* __SEQ_INSTR_SIMPLE_H */
diff -uNr linux-2.4.37.9/include/linux/asequencer.h linux-2.4.37.9-amithlon/include/linux/asequencer.h
--- linux-2.4.37.9/include/linux/asequencer.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/asequencer.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,1017 @@
+/*
+ *  Main header file for the ALSA sequencer
+ *  Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@home.nl>
+ *            (c) 1998-1999 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+#ifndef __ASEQUENCER_H
+#define __ASEQUENCER_H
+
+#ifndef __KERNEL__
+#include <linux/ioctl.h>
+#include <sys/ipc.h>
+#endif
+
+/* version of the sequencer */
+#define SNDRV_SEQ_VERSION SNDRV_PROTOCOL_VERSION (1, 0, 0)
+
+/* support synchronization feature */
+/*#define SNDRV_SEQ_SYNC_SUPPORT	1*/
+
+/*                                   	*/
+/* definition of sequencer event types 	*/
+/*                                   	*/
+
+/* 0-4: system messages
+ * event data type = sndrv_seq_result_t
+ */
+#define SNDRV_SEQ_EVENT_SYSTEM		0
+#define SNDRV_SEQ_EVENT_RESULT		1
+/* 2-4: reserved */
+
+/* 5-9: note messages (channel specific)
+ * event data type = sndrv_seq_ev_note
+ */
+#define SNDRV_SEQ_EVENT_NOTE		5
+#define SNDRV_SEQ_EVENT_NOTEON		6
+#define SNDRV_SEQ_EVENT_NOTEOFF		7
+#define SNDRV_SEQ_EVENT_KEYPRESS	8
+/* 9-10: reserved */
+	
+/* 10-19: control messages (channel specific)
+ * event data type = sndrv_seq_ev_ctrl
+ */
+#define SNDRV_SEQ_EVENT_CONTROLLER	10
+#define SNDRV_SEQ_EVENT_PGMCHANGE	11
+#define SNDRV_SEQ_EVENT_CHANPRESS	12
+#define SNDRV_SEQ_EVENT_PITCHBEND	13	/* from -8192 to 8191 */
+#define SNDRV_SEQ_EVENT_CONTROL14	14	/* 14 bit controller value */
+#define SNDRV_SEQ_EVENT_NONREGPARAM	15	/* 14 bit NRPN */
+#define SNDRV_SEQ_EVENT_REGPARAM	16	/* 14 bit RPN */
+/* 18-19: reserved */
+
+/* 20-29: synchronisation messages
+ * event data type = sndrv_seq_ev_ctrl
+ */
+#define SNDRV_SEQ_EVENT_SONGPOS		20	/* Song Position Pointer with LSB and MSB values */
+#define SNDRV_SEQ_EVENT_SONGSEL		21	/* Song Select with song ID number */
+#define SNDRV_SEQ_EVENT_QFRAME		22	/* midi time code quarter frame */
+#define SNDRV_SEQ_EVENT_TIMESIGN	23	/* SMF Time Signature event */
+#define SNDRV_SEQ_EVENT_KEYSIGN		24	/* SMF Key Signature event */
+/* 25-29: reserved */
+	        
+/* 30-39: timer messages
+ * event data type = sndrv_seq_ev_queue_control_t
+ */
+#define SNDRV_SEQ_EVENT_START		30	/* midi Real Time Start message */
+#define SNDRV_SEQ_EVENT_CONTINUE	31	/* midi Real Time Continue message */
+#define SNDRV_SEQ_EVENT_STOP		32	/* midi Real Time Stop message */	
+#define	SNDRV_SEQ_EVENT_SETPOS_TICK	33	/* set tick queue position */
+#define SNDRV_SEQ_EVENT_SETPOS_TIME	34	/* set realtime queue position */
+#define SNDRV_SEQ_EVENT_TEMPO		35	/* (SMF) Tempo event */
+#define SNDRV_SEQ_EVENT_CLOCK		36	/* midi Real Time Clock message */
+#define SNDRV_SEQ_EVENT_TICK		37	/* midi Real Time Tick message */
+#define SNDRV_SEQ_EVENT_SYNC		38	/* sync signal */
+#define SNDRV_SEQ_EVENT_SYNC_POS	39
+
+/* 40-49: others
+ * event data type = none
+ */
+#define SNDRV_SEQ_EVENT_TUNE_REQUEST	40	/* tune request */
+#define SNDRV_SEQ_EVENT_RESET		41	/* reset to power-on state */
+#define SNDRV_SEQ_EVENT_SENSING		42	/* "active sensing" event */
+/* 43-49: reserved */
+
+/* 50-59: echo back, kernel private messages
+ * event data type = any type
+ */
+#define SNDRV_SEQ_EVENT_ECHO		50	/* echo event */
+#define SNDRV_SEQ_EVENT_OSS		51	/* OSS raw event */
+/* 52-59: reserved */
+
+/* 60-69: system status messages (broadcast for subscribers)
+ * event data type = sndrv_seq_addr_t
+ */
+#define SNDRV_SEQ_EVENT_CLIENT_START	60	/* new client has connected */
+#define SNDRV_SEQ_EVENT_CLIENT_EXIT	61	/* client has left the system */
+#define SNDRV_SEQ_EVENT_CLIENT_CHANGE	62	/* client status/info has changed */
+#define SNDRV_SEQ_EVENT_PORT_START	63	/* new port was created */
+#define SNDRV_SEQ_EVENT_PORT_EXIT	64	/* port was deleted from system */
+#define SNDRV_SEQ_EVENT_PORT_CHANGE	65	/* port status/info has changed */
+#define SNDRV_SEQ_EVENT_PORT_SUBSCRIBED	66	/* read port is subscribed */
+#define SNDRV_SEQ_EVENT_PORT_USED	67	/* write port is subscribed */
+#define SNDRV_SEQ_EVENT_PORT_UNSUBSCRIBED	68	/* read port is released */
+#define SNDRV_SEQ_EVENT_PORT_UNUSED	69	/* write port is released */
+
+/* 70-79: synthesizer events
+ * event data type = sndrv_seq_eve_sample_control_t
+ */
+#define SNDRV_SEQ_EVENT_SAMPLE		70	/* sample select */
+#define SNDRV_SEQ_EVENT_SAMPLE_CLUSTER	71	/* sample cluster select */
+#define SNDRV_SEQ_EVENT_SAMPLE_START	72	/* voice start */
+#define SNDRV_SEQ_EVENT_SAMPLE_STOP	73	/* voice stop */
+#define SNDRV_SEQ_EVENT_SAMPLE_FREQ	74	/* playback frequency */
+#define SNDRV_SEQ_EVENT_SAMPLE_VOLUME	75	/* volume and balance */
+#define SNDRV_SEQ_EVENT_SAMPLE_LOOP	76	/* sample loop */
+#define SNDRV_SEQ_EVENT_SAMPLE_POSITION	77	/* sample position */
+#define SNDRV_SEQ_EVENT_SAMPLE_PRIVATE1	78	/* private (hardware dependent) event */
+
+/* 80-89: reserved */
+
+/* 90-99: user-defined events with fixed length
+ * event data type = any
+ */
+#define SNDRV_SEQ_EVENT_USR0		90
+#define SNDRV_SEQ_EVENT_USR1		91
+#define SNDRV_SEQ_EVENT_USR2		92
+#define SNDRV_SEQ_EVENT_USR3		93
+#define SNDRV_SEQ_EVENT_USR4		94
+#define SNDRV_SEQ_EVENT_USR5		95
+#define SNDRV_SEQ_EVENT_USR6		96
+#define SNDRV_SEQ_EVENT_USR7		97
+#define SNDRV_SEQ_EVENT_USR8		98
+#define SNDRV_SEQ_EVENT_USR9		99
+
+/* 100-129: instrument layer
+ * variable length data can be passed directly to the driver
+ */
+#define SNDRV_SEQ_EVENT_INSTR_BEGIN	100	/* begin of instrument management */
+#define SNDRV_SEQ_EVENT_INSTR_END	101	/* end of instrument management */
+#define SNDRV_SEQ_EVENT_INSTR_INFO	102	/* instrument interface info */
+#define SNDRV_SEQ_EVENT_INSTR_INFO_RESULT 103	/* result */
+#define SNDRV_SEQ_EVENT_INSTR_FINFO	104	/* get format info */
+#define SNDRV_SEQ_EVENT_INSTR_FINFO_RESULT 105	/* get format info */
+#define SNDRV_SEQ_EVENT_INSTR_RESET	106	/* reset instrument memory */
+#define SNDRV_SEQ_EVENT_INSTR_STATUS	107	/* instrument interface status */
+#define SNDRV_SEQ_EVENT_INSTR_STATUS_RESULT 108	/* result */
+#define SNDRV_SEQ_EVENT_INSTR_PUT	109	/* put instrument to port */
+#define SNDRV_SEQ_EVENT_INSTR_GET	110	/* get instrument from port */
+#define SNDRV_SEQ_EVENT_INSTR_GET_RESULT	111	/* result */
+#define SNDRV_SEQ_EVENT_INSTR_FREE	112	/* free instrument(s) */
+#define SNDRV_SEQ_EVENT_INSTR_LIST	113	/* instrument list */
+#define SNDRV_SEQ_EVENT_INSTR_LIST_RESULT 114	/* result */
+#define SNDRV_SEQ_EVENT_INSTR_CLUSTER	115	/* cluster parameters */
+#define SNDRV_SEQ_EVENT_INSTR_CLUSTER_GET	116	/* get cluster parameters */
+#define SNDRV_SEQ_EVENT_INSTR_CLUSTER_RESULT 117	/* result */
+#define SNDRV_SEQ_EVENT_INSTR_CHANGE	118	/* instrument change */
+/* 119-129: reserved */
+
+/* 130-139: variable length events
+ * event data type = sndrv_seq_ev_ext
+ * (SNDRV_SEQ_EVENT_LENGTH_VARIABLE must be set)
+ */
+#define SNDRV_SEQ_EVENT_SYSEX		130	/* system exclusive data (variable length) */
+#define SNDRV_SEQ_EVENT_BOUNCE		131	/* error event */
+/* 132-134: reserved */
+#define SNDRV_SEQ_EVENT_USR_VAR0	135
+#define SNDRV_SEQ_EVENT_USR_VAR1	136
+#define SNDRV_SEQ_EVENT_USR_VAR2	137
+#define SNDRV_SEQ_EVENT_USR_VAR3	138
+#define SNDRV_SEQ_EVENT_USR_VAR4	139
+
+/* 140-149: IPC shared memory events (*NOT SUPPORTED YET*)
+ * event data type = sndrv_seq_ev_ipcshm
+ * (SNDRV_SEQ_EVENT_LENGTH_VARIPC must be set)
+ */
+#define SNDRV_SEQ_EVENT_IPCSHM		140
+/* 141-144: reserved */
+#define SNDRV_SEQ_EVENT_USR_VARIPC0	145
+#define SNDRV_SEQ_EVENT_USR_VARIPC1	146
+#define SNDRV_SEQ_EVENT_USR_VARIPC2	147
+#define SNDRV_SEQ_EVENT_USR_VARIPC3	148
+#define SNDRV_SEQ_EVENT_USR_VARIPC4	149
+
+/* 150-151: kernel events with quote - DO NOT use in user clients */
+#define SNDRV_SEQ_EVENT_KERNEL_ERROR	150
+#define SNDRV_SEQ_EVENT_KERNEL_QUOTE	151
+
+/* 152-191: reserved */
+
+/* 192-254: hardware specific events */
+
+/* 255: special event */
+#define SNDRV_SEQ_EVENT_NONE		255
+
+
+typedef unsigned char sndrv_seq_event_type_t;
+
+	/* event address */
+struct sndrv_seq_addr {
+	unsigned char client;	/* Client number:         0..255, 255 = broadcast to all clients */
+	unsigned char port;	/* Port within client:    0..255, 255 = broadcast to all ports */
+};
+
+#define SNDRV_SEQ_ADDRESS_UNKNOWN	253	/* unknown source */
+#define SNDRV_SEQ_ADDRESS_SUBSCRIBERS	254	/* send event to all subscribed ports */
+#define SNDRV_SEQ_ADDRESS_BROADCAST	255	/* send event to all queues/clients/ports/channels */
+#define SNDRV_SEQ_QUEUE_DIRECT		253	/* direct dispatch */
+
+	/* event mode flag - NOTE: only 8 bits available! */
+#define SNDRV_SEQ_TIME_STAMP_TICK	(0<<0) /* timestamp in clock ticks */
+#define SNDRV_SEQ_TIME_STAMP_REAL	(1<<0) /* timestamp in real time */
+#define SNDRV_SEQ_TIME_STAMP_MASK	(1<<0)
+
+#define SNDRV_SEQ_TIME_MODE_ABS		(0<<1)	/* absolute timestamp */
+#define SNDRV_SEQ_TIME_MODE_REL		(1<<1)	/* relative to current time */
+#define SNDRV_SEQ_TIME_MODE_MASK	(1<<1)
+
+#define SNDRV_SEQ_EVENT_LENGTH_FIXED	(0<<2)	/* fixed event size */
+#define SNDRV_SEQ_EVENT_LENGTH_VARIABLE	(1<<2)	/* variable event size */
+#define SNDRV_SEQ_EVENT_LENGTH_VARUSR	(2<<2)	/* variable event size - user memory space */
+#define SNDRV_SEQ_EVENT_LENGTH_VARIPC	(3<<2)	/* variable event size - IPC */
+#define SNDRV_SEQ_EVENT_LENGTH_MASK	(3<<2)
+
+#define SNDRV_SEQ_PRIORITY_NORMAL	(0<<4)	/* normal priority */
+#define SNDRV_SEQ_PRIORITY_HIGH		(1<<4)	/* event should be processed before others */
+#define SNDRV_SEQ_PRIORITY_MASK		(1<<4)
+
+
+	/* note event */
+struct sndrv_seq_ev_note {
+	unsigned char channel;
+	unsigned char note;
+	unsigned char velocity;
+	unsigned char off_velocity;	/* only for SNDRV_SEQ_EVENT_NOTE */
+	unsigned int duration;		/* only for SNDRV_SEQ_EVENT_NOTE */
+};
+
+	/* controller event */
+struct sndrv_seq_ev_ctrl {
+	unsigned char channel;
+	unsigned char unused1, unused2, unused3;	/* pad */
+	unsigned int param;
+	signed int value;
+};
+
+	/* generic set of bytes (12x8 bit) */
+struct sndrv_seq_ev_raw8 {
+	unsigned char d[12];	/* 8 bit value */
+};
+
+	/* generic set of integers (3x32 bit) */
+struct sndrv_seq_ev_raw32 {
+	unsigned int d[3];	/* 32 bit value */
+};
+
+	/* external stored data */
+struct sndrv_seq_ev_ext {
+	size_t len;		/* length of data */
+	void *ptr;		/* pointer to data (note: maybe 64-bit) */
+};
+
+	/* external stored data - IPC shared memory */
+struct sndrv_seq_ev_ipcshm {
+	size_t len;		/* length of data */
+	key_t ipc;		/* IPC key */
+};
+
+/* Instrument cluster type */
+typedef unsigned int sndrv_seq_instr_cluster_t;
+
+/* Instrument type */
+struct sndrv_seq_instr {
+	sndrv_seq_instr_cluster_t cluster;
+	unsigned int std;		/* the upper byte means a private instrument (owner - client #) */
+	unsigned short bank;
+	unsigned short prg;
+};
+
+	/* sample number */
+struct sndrv_seq_ev_sample {
+	unsigned int std;
+	unsigned short bank;
+	unsigned short prg;
+};
+
+	/* sample cluster */
+struct sndrv_seq_ev_cluster {
+	sndrv_seq_instr_cluster_t cluster;
+};
+
+	/* sample position */
+typedef unsigned int sndrv_seq_position_t; /* playback position (in samples) * 16 */
+
+	/* sample stop mode */
+enum sndrv_seq_stop_mode {
+	SAMPLE_STOP_IMMEDIATELY = 0,	/* terminate playing immediately */
+	SAMPLE_STOP_VENVELOPE = 1,	/* finish volume envelope */
+	SAMPLE_STOP_LOOP = 2		/* terminate loop and finish wave */
+};
+
+	/* sample frequency */
+typedef int sndrv_seq_frequency_t; /* playback frequency in HZ * 16 */
+
+	/* sample volume control; if any value is set to -1 == do not change */
+struct sndrv_seq_ev_volume {
+	signed short volume;	/* range: 0-16383 */
+	signed short lr;	/* left-right balance; range: 0-16383 */
+	signed short fr;	/* front-rear balance; range: 0-16383 */
+	signed short du;	/* down-up balance; range: 0-16383 */
+};
+
+	/* simple loop redefinition */
+struct sndrv_seq_ev_loop {
+	unsigned int start;	/* loop start (in samples) * 16 */
+	unsigned int end;	/* loop end (in samples) * 16 */
+};
+
+struct sndrv_seq_ev_sample_control {
+	unsigned char channel;
+	unsigned char unused1, unused2, unused3;	/* pad */
+	union {
+		struct sndrv_seq_ev_sample sample;
+		struct sndrv_seq_ev_cluster cluster;
+		sndrv_seq_position_t position;
+		enum sndrv_seq_stop_mode stop_mode;
+		sndrv_seq_frequency_t frequency;
+		struct sndrv_seq_ev_volume volume;
+		struct sndrv_seq_ev_loop loop;
+		unsigned char raw8[8];
+	} param;
+};
+
+
+
+/* INSTR_BEGIN event */
+struct sndrv_seq_ev_instr_begin {
+	int timeout;		/* zero = forever, otherwise timeout in ms */
+};
+
+struct sndrv_seq_result {
+	int event;		/* processed event type */
+	int result;
+};
+
+
+struct sndrv_seq_real_time {
+	unsigned int tv_sec;		/* seconds */
+	unsigned int tv_nsec;	/* nanoseconds */
+};
+
+typedef unsigned int sndrv_seq_tick_time_t;	/* midi ticks */
+
+union sndrv_seq_timestamp {
+	sndrv_seq_tick_time_t tick;
+	struct sndrv_seq_real_time time;
+};
+
+	/* queue timer control */
+struct sndrv_seq_ev_queue_control {
+	unsigned char queue;			/* affected queue */
+	unsigned char sync_format;		/* opt: sync format */
+	unsigned char sync_time_format;		/* opt: time format */
+	unsigned char pad[1];			/* reserved */
+	union {
+		signed int value;		/* affected value (e.g. tempo) */
+		union sndrv_seq_timestamp time;	/* time */
+		unsigned int position;		/* sync position */
+		unsigned int d32[2];
+		unsigned char d8[8];
+	} param;
+};
+
+	/* quoted event - inside the kernel only */
+struct sndrv_seq_ev_quote {
+	struct sndrv_seq_addr origin;		/* original sender */
+	unsigned short value;		/* optional data */
+	struct sndrv_seq_event *event;		/* quoted event */
+};
+
+
+	/* sequencer event */
+struct sndrv_seq_event {
+	sndrv_seq_event_type_t type;	/* event type */
+	unsigned char flags;		/* event flags */
+	char tag;
+	
+	unsigned char queue;		/* schedule queue */
+	union sndrv_seq_timestamp time;	/* schedule time */
+
+
+	struct sndrv_seq_addr source;		/* source address */
+	struct sndrv_seq_addr dest;		/* destination address */
+
+	union {				/* event data... */
+		struct sndrv_seq_ev_note note;
+		struct sndrv_seq_ev_ctrl control;
+		struct sndrv_seq_ev_raw8 raw8;
+		struct sndrv_seq_ev_raw32 raw32;
+		struct sndrv_seq_ev_ext ext;
+		struct sndrv_seq_ev_ipcshm ipcshm;
+		struct sndrv_seq_ev_queue_control queue;
+		union sndrv_seq_timestamp time;
+		struct sndrv_seq_addr addr;
+		struct sndrv_seq_result result;
+		struct sndrv_seq_ev_instr_begin instr_begin;
+		struct sndrv_seq_ev_sample_control sample;
+		struct sndrv_seq_ev_quote quote;
+	} data;
+};
+
+
+/*
+ * bounce event - stored as variable size data
+ */
+struct sndrv_seq_event_bounce {
+	int err;
+	struct sndrv_seq_event event;
+	/* external data follows here. */
+};
+
+#define sndrv_seq_event_bounce_ext_data(ev) ((void*)((char *)(ev)->data.ext.ptr + sizeof(sndrv_seq_event_bounce_t)))
+
+/*
+ * type check macros
+ */
+/* result events: 0-4 */
+#define sndrv_seq_ev_is_result_type(ev)	((ev)->type < 5)
+/* channel specific events: 5-19 */
+#define sndrv_seq_ev_is_channel_type(ev)	((ev)->type >= 5 && (ev)->type < 20)
+/* note events: 5-9 */
+#define sndrv_seq_ev_is_note_type(ev)	((ev)->type >= 5 && (ev)->type < 10)
+/* control events: 10-19 */
+#define sndrv_seq_ev_is_control_type(ev)	((ev)->type >= 10 && (ev)->type < 20)
+/* queue control events: 30-39 */
+#define sndrv_seq_ev_is_queue_type(ev)	((ev)->type >= 30 && (ev)->type < 40)
+/* system status messages */
+#define sndrv_seq_ev_is_message_type(ev)	((ev)->type >= 60 && (ev)->type < 69)
+/* sample messages */
+#define sndrv_seq_ev_is_sample_type(ev)	((ev)->type >= 70 && (ev)->type < 79)
+/* user-defined messages */
+#define sndrv_seq_ev_is_user_type(ev)	((ev)->type >= 90 && (ev)->type < 99)
+/* fixed length events: 0-99 */
+#define sndrv_seq_ev_is_fixed_type(ev)	((ev)->type < 100)
+/* instrument layer events: 100-129 */
+#define sndrv_seq_ev_is_instr_type(ev)	((ev)->type >= 100 && (ev)->type < 130)
+/* variable length events: 130-139 */
+#define sndrv_seq_ev_is_variable_type(ev)	((ev)->type >= 130 && (ev)->type < 140)
+/* ipc shmem events: 140-149 */
+#define sndrv_seq_ev_is_varipc_type(ev)	((ev)->type >= 140 && (ev)->type < 150)
+/* reserved for kernel */
+#define sndrv_seq_ev_is_reserved(ev)	((ev)->type >= 150)
+
+/* direct dispatched events */
+#define sndrv_seq_ev_is_direct(ev)	((ev)->queue == SNDRV_SEQ_QUEUE_DIRECT)
+
+/*
+ * macros to check event flags
+ */
+/* prior events */
+#define sndrv_seq_ev_is_prior(ev)		(((ev)->flags & SNDRV_SEQ_PRIORITY_MASK) == SNDRV_SEQ_PRIORITY_HIGH)
+
+/* event length type */
+#define sndrv_seq_ev_length_type(ev)	((ev)->flags & SNDRV_SEQ_EVENT_LENGTH_MASK)
+#define sndrv_seq_ev_is_fixed(ev)		(sndrv_seq_ev_length_type(ev) == SNDRV_SEQ_EVENT_LENGTH_FIXED)
+#define sndrv_seq_ev_is_variable(ev)	(sndrv_seq_ev_length_type(ev) == SNDRV_SEQ_EVENT_LENGTH_VARIABLE)
+#define sndrv_seq_ev_is_varusr(ev)	(sndrv_seq_ev_length_type(ev) == SNDRV_SEQ_EVENT_LENGTH_VARUSR)
+#define sndrv_seq_ev_is_varipc(ev)	(sndrv_seq_ev_length_type(ev) == SNDRV_SEQ_EVENT_LENGTH_VARIPC)
+
+/* time-stamp type */
+#define sndrv_seq_ev_timestamp_type(ev)	((ev)->flags & SNDRV_SEQ_TIME_STAMP_MASK)
+#define sndrv_seq_ev_is_tick(ev)		(sndrv_seq_ev_timestamp_type(ev) == SNDRV_SEQ_TIME_STAMP_TICK)
+#define sndrv_seq_ev_is_real(ev)		(sndrv_seq_ev_timestamp_type(ev) == SNDRV_SEQ_TIME_STAMP_REAL)
+
+/* time-mode type */
+#define sndrv_seq_ev_timemode_type(ev)	((ev)->flags & SNDRV_SEQ_TIME_MODE_MASK)
+#define sndrv_seq_ev_is_abstime(ev)	(sndrv_seq_ev_timemode_type(ev) == SNDRV_SEQ_TIME_MODE_ABS)
+#define sndrv_seq_ev_is_reltime(ev)	(sndrv_seq_ev_timemode_type(ev) == SNDRV_SEQ_TIME_MODE_REL)
+
+/* queue sync port */
+#define sndrv_seq_queue_sync_port(q)	((q) + 16)
+
+	/* system information */
+struct sndrv_seq_system_info {
+	int queues;			/* maximum queues count */
+	int clients;			/* maximum clients count */
+	int ports;			/* maximum ports per client */
+	int channels;			/* maximum channels per port */
+	char reserved[32];
+};
+
+
+	/* known client numbers */
+#define SNDRV_SEQ_CLIENT_SYSTEM		0
+#define SNDRV_SEQ_CLIENT_DUMMY		62	/* dummy ports */
+#define SNDRV_SEQ_CLIENT_OSS		63	/* oss sequencer emulator */
+
+
+	/* client types */
+enum sndrv_seq_client_type {
+	NO_CLIENT       = 0,
+	USER_CLIENT     = 1,
+	KERNEL_CLIENT   = 2
+};
+                        
+	/* event filter flags */
+#define SNDRV_SEQ_FILTER_BROADCAST	(1<<0)	/* accept broadcast messages */
+#define SNDRV_SEQ_FILTER_MULTICAST	(1<<1)	/* accept multicast messages */
+#define SNDRV_SEQ_FILTER_BOUNCE		(1<<2)	/* accept bounce event in error */
+#define SNDRV_SEQ_FILTER_USE_EVENT	(1<<31)	/* use event filter */
+
+struct sndrv_seq_client_info {
+	int client;			/* client number to inquire */
+	enum sndrv_seq_client_type type;	/* client type */
+	char name[64];			/* client name */
+	unsigned int filter;		/* filter flags */
+	unsigned char multicast_filter[8]; /* multicast filter bitmap */
+	unsigned char event_filter[32];	/* event filter bitmap */
+	char group[32];			/* group name */
+	int num_ports;			/* RO: number of ports */
+	int event_lost;			/* number of lost events */
+	char reserved[64];		/* for future use */
+};
+
+
+/* client pool size */
+struct sndrv_seq_client_pool {
+	int client;			/* client number to inquire */
+	int output_pool;		/* outgoing (write) pool size */
+	int input_pool;			/* incoming (read) pool size */
+	int output_room;		/* minimum free pool size for select/blocking mode */
+	int output_free;		/* unused size */
+	int input_free;			/* unused size */
+	char reserved[64];
+};
+
+
+/* Remove events by specified criteria */
+struct sndrv_seq_remove_events {
+	int tick:1; 		/* True when time is in ticks */
+	int input:1; 		/* Flush input queues */
+	int output:1; 		/* Flush output queues */
+
+	int  remove_mode;	/* Flags that determine what gets removed */
+
+	union sndrv_seq_timestamp time;
+
+	unsigned char queue;	/* Queue for REMOVE_DEST */
+	struct sndrv_seq_addr dest;	/* Address for REMOVE_DEST */
+	unsigned char channel;	/* Channel for REMOVE_DEST */
+
+	int  type;	/* For REMOVE_EVENT_TYPE */
+	char  tag;	/* Tag for REMOVE_TAG */
+
+	int  reserved[10];	/* To allow for future binary compatibility */
+
+};
+
+/* Flush mode flags */
+#define SNDRV_SEQ_REMOVE_DEST		(1<<0)	/* Restrict by destination q:client:port */
+#define SNDRV_SEQ_REMOVE_DEST_CHANNEL	(1<<1)	/* Restrict by channel */
+#define SNDRV_SEQ_REMOVE_TIME_BEFORE	(1<<2)	/* Restrict to before time */
+#define SNDRV_SEQ_REMOVE_TIME_AFTER	(1<<3)	/* Restrict to time or after */
+#define SNDRV_SEQ_REMOVE_EVENT_TYPE	(1<<4)	/* Restrict to event type */
+#define SNDRV_SEQ_REMOVE_IGNORE_OFF 	(1<<5)	/* Do not flush off events */
+#define SNDRV_SEQ_REMOVE_TAG_MATCH 	(1<<6)	/* Restrict to events with given tag */
+
+
+	/* known port numbers */
+#define SNDRV_SEQ_PORT_SYSTEM_TIMER	0
+#define SNDRV_SEQ_PORT_SYSTEM_ANNOUNCE	1
+
+	/* port capabilities (32 bits) */
+#define SNDRV_SEQ_PORT_CAP_READ		(1<<0)	/* readable from this port */
+#define SNDRV_SEQ_PORT_CAP_WRITE	(1<<1)	/* writable to this port */
+
+#define SNDRV_SEQ_PORT_CAP_SYNC_READ	(1<<2)
+#define SNDRV_SEQ_PORT_CAP_SYNC_WRITE	(1<<3)
+
+#define SNDRV_SEQ_PORT_CAP_DUPLEX	(1<<4)
+
+#define SNDRV_SEQ_PORT_CAP_SUBS_READ	(1<<5)	/* allow read subscription */
+#define SNDRV_SEQ_PORT_CAP_SUBS_WRITE	(1<<6)	/* allow write subscription */
+#define SNDRV_SEQ_PORT_CAP_NO_EXPORT	(1<<7)	/* routing not allowed */
+
+	/* port type */
+#define SNDRV_SEQ_PORT_TYPE_SPECIFIC	(1<<0)	/* hardware specific */
+#define SNDRV_SEQ_PORT_TYPE_MIDI_GENERIC (1<<1)	/* generic MIDI device */
+#define SNDRV_SEQ_PORT_TYPE_MIDI_GM	(1<<2)	/* General MIDI compatible device */
+#define SNDRV_SEQ_PORT_TYPE_MIDI_GS	(1<<3)	/* GS compatible device */
+#define SNDRV_SEQ_PORT_TYPE_MIDI_XG	(1<<4)	/* XG compatible device */
+#define SNDRV_SEQ_PORT_TYPE_MIDI_MT32	(1<<5)	/* MT-32 compatible device */
+
+/* other standards...*/
+#define SNDRV_SEQ_PORT_TYPE_SYNTH	(1<<10)	/* Synth device */
+#define SNDRV_SEQ_PORT_TYPE_DIRECT_SAMPLE (1<<11)	/* Sampling device (support sample download) */
+#define SNDRV_SEQ_PORT_TYPE_SAMPLE	(1<<12)	/* Sampling device (sample can be downloaded at any time) */
+/*...*/
+#define SNDRV_SEQ_PORT_TYPE_APPLICATION	(1<<20)	/* application (sequencer/editor) */
+
+/* standard group names */
+#define SNDRV_SEQ_GROUP_SYSTEM		"system"
+#define SNDRV_SEQ_GROUP_DEVICE		"device"
+#define SNDRV_SEQ_GROUP_APPLICATION	"application"
+
+/* misc. conditioning flags */
+#define SNDRV_SEQ_PORT_FLG_GIVEN_PORT	(1<<0)
+
+struct sndrv_seq_port_info {
+	int client;			/* client number */
+	int port;			/* port number */
+	char name[64];			/* port name */
+	char group[32];			/* group name (copied from client) */
+
+	unsigned int capability;	/* port capability bits */
+	unsigned int cap_group;		/* permission to group */
+	unsigned int type;		/* port type bits */
+	int midi_channels;		/* channels per MIDI port */
+	int midi_voices;		/* voices per MIDI port */
+	int synth_voices;		/* voices per SYNTH port */
+
+	int read_use;			/* R/O: subscribers for output (from this port) */
+	int write_use;			/* R/O: subscribers for input (to this port) */
+
+	void *kernel;			/* reserved for kernel use (must be NULL) */
+
+	unsigned int flags;		/* misc. conditioning */
+	char reserved[60];		/* for future use */
+};
+
+
+/* queue flags */
+#define SNDRV_SEQ_QUEUE_FLG_SYNC	(1<<0)	/* sync enabled */
+
+/* queue information */
+struct sndrv_seq_queue_info {
+	int queue;		/* queue id */
+
+	/*
+	 *  security settings, only owner of this queue can start/stop timer
+	 *  etc. if the queue is locked for other clients
+	 */
+	int owner;		/* client id for owner of the queue */
+	int locked:1;		/* timing queue locked for other queues */
+	char name[64];		/* name of this queue */
+	unsigned int flags;	/* flags */
+	char reserved[60];	/* for future use */
+
+};
+
+/* alias */
+#define sndrv_seq_queue_owner sndrv_seq_queue_info
+
+/*
+ * time frame
+ */
+struct sndrv_seq_time_frame {
+	unsigned char hour;
+	unsigned char min;
+	unsigned char sec;
+	unsigned char frame;
+	unsigned char subframe;
+};
+
+/* queue status flag */
+#define SNDRV_SEQ_QUEUE_FLG_SYNC_LOST	1
+
+/* synchronization types */
+/* mode */
+#define SNDRV_SEQ_SYNC_TICK		0x80
+#define SNDRV_SEQ_SYNC_TIME		0x40
+#define SNDRV_SEQ_SYNC_MODE		0xc0		/* mask */
+/* private format */
+#define SNDRV_SEQ_SYNC_FMT_PRIVATE_CLOCK (SNDRV_SEQ_SYNC_TICK|0)
+#define SNDRV_SEQ_SYNC_FMT_PRIVATE_TIME	(SNDRV_SEQ_SYNC_TIME|0)
+/* pre-defined format */
+#define SNDRV_SEQ_SYNC_FMT_MIDI_CLOCK	(SNDRV_SEQ_SYNC_TICK|1)
+#define SNDRV_SEQ_SYNC_FMT_MTC		(SNDRV_SEQ_SYNC_TIME|1)
+#define SNDRV_SEQ_SYNC_FMT_DTL		(SNDRV_SEQ_SYNC_TIME|2)
+#define SNDRV_SEQ_SYNC_FMT_SMPTE	(SNDRV_SEQ_SYNC_TIME|3)
+#define SNDRV_SEQ_SYNC_FMT_MIDI_TICK	(SNDRV_SEQ_SYNC_TIME|4)
+/* time format */
+#define SNDRV_SEQ_SYNC_FPS_24		0
+#define SNDRV_SEQ_SYNC_FPS_25		1
+#define SNDRV_SEQ_SYNC_FPS_30_DP	2
+#define SNDRV_SEQ_SYNC_FPS_30_NDP	3
+
+/* MIDI clock sync */
+struct sndrv_seq_queue_tick_sync {
+	unsigned int ppq;		/* ticks per quarter-note */
+	unsigned int ticks;		/* ticks per clock */
+	/* slave stuffs */
+	int max_tick_diff, max_tick_diff2;
+	int x0, x1;
+};
+
+/* SMPTE/MTC (real-time) sync */
+struct sndrv_seq_queue_time_sync {
+	unsigned int resolution;	/* frame resolution in nsec */
+	unsigned int subframes;		/* # of subframes */
+	/* slave stuffs */
+	int max_time_diff, phase_correct_time;
+	int x0, x1;
+};
+
+struct sndrv_seq_queue_sync {
+	unsigned char format;		/* sync format */
+	unsigned char time_format;	/* SMPTE time format */
+	unsigned char info[6];		/* format dependent info */
+	union {
+		struct sndrv_seq_queue_tick_sync tick;
+		struct sndrv_seq_queue_time_sync time;
+	} param;
+};
+
+
+/* queue info/status */
+struct sndrv_seq_queue_status {
+	int queue;			/* queue id */
+	int events;			/* read-only - queue size */
+	sndrv_seq_tick_time_t tick;	/* current tick */
+	struct sndrv_seq_real_time time; /* current time */
+	int running;			/* running state of queue */
+	int flags;			/* various flags */
+	char reserved[64];		/* for the future */
+};
+
+
+/* queue tempo */
+struct sndrv_seq_queue_tempo {
+	int queue;			/* sequencer queue */
+	unsigned int tempo;		/* current tempo, us/tick */
+	int ppq;			/* time resolution, ticks/quarter */
+	char reserved[32];		/* for the future */
+};
+
+
+/* sequencer timer sources */
+#define SNDRV_SEQ_TIMER_ALSA		0	/* ALSA timer */
+#define SNDRV_SEQ_TIMER_MIDI_CLOCK	1	/* Midi Clock (CLOCK event) */
+#define SNDRV_SEQ_TIMER_MIDI_TICK	2	/* Midi Timer Tick (TICK event) */
+
+/* queue timer info */
+struct sndrv_seq_queue_timer {
+	int queue;			/* sequencer queue */
+	int type;			/* source timer type */
+	union {
+		struct {
+			struct sndrv_timer_id id;	/* ALSA's timer ID */
+			unsigned int resolution;	/* resolution in Hz */
+		} alsa;
+	} u;
+	char reserved[64];		/* for the future use */
+};
+
+
+struct sndrv_seq_queue_client {
+	int queue;		/* sequencer queue */
+	int client;		/* sequencer client */
+	int used;		/* queue is used with this client
+				   (must be set for accepting events) */
+	/* per client watermarks */
+	char reserved[64];	/* for future use */
+};
+
+
+struct sndrv_seq_port_subscribe {
+	struct sndrv_seq_addr sender;	/* sender address */
+	struct sndrv_seq_addr dest;	/* destination address */
+	unsigned char queue;		/* input time-stamp queue (optional) */
+	unsigned int exclusive: 1,	/* exclusive mode */
+	    realtime: 1,		/* realtime timestamp */
+	    convert_time: 1;		/* convert timestamp */
+	unsigned int sync: 1;		/* sync */
+	int midi_channels;		/* midi channels setup, zero = do not care */
+	int midi_voices;		/* midi voices setup, zero = do not care */
+	int synth_voices;		/* synth voices setup, zero = do not care */
+	union {
+		char reserved[32];
+		struct sndrv_seq_queue_sync sync_info;
+	} opt;
+};
+
+/* type of query subscription */
+#define SNDRV_SEQ_QUERY_SUBS_READ		0
+#define SNDRV_SEQ_QUERY_SUBS_WRITE	1
+
+struct sndrv_seq_query_subs {
+	int client;
+	int port;
+	int type;		/* READ or WRITE */
+	int index;		/* 0..N-1 */
+	int num_subs;		/* R/O: number of subscriptions on this port */
+	struct sndrv_seq_addr addr;	/* R/O: result */
+	unsigned char queue;	/* R/O: result */
+	int exclusive: 1;	/* R/O: result */
+	int realtime: 1;	/* R/O: result */
+	int convert_time: 1;	/* R/O: result */
+	char reserved[64];	/* for future use */
+};
+
+
+/*
+ *  Instrument abstraction layer
+ *     - based on events
+ */
+
+/* instrument types */
+#define SNDRV_SEQ_INSTR_ATYPE_DATA	0	/* instrument data */
+#define SNDRV_SEQ_INSTR_ATYPE_ALIAS	1	/* instrument alias */
+
+/* instrument ASCII identifiers */
+#define SNDRV_SEQ_INSTR_ID_DLS1		"DLS1"
+#define SNDRV_SEQ_INSTR_ID_DLS2		"DLS2"
+#define SNDRV_SEQ_INSTR_ID_SIMPLE	"Simple Wave"
+#define SNDRV_SEQ_INSTR_ID_SOUNDFONT	"SoundFont"
+#define SNDRV_SEQ_INSTR_ID_GUS_PATCH	"GUS Patch"
+#define SNDRV_SEQ_INSTR_ID_INTERWAVE	"InterWave FFFF"
+#define SNDRV_SEQ_INSTR_ID_OPL2_3	"OPL2/3 FM"
+#define SNDRV_SEQ_INSTR_ID_OPL4		"OPL4"
+
+/* instrument types */
+#define SNDRV_SEQ_INSTR_TYPE0_DLS1	(1<<0)	/* MIDI DLS v1 */
+#define SNDRV_SEQ_INSTR_TYPE0_DLS2	(1<<1)	/* MIDI DLS v2 */
+#define SNDRV_SEQ_INSTR_TYPE1_SIMPLE	(1<<0)	/* Simple Wave */
+#define SNDRV_SEQ_INSTR_TYPE1_SOUNDFONT	(1<<1)	/* EMU SoundFont */
+#define SNDRV_SEQ_INSTR_TYPE1_GUS_PATCH	(1<<2)	/* Gravis UltraSound Patch */
+#define SNDRV_SEQ_INSTR_TYPE1_INTERWAVE	(1<<3)	/* InterWave FFFF */
+#define SNDRV_SEQ_INSTR_TYPE2_OPL2_3	(1<<0)	/* Yamaha OPL2/3 FM */
+#define SNDRV_SEQ_INSTR_TYPE2_OPL4	(1<<1)	/* Yamaha OPL4 */
+
+/* put commands */
+#define SNDRV_SEQ_INSTR_PUT_CMD_CREATE	0
+#define SNDRV_SEQ_INSTR_PUT_CMD_REPLACE	1
+#define SNDRV_SEQ_INSTR_PUT_CMD_MODIFY	2
+#define SNDRV_SEQ_INSTR_PUT_CMD_ADD	3
+#define SNDRV_SEQ_INSTR_PUT_CMD_REMOVE	4
+
+/* get commands */
+#define SNDRV_SEQ_INSTR_GET_CMD_FULL	0
+#define SNDRV_SEQ_INSTR_GET_CMD_PARTIAL	1
+
+/* query flags */
+#define SNDRV_SEQ_INSTR_QUERY_FOLLOW_ALIAS (1<<0)
+
+/* free commands */
+#define SNDRV_SEQ_INSTR_FREE_CMD_ALL		0
+#define SNDRV_SEQ_INSTR_FREE_CMD_PRIVATE	1
+#define SNDRV_SEQ_INSTR_FREE_CMD_CLUSTER	2
+#define SNDRV_SEQ_INSTR_FREE_CMD_SINGLE		3
+
+/* size of ROM/RAM */
+typedef unsigned int sndrv_seq_instr_size_t;
+
+/* INSTR_INFO */
+
+struct sndrv_seq_instr_info {
+	int result;			/* operation result */
+	unsigned int formats[8];	/* bitmap of supported formats */
+	int ram_count;			/* count of RAM banks */
+	sndrv_seq_instr_size_t ram_sizes[16];	/* size of RAM banks */
+	int rom_count;			/* count of ROM banks */
+	sndrv_seq_instr_size_t rom_sizes[8];	/* size of ROM banks */
+	char reserved[128];
+};
+
+/* INSTR_STATUS */
+
+struct sndrv_seq_instr_status {
+	int result;			/* operation result */
+	sndrv_seq_instr_size_t free_ram[16];	/* free RAM in banks */
+	int instrument_count;		/* count of downloaded instruments */
+	char reserved[128];
+};
+
+/* INSTR_FORMAT_INFO */
+
+struct sndrv_seq_instr_format_info {
+	char format[16];		/* format identifier - SNDRV_SEQ_INSTR_ID_* */	
+	unsigned int len;		/* max data length (without this structure) */
+};
+
+struct sndrv_seq_instr_format_info_result {
+	int result;			/* operation result */
+	char format[16];		/* format identifier */
+	unsigned int len;		/* filled data length (without this structure) */
+};
+
+/* instrument data */
+struct sndrv_seq_instr_data {
+	char name[32];			/* instrument name */
+	char reserved[16];		/* for the future use */
+	int type;			/* instrument type */
+	union {
+		char format[16];	/* format identifier */
+		struct sndrv_seq_instr alias;
+	} data;
+};
+
+/* INSTR_PUT, data are stored in one block (extended or IPC), header + data */
+
+struct sndrv_seq_instr_put {
+	struct sndrv_seq_instr id;	/* instrument identifier */
+	unsigned int cmd;		/* put command */
+	char reserved[16];		/* for the future */
+	unsigned int len;		/* real instrument data length (without header) */
+	struct sndrv_seq_instr_data data;	/* instrument data */
+};
+
+/* INSTR_GET, data are stored in one block (extended or IPC), header + data */
+
+struct sndrv_seq_instr_get {
+	struct sndrv_seq_instr id;	/* instrument identifier */
+	unsigned int flags;		/* query flags */
+	unsigned int cmd;		/* query command */
+	char reserved[16];		/* reserved for the future use */
+	unsigned int len;		/* real instrument data length (without header) */
+};
+
+struct sndrv_seq_instr_get_result {
+	int result;			/* operation result */
+	struct sndrv_seq_instr id;	/* requested instrument identifier */
+	char reserved[16];		/* reserved for the future use */
+	unsigned int len;		/* real instrument data length (without header) */
+	struct sndrv_seq_instr_data data;	/* instrument data */
+};
+
+/* INSTR_FREE */
+
+struct sndrv_seq_instr_free {
+	char reserved[16];		/* for the future use */
+	unsigned int cmd;               /* SNDRV_SEQ_INSTR_FREE_CMD_* */
+	union {
+		struct sndrv_seq_instr instr;
+		sndrv_seq_instr_cluster_t cluster;
+		char data8[16];
+	} data;
+};
+
+/* INSTR_CLUSTER_SET */
+
+struct sndrv_seq_instr_cluster_set {
+	sndrv_seq_instr_cluster_t cluster; /* cluster identifier */
+	char name[32];			/* cluster name */
+	int priority;			/* cluster priority */
+	char reserved[64];		/* for the future use */
+};
+
+/* INSTR_CLUSTER_GET */
+
+struct sndrv_seq_instr_cluster_get {
+	sndrv_seq_instr_cluster_t cluster; /* cluster identifier */
+	char name[32];			/* cluster name */
+	int priority;			/* cluster priority */
+	char reserved[64];		/* for the future use */
+};
+
+/*
+ *  IOCTL commands
+ */
+
+#define SNDRV_SEQ_IOCTL_PVERSION	_IOR ('S', 0x00, int)
+#define SNDRV_SEQ_IOCTL_CLIENT_ID	_IOR ('S', 0x01, int)
+#define SNDRV_SEQ_IOCTL_SYSTEM_INFO	_IOWR('S', 0x02, struct sndrv_seq_system_info)
+
+#define SNDRV_SEQ_IOCTL_GET_CLIENT_INFO	_IOWR('S', 0x10, struct sndrv_seq_client_info)
+#define SNDRV_SEQ_IOCTL_SET_CLIENT_INFO	_IOW ('S', 0x11, struct sndrv_seq_client_info)
+
+#define SNDRV_SEQ_IOCTL_CREATE_PORT	_IOWR('S', 0x20, struct sndrv_seq_port_info)
+#define SNDRV_SEQ_IOCTL_DELETE_PORT	_IOW ('S', 0x21, struct sndrv_seq_port_info)
+#define SNDRV_SEQ_IOCTL_GET_PORT_INFO	_IOWR('S', 0x22, struct sndrv_seq_port_info)
+#define SNDRV_SEQ_IOCTL_SET_PORT_INFO	_IOW ('S', 0x23, struct sndrv_seq_port_info)
+
+#define SNDRV_SEQ_IOCTL_SUBSCRIBE_PORT	_IOW ('S', 0x30, struct sndrv_seq_port_subscribe)
+#define SNDRV_SEQ_IOCTL_UNSUBSCRIBE_PORT	_IOW ('S', 0x31, struct sndrv_seq_port_subscribe)
+
+#define SNDRV_SEQ_IOCTL_CREATE_QUEUE	_IOWR('S', 0x32, struct sndrv_seq_queue_info)
+#define SNDRV_SEQ_IOCTL_DELETE_QUEUE	_IOW ('S', 0x33, struct sndrv_seq_queue_info)
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_INFO	_IOWR('S', 0x34, struct sndrv_seq_queue_info)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_INFO	_IOWR('S', 0x35, struct sndrv_seq_queue_info)
+#define SNDRV_SEQ_IOCTL_GET_NAMED_QUEUE	_IOWR('S', 0x36, struct sndrv_seq_queue_info)
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_STATUS	_IOWR('S', 0x40, struct sndrv_seq_queue_status)
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_TEMPO	_IOWR('S', 0x41, struct sndrv_seq_queue_tempo)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_TEMPO	_IOW ('S', 0x42, struct sndrv_seq_queue_tempo)
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_OWNER	_IOWR('S', 0x43, struct sndrv_seq_queue_owner)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_OWNER	_IOW ('S', 0x44, struct sndrv_seq_queue_owner)
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_TIMER	_IOWR('S', 0x45, struct sndrv_seq_queue_timer)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_TIMER	_IOW ('S', 0x46, struct sndrv_seq_queue_timer)
+/* XXX
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_SYNC	_IOWR('S', 0x53, struct sndrv_seq_queue_sync)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_SYNC	_IOW ('S', 0x54, struct sndrv_seq_queue_sync)
+*/
+#define SNDRV_SEQ_IOCTL_GET_QUEUE_CLIENT	_IOWR('S', 0x49, struct sndrv_seq_queue_client)
+#define SNDRV_SEQ_IOCTL_SET_QUEUE_CLIENT	_IOW ('S', 0x4a, struct sndrv_seq_queue_client)
+#define SNDRV_SEQ_IOCTL_GET_CLIENT_POOL	_IOWR('S', 0x4b, struct sndrv_seq_client_pool)
+#define SNDRV_SEQ_IOCTL_SET_CLIENT_POOL	_IOW ('S', 0x4c, struct sndrv_seq_client_pool)
+#define SNDRV_SEQ_IOCTL_REMOVE_EVENTS	_IOW ('S', 0x4e, struct sndrv_seq_remove_events)
+#define SNDRV_SEQ_IOCTL_QUERY_SUBS	_IOWR('S', 0x4f, struct sndrv_seq_query_subs)
+#define SNDRV_SEQ_IOCTL_GET_SUBSCRIPTION	_IOWR('S', 0x50, struct sndrv_seq_port_subscribe)
+#define SNDRV_SEQ_IOCTL_QUERY_NEXT_CLIENT	_IOWR('S', 0x51, struct sndrv_seq_client_info)
+#define SNDRV_SEQ_IOCTL_QUERY_NEXT_PORT	_IOWR('S', 0x52, struct sndrv_seq_port_info)
+
+#endif /* __ASEQUENCER_H */
diff -uNr linux-2.4.37.9/include/linux/asoundef.h linux-2.4.37.9-amithlon/include/linux/asoundef.h
--- linux-2.4.37.9/include/linux/asoundef.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/asoundef.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,227 @@
+/*
+ *  Advanced Linux Sound Architecture - ALSA - Driver
+ *  Copyright (c) 1994-2000 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __ASOUNDEF_H
+#define __ASOUNDEF_H
+
+/****************************************************************************
+ *                                                                          *
+ *        Digital audio interface					    *
+ *                                                                          *
+ ****************************************************************************/
+
+/* AES/IEC958 channel status bits */
+#define IEC958_AES0_PROFESSIONAL	(1<<0)	/* 0 = consumer, 1 = professional */
+#define IEC958_AES0_NONAUDIO		(1<<1)	/* 0 = audio, 1 = non-audio */
+#define IEC958_AES0_PRO_EMPHASIS	(7<<2)	/* mask - emphasis */
+#define IEC958_AES0_PRO_EMPHASIS_NOTID	(0<<2)	/* emphasis not indicated */
+#define IEC958_AES0_PRO_EMPHASIS_NONE	(1<<2)	/* none emphasis */
+#define IEC958_AES0_PRO_EMPHASIS_5015	(3<<2)	/* 50/15us emphasis */
+#define IEC958_AES0_PRO_EMPHASIS_CCITT	(7<<2)	/* CCITT J.17 emphasis */
+#define IEC958_AES0_PRO_FREQ_UNLOCKED	(1<<5)	/* source sample frequency: 0 = locked, 1 = unlocked */
+#define IEC958_AES0_PRO_FS		(3<<6)	/* mask - sample frequency */
+#define IEC958_AES0_PRO_FS_NOTID	(0<<6)	/* fs not indicated */
+#define IEC958_AES0_PRO_FS_44100	(1<<6)	/* 44.1kHz */
+#define IEC958_AES0_PRO_FS_48000	(2<<6)	/* 48kHz */
+#define IEC958_AES0_PRO_FS_32000	(3<<6)	/* 32kHz */
+#define IEC958_AES0_CON_NOT_COPYRIGHT	(1<<2)	/* 0 = copyright, 1 = not copyright */
+#define IEC958_AES0_CON_EMPHASIS	(7<<3)	/* mask - emphasis */
+#define IEC958_AES0_CON_EMPHASIS_NONE	(0<<3)	/* none emphasis */
+#define IEC958_AES0_CON_EMPHASIS_5015	(1<<3)	/* 50/15us emphasis */
+#define IEC958_AES0_CON_MODE		(3<<6)	/* mask - mode */
+#define IEC958_AES1_PRO_MODE		(15<<0)	/* mask - channel mode */
+#define IEC958_AES1_PRO_MODE_NOTID	(0<<0)	/* not indicated */
+#define IEC958_AES1_PRO_MODE_STEREOPHONIC (2<<0) /* stereophonic - ch A is left */
+#define IEC958_AES1_PRO_MODE_SINGLE	(4<<0)	/* single channel */
+#define IEC958_AES1_PRO_MODE_TWO	(8<<0)	/* two channels */
+#define IEC958_AES1_PRO_MODE_PRIMARY	(12<<0)	/* primary/secondary */
+#define IEC958_AES1_PRO_MODE_BYTE3	(15<<0)	/* vector to byte 3 */
+#define IEC958_AES1_PRO_USERBITS	(15<<4)	/* mask - user bits */
+#define IEC958_AES1_PRO_USERBITS_NOTID	(0<<4)	/* not indicated */
+#define IEC958_AES1_PRO_USERBITS_192	(8<<4)	/* 192-bit structure */
+#define IEC958_AES1_PRO_USERBITS_UDEF	(12<<4)	/* user defined application */
+#define IEC958_AES1_CON_CATEGORY	0x7f
+#define IEC958_AES1_CON_GENERAL	0x00
+#define IEC958_AES1_CON_EXPERIMENTAL	0x40
+#define IEC958_AES1_CON_SOLIDMEM_MASK	0x0f
+#define IEC958_AES1_CON_SOLIDMEM_ID	0x08
+#define IEC958_AES1_CON_BROADCAST1_MASK 0x07
+#define IEC958_AES1_CON_BROADCAST1_ID	0x04
+#define IEC958_AES1_CON_DIGDIGCONV_MASK 0x07
+#define IEC958_AES1_CON_DIGDIGCONV_ID	0x02
+#define IEC958_AES1_CON_ADC_COPYRIGHT_MASK 0x1f
+#define IEC958_AES1_CON_ADC_COPYRIGHT_ID 0x06
+#define IEC958_AES1_CON_ADC_MASK	0x1f
+#define IEC958_AES1_CON_ADC_ID		0x16
+#define IEC958_AES1_CON_BROADCAST2_MASK 0x0f
+#define IEC958_AES1_CON_BROADCAST2_ID	0x0e
+#define IEC958_AES1_CON_LASEROPT_MASK	0x07
+#define IEC958_AES1_CON_LASEROPT_ID	0x01
+#define IEC958_AES1_CON_MUSICAL_MASK	0x07
+#define IEC958_AES1_CON_MUSICAL_ID	0x05
+#define IEC958_AES1_CON_MAGNETIC_MASK	0x07
+#define IEC958_AES1_CON_MAGNETIC_ID	0x03
+#define IEC958_AES1_CON_IEC908_CD	(IEC958_AES1_CON_LASEROPT_ID|0x00)
+#define IEC958_AES1_CON_NON_IEC908_CD	(IEC958_AES1_CON_LASEROPT_ID|0x08)
+#define IEC958_AES1_CON_PCM_CODER	(IEC958_AES1_CON_DIGDIGCONV_ID|0x00)
+#define IEC958_AES1_CON_SAMPLER	(IEC958_AES1_CON_DIGDIGCONV_ID|0x20)
+#define IEC958_AES1_CON_MIXER		(IEC958_AES1_CON_DIGDIGCONV_ID|0x10)
+#define IEC958_AES1_CON_RATE_CONVERTER	(IEC958_AES1_CON_DIGDIGCONV_ID|0x18)
+#define IEC958_AES1_CON_SYNTHESIZER	(IEC958_AES1_CON_MUSICAL_ID|0x00)
+#define IEC958_AES1_CON_MICROPHONE	(IEC958_AES1_CON_MUSICAL_ID|0x08)
+#define IEC958_AES1_CON_DAT		(IEC958_AES1_CON_MAGNETIC_ID|0x00)
+#define IEC958_AES1_CON_VCR		(IEC958_AES1_CON_MAGNETIC_ID|0x08)
+#define IEC958_AES1_CON_ORIGINAL	(1<<7)	/* this bits depends on the category code */
+#define IEC958_AES2_PRO_SBITS		(7<<0)	/* mask - sample bits */
+#define IEC958_AES2_PRO_SBITS_20	(2<<0)	/* 20-bit - coordination */
+#define IEC958_AES2_PRO_SBITS_24	(4<<0)	/* 24-bit - main audio */
+#define IEC958_AES2_PRO_SBITS_UDEF	(6<<0)	/* user defined application */
+#define IEC958_AES2_PRO_WORDLEN	(7<<3)	/* mask - source word length */
+#define IEC958_AES2_PRO_WORDLEN_NOTID	(0<<3)	/* not indicated */
+#define IEC958_AES2_PRO_WORDLEN_22_18	(2<<3)	/* 22-bit or 18-bit */
+#define IEC958_AES2_PRO_WORDLEN_23_19	(4<<3)	/* 23-bit or 19-bit */
+#define IEC958_AES2_PRO_WORDLEN_24_20	(5<<3)	/* 24-bit or 20-bit */
+#define IEC958_AES2_PRO_WORDLEN_20_16	(6<<3)	/* 20-bit or 16-bit */
+#define IEC958_AES2_CON_SOURCE		(15<<0)	/* mask - source number */
+#define IEC958_AES2_CON_SOURCE_UNSPEC	(0<<0)	/* unspecified */
+#define IEC958_AES2_CON_CHANNEL	(15<<4)	/* mask - channel number */
+#define IEC958_AES2_CON_CHANNEL_UNSPEC	(0<<4)	/* unspecified */
+#define IEC958_AES3_CON_FS		(15<<0)	/* mask - sample frequency */
+#define IEC958_AES3_CON_FS_44100	(0<<0)	/* 44.1kHz */
+#define IEC958_AES3_CON_FS_48000	(2<<0)	/* 48kHz */
+#define IEC958_AES3_CON_FS_32000	(3<<0)	/* 32kHz */
+#define IEC958_AES3_CON_CLOCK		(3<<4)	/* mask - clock accuracy */
+#define IEC958_AES3_CON_CLOCK_1000PPM	(0<<4)	/* 1000 ppm */
+#define IEC958_AES3_CON_CLOCK_50PPM	(1<<4)	/* 50 ppm */
+#define IEC958_AES3_CON_CLOCK_VARIABLE	(2<<4)	/* variable pitch */
+
+/*****************************************************************************
+ *                                                                           *
+ *                            MIDI v1.0 interface                            *
+ *                                                                           *
+ *****************************************************************************/
+
+#define MIDI_CHANNELS			16
+#define MIDI_GM_DRUM_CHANNEL		(10-1)
+
+/*
+ *  MIDI commands
+ */
+
+#define MIDI_CMD_NOTE_OFF		0x80
+#define MIDI_CMD_NOTE_ON		0x90
+#define MIDI_CMD_NOTE_PRESSURE		0xa0
+#define MIDI_CMD_CONTROL		0xb0
+#define MIDI_CMD_PGM_CHANGE		0xc0
+#define MIDI_CMD_CHANNEL_PRESSURE	0xd0
+#define MIDI_CMD_BENDER			0xe0
+
+#define MIDI_CMD_COMMON_SYSEX		0xf0
+#define MIDI_CMD_COMMON_MTC_QUARTER	0xf1
+#define MIDI_CMD_COMMON_SONG_POS	0xf2
+#define MIDI_CMD_COMMON_SONG_SELECT	0xf3
+#define MIDI_CMD_COMMON_TUNE_REQUEST	0xf6
+#define MIDI_CMD_COMMON_SYSEX_END	0xf7
+#define MIDI_CMD_COMMON_CLOCK		0xf8
+#define MIDI_CMD_COMMON_START		0xfa
+#define MIDI_CMD_COMMON_CONTINUE	0xfb
+#define MIDI_CMD_COMMON_STOP		0xfc
+#define MIDI_CMD_COMMON_SENSING		0xfe
+#define MIDI_CMD_COMMON_RESET		0xff
+
+/*
+ *  MIDI controllers
+ */
+
+#define MIDI_CTL_MSB_BANK		0x00
+#define MIDI_CTL_MSB_MODWHEEL         	0x01
+#define MIDI_CTL_MSB_BREATH           	0x02
+#define MIDI_CTL_MSB_FOOT             	0x04
+#define MIDI_CTL_MSB_PORTNAMENTO_TIME 	0x05
+#define MIDI_CTL_MSB_DATA_ENTRY		0x06
+#define MIDI_CTL_MSB_MAIN_VOLUME      	0x07
+#define MIDI_CTL_MSB_BALANCE          	0x08
+#define MIDI_CTL_MSB_PAN              	0x0a
+#define MIDI_CTL_MSB_EXPRESSION       	0x0b
+#define MIDI_CTL_MSB_EFFECT1		0x0c
+#define MIDI_CTL_MSB_EFFECT2		0x0d
+#define MIDI_CTL_MSB_GENERAL_PURPOSE1 	0x10
+#define MIDI_CTL_MSB_GENERAL_PURPOSE2 	0x11
+#define MIDI_CTL_MSB_GENERAL_PURPOSE3 	0x12
+#define MIDI_CTL_MSB_GENERAL_PURPOSE4 	0x13
+#define MIDI_CTL_LSB_BANK		0x20
+#define MIDI_CTL_LSB_MODWHEEL        	0x21
+#define MIDI_CTL_LSB_BREATH           	0x22
+#define MIDI_CTL_LSB_FOOT             	0x24
+#define MIDI_CTL_LSB_PORTNAMENTO_TIME 	0x25
+#define MIDI_CTL_LSB_DATA_ENTRY		0x26
+#define MIDI_CTL_LSB_MAIN_VOLUME      	0x27
+#define MIDI_CTL_LSB_BALANCE          	0x28
+#define MIDI_CTL_LSB_PAN              	0x2a
+#define MIDI_CTL_LSB_EXPRESSION       	0x2b
+#define MIDI_CTL_LSB_EFFECT1		0x2c
+#define MIDI_CTL_LSB_EFFECT2		0x2d
+#define MIDI_CTL_LSB_GENERAL_PURPOSE1 	0x30
+#define MIDI_CTL_LSB_GENERAL_PURPOSE2 	0x31
+#define MIDI_CTL_LSB_GENERAL_PURPOSE3 	0x32
+#define MIDI_CTL_LSB_GENERAL_PURPOSE4 	0x33
+#define MIDI_CTL_SUSTAIN              	0x40
+#define MIDI_CTL_PORTAMENTO           	0x41
+#define MIDI_CTL_SUSTENUTO            	0x42
+#define MIDI_CTL_SOFT_PEDAL           	0x43
+#define MIDI_CTL_LEGATO_FOOTSWITCH	0x44
+#define MIDI_CTL_HOLD2                	0x45
+#define MIDI_CTL_SC1_SOUND_VARIATION	0x46
+#define MIDI_CTL_SC2_TIMBRE		0x47
+#define MIDI_CTL_SC3_RELEASE_TIME	0x48
+#define MIDI_CTL_SC4_ATTACK_TIME	0x49
+#define MIDI_CTL_SC5_BRIGHTNESS		0x4a
+#define MIDI_CTL_SC6			0x4b
+#define MIDI_CTL_SC7			0x4c
+#define MIDI_CTL_SC8			0x4d
+#define MIDI_CTL_SC9			0x4e
+#define MIDI_CTL_SC10			0x4f
+#define MIDI_CTL_GENERAL_PURPOSE5     	0x50
+#define MIDI_CTL_GENERAL_PURPOSE6     	0x51
+#define MIDI_CTL_GENERAL_PURPOSE7     	0x52
+#define MIDI_CTL_GENERAL_PURPOSE8     	0x53
+#define MIDI_CTL_PORNAMENTO_CONTROL	0x54
+#define MIDI_CTL_E1_REVERB_DEPTH	0x5b
+#define MIDI_CTL_E2_TREMOLO_DEPTH	0x5c
+#define MIDI_CTL_E3_CHORUS_DEPTH	0x5d
+#define MIDI_CTL_E4_DETUNE_DEPTH	0x5e
+#define MIDI_CTL_E5_PHASER_DEPTH	0x5f
+#define MIDI_CTL_DATA_INCREMENT       	0x60
+#define MIDI_CTL_DATA_DECREMENT       	0x61
+#define MIDI_CTL_NONREG_PARM_NUM_LSB  	0x62
+#define MIDI_CTL_NONREG_PARM_NUM_MSB  	0x63
+#define MIDI_CTL_REGIST_PARM_NUM_LSB  	0x64
+#define MIDI_CTL_REGIST_PARM_NUM_MSB	0x65
+#define MIDI_CTL_ALL_SOUNDS_OFF		0x78
+#define MIDI_CTL_RESET_CONTROLLERS	0x79
+#define MIDI_CTL_LOCAL_CONTROL_SWITCH	0x7a
+#define MIDI_CTL_ALL_NOTES_OFF		0x7b
+#define MIDI_CTL_OMNI_OFF		0x7c
+#define MIDI_CTL_OMNI_ON		0x7d
+#define MIDI_CTL_MONO1			0x7e
+#define MIDI_CTL_MONO2			0x7f
+
+#endif				/* __ASOUNDEF_H */
diff -uNr linux-2.4.37.9/include/linux/asound.h linux-2.4.37.9-amithlon/include/linux/asound.h
--- linux-2.4.37.9/include/linux/asound.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/asound.h	2002-02-04 00:42:07.000000000 -0500
@@ -0,0 +1,832 @@
+/*
+ *  Advanced Linux Sound Architecture - ALSA - Driver
+ *  Copyright (c) 1994-2000 by Jaroslav Kysela <perex@suse.cz>,
+ *                             Abramo Bagnara <abramo@alsa-project.org>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __ASOUND_H
+#define __ASOUND_H
+
+#if defined(LINUX) || defined(__LINUX__) || defined(__linux__)
+#include <linux/ioctl.h>
+#include <endian.h>
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+#define SNDRV_LITTLE_ENDIAN
+#elif __BYTE_ORDER == __BIG_ENDIAN
+#define SNDRV_BIG_ENDIAN
+#else
+#error "Unsupported endian..."
+#endif
+#endif
+#ifndef __KERNEL__
+#include <sys/time.h>
+#include <sys/types.h>
+#endif
+
+/*
+ *  protocol version
+ */
+
+#define SNDRV_PROTOCOL_VERSION(major, minor, subminor) (((major)<<16)|((minor)<<8)|(subminor))
+#define SNDRV_PROTOCOL_MAJOR(version) (((version)>>16)&0xffff)
+#define SNDRV_PROTOCOL_MINOR(version) (((version)>>8)&0xff)
+#define SNDRV_PROTOCOL_MICRO(version) ((version)&0xff)
+#define SNDRV_PROTOCOL_INCOMPATIBLE(kversion, uversion) \
+	(SNDRV_PROTOCOL_MAJOR(kversion) != SNDRV_PROTOCOL_MAJOR(uversion) || \
+	 (SNDRV_PROTOCOL_MAJOR(kversion) == SNDRV_PROTOCOL_MAJOR(uversion) && \
+	   SNDRV_PROTOCOL_MINOR(kversion) != SNDRV_PROTOCOL_MINOR(uversion)))
+
+/*
+ *  Types of sound drivers...
+ *  Note: Do not assign a new number to 100% clones...
+ */
+
+enum sndrv_card_type {
+	SNDRV_CARD_TYPE_GUS_CLASSIC,	/* GUS Classic */
+	SNDRV_CARD_TYPE_GUS_EXTREME,	/* GUS Extreme */
+	SNDRV_CARD_TYPE_GUS_ACE,	/* GUS ACE */
+	SNDRV_CARD_TYPE_GUS_MAX,	/* GUS MAX */
+	SNDRV_CARD_TYPE_AMD_INTERWAVE,	/* GUS PnP - AMD InterWave */
+	SNDRV_CARD_TYPE_SB_10,		/* SoundBlaster v1.0 */
+	SNDRV_CARD_TYPE_SB_20,		/* SoundBlaster v2.0 */
+	SNDRV_CARD_TYPE_SB_PRO,		/* SoundBlaster Pro */
+	SNDRV_CARD_TYPE_SB_16,		/* SoundBlaster 16 */
+	SNDRV_CARD_TYPE_SB_AWE,		/* SoundBlaster AWE */
+	SNDRV_CARD_TYPE_ESS_ES1688,	/* ESS AudioDrive ESx688 */
+	SNDRV_CARD_TYPE_OPL3_SA2,	/* Yamaha OPL3 SA2/SA3 */
+	SNDRV_CARD_TYPE_MOZART,		/* OAK Mozart */
+	SNDRV_CARD_TYPE_S3_SONICVIBES,	/* S3 SonicVibes */
+	SNDRV_CARD_TYPE_ENS1370,	/* Ensoniq ES1370 */
+	SNDRV_CARD_TYPE_ENS1371,	/* Ensoniq ES1371 */
+	SNDRV_CARD_TYPE_CS4232,		/* CS4232/CS4232A */
+	SNDRV_CARD_TYPE_CS4236,		/* CS4235/CS4236B/CS4237B/CS4238B/CS4239 */
+	SNDRV_CARD_TYPE_AMD_INTERWAVE_STB,/* AMD InterWave + TEA6330T */
+	SNDRV_CARD_TYPE_ESS_ES1938,	/* ESS Solo-1 ES1938 */
+	SNDRV_CARD_TYPE_ESS_ES18XX,	/* ESS AudioDrive ES18XX */
+	SNDRV_CARD_TYPE_CS4231,		/* CS4231 */
+	SNDRV_CARD_TYPE_OPTI92X,	/* OPTi 92x chipset */
+	SNDRV_CARD_TYPE_SERIAL,		/* Serial MIDI driver */
+	SNDRV_CARD_TYPE_AD1848,		/* Generic AD1848 driver */
+	SNDRV_CARD_TYPE_TRID4DWAVEDX,	/* Trident 4DWave DX */
+	SNDRV_CARD_TYPE_TRID4DWAVENX,	/* Trident 4DWave NX */
+	SNDRV_CARD_TYPE_SGALAXY,	/* Aztech Sound Galaxy */
+	SNDRV_CARD_TYPE_CS46XX,		/* Sound Fusion CS4610/12/15 */
+	SNDRV_CARD_TYPE_WAVEFRONT,	/* TB WaveFront generic */
+	SNDRV_CARD_TYPE_TROPEZ,		/* TB Tropez */
+	SNDRV_CARD_TYPE_TROPEZPLUS,	/* TB Tropez+ */
+	SNDRV_CARD_TYPE_MAUI,		/* TB Maui */
+	SNDRV_CARD_TYPE_CMI8330,	/* C-Media CMI8330 */
+	SNDRV_CARD_TYPE_DUMMY,		/* dummy soundcard */
+	SNDRV_CARD_TYPE_ALS100,		/* Avance Logic ALS100 */
+	SNDRV_CARD_TYPE_SHARE,		/* share soundcard */
+	SNDRV_CARD_TYPE_SI_7018,	/* SiS 7018 */
+	SNDRV_CARD_TYPE_OPTI93X,	/* OPTi 93x chipset */
+	SNDRV_CARD_TYPE_MTPAV,		/* MOTU MidiTimePiece AV multiport MIDI */
+	SNDRV_CARD_TYPE_VIRMIDI,	/* Virtual MIDI */
+	SNDRV_CARD_TYPE_EMU10K1,	/* EMU10K1 */
+	SNDRV_CARD_TYPE_HAMMERFALL,	/* RME Digi9652	 */
+	SNDRV_CARD_TYPE_HAMMERFALL_LIGHT, /* RME Digi9652, but no expansion card */
+	SNDRV_CARD_TYPE_ICE1712,	/* ICE1712 */
+	SNDRV_CARD_TYPE_CMI8338,	/* C-Media CMI8338 */
+	SNDRV_CARD_TYPE_CMI8738,	/* C-Media CMI8738 */
+	SNDRV_CARD_TYPE_AD1816A,	/* ADI SoundPort AD1816A */
+	SNDRV_CARD_TYPE_INTEL8X0,	/* Intel 810/820/830/840/MX440 */
+	SNDRV_CARD_TYPE_ESS_ESOLDM1,	/* Maestro 1 */
+	SNDRV_CARD_TYPE_ESS_ES1968,	/* Maestro 2 */
+	SNDRV_CARD_TYPE_ESS_ES1978,	/* Maestro 2E */
+	SNDRV_CARD_TYPE_DIGI96,		/* RME Digi96 */
+	SNDRV_CARD_TYPE_VIA82C686A,	/* VIA 82C686A */
+	SNDRV_CARD_TYPE_FM801,		/* FM801 */
+	SNDRV_CARD_TYPE_AZT2320,	/* AZT2320 */
+	SNDRV_CARD_TYPE_PRODIF_PLUS,	/* Marian/Sek'D Prodif Plus */
+	SNDRV_CARD_TYPE_YMFPCI,		/* YMF724/740/744/754 */
+	SNDRV_CARD_TYPE_CS4281,		/* CS4281 */
+	SNDRV_CARD_TYPE_MPU401_UART,	/* MPU-401 UART */
+	SNDRV_CARD_TYPE_ALS4000,	/* Avance Logic ALS4000 */
+	SNDRV_CARD_TYPE_ALLEGRO_1,	/* ESS Allegro-1 */
+	SNDRV_CARD_TYPE_ALLEGRO,	/* ESS Allegro */
+	SNDRV_CARD_TYPE_MAESTRO3,	/* ESS Maestro3 */
+	SNDRV_CARD_TYPE_AWACS,		/* PMac AWACS */
+	SNDRV_CARD_TYPE_NM256AV,	/* NM256AV */
+	SNDRV_CARD_TYPE_NM256ZX,	/* NM256ZX */
+	SNDRV_CARD_TYPE_VIA8233,	/* VIA VT8233 */
+	SNDRV_CARD_TYPE_PMAC_AWACS,	/* PMac AWACS */
+	SNDRV_CARD_TYPE_PMAC_BURGUNDY,	/* PMac Burgundy */
+	SNDRV_CARD_TYPE_PMAC_DACA,	/* PMac DACA */
+
+	/* Don't forget to change the following: */
+	SNDRV_CARD_TYPE_LAST = SNDRV_CARD_TYPE_PMAC_DACA,
+};
+
+/****************************************************************************
+ *                                                                          *
+ *        Digital audio interface					    *
+ *                                                                          *
+ ****************************************************************************/
+typedef unsigned long sndrv_pcm_uframes_t;
+typedef long sndrv_pcm_sframes_t;
+
+struct sndrv_aes_iec958 {
+	unsigned char status[24];	/* AES/IEC958 channel status bits */
+	unsigned char subcode[147];	/* AES/IEC958 subcode bits */
+	unsigned char pad;		/* nothing */
+	unsigned char dig_subframe[4];	/* AES/IEC958 subframe bits */
+};
+
+/****************************************************************************
+ *                                                                          *
+ *      Section for driver hardware dependent interface - /dev/snd/hw?      *
+ *                                                                          *
+ ****************************************************************************/
+
+#define SNDRV_HWDEP_VERSION		SNDRV_PROTOCOL_VERSION(1, 0, 0)
+
+enum sndrv_hwdep_type {
+	SNDRV_HWDEP_TYPE_OPL2,
+	SNDRV_HWDEP_TYPE_OPL3,
+	SNDRV_HWDEP_TYPE_OPL4,
+	SNDRV_HWDEP_TYPE_SB16CSP,	/* Creative Signal Processor */
+	SNDRV_HWDEP_TYPE_EMU10K1,	/* FX8010 processor in EMU10K1 chip */
+	SNDRV_HWDEP_TYPE_YSS225,	/* Yamaha FX processor */
+	SNDRV_HWDEP_TYPE_ICS2115,	/* Wavetable synth */
+
+	/* Don't forget to change the following: */
+	SNDRV_HWDEP_TYPE_LAST = SNDRV_HWDEP_TYPE_ICS2115,
+};
+
+struct sndrv_hwdep_info {
+	unsigned int device;		/* WR: device number */
+	int card;			/* R: card number */
+	unsigned char id[64];		/* ID (user selectable) */
+	unsigned char name[80];		/* hwdep name */
+	enum sndrv_hwdep_type type;	/* hwdep device type */
+	unsigned char reserved[64];	/* reserved for future */
+};
+
+enum {
+	SNDRV_HWDEP_IOCTL_PVERSION = _IOR ('H', 0x00, int),
+	SNDRV_HWDEP_IOCTL_INFO = _IOR ('H', 0x01, struct sndrv_hwdep_info),
+};
+
+/*****************************************************************************
+ *                                                                           *
+ *             Digital Audio (PCM) interface - /dev/snd/pcm??                *
+ *                                                                           *
+ *****************************************************************************/
+
+#define SNDRV_PCM_VERSION			SNDRV_PROTOCOL_VERSION(2, 0, 0)
+
+enum sndrv_pcm_class {
+	SNDRV_PCM_CLASS_GENERIC,	/* standard mono or stereo device */
+	SNDRV_PCM_CLASS_MULTI,		/* multichannel device */
+	SNDRV_PCM_CLASS_MODEM,		/* software modem class */
+	SNDRV_PCM_CLASS_DIGITIZER,	/* digitizer class */
+	/* Don't forget to change the following: */
+	SNDRV_PCM_CLASS_LAST = SNDRV_PCM_CLASS_DIGITIZER,
+};
+
+enum sndrv_pcm_subclass {
+	SNDRV_PCM_SUBCLASS_GENERIC_MIX,	/* mono or stereo subdevices are mixed together */
+	SNDRV_PCM_SUBCLASS_MULTI_MIX,	/* multichannel subdevices are mixed together */
+	/* Don't forget to change the following: */
+	SNDRV_PCM_SUBCLASS_LAST = SNDRV_PCM_SUBCLASS_MULTI_MIX,
+};
+
+enum sndrv_pcm_stream {
+	SNDRV_PCM_STREAM_PLAYBACK,
+	SNDRV_PCM_STREAM_CAPTURE,
+	SNDRV_PCM_STREAM_LAST = SNDRV_PCM_STREAM_CAPTURE,
+};
+
+enum sndrv_pcm_access {
+	SNDRV_PCM_ACCESS_MMAP_INTERLEAVED,	/* interleaved mmap */
+	SNDRV_PCM_ACCESS_MMAP_NONINTERLEAVED, 	/* noninterleaved mmap */
+	SNDRV_PCM_ACCESS_MMAP_COMPLEX,		/* complex mmap */
+	SNDRV_PCM_ACCESS_RW_INTERLEAVED,	/* readi/writei */
+	SNDRV_PCM_ACCESS_RW_NONINTERLEAVED,	/* readn/writen */
+	SNDRV_PCM_ACCESS_LAST = SNDRV_PCM_ACCESS_RW_NONINTERLEAVED,
+};
+
+enum sndrv_pcm_format {
+	SNDRV_PCM_FORMAT_S8,
+	SNDRV_PCM_FORMAT_U8,
+	SNDRV_PCM_FORMAT_S16_LE,
+	SNDRV_PCM_FORMAT_S16_BE,
+	SNDRV_PCM_FORMAT_U16_LE,
+	SNDRV_PCM_FORMAT_U16_BE,
+	SNDRV_PCM_FORMAT_S24_LE,	/* low three bytes */
+	SNDRV_PCM_FORMAT_S24_BE,	/* low three bytes */
+	SNDRV_PCM_FORMAT_U24_LE,	/* low three bytes */
+	SNDRV_PCM_FORMAT_U24_BE,	/* low three bytes */
+	SNDRV_PCM_FORMAT_S32_LE,
+	SNDRV_PCM_FORMAT_S32_BE,
+	SNDRV_PCM_FORMAT_U32_LE,
+	SNDRV_PCM_FORMAT_U32_BE,
+	SNDRV_PCM_FORMAT_FLOAT_LE,	/* 4-byte float, IEEE-754 32-bit */
+	SNDRV_PCM_FORMAT_FLOAT_BE,	/* 4-byte float, IEEE-754 32-bit */
+	SNDRV_PCM_FORMAT_FLOAT64_LE,	/* 8-byte float, IEEE-754 64-bit */
+	SNDRV_PCM_FORMAT_FLOAT64_BE,	/* 8-byte float, IEEE-754 64-bit */
+	SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE,	/* IEC-958 subframe, Little Endian */
+	SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE,	/* IEC-958 subframe, Big Endian */
+	SNDRV_PCM_FORMAT_MU_LAW,
+	SNDRV_PCM_FORMAT_A_LAW,
+	SNDRV_PCM_FORMAT_IMA_ADPCM,
+	SNDRV_PCM_FORMAT_MPEG,
+	SNDRV_PCM_FORMAT_GSM,
+	SNDRV_PCM_FORMAT_SPECIAL = 31,
+	SNDRV_PCM_FORMAT_LAST = 31,
+
+#ifdef SNDRV_LITTLE_ENDIAN
+	SNDRV_PCM_FORMAT_S16 = SNDRV_PCM_FORMAT_S16_LE,
+	SNDRV_PCM_FORMAT_U16 = SNDRV_PCM_FORMAT_U16_LE,
+	SNDRV_PCM_FORMAT_S24 = SNDRV_PCM_FORMAT_S24_LE,
+	SNDRV_PCM_FORMAT_U24 = SNDRV_PCM_FORMAT_U24_LE,
+	SNDRV_PCM_FORMAT_S32 = SNDRV_PCM_FORMAT_S32_LE,
+	SNDRV_PCM_FORMAT_U32 = SNDRV_PCM_FORMAT_U32_LE,
+	SNDRV_PCM_FORMAT_FLOAT = SNDRV_PCM_FORMAT_FLOAT_LE,
+	SNDRV_PCM_FORMAT_FLOAT64 = SNDRV_PCM_FORMAT_FLOAT64_LE,
+	SNDRV_PCM_FORMAT_IEC958_SUBFRAME = SNDRV_PCM_FORMAT_IEC958_SUBFRAME_LE,
+#endif
+#ifdef SNDRV_BIG_ENDIAN
+	SNDRV_PCM_FORMAT_S16 = SNDRV_PCM_FORMAT_S16_BE,
+	SNDRV_PCM_FORMAT_U16 = SNDRV_PCM_FORMAT_U16_BE,
+	SNDRV_PCM_FORMAT_S24 = SNDRV_PCM_FORMAT_S24_BE,
+	SNDRV_PCM_FORMAT_U24 = SNDRV_PCM_FORMAT_U24_BE,
+	SNDRV_PCM_FORMAT_S32 = SNDRV_PCM_FORMAT_S32_BE,
+	SNDRV_PCM_FORMAT_U32 = SNDRV_PCM_FORMAT_U32_BE,
+	SNDRV_PCM_FORMAT_FLOAT = SNDRV_PCM_FORMAT_FLOAT_BE,
+	SNDRV_PCM_FORMAT_FLOAT64 = SNDRV_PCM_FORMAT_FLOAT64_BE,
+	SNDRV_PCM_FORMAT_IEC958_SUBFRAME = SNDRV_PCM_FORMAT_IEC958_SUBFRAME_BE,
+#endif
+};
+
+enum sndrv_pcm_subformat {
+	SNDRV_PCM_SUBFORMAT_STD,
+	SNDRV_PCM_SUBFORMAT_LAST = SNDRV_PCM_SUBFORMAT_STD,
+};
+
+#define SNDRV_PCM_INFO_MMAP		0x00000001	/* hardware supports mmap */
+#define SNDRV_PCM_INFO_MMAP_VALID	0x00000002	/* period data are valid during transfer */
+#define SNDRV_PCM_INFO_DOUBLE		0x00000004	/* Double buffering needed for PCM start/stop */
+#define SNDRV_PCM_INFO_BATCH		0x00000010	/* double buffering */
+#define SNDRV_PCM_INFO_INTERLEAVED	0x00000100	/* channels are interleaved */
+#define SNDRV_PCM_INFO_NONINTERLEAVED	0x00000200	/* channels are not interleaved */
+#define SNDRV_PCM_INFO_COMPLEX		0x00000400	/* complex frame organization (mmap only) */
+#define SNDRV_PCM_INFO_BLOCK_TRANSFER	0x00010000	/* hardware transfer block of samples */
+#define SNDRV_PCM_INFO_OVERRANGE	0x00020000	/* hardware supports ADC (capture) overrange detection */
+#define SNDRV_PCM_INFO_PAUSE		0x00080000	/* pause ioctl is supported */
+#define SNDRV_PCM_INFO_HALF_DUPLEX	0x00100000	/* only half duplex */
+#define SNDRV_PCM_INFO_JOINT_DUPLEX	0x00200000	/* playback and capture stream are somewhat correlated */
+#define SNDRV_PCM_INFO_SYNC_START	0x00400000	/* pcm support some kind of sync go */
+
+enum sndrv_pcm_state {
+	SNDRV_PCM_STATE_OPEN,		/* stream is open */
+	SNDRV_PCM_STATE_SETUP,		/* stream has a setup */
+	SNDRV_PCM_STATE_PREPARED,	/* stream is ready to start */
+	SNDRV_PCM_STATE_RUNNING,	/* stream is running */
+	SNDRV_PCM_STATE_XRUN,		/* stream reached an xrun */
+	SNDRV_PCM_STATE_DRAINING,	/* stream is draining */
+	SNDRV_PCM_STATE_PAUSED,		/* stream is paused */
+	SNDRV_PCM_STATE_LAST = SNDRV_PCM_STATE_PAUSED,
+};
+
+enum {
+	SNDRV_PCM_MMAP_OFFSET_DATA = 0x00000000,
+	SNDRV_PCM_MMAP_OFFSET_STATUS = 0x80000000,
+	SNDRV_PCM_MMAP_OFFSET_CONTROL = 0x81000000,
+};
+
+union sndrv_pcm_sync_id {
+	unsigned char id[16];
+	unsigned short id16[8];
+	unsigned int id32[4];
+};
+
+struct sndrv_pcm_info {
+	unsigned int device;		/* RO/WR (control): device number */
+	unsigned int subdevice;		/* RO/WR (control): subdevice number */
+	enum sndrv_pcm_stream stream;	/* RO/WR (control): stream number */
+	int card;			/* R: card number */
+	unsigned char id[64];		/* ID (user selectable) */
+	unsigned char name[80];		/* name of this device */
+	unsigned char subname[32];	/* subdevice name */
+	enum sndrv_pcm_class dev_class;	/* SNDRV_PCM_CLASS_* */
+	enum sndrv_pcm_subclass dev_subclass; /* SNDRV_PCM_SUBCLASS_* */
+	unsigned int subdevices_count;
+	unsigned int subdevices_avail;
+	union sndrv_pcm_sync_id sync;	/* hardware synchronization ID */
+	unsigned char reserved[64];	/* reserved for future... */
+};
+
+enum sndrv_pcm_hw_param {
+	SNDRV_PCM_HW_PARAM_ACCESS,	/* Access type */
+	SNDRV_PCM_HW_PARAM_FIRST_MASK = SNDRV_PCM_HW_PARAM_ACCESS,
+	SNDRV_PCM_HW_PARAM_FORMAT,	/* Format */
+	SNDRV_PCM_HW_PARAM_SUBFORMAT,	/* Subformat */
+	SNDRV_PCM_HW_PARAM_LAST_MASK = SNDRV_PCM_HW_PARAM_SUBFORMAT,
+
+	SNDRV_PCM_HW_PARAM_SAMPLE_BITS,	/* Bits per sample */
+	SNDRV_PCM_HW_PARAM_FIRST_INTERVAL = SNDRV_PCM_HW_PARAM_SAMPLE_BITS,
+	SNDRV_PCM_HW_PARAM_FRAME_BITS,	/* Bits per frame */
+	SNDRV_PCM_HW_PARAM_CHANNELS,	/* Channels */
+	SNDRV_PCM_HW_PARAM_RATE,	/* Approx rate */
+	SNDRV_PCM_HW_PARAM_PERIOD_TIME,	/* Approx distance between interrupts
+					   in us */
+	SNDRV_PCM_HW_PARAM_PERIOD_SIZE,	/* Approx frames between interrupts */
+	SNDRV_PCM_HW_PARAM_PERIOD_BYTES, /* Approx bytes between interrupts */
+	SNDRV_PCM_HW_PARAM_PERIODS,	/* Approx interrupts per buffer */
+	SNDRV_PCM_HW_PARAM_BUFFER_TIME,	/* Approx duration of buffer in us */
+	SNDRV_PCM_HW_PARAM_BUFFER_SIZE,	/* Size of buffer in frames */
+	SNDRV_PCM_HW_PARAM_BUFFER_BYTES, /* Size of buffer in bytes */
+	SNDRV_PCM_HW_PARAM_TICK_TIME,	/* Approx tick duration in us */
+	SNDRV_PCM_HW_PARAM_LAST_INTERVAL = SNDRV_PCM_HW_PARAM_TICK_TIME,
+	SNDRV_PCM_HW_PARAM_LAST = SNDRV_PCM_HW_PARAM_LAST_INTERVAL,
+};
+
+#define SNDRV_PCM_HW_PARAMS_RUNTIME		(1<<0)
+
+struct sndrv_interval {
+	unsigned int min, max;
+	unsigned int openmin:1,
+		     openmax:1,
+		     integer:1,
+		     empty:1;
+};
+
+struct sndrv_pcm_hw_params {
+	unsigned int flags;
+	unsigned int masks[SNDRV_PCM_HW_PARAM_LAST_MASK - 
+			   SNDRV_PCM_HW_PARAM_FIRST_MASK + 1];
+	struct sndrv_interval intervals[SNDRV_PCM_HW_PARAM_LAST_INTERVAL -
+				       SNDRV_PCM_HW_PARAM_FIRST_INTERVAL + 1];
+	unsigned int rmask;
+	unsigned int cmask;
+	unsigned int info;		/* R: Info flags for returned setup */
+	unsigned int msbits;		/* R: used most significant bits */
+	unsigned int rate_num;		/* R: rate numerator */
+	unsigned int rate_den;		/* R: rate denominator */
+	sndrv_pcm_uframes_t fifo_size;	/* R: chip FIFO size in frames */
+	unsigned char reserved[64];
+};
+
+enum sndrv_pcm_start {
+	SNDRV_PCM_START_DATA,	/* start when some data are written (playback)
+				   or requested (capture) */
+	SNDRV_PCM_START_EXPLICIT,	/* start on the go command */
+	SNDRV_PCM_START_LAST = SNDRV_PCM_START_EXPLICIT,
+};
+
+enum sndrv_pcm_xrun {
+	SNDRV_PCM_XRUN_NONE,	/* No xrun detection */
+	SNDRV_PCM_XRUN_STOP,	/* Stop on xrun */
+	SNDRV_PCM_XRUN_LAST = SNDRV_PCM_XRUN_STOP,
+};
+
+enum sndrv_pcm_tstamp {
+	SNDRV_PCM_TSTAMP_NONE,
+	SNDRV_PCM_TSTAMP_MMAP,
+	SNDRV_PCM_TSTAMP_LAST = SNDRV_PCM_TSTAMP_MMAP,
+};
+
+struct sndrv_pcm_sw_params {
+	enum sndrv_pcm_start start_mode;	/* start mode */
+	enum sndrv_pcm_xrun xrun_mode;	/* xrun detection mode */
+	enum sndrv_pcm_tstamp tstamp_mode; /* timestamp mode */
+	unsigned int period_step;
+	unsigned int sleep_min;		/* min ticks to sleep */
+	sndrv_pcm_uframes_t avail_min;	/* min avail frames for wakeup */
+	sndrv_pcm_uframes_t xfer_align;	/* xfer size need to be a multiple */
+	sndrv_pcm_uframes_t silence_threshold; /* min distance to noise for silence filling */
+	sndrv_pcm_uframes_t silence_size; /* silence block size */
+	sndrv_pcm_uframes_t boundary;	/* pointers wrap point */
+	unsigned char reserved[64];
+};
+
+struct sndrv_pcm_channel_info {
+	unsigned int channel;
+	off_t offset;			/* mmap offset */
+	unsigned int first;		/* offset to first sample in bits */
+	unsigned int step;		/* samples distance in bits */
+};
+
+struct sndrv_pcm_status {
+	enum sndrv_pcm_state state;	/* stream state */
+	struct timeval trigger_tstamp;	/* time when stream was started/stopped/paused */
+	struct timeval tstamp;		/* reference timestamp */
+	sndrv_pcm_uframes_t appl_ptr;	/* appl ptr */
+	sndrv_pcm_uframes_t hw_ptr;	/* hw ptr */
+	sndrv_pcm_sframes_t delay;	/* current delay in frames */
+	sndrv_pcm_uframes_t avail;	/* number of frames available */
+	sndrv_pcm_uframes_t avail_max;	/* max frames available on hw since last status */
+	sndrv_pcm_uframes_t overrange;	/* count of ADC (capture) overrange detections from last status */
+	unsigned char reserved[64];	/* must be filled with zero */
+};
+
+struct sndrv_pcm_mmap_status {
+	enum sndrv_pcm_state state;	/* RO: state - SNDRV_PCM_STATE_XXXX */
+	int pad1;			/* Needed for 64 bit alignment */
+	sndrv_pcm_uframes_t hw_ptr;	/* RO: hw ptr (0...boundary-1) */
+	struct timeval tstamp;		/* Timestamp */
+};
+
+struct sndrv_pcm_mmap_control {
+	sndrv_pcm_uframes_t appl_ptr;	/* RW: appl ptr (0...boundary-1) */
+	sndrv_pcm_uframes_t avail_min;	/* RW: min available frames for wakeup */
+};
+
+struct sndrv_xferi {
+	sndrv_pcm_sframes_t result;
+	void *buf;
+	sndrv_pcm_uframes_t frames;
+};
+
+struct sndrv_xfern {
+	sndrv_pcm_sframes_t result;
+	void **bufs;
+	sndrv_pcm_uframes_t frames;
+};
+
+enum {
+	SNDRV_PCM_IOCTL_PVERSION = _IOR('A', 0x00, int),
+	SNDRV_PCM_IOCTL_INFO = _IOR('A', 0x01, struct sndrv_pcm_info),
+	SNDRV_PCM_IOCTL_HW_REFINE = _IOWR('A', 0x10, struct sndrv_pcm_hw_params),
+	SNDRV_PCM_IOCTL_HW_PARAMS = _IOWR('A', 0x11, struct sndrv_pcm_hw_params),
+	SNDRV_PCM_IOCTL_HW_FREE = _IO('A', 0x12),
+	SNDRV_PCM_IOCTL_SW_PARAMS = _IOWR('A', 0x13, struct sndrv_pcm_sw_params),
+	SNDRV_PCM_IOCTL_STATUS = _IOR('A', 0x20, struct sndrv_pcm_status),
+	SNDRV_PCM_IOCTL_DELAY = _IOR('A', 0x21, sndrv_pcm_sframes_t),
+	SNDRV_PCM_IOCTL_CHANNEL_INFO = _IOR('A', 0x32, struct sndrv_pcm_channel_info),
+	SNDRV_PCM_IOCTL_PREPARE = _IO('A', 0x40),
+	SNDRV_PCM_IOCTL_RESET = _IO('A', 0x41),
+	SNDRV_PCM_IOCTL_START = _IO('A', 0x42),
+	SNDRV_PCM_IOCTL_DROP = _IO('A', 0x43),
+	SNDRV_PCM_IOCTL_DRAIN = _IO('A', 0x44),
+	SNDRV_PCM_IOCTL_PAUSE = _IOW('A', 0x45, int),
+	SNDRV_PCM_IOCTL_REWIND = _IOW('A', 0x46, sndrv_pcm_uframes_t),
+	SNDRV_PCM_IOCTL_WRITEI_FRAMES = _IOW('A', 0x50, struct sndrv_xferi),
+	SNDRV_PCM_IOCTL_READI_FRAMES = _IOR('A', 0x51, struct sndrv_xferi),
+	SNDRV_PCM_IOCTL_WRITEN_FRAMES = _IOW('A', 0x52, struct sndrv_xfern),
+	SNDRV_PCM_IOCTL_READN_FRAMES = _IOR('A', 0x53, struct sndrv_xfern),
+	SNDRV_PCM_IOCTL_LINK = _IOW('A', 0x60, int),
+	SNDRV_PCM_IOCTL_UNLINK = _IO('A', 0x61),
+};
+
+/* Trick to make alsa-lib/acinclude.m4 happy */
+#define SNDRV_PCM_IOCTL_REWIND SNDRV_PCM_IOCTL_REWIND
+
+/*****************************************************************************
+ *                                                                           *
+ *                            MIDI v1.0 interface                            *
+ *                                                                           *
+ *****************************************************************************/
+
+/*
+ *  Raw MIDI section - /dev/snd/midi??
+ */
+
+#define SNDRV_RAWMIDI_VERSION		SNDRV_PROTOCOL_VERSION(2, 0, 0)
+
+enum sndrv_rawmidi_stream {
+	SNDRV_RAWMIDI_STREAM_OUTPUT,
+	SNDRV_RAWMIDI_STREAM_INPUT,
+	SNDRV_RAWMIDI_STREAM_LAST = SNDRV_RAWMIDI_STREAM_INPUT,
+};
+
+#define SNDRV_RAWMIDI_INFO_OUTPUT		0x00000001
+#define SNDRV_RAWMIDI_INFO_INPUT		0x00000002
+#define SNDRV_RAWMIDI_INFO_DUPLEX		0x00000004
+
+struct sndrv_rawmidi_info {
+	unsigned int device;		/* RO/WR (control): device number */
+	unsigned int subdevice;		/* RO/WR (control): subdevice number */
+	enum sndrv_rawmidi_stream stream; /* WR: stream */
+	int card;			/* R: card number */
+	unsigned int flags;		/* SNDRV_RAWMIDI_INFO_XXXX */
+	unsigned char id[64];		/* ID (user selectable) */
+	unsigned char name[80];		/* name of device */
+	unsigned char subname[32];	/* name of active or selected subdevice */
+	unsigned int subdevices_count;
+	unsigned int subdevices_avail;
+	unsigned char reserved[64];	/* reserved for future use */
+};
+
+struct sndrv_rawmidi_params {
+	enum sndrv_rawmidi_stream stream;
+	size_t buffer_size;		/* queue size in bytes */
+	size_t avail_min;		/* minimum avail bytes for wakeup */
+	unsigned int no_active_sensing: 1; /* do not send active sensing byte in close() */
+	unsigned char reserved[16];	/* reserved for future use */
+};
+
+struct sndrv_rawmidi_status {
+	enum sndrv_rawmidi_stream stream;
+	struct timeval tstamp;		/* Timestamp */
+	size_t avail;			/* available bytes */
+	size_t xruns;			/* count of overruns since last status (in bytes) */
+	unsigned char reserved[16];	/* reserved for future use */
+};
+
+enum {
+	SNDRV_RAWMIDI_IOCTL_PVERSION = _IOR('W', 0x00, int),
+	SNDRV_RAWMIDI_IOCTL_INFO = _IOR('W', 0x01, struct sndrv_rawmidi_info),
+	SNDRV_RAWMIDI_IOCTL_PARAMS = _IOWR('W', 0x10, struct sndrv_rawmidi_params),
+	SNDRV_RAWMIDI_IOCTL_STATUS = _IOWR('W', 0x20, struct sndrv_rawmidi_status),
+	SNDRV_RAWMIDI_IOCTL_DROP = _IOW('W', 0x30, int),
+	SNDRV_RAWMIDI_IOCTL_DRAIN = _IOW('W', 0x31, int),
+};
+
+/*
+ *  Timer section - /dev/snd/timer
+ */
+
+#define SNDRV_TIMER_VERSION		SNDRV_PROTOCOL_VERSION(2, 0, 0)
+
+enum sndrv_timer_type {
+	SNDRV_TIMER_TYPE_NONE = -1,
+	SNDRV_TIMER_TYPE_SLAVE = 0,
+	SNDRV_TIMER_TYPE_GLOBAL,
+	SNDRV_TIMER_TYPE_CARD,
+	SNDRV_TIMER_TYPE_PCM,
+	SNDRV_TIMER_TYPE_LAST = SNDRV_TIMER_TYPE_PCM,
+};
+
+/* slave timer types */
+enum sndrv_timer_slave_type {
+	SNDRV_TIMER_STYPE_NONE,
+	SNDRV_TIMER_STYPE_APPLICATION,
+	SNDRV_TIMER_STYPE_SEQUENCER,		/* alias */
+	SNDRV_TIMER_STYPE_OSS_SEQUENCER,	/* alias */
+	SNDRV_TIMER_STYPE_LAST = SNDRV_TIMER_STYPE_OSS_SEQUENCER,
+};
+
+/* global timers (device member) */
+#define SNDRV_TIMER_GLOBAL_SYSTEM	0
+#define SNDRV_TIMER_GLOBAL_RTC		1
+
+struct sndrv_timer_id {
+	enum sndrv_timer_type type;	
+	enum sndrv_timer_slave_type stype;
+	int card;
+	int device;
+	int subdevice;
+};
+
+struct sndrv_timer_select {
+	struct sndrv_timer_id id;	/* bind to timer ID */
+	unsigned char reserved[32];
+};
+
+#define SNDRV_TIMER_FLG_SLAVE		(1<<0)	/* cannot be controlled */
+
+struct sndrv_timer_info {
+	unsigned int flags;		/* timer flags - SNDRV_TIMER_FLG_* */
+	int card;			/* R: card number */
+	unsigned char id[64];		/* timer identificator */
+	unsigned char name[80];		/* timer name */
+	unsigned long ticks;		/* maximum ticks */
+	unsigned long resolution;	/* average resolution */
+	unsigned char reserved[64];
+};
+
+#define SNDRV_TIMER_PARBIT_FLAGS		(1<<0)
+#define SNDRV_TIMER_PARBIT_TICKS		(1<<1)
+#define SNDRV_TIMER_PARBIT_QUEUE_SIZE	(1<<2)
+
+#define SNDRV_TIMER_PSFLG_AUTO		(1<<0)	/* supports auto start */
+
+struct sndrv_timer_params {
+	unsigned int flags;		/* flags - SNDRV_MIXER_PSFLG_* */
+	unsigned int ticks;		/* requested resolution in ticks */
+	unsigned int queue_size;	/* total size of queue (32-1024) */
+	unsigned int fail_mask;		/* failure locations */
+	unsigned char reserved[64];
+};
+
+struct sndrv_timer_status {
+	struct timeval tstamp;		/* Timestamp */
+	unsigned int resolution;	/* current resolution */
+	unsigned int lost;		/* counter of master tick lost */
+	unsigned int overrun;		/* count of read queue overruns */
+	unsigned int queue;		/* used queue size */
+	unsigned char reserved[64];
+};
+
+enum {
+	SNDRV_TIMER_IOCTL_PVERSION = _IOR('T', 0x00, int),
+	SNDRV_TIMER_IOCTL_NEXT_DEVICE = _IOWR('T', 0x01, struct sndrv_timer_id),
+	SNDRV_TIMER_IOCTL_SELECT = _IOW('T', 0x10, struct sndrv_timer_select),
+	SNDRV_TIMER_IOCTL_INFO = _IOR('T', 0x11, struct sndrv_timer_info),
+	SNDRV_TIMER_IOCTL_PARAMS = _IOW('T', 0x12, struct sndrv_timer_params),
+	SNDRV_TIMER_IOCTL_STATUS = _IOW('T', 0x14, struct sndrv_timer_status),
+	SNDRV_TIMER_IOCTL_START = _IO('T', 0x20),
+	SNDRV_TIMER_IOCTL_STOP = _IO('T', 0x21),
+	SNDRV_TIMER_IOCTL_CONTINUE = _IO('T', 0x22),
+};
+
+struct sndrv_timer_read {
+	unsigned int resolution;
+	unsigned int ticks;
+};
+
+/****************************************************************************
+ *                                                                          *
+ *        Section for driver control interface - /dev/snd/control?          *
+ *                                                                          *
+ ****************************************************************************/
+
+#define SNDRV_CTL_VERSION			SNDRV_PROTOCOL_VERSION(2, 0, 0)
+
+struct sndrv_ctl_card_info {
+	int card;			/* R: card number */
+	enum sndrv_card_type type;	/* type of card */
+	unsigned char id[16];		/* ID of card (user selectable) */
+	unsigned char abbreviation[16];	/* Abbreviation for soundcard */
+	unsigned char name[32];		/* Short name of soundcard */
+	unsigned char longname[80];	/* name + info text about soundcard */
+	unsigned char mixerid[16];	/* ID of mixer */
+	unsigned char mixername[80];	/* mixer identification */
+	unsigned char reserved[128];	/* reserved for future */
+};
+
+enum sndrv_ctl_elem_type {
+	SNDRV_CTL_ELEM_TYPE_NONE,		/* invalid */
+	SNDRV_CTL_ELEM_TYPE_BOOLEAN,		/* boolean type */
+	SNDRV_CTL_ELEM_TYPE_INTEGER,		/* integer type */
+	SNDRV_CTL_ELEM_TYPE_ENUMERATED,	/* enumerated type */
+	SNDRV_CTL_ELEM_TYPE_BYTES,		/* byte array */
+	SNDRV_CTL_ELEM_TYPE_IEC958,		/* IEC958 (S/PDIF) setup */
+	SNDRV_CTL_ELEM_TYPE_LAST = SNDRV_CTL_ELEM_TYPE_IEC958,
+};
+
+enum sndrv_ctl_elem_iface {
+	SNDRV_CTL_ELEM_IFACE_CARD,		/* global control */
+	SNDRV_CTL_ELEM_IFACE_HWDEP,		/* hardware dependent device */
+	SNDRV_CTL_ELEM_IFACE_MIXER,		/* virtual mixer device */
+	SNDRV_CTL_ELEM_IFACE_PCM,		/* PCM device */
+	SNDRV_CTL_ELEM_IFACE_RAWMIDI,	/* RawMidi device */
+	SNDRV_CTL_ELEM_IFACE_TIMER,		/* timer device */
+	SNDRV_CTL_ELEM_IFACE_SEQUENCER,	/* sequencer client */
+	SNDRV_CTL_ELEM_IFACE_LAST = SNDRV_CTL_ELEM_IFACE_SEQUENCER,
+};
+
+#define SNDRV_CTL_ELEM_ACCESS_READ		(1<<0)
+#define SNDRV_CTL_ELEM_ACCESS_WRITE		(1<<1)
+#define SNDRV_CTL_ELEM_ACCESS_READWRITE	(SNDRV_CTL_ELEM_ACCESS_READ|SNDRV_CTL_ELEM_ACCESS_WRITE)
+#define SNDRV_CTL_ELEM_ACCESS_VOLATILE	(1<<2)	/* control value may be changed without a notification */
+#define SNDRV_CTL_ELEM_ACCESS_INACTIVE	(1<<8)	/* control does actually nothing, but may be updated */
+#define SNDRV_CTL_ELEM_ACCESS_LOCK		(1<<9)	/* write lock */
+#define SNDRV_CTL_ELEM_ACCESS_INDIRECT	(1<<31)	/* indirect access */
+
+struct sndrv_ctl_elem_id {
+	unsigned int numid;		/* numeric identifier, zero = invalid */
+	enum sndrv_ctl_elem_iface iface; /* interface identifier */
+	unsigned int device;		/* device/client number */
+	unsigned int subdevice;		/* subdevice (substream) number */
+        unsigned char name[44];		/* ASCII name of item */
+	unsigned int index;		/* index of item */
+};
+
+struct sndrv_ctl_elem_list {
+	unsigned int offset;		/* W: first element ID to get */
+	unsigned int space;		/* W: count of element IDs to get */
+	unsigned int used;		/* R: count of element IDs set */
+	unsigned int count;		/* R: count of all elements */
+	struct sndrv_ctl_elem_id *pids; /* R: IDs */
+	unsigned char reserved[50];
+};
+
+struct sndrv_ctl_elem_info {
+	struct sndrv_ctl_elem_id id;	/* W: element ID */
+	enum sndrv_ctl_elem_type type; /* R: value type - SNDRV_CTL_ELEM_TYPE_* */
+	unsigned int access;		/* R: value access (bitmask) - SNDRV_CTL_ELEM_ACCESS_* */
+	unsigned int count;		/* count of values */
+	union {
+		struct {
+			long min;		/* R: minimum value */
+			long max;		/* R: maximum value */
+			long step;		/* R: step (0 variable) */
+		} integer;
+		struct {
+			unsigned int items;	/* R: number of items */
+			unsigned int item;	/* W: item number */
+			char name[64];		/* R: value name */
+		} enumerated;
+		unsigned char reserved[128];
+	} value;
+	unsigned char reserved[64];
+};
+
+struct sndrv_ctl_elem_value {
+	struct sndrv_ctl_elem_id id;	/* W: element ID */
+	unsigned int indirect: 1;	/* W: use indirect pointer (xxx_ptr member) */
+        union {
+		union {
+			long value[128];
+			long *value_ptr;
+		} integer;
+		union {
+			unsigned int item[128];
+			unsigned int *item_ptr;
+		} enumerated;
+		union {
+			unsigned char data[512];
+			unsigned char *data_ptr;
+		} bytes;
+		struct sndrv_aes_iec958 iec958;
+        } value;                /* RO */
+        unsigned char reserved[128];
+};
+
+enum {
+	SNDRV_CTL_IOCTL_PVERSION = _IOR('U', 0x00, int),
+	SNDRV_CTL_IOCTL_CARD_INFO = _IOR('U', 0x01, struct sndrv_ctl_card_info),
+	SNDRV_CTL_IOCTL_ELEM_LIST = _IOWR('U', 0x10, struct sndrv_ctl_elem_list),
+	SNDRV_CTL_IOCTL_ELEM_INFO = _IOWR('U', 0x11, struct sndrv_ctl_elem_info),
+	SNDRV_CTL_IOCTL_ELEM_READ = _IOWR('U', 0x12, struct sndrv_ctl_elem_value),
+	SNDRV_CTL_IOCTL_ELEM_WRITE = _IOWR('U', 0x13, struct sndrv_ctl_elem_value),
+	SNDRV_CTL_IOCTL_ELEM_LOCK = _IOW('U', 0x14, struct sndrv_ctl_elem_id),
+	SNDRV_CTL_IOCTL_ELEM_UNLOCK = _IOW('U', 0x15, struct sndrv_ctl_elem_id),
+	SNDRV_CTL_IOCTL_SUBSCRIBE_EVENTS = _IOWR('U', 0x16, int),
+	SNDRV_CTL_IOCTL_HWDEP_NEXT_DEVICE = _IOWR('U', 0x20, int),
+	SNDRV_CTL_IOCTL_HWDEP_INFO = _IOR('U', 0x21, struct sndrv_hwdep_info),
+	SNDRV_CTL_IOCTL_PCM_NEXT_DEVICE = _IOR('U', 0x30, int),
+	SNDRV_CTL_IOCTL_PCM_INFO = _IOWR('U', 0x31, struct sndrv_pcm_info),
+	SNDRV_CTL_IOCTL_PCM_PREFER_SUBDEVICE = _IOW('U', 0x32, int),
+	SNDRV_CTL_IOCTL_RAWMIDI_NEXT_DEVICE = _IOWR('U', 0x40, int),
+	SNDRV_CTL_IOCTL_RAWMIDI_INFO = _IOWR('U', 0x41, struct sndrv_rawmidi_info),
+	SNDRV_CTL_IOCTL_RAWMIDI_PREFER_SUBDEVICE = _IOW('U', 0x42, int),
+};
+
+/*
+ *  Read interface.
+ */
+
+enum sndrv_ctl_event_type {
+	SNDRV_CTL_EVENT_ELEM,
+	SNDRV_CTL_EVENT_LAST = SNDRV_CTL_EVENT_ELEM,
+};
+
+#define SNDRV_CTL_EVENT_MASK_VALUE	(1<<0)	/* element value was changed */
+#define SNDRV_CTL_EVENT_MASK_INFO	(1<<1)	/* element info was changed */
+#define SNDRV_CTL_EVENT_MASK_ADD	(1<<2)	/* element was added */
+#define SNDRV_CTL_EVENT_MASK_REMOVE	(~0U)	/* element was removed */
+
+struct sndrv_ctl_event {
+	enum sndrv_ctl_event_type type;	/* event type - SNDRV_CTL_EVENT_* */
+	union {
+		struct {
+			unsigned int mask;
+			struct sndrv_ctl_elem_id id;
+		} elem;
+                unsigned char data8[60];
+        } data;
+};
+
+/*
+ *  Control names
+ */
+
+#define SNDRV_CTL_NAME_NONE				""
+#define SNDRV_CTL_NAME_PLAYBACK				"Playback "
+#define SNDRV_CTL_NAME_CAPTURE				"Capture "
+
+#define SNDRV_CTL_NAME_IEC958_SWITCH			"Switch"
+#define SNDRV_CTL_NAME_IEC958_VOLUME			"Volume"
+#define SNDRV_CTL_NAME_IEC958_DEFAULT			"Default"
+#define SNDRV_CTL_NAME_IEC958_MASK			"Mask"
+#define SNDRV_CTL_NAME_IEC958_CON_MASK			"Con Mask"
+#define SNDRV_CTL_NAME_IEC958_PRO_MASK			"Pro Mask"
+#define SNDRV_CTL_NAME_IEC958_PCM_STREAM		"PCM Stream"
+#define SNDRV_CTL_NAME_IEC958(expl,direction,what)	"IEC958 " expl SNDRV_CTL_NAME_##direction SNDRV_CTL_NAME_IEC958_##what
+
+/*
+ *
+ */
+
+struct sndrv_xferv {
+	const struct iovec *vector;
+	unsigned long count;
+};
+
+enum {
+	SNDRV_IOCTL_READV = _IOW('K', 0x00, struct sndrv_xferv),
+	SNDRV_IOCTL_WRITEV = _IOW('K', 0x01, struct sndrv_xferv),
+};
+
+#endif				/* __ASOUND_H */
diff -uNr linux-2.4.37.9/include/linux/asoundid.h linux-2.4.37.9-amithlon/include/linux/asoundid.h
--- linux-2.4.37.9/include/linux/asoundid.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/asoundid.h	2000-12-10 10:19:22.000000000 -0500
@@ -0,0 +1,97 @@
+/*
+ *  Copyright (c) 1994-98 by Jaroslav Kysela <perex@suse.cz>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __ASOUNDID_H
+#define __ASOUNDID_H
+
+/*
+ *  Types of soundcards...
+ *  Note: Don't assign new number to 100% clones...
+ *  Note: Order shouldn't be preserved, but assigment must be!!!
+ */
+
+/* Gravis UltraSound */
+#define SND_CARD_TYPE_GUS_CLASSIC	0x00000001
+#define SND_CARD_TYPE_GUS_EXTREME	0x00000002
+#define SND_CARD_TYPE_GUS_ACE		0x00000003
+#define SND_CARD_TYPE_GUS_MAX		0x00000004
+#define SND_CARD_TYPE_AMD_INTERWAVE	0x00000005
+/* Sound Blaster */
+#define SND_CARD_TYPE_SB_10		0x00000006
+#define SND_CARD_TYPE_SB_20		0x00000007
+#define SND_CARD_TYPE_SB_PRO		0x00000008
+#define SND_CARD_TYPE_SB_16		0x00000009
+#define SND_CARD_TYPE_SB_AWE		0x0000000a
+/* Various */
+#define SND_CARD_TYPE_ESS_ES1688	0x0000000b	/* ESS AudioDrive ESx688 */
+#define SND_CARD_TYPE_OPL3_SA		0x0000000c	/* Yamaha OPL3 SA */
+#define SND_CARD_TYPE_MOZART		0x0000000d	/* OAK Mozart */
+#define SND_CARD_TYPE_S3_SONICVIBES	0x0000000e	/* S3 SonicVibes */
+#define SND_CARD_TYPE_ENS1370		0x0000000f	/* Ensoniq ES1370 */
+#define SND_CARD_TYPE_ENS1371		0x00000010	/* Ensoniq ES1371 */
+#define SND_CARD_TYPE_CS4232		0x00000011	/* CS4232/CS4232A */
+#define SND_CARD_TYPE_CS4236		0x00000012	/* CS4235/CS4236B/CS4237B/CS4238B/CS4239 */
+#define SND_CARD_TYPE_AMD_INTERWAVE_STB	0x00000013	/* AMD InterWave + TEA6330T */
+#define SND_CARD_TYPE_ESS_ES1938	0x00000014	/* ESS Solo-1 ES1938 */
+#define SND_CARD_TYPE_ESS_ES18XX	0x00000015	/* ESS AudioDrive ES18XX */
+#define SND_CARD_TYPE_CS4231		0x00000016      /* CS4231 */
+#define SND_CARD_TYPE_OPTI92X		0x00000017	/* OPTi 92x chipset */
+#define SND_CARD_TYPE_SERIAL		0x00000018	/* Serial MIDI driver */
+#define SND_CARD_TYPE_AD1848		0x00000019	/* Generic AD1848 driver */
+#define SND_CARD_TYPE_TRID4DWAVEDX	0x0000001A	/* Trident 4DWave DX */
+#define SND_CARD_TYPE_TRID4DWAVENX	0x0000001B	/* Trident 4DWave NX */
+#define SND_CARD_TYPE_SGALAXY           0x0000001C      /* Aztech Sound Galaxy */
+#define SND_CARD_TYPE_CS461X		0x0000001D	/* Sound Fusion CS4610/12/15 */
+/* Turtle Beach WaveFront series */
+#define SND_CARD_TYPE_WAVEFRONT         0x0000001E      /* TB WaveFront generic */
+#define SND_CARD_TYPE_TROPEZ            0x0000001F      /* TB Tropez */
+#define SND_CARD_TYPE_TROPEZPLUS        0x00000020      /* TB Tropez+ */
+#define SND_CARD_TYPE_MAUI              0x00000021      /* TB Maui */
+#define SND_CARD_TYPE_CMI8330           0x00000022      /* C-Media CMI8330 */
+/* Various */
+#define SND_CARD_TYPE_DUMMY		0x00000023	/* dummy soundcard */
+#define SND_CARD_TYPE_ALS100		0x00000024	/* Avance Logic ALS100 */
+#define SND_CARD_TYPE_SHARE		0x00000025	/* share soundcard */
+#define SND_CARD_TYPE_SI_7018		0x00000026	/* SiS 7018 */
+#define SND_CARD_TYPE_OPTI93X		0x00000027	/* OPTi 93x chipset */
+#define SND_CARD_TYPE_MTPAV		0x00000028	/* MOTU MidiTimePiece AV multiport MIDI */
+#define SND_CARD_TYPE_VIRMIDI		0x00000029	/* Virtual MIDI */
+#define SND_CARD_TYPE_EMU10K1		0x0000002a	/* EMU10K1 */
+#define SND_CARD_TYPE_HAMMERFALL	0x0000002b	/* RME Digi9652  */
+#define SND_CARD_TYPE_HAMMERFALL_LIGHT	0x0000002c	/* RME Digi9652, but no expansion card */
+#define SND_CARD_TYPE_ICE1712		0x0000002d	/* ICE1712 */
+#define SND_CARD_TYPE_CMI8338		0x0000002e	/* C-Media CMI8338 */
+#define SND_CARD_TYPE_CMI8738		0x0000002f	/* C-Media CMI8738 */
+#define SND_CARD_TYPE_AD1816A		0x00000030	/* ADI SoundPort AD1816A */
+#define SND_CARD_TYPE_INTEL8X0		0x00000031	/* Intel 810/820/830/840/MX440 */
+#define SND_CARD_TYPE_ESS_ESOLDM1	0x00000032	/* Maestro 1 */
+#define SND_CARD_TYPE_ESS_ES1968	0x00000033	/* Maestro 2 */
+#define SND_CARD_TYPE_ESS_ES1978	0x00000034	/* Maestro 2E */
+#define SND_CARD_TYPE_DIGI96		0x00000035	/* RME Digi96 */
+#define SND_CARD_TYPE_VIA82C686A	0x00000036	/* VIA 82C686A */
+#define SND_CARD_TYPE_FM801		0x00000037	/* FM801 */
+#define SND_CARD_TYPE_AZT2320		0x00000038	/* AZT2320 */
+#define SND_CARD_TYPE_PRODIF_PLUS	0x00000039	/* Marian/Sek'D Prodif Plus */
+#define SND_CARD_TYPE_YMFPCI		0x0000003a	/* YMF724/740/744/754 */
+
+/* --- */
+#define SND_CARD_TYPE_LAST		0x0000003a
+
+#endif				/* __ASOUNDID_H */
diff -uNr linux-2.4.37.9/include/linux/autoconf.h linux-2.4.37.9-amithlon/include/linux/autoconf.h
--- linux-2.4.37.9/include/linux/autoconf.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/autoconf.h	2010-06-17 09:32:21.000000000 -0400
@@ -0,0 +1,1052 @@
+/*
+ * Automatically generated by make menuconfig: don't edit
+ */
+#define AUTOCONF_INCLUDED
+#define CONFIG_X86 1
+#undef  CONFIG_SBUS
+#define CONFIG_UID16 1
+
+/*
+ * Code maturity level options
+ */
+#define CONFIG_EXPERIMENTAL 1
+
+/*
+ * Loadable module support
+ */
+#define CONFIG_MODULES 1
+#undef  CONFIG_MODVERSIONS
+#undef  CONFIG_KMOD
+
+/*
+ * Processor type and features
+ */
+#undef  CONFIG_M386
+#undef  CONFIG_M486
+#undef  CONFIG_M586
+#undef  CONFIG_M586TSC
+#undef  CONFIG_M586MMX
+#undef  CONFIG_M686
+#define CONFIG_MPENTIUMIII 1
+#undef  CONFIG_MPENTIUM4
+#undef  CONFIG_MK6
+#undef  CONFIG_MK7
+#undef  CONFIG_MK8
+#undef  CONFIG_MELAN
+#undef  CONFIG_MCRUSOE
+#undef  CONFIG_MGEODE_LX
+#undef  CONFIG_MWINCHIPC6
+#undef  CONFIG_MWINCHIP2
+#undef  CONFIG_MWINCHIP3D
+#undef  CONFIG_MCYRIXIII
+#undef  CONFIG_MVIAC3_2
+#define CONFIG_X86_WP_WORKS_OK 1
+#define CONFIG_X86_INVLPG 1
+#define CONFIG_X86_CMPXCHG 1
+#define CONFIG_X86_XADD 1
+#define CONFIG_X86_BSWAP 1
+#define CONFIG_X86_POPAD_OK 1
+#undef  CONFIG_RWSEM_GENERIC_SPINLOCK
+#define CONFIG_RWSEM_XCHGADD_ALGORITHM 1
+#define CONFIG_X86_L1_CACHE_SHIFT (5)
+#define CONFIG_X86_HAS_TSC 1
+#define CONFIG_X86_GOOD_APIC 1
+#define CONFIG_X86_PGE 1
+#define CONFIG_X86_USE_PPRO_CHECKSUM 1
+#define CONFIG_X86_F00F_WORKS_OK 1
+#define CONFIG_X86_MCE 1
+#undef  CONFIG_TOSHIBA
+#define CONFIG_TOSHIBA_MODULE 1
+#undef  CONFIG_I8K
+#define CONFIG_I8K_MODULE 1
+#undef  CONFIG_MICROCODE
+#define CONFIG_MICROCODE_MODULE 1
+#undef  CONFIG_X86_MSR
+#define CONFIG_X86_MSR_MODULE 1
+#undef  CONFIG_X86_CPUID
+#define CONFIG_X86_CPUID_MODULE 1
+#undef  CONFIG_EDD
+#define CONFIG_NOHIGHMEM 1
+#undef  CONFIG_HIGHMEM4G
+#undef  CONFIG_HIGHMEM64G
+#undef  CONFIG_HIGHMEM
+#undef  CONFIG_MATH_EMULATION
+#define CONFIG_MTRR 1
+#undef  CONFIG_SMP
+#undef  CONFIG_X86_UP_APIC
+#undef  CONFIG_X86_UP_IOAPIC
+#undef  CONFIG_X86_TSC
+#undef  CONFIG_X86_TSC_DISABLE
+#define CONFIG_X86_TSC 1
+
+/*
+ * General setup
+ */
+#define CONFIG_NET 1
+#define CONFIG_PCI 1
+#undef  CONFIG_PCI_GOBIOS
+#undef  CONFIG_PCI_GODIRECT
+#define CONFIG_PCI_GOANY 1
+#define CONFIG_PCI_BIOS 1
+#define CONFIG_PCI_DIRECT 1
+#define CONFIG_ISA 1
+#undef  CONFIG_PCI_NAMES
+#undef  CONFIG_EISA
+#undef  CONFIG_MCA
+#undef  CONFIG_HOTPLUG
+#undef  CONFIG_PCMCIA
+#undef  CONFIG_HOTPLUG_PCI
+#define CONFIG_SYSVIPC 1
+#undef  CONFIG_BSD_PROCESS_ACCT
+#define CONFIG_SYSCTL 1
+#define CONFIG_KCORE_ELF 1
+#undef  CONFIG_KCORE_AOUT
+#undef  CONFIG_BINFMT_AOUT
+#define CONFIG_BINFMT_ELF 1
+#undef  CONFIG_BINFMT_MISC
+#undef  CONFIG_OOM_KILLER
+#define CONFIG_PM 1
+#define CONFIG_APM 1
+#undef  CONFIG_APM_IGNORE_USER_SUSPEND
+#undef  CONFIG_APM_DO_ENABLE
+#undef  CONFIG_APM_CPU_IDLE
+#undef  CONFIG_APM_DISPLAY_BLANK
+#undef  CONFIG_APM_RTC_IS_GMT
+#undef  CONFIG_APM_ALLOW_INTS
+#undef  CONFIG_APM_REAL_MODE_POWER_OFF
+
+/*
+ * ACPI Support
+ */
+#undef  CONFIG_ACPI
+
+/*
+ * Memory Technology Devices (MTD)
+ */
+#undef  CONFIG_MTD
+
+/*
+ * Parallel port support
+ */
+#undef  CONFIG_PARPORT
+
+/*
+ * Plug and Play configuration
+ */
+#define CONFIG_PNP 1
+#define CONFIG_ISAPNP 1
+
+/*
+ * Block devices
+ */
+#define CONFIG_BLK_DEV_FD 1
+#undef  CONFIG_BLK_DEV_XD
+#undef  CONFIG_PARIDE
+#undef  CONFIG_BLK_CPQ_DA
+#undef  CONFIG_BLK_CPQ_CISS_DA
+#undef  CONFIG_CISS_SCSI_TAPE
+#undef  CONFIG_CISS_MONITOR_THREAD
+#undef  CONFIG_BLK_DEV_DAC960
+#undef  CONFIG_BLK_DEV_UMEM
+#undef  CONFIG_BLK_DEV_SX8
+#undef  CONFIG_BLK_DEV_LOOP
+#undef  CONFIG_BLK_DEV_NBD
+#define CONFIG_BLK_DEV_RAM 1
+#define CONFIG_BLK_DEV_RAM_SIZE (4096)
+#define CONFIG_BLK_DEV_INITRD 1
+#undef  CONFIG_BLK_STATS
+
+/*
+ * Multi-device support (RAID and LVM)
+ */
+#undef  CONFIG_MD
+#undef  CONFIG_BLK_DEV_MD
+#undef  CONFIG_MD_LINEAR
+#undef  CONFIG_MD_RAID0
+#undef  CONFIG_MD_RAID1
+#undef  CONFIG_MD_RAID5
+#undef  CONFIG_MD_MULTIPATH
+#undef  CONFIG_BLK_DEV_LVM
+
+/*
+ * Networking options
+ */
+#define CONFIG_PACKET 1
+#define CONFIG_PACKET_MMAP 1
+#undef  CONFIG_NETLINK_DEV
+#undef  CONFIG_NETFILTER
+#undef  CONFIG_FILTER
+#undef  CONFIG_UNIX
+#undef  CONFIG_INET
+#undef  CONFIG_ATM
+#undef  CONFIG_VLAN_8021Q
+#undef  CONFIG_IPX
+#undef  CONFIG_ATALK
+#undef  CONFIG_DECNET
+#undef  CONFIG_BRIDGE
+#undef  CONFIG_X25
+#undef  CONFIG_LAPB
+#undef  CONFIG_LLC
+#undef  CONFIG_NET_DIVERT
+#undef  CONFIG_WAN_ROUTER
+#undef  CONFIG_NET_FASTROUTE
+#undef  CONFIG_NET_HW_FLOWCONTROL
+
+/*
+ * QoS and/or fair queueing
+ */
+#undef  CONFIG_NET_SCHED
+
+/*
+ * Network testing
+ */
+#undef  CONFIG_NET_PKTGEN
+
+/*
+ * Telephony Support
+ */
+#undef  CONFIG_PHONE
+#undef  CONFIG_PHONE_IXJ
+#undef  CONFIG_PHONE_IXJ_PCMCIA
+
+/*
+ * ATA/IDE/MFM/RLL support
+ */
+#define CONFIG_IDE 1
+
+/*
+ * IDE, ATA and ATAPI Block devices
+ */
+#define CONFIG_BLK_DEV_IDE 1
+#undef  CONFIG_BLK_DEV_HD_IDE
+#undef  CONFIG_BLK_DEV_HD
+#undef  CONFIG_BLK_DEV_IDE_SATA
+#define CONFIG_BLK_DEV_IDEDISK 1
+#define CONFIG_IDEDISK_MULTI_MODE 1
+#undef  CONFIG_IDEDISK_STROKE
+#undef  CONFIG_BLK_DEV_IDECS
+#undef  CONFIG_BLK_DEV_DELKIN
+#undef  CONFIG_BLK_DEV_IDECD
+#undef  CONFIG_BLK_DEV_IDETAPE
+#undef  CONFIG_BLK_DEV_IDEFLOPPY
+#define CONFIG_BLK_DEV_IDESCSI 1
+#undef  CONFIG_IDE_TASK_IOCTL
+#define CONFIG_BLK_DEV_CMD640 1
+#undef  CONFIG_BLK_DEV_CMD640_ENHANCED
+#undef  CONFIG_BLK_DEV_ISAPNP
+#define CONFIG_BLK_DEV_IDEPCI 1
+#define CONFIG_BLK_DEV_GENERIC 1
+#define CONFIG_IDEPCI_SHARE_IRQ 1
+#define CONFIG_BLK_DEV_IDEDMA_PCI 1
+#undef  CONFIG_BLK_DEV_OFFBOARD
+#undef  CONFIG_BLK_DEV_IDEDMA_FORCED
+#define CONFIG_IDEDMA_PCI_AUTO 1
+#undef  CONFIG_IDEDMA_ONLYDISK
+#define CONFIG_BLK_DEV_IDEDMA 1
+#undef  CONFIG_IDEDMA_PCI_WIP
+#define CONFIG_BLK_DEV_ADMA100 1
+#define CONFIG_BLK_DEV_AEC62XX 1
+#define CONFIG_BLK_DEV_ALI15X3 1
+#undef  CONFIG_WDC_ALI15X3
+#define CONFIG_BLK_DEV_AMD74XX 1
+#undef  CONFIG_AMD74XX_OVERRIDE
+#define CONFIG_BLK_DEV_ATIIXP 1
+#define CONFIG_BLK_DEV_CMD64X 1
+#define CONFIG_BLK_DEV_TRIFLEX 1
+#define CONFIG_BLK_DEV_CY82C693 1
+#define CONFIG_BLK_DEV_CS5530 1
+#define CONFIG_BLK_DEV_HPT34X 1
+#undef  CONFIG_HPT34X_AUTODMA
+#define CONFIG_BLK_DEV_HPT366 1
+#define CONFIG_BLK_DEV_PIIX 1
+#define CONFIG_BLK_DEV_NS87415 1
+#define CONFIG_BLK_DEV_OPTI621 1
+#define CONFIG_BLK_DEV_PDC202XX_OLD 1
+#undef  CONFIG_PDC202XX_BURST
+#define CONFIG_BLK_DEV_PDC202XX_NEW 1
+#undef  CONFIG_PDC202XX_FORCE
+#define CONFIG_BLK_DEV_RZ1000 1
+#define CONFIG_BLK_DEV_SC1200 1
+#define CONFIG_BLK_DEV_SVWKS 1
+#define CONFIG_BLK_DEV_SIIMAGE 1
+#define CONFIG_BLK_DEV_SIS5513 1
+#define CONFIG_BLK_DEV_SLC90E66 1
+#define CONFIG_BLK_DEV_TRM290 1
+#define CONFIG_BLK_DEV_VIA82CXXX 1
+#undef  CONFIG_IDE_CHIPSETS
+#define CONFIG_IDEDMA_AUTO 1
+#undef  CONFIG_IDEDMA_IVB
+#undef  CONFIG_DMA_NONPCI
+#define CONFIG_BLK_DEV_PDC202XX 1
+#undef  CONFIG_BLK_DEV_ATARAID
+#undef  CONFIG_BLK_DEV_ATARAID_PDC
+#undef  CONFIG_BLK_DEV_ATARAID_HPT
+#undef  CONFIG_BLK_DEV_ATARAID_MEDLEY
+#undef  CONFIG_BLK_DEV_ATARAID_SII
+
+/*
+ * SCSI support
+ */
+#define CONFIG_SCSI 1
+#define CONFIG_BLK_DEV_SD 1
+#define CONFIG_SD_EXTRA_DEVS (40)
+#undef  CONFIG_CHR_DEV_ST
+#undef  CONFIG_CHR_DEV_OSST
+#undef  CONFIG_BLK_DEV_SR
+#define CONFIG_CHR_DEV_SG 1
+#undef  CONFIG_SCSI_DEBUG_QUEUES
+#define CONFIG_SCSI_MULTI_LUN 1
+#undef  CONFIG_SCSI_CONSTANTS
+#undef  CONFIG_SCSI_LOGGING
+
+/*
+ * SCSI low-level drivers
+ */
+#undef  CONFIG_BLK_DEV_3W_XXXX_RAID
+#undef  CONFIG_SCSI_7000FASST
+#undef  CONFIG_SCSI_ACARD
+#undef  CONFIG_SCSI_AHA152X
+#undef  CONFIG_SCSI_AHA1542
+#undef  CONFIG_SCSI_AHA1740
+#undef  CONFIG_SCSI_AACRAID
+#undef  CONFIG_SCSI_AIC7XXX
+#undef  CONFIG_SCSI_AIC79XX
+#undef  CONFIG_SCSI_AIC7XXX_OLD
+#undef  CONFIG_SCSI_DPT_I2O
+#undef  CONFIG_SCSI_ADVANSYS
+#undef  CONFIG_SCSI_IN2000
+#undef  CONFIG_SCSI_AM53C974
+#undef  CONFIG_SCSI_MEGARAID
+#undef  CONFIG_SCSI_MEGARAID2
+#define CONFIG_SCSI_SATA 1
+#define CONFIG_SCSI_SATA_AHCI 1
+#define CONFIG_SCSI_SATA_SVW 1
+#define CONFIG_SCSI_ATA_PIIX 1
+#define CONFIG_SCSI_SATA_NV 1
+#define CONFIG_SCSI_SATA_QSTOR 1
+#define CONFIG_SCSI_SATA_PROMISE 1
+#define CONFIG_SCSI_SATA_SX4 1
+#define CONFIG_SCSI_SATA_SIL 1
+#define CONFIG_SCSI_SATA_SIS 1
+#define CONFIG_SCSI_SATA_ULI 1
+#define CONFIG_SCSI_SATA_VIA 1
+#define CONFIG_SCSI_SATA_VITESSE 1
+#undef  CONFIG_SCSI_BUSLOGIC
+#undef  CONFIG_SCSI_CPQFCTS
+#undef  CONFIG_SCSI_DMX3191D
+#undef  CONFIG_SCSI_DTC3280
+#undef  CONFIG_SCSI_EATA
+#undef  CONFIG_SCSI_EATA_DMA
+#undef  CONFIG_SCSI_EATA_PIO
+#undef  CONFIG_SCSI_FUTURE_DOMAIN
+#undef  CONFIG_SCSI_GDTH
+#undef  CONFIG_SCSI_GENERIC_NCR5380
+#undef  CONFIG_SCSI_IPS
+#undef  CONFIG_SCSI_INITIO
+#undef  CONFIG_SCSI_INIA100
+#undef  CONFIG_SCSI_NCR53C406A
+#undef  CONFIG_SCSI_NCR53C7xx
+#undef  CONFIG_SCSI_SYM53C8XX_2
+#undef  CONFIG_SCSI_NCR53C8XX
+#undef  CONFIG_SCSI_SYM53C8XX
+#undef  CONFIG_SCSI_PAS16
+#undef  CONFIG_SCSI_PCI2000
+#undef  CONFIG_SCSI_PCI2220I
+#undef  CONFIG_SCSI_PSI240I
+#undef  CONFIG_SCSI_QLOGIC_FAS
+#undef  CONFIG_SCSI_QLOGIC_ISP
+#undef  CONFIG_SCSI_QLOGIC_FC
+#undef  CONFIG_SCSI_QLOGIC_1280
+#undef  CONFIG_SCSI_SEAGATE
+#undef  CONFIG_SCSI_SIM710
+#undef  CONFIG_SCSI_SYM53C416
+#undef  CONFIG_SCSI_DC390T
+#undef  CONFIG_SCSI_T128
+#undef  CONFIG_SCSI_U14_34F
+#undef  CONFIG_SCSI_ULTRASTOR
+#undef  CONFIG_SCSI_NSP32
+#undef  CONFIG_SCSI_DEBUG
+
+/*
+ * Fusion MPT device support
+ */
+#undef  CONFIG_FUSION
+#undef  CONFIG_FUSION_BOOT
+#undef  CONFIG_FUSION_ISENSE
+#undef  CONFIG_FUSION_CTL
+#undef  CONFIG_FUSION_LAN
+
+/*
+ * IEEE 1394 (FireWire) support (EXPERIMENTAL)
+ */
+#undef  CONFIG_IEEE1394
+
+/*
+ * I2O device support
+ */
+#undef  CONFIG_I2O
+#undef  CONFIG_I2O_PCI
+#undef  CONFIG_I2O_BLOCK
+#undef  CONFIG_I2O_LAN
+#undef  CONFIG_I2O_SCSI
+#undef  CONFIG_I2O_PROC
+
+/*
+ * Network device support
+ */
+#define CONFIG_NETDEVICES 1
+
+/*
+ * ARCnet devices
+ */
+#undef  CONFIG_ARCNET
+#undef  CONFIG_DUMMY
+#define CONFIG_DUMMY_MODULE 1
+#undef  CONFIG_BONDING
+#undef  CONFIG_EQUALIZER
+#undef  CONFIG_TUN
+#undef  CONFIG_ETHERTAP
+#undef  CONFIG_NET_SB1000
+
+/*
+ * Ethernet (10 or 100Mbit)
+ */
+#define CONFIG_NET_ETHERNET 1
+#undef  CONFIG_SUNLANCE
+#undef  CONFIG_HAPPYMEAL
+#define CONFIG_HAPPYMEAL_MODULE 1
+#undef  CONFIG_SUNBMAC
+#undef  CONFIG_SUNQE
+#undef  CONFIG_SUNGEM
+#define CONFIG_SUNGEM_MODULE 1
+#define CONFIG_NET_VENDOR_3COM 1
+#undef  CONFIG_EL1
+#define CONFIG_EL1_MODULE 1
+#undef  CONFIG_EL2
+#define CONFIG_EL2_MODULE 1
+#undef  CONFIG_ELPLUS
+#define CONFIG_ELPLUS_MODULE 1
+#undef  CONFIG_EL16
+#define CONFIG_EL16_MODULE 1
+#undef  CONFIG_EL3
+#define CONFIG_EL3_MODULE 1
+#undef  CONFIG_3C515
+#define CONFIG_3C515_MODULE 1
+#undef  CONFIG_ELMC
+#undef  CONFIG_ELMC_II
+#undef  CONFIG_VORTEX
+#define CONFIG_VORTEX_MODULE 1
+#undef  CONFIG_TYPHOON
+#define CONFIG_TYPHOON_MODULE 1
+#undef  CONFIG_LANCE
+#define CONFIG_LANCE_MODULE 1
+#define CONFIG_NET_VENDOR_SMC 1
+#undef  CONFIG_WD80x3
+#define CONFIG_WD80x3_MODULE 1
+#undef  CONFIG_ULTRAMCA
+#undef  CONFIG_ULTRA
+#define CONFIG_ULTRA_MODULE 1
+#undef  CONFIG_ULTRA32
+#undef  CONFIG_SMC9194
+#define CONFIG_SMC9194_MODULE 1
+#define CONFIG_NET_VENDOR_RACAL 1
+#undef  CONFIG_NI5010
+#define CONFIG_NI5010_MODULE 1
+#undef  CONFIG_NI52
+#define CONFIG_NI52_MODULE 1
+#undef  CONFIG_NI65
+#define CONFIG_NI65_MODULE 1
+#undef  CONFIG_AT1700
+#define CONFIG_AT1700_MODULE 1
+#undef  CONFIG_DEPCA
+#define CONFIG_DEPCA_MODULE 1
+#undef  CONFIG_HP100
+#define CONFIG_HP100_MODULE 1
+#undef  CONFIG_NET_ISA
+#define CONFIG_NET_PCI 1
+#undef  CONFIG_PCNET32
+#define CONFIG_PCNET32_MODULE 1
+#undef  CONFIG_AMD8111_ETH
+#define CONFIG_AMD8111_ETH_MODULE 1
+#undef  CONFIG_ADAPTEC_STARFIRE
+#define CONFIG_ADAPTEC_STARFIRE_MODULE 1
+#undef  CONFIG_AC3200
+#define CONFIG_AC3200_MODULE 1
+#undef  CONFIG_APRICOT
+#define CONFIG_APRICOT_MODULE 1
+#undef  CONFIG_B44
+#define CONFIG_B44_MODULE 1
+#undef  CONFIG_CS89x0
+#define CONFIG_CS89x0_MODULE 1
+#undef  CONFIG_TULIP
+#define CONFIG_TULIP_MODULE 1
+#define CONFIG_TULIP_MWI 1
+#define CONFIG_TULIP_MMIO 1
+#undef  CONFIG_DE4X5
+#define CONFIG_DE4X5_MODULE 1
+#undef  CONFIG_DGRS
+#define CONFIG_DGRS_MODULE 1
+#undef  CONFIG_DM9102
+#define CONFIG_DM9102_MODULE 1
+#undef  CONFIG_EEPRO100
+#define CONFIG_EEPRO100_MODULE 1
+#undef  CONFIG_EEPRO100_PIO
+#undef  CONFIG_E100
+#define CONFIG_E100_MODULE 1
+#undef  CONFIG_LNE390
+#undef  CONFIG_FEALNX
+#define CONFIG_FEALNX_MODULE 1
+#undef  CONFIG_NATSEMI
+#define CONFIG_NATSEMI_MODULE 1
+#undef  CONFIG_NE2K_PCI
+#define CONFIG_NE2K_PCI_MODULE 1
+#undef  CONFIG_FORCEDETH
+#define CONFIG_FORCEDETH_MODULE 1
+#undef  CONFIG_NE3210
+#undef  CONFIG_ES3210
+#undef  CONFIG_8139CP
+#undef  CONFIG_8139TOO
+#define CONFIG_8139TOO_MODULE 1
+#undef  CONFIG_8139TOO_PIO
+#undef  CONFIG_8139TOO_TUNE_TWISTER
+#define CONFIG_8139TOO_8129 1
+#undef  CONFIG_8139_OLD_RX_RESET
+#undef  CONFIG_SIS900
+#define CONFIG_SIS900_MODULE 1
+#undef  CONFIG_EPIC100
+#define CONFIG_EPIC100_MODULE 1
+#undef  CONFIG_SUNDANCE
+#define CONFIG_SUNDANCE_MODULE 1
+#undef  CONFIG_SUNDANCE_MMIO
+#undef  CONFIG_TLAN
+#define CONFIG_TLAN_MODULE 1
+#undef  CONFIG_VIA_RHINE
+#define CONFIG_VIA_RHINE_MODULE 1
+#undef  CONFIG_VIA_RHINE_MMIO
+#undef  CONFIG_WINBOND_840
+#define CONFIG_WINBOND_840_MODULE 1
+#define CONFIG_NET_POCKET 1
+#undef  CONFIG_ATP
+#define CONFIG_ATP_MODULE 1
+#undef  CONFIG_DE600
+#define CONFIG_DE600_MODULE 1
+#undef  CONFIG_DE620
+#define CONFIG_DE620_MODULE 1
+
+/*
+ * Ethernet (1000 Mbit)
+ */
+#undef  CONFIG_ACENIC
+#define CONFIG_ACENIC_MODULE 1
+#undef  CONFIG_ACENIC_OMIT_TIGON_I
+#undef  CONFIG_DL2K
+#define CONFIG_DL2K_MODULE 1
+#undef  CONFIG_E1000
+#define CONFIG_E1000_MODULE 1
+#undef  CONFIG_E1000_NAPI
+#undef  CONFIG_MYRI_SBUS
+#undef  CONFIG_NS83820
+#define CONFIG_NS83820_MODULE 1
+#undef  CONFIG_HAMACHI
+#define CONFIG_HAMACHI_MODULE 1
+#undef  CONFIG_YELLOWFIN
+#define CONFIG_YELLOWFIN_MODULE 1
+#undef  CONFIG_R8169
+#define CONFIG_R8169_MODULE 1
+#undef  CONFIG_SKGE
+#define CONFIG_SKGE_MODULE 1
+#undef  CONFIG_SKY2
+#define CONFIG_SKY2_MODULE 1
+#undef  CONFIG_SK98LIN
+#define CONFIG_SK98LIN_MODULE 1
+#undef  CONFIG_TIGON3
+#define CONFIG_TIGON3_MODULE 1
+#undef  CONFIG_FDDI
+#undef  CONFIG_PLIP
+#undef  CONFIG_PPP
+#undef  CONFIG_SLIP
+
+/*
+ * Wireless LAN (non-hamradio)
+ */
+#undef  CONFIG_NET_RADIO
+
+/*
+ * Token Ring devices
+ */
+#undef  CONFIG_TR
+#undef  CONFIG_NET_FC
+#undef  CONFIG_RCPCI
+#undef  CONFIG_SHAPER
+
+/*
+ * Wan interfaces
+ */
+#undef  CONFIG_WAN
+
+/*
+ * Amateur Radio support
+ */
+#undef  CONFIG_HAMRADIO
+
+/*
+ * IrDA (infrared) support
+ */
+#undef  CONFIG_IRDA
+
+/*
+ * ISDN subsystem
+ */
+#undef  CONFIG_ISDN
+
+/*
+ * Old CD-ROM drivers (not SCSI, not IDE)
+ */
+#undef  CONFIG_CD_NO_IDESCSI
+
+/*
+ * Input core support
+ */
+#undef  CONFIG_INPUT
+#undef  CONFIG_INPUT_KEYBDEV
+#undef  CONFIG_DUMMY_KEYB
+#undef  CONFIG_INPUT_MOUSEDEV
+#undef  CONFIG_INPUT_JOYDEV
+#undef  CONFIG_INPUT_EVDEV
+#undef  CONFIG_INPUT_UINPUT
+
+/*
+ * Character devices
+ */
+#define CONFIG_VT 1
+#define CONFIG_VT_CONSOLE 1
+#define CONFIG_SERIAL 1
+#undef  CONFIG_SERIAL_CONSOLE
+#define CONFIG_SERIAL_EXTENDED 1
+#define CONFIG_SERIAL_MANY_PORTS 1
+#define CONFIG_SERIAL_SHARE_IRQ 1
+#define CONFIG_SERIAL_DETECT_IRQ 1
+#define CONFIG_SERIAL_MULTIPORT 1
+#define CONFIG_HUB6 1
+#define CONFIG_SERIAL_NONSTANDARD 1
+#undef  CONFIG_COMPUTONE
+#define CONFIG_COMPUTONE_MODULE 1
+#undef  CONFIG_ROCKETPORT
+#define CONFIG_ROCKETPORT_MODULE 1
+#undef  CONFIG_CYCLADES
+#define CONFIG_CYCLADES_MODULE 1
+#define CONFIG_CYZ_INTR 1
+#undef  CONFIG_DIGIEPCA
+#define CONFIG_DIGIEPCA_MODULE 1
+#undef  CONFIG_ESPSERIAL
+#define CONFIG_ESPSERIAL_MODULE 1
+#undef  CONFIG_MOXA_INTELLIO
+#define CONFIG_MOXA_INTELLIO_MODULE 1
+#undef  CONFIG_MOXA_SMARTIO
+#define CONFIG_MOXA_SMARTIO_MODULE 1
+#undef  CONFIG_ISI
+#define CONFIG_ISI_MODULE 1
+#undef  CONFIG_SYNCLINK
+#define CONFIG_SYNCLINK_MODULE 1
+#undef  CONFIG_SYNCLINKMP
+#define CONFIG_SYNCLINKMP_MODULE 1
+#undef  CONFIG_N_HDLC
+#define CONFIG_N_HDLC_MODULE 1
+#undef  CONFIG_RISCOM8
+#define CONFIG_RISCOM8_MODULE 1
+#undef  CONFIG_SPECIALIX
+#define CONFIG_SPECIALIX_MODULE 1
+#define CONFIG_SPECIALIX_RTSCTS 1
+#undef  CONFIG_SPECIALIX_BROKEN
+#undef  CONFIG_SX
+#undef  CONFIG_RIO
+#define CONFIG_STALDRV 1
+#undef  CONFIG_STALLION
+#define CONFIG_STALLION_MODULE 1
+#undef  CONFIG_ISTALLION
+#define CONFIG_ISTALLION_MODULE 1
+#undef  CONFIG_UNIX98_PTYS
+
+/*
+ * I2C support
+ */
+#undef  CONFIG_I2C
+
+/*
+ * Mice
+ */
+#undef  CONFIG_BUSMOUSE
+#undef  CONFIG_MOUSE
+
+/*
+ * Joysticks
+ */
+#undef  CONFIG_INPUT_GAMEPORT
+#undef  CONFIG_QIC02_TAPE
+#undef  CONFIG_IPMI_HANDLER
+#undef  CONFIG_IPMI_PANIC_EVENT
+#undef  CONFIG_IPMI_DEVICE_INTERFACE
+#undef  CONFIG_IPMI_KCS
+#undef  CONFIG_IPMI_WATCHDOG
+
+/*
+ * Watchdog Cards
+ */
+#undef  CONFIG_WATCHDOG
+#undef  CONFIG_SCx200
+#undef  CONFIG_SCx200_GPIO
+#undef  CONFIG_AMD_RNG
+#undef  CONFIG_INTEL_RNG
+#undef  CONFIG_HW_RANDOM
+#undef  CONFIG_GEODE_RNG
+#undef  CONFIG_AMD_PM768
+#undef  CONFIG_NVRAM
+#define CONFIG_RTC 1
+#undef  CONFIG_MKBD
+#undef  CONFIG_DTLK
+#undef  CONFIG_R3964
+#undef  CONFIG_APPLICOM
+#undef  CONFIG_SONYPI
+
+/*
+ * Ftape, the floppy tape device driver
+ */
+#undef  CONFIG_FTAPE
+#undef  CONFIG_AGP
+
+/*
+ * Direct Rendering Manager (XFree86 DRI support)
+ */
+#undef  CONFIG_DRM
+#undef  CONFIG_MWAVE
+#undef  CONFIG_OBMOUSE
+
+/*
+ * Multimedia devices
+ */
+#undef  CONFIG_VIDEO_DEV
+
+/*
+ * File systems
+ */
+#undef  CONFIG_QUOTA
+#undef  CONFIG_QFMT_V2
+#undef  CONFIG_AUTOFS_FS
+#undef  CONFIG_AUTOFS4_FS
+#undef  CONFIG_REISERFS_FS
+#undef  CONFIG_REISERFS_CHECK
+#undef  CONFIG_REISERFS_PROC_INFO
+#undef  CONFIG_ADFS_FS
+#undef  CONFIG_ADFS_FS_RW
+#undef  CONFIG_AFFS_FS
+#undef  CONFIG_HFS_FS
+#undef  CONFIG_HFSPLUS_FS
+#undef  CONFIG_BEFS_FS
+#undef  CONFIG_BEFS_DEBUG
+#undef  CONFIG_BFS_FS
+#undef  CONFIG_EXT3_FS
+#undef  CONFIG_JBD
+#undef  CONFIG_JBD_DEBUG
+#undef  CONFIG_FAT_FS
+#undef  CONFIG_MSDOS_FS
+#undef  CONFIG_UMSDOS_FS
+#undef  CONFIG_VFAT_FS
+#undef  CONFIG_EFS_FS
+#undef  CONFIG_JFFS_FS
+#undef  CONFIG_JFFS2_FS
+#undef  CONFIG_CRAMFS
+#undef  CONFIG_TMPFS
+#define CONFIG_RAMFS 1
+#undef  CONFIG_ISO9660_FS
+#undef  CONFIG_JOLIET
+#undef  CONFIG_ZISOFS
+#undef  CONFIG_JFS_FS
+#undef  CONFIG_JFS_DEBUG
+#undef  CONFIG_JFS_STATISTICS
+#undef  CONFIG_MINIX_FS
+#undef  CONFIG_VXFS_FS
+#undef  CONFIG_NTFS_FS
+#undef  CONFIG_NTFS_RW
+#undef  CONFIG_HPFS_FS
+#define CONFIG_PROC_FS 1
+#undef  CONFIG_DEVFS_FS
+#undef  CONFIG_DEVFS_MOUNT
+#undef  CONFIG_DEVFS_DEBUG
+#undef  CONFIG_DEVPTS_FS
+#undef  CONFIG_QNX4FS_FS
+#undef  CONFIG_QNX4FS_RW
+#undef  CONFIG_ROMFS_FS
+#define CONFIG_EXT2_FS 1
+#undef  CONFIG_SYSV_FS
+#undef  CONFIG_UDF_FS
+#undef  CONFIG_UDF_RW
+#undef  CONFIG_UFS_FS
+#undef  CONFIG_UFS_FS_WRITE
+#undef  CONFIG_XFS_FS
+#undef  CONFIG_XFS_QUOTA
+#undef  CONFIG_XFS_RT
+#undef  CONFIG_XFS_TRACE
+#undef  CONFIG_XFS_DEBUG
+
+/*
+ * Network File Systems
+ */
+#undef  CONFIG_CODA_FS
+#undef  CONFIG_INTERMEZZO_FS
+#undef  CONFIG_NFS_FS
+#undef  CONFIG_NFS_V3
+#undef  CONFIG_NFS_DIRECTIO
+#undef  CONFIG_ROOT_NFS
+#undef  CONFIG_NFSD
+#undef  CONFIG_NFSD_V3
+#undef  CONFIG_NFSD_TCP
+#undef  CONFIG_SUNRPC
+#undef  CONFIG_LOCKD
+#undef  CONFIG_SMB_FS
+#undef  CONFIG_NCPFS_NLS
+#undef  CONFIG_ZISOFS_FS
+#undef  CONFIG_ZLIB_FS_INFLATE
+
+/*
+ * Partition Types
+ */
+#undef  CONFIG_PARTITION_ADVANCED
+#define CONFIG_MSDOS_PARTITION 1
+#undef  CONFIG_SMB_NLS
+#undef  CONFIG_NLS
+
+/*
+ * Console drivers
+ */
+#define CONFIG_VGA_CONSOLE 1
+#define CONFIG_VIDEO_SELECT 1
+#undef  CONFIG_MDA_CONSOLE
+
+/*
+ * Frame-buffer support
+ */
+#define CONFIG_FB 1
+#define CONFIG_DUMMY_CONSOLE 1
+#define CONFIG_FB_RIVA 1
+#undef  CONFIG_FB_CLGEN
+#undef  CONFIG_FB_PM2
+#undef  CONFIG_FB_PM3
+#undef  CONFIG_FB_CYBER2000
+#define CONFIG_FB_VESA 1
+#undef  CONFIG_FB_VGA16
+#undef  CONFIG_FB_HGA
+#define CONFIG_VIDEO_SELECT 1
+#define CONFIG_FB_MATROX 1
+#define CONFIG_FB_MATROX_MILLENIUM 1
+#define CONFIG_FB_MATROX_MYSTIQUE 1
+#define CONFIG_FB_MATROX_G450 1
+#define CONFIG_FB_MATROX_G100 1
+#undef  CONFIG_FB_MATROX_PROC
+#define CONFIG_FB_MATROX_MULTIHEAD 1
+#undef  CONFIG_FB_ATY
+#define CONFIG_FB_RADEON 1
+#undef  CONFIG_FB_ATY128
+#undef  CONFIG_FB_INTEL
+#undef  CONFIG_FB_SIS
+#undef  CONFIG_FB_NEOMAGIC
+#undef  CONFIG_FB_3DFX
+#undef  CONFIG_FB_VOODOO1
+#define CONFIG_FB_TRIDENT 1
+#undef  CONFIG_FB_IT8181
+#undef  CONFIG_FB_VIRTUAL
+#define CONFIG_FBCON_ADVANCED 1
+#undef  CONFIG_FBCON_MFB
+#undef  CONFIG_FBCON_CFB2
+#undef  CONFIG_FBCON_CFB4
+#define CONFIG_FBCON_CFB8 1
+#define CONFIG_FBCON_CFB16 1
+#undef  CONFIG_FBCON_CFB24
+#define CONFIG_FBCON_CFB32 1
+#undef  CONFIG_FBCON_AFB
+#undef  CONFIG_FBCON_ILBM
+#undef  CONFIG_FBCON_IPLAN2P2
+#undef  CONFIG_FBCON_IPLAN2P4
+#undef  CONFIG_FBCON_IPLAN2P8
+#undef  CONFIG_FBCON_MAC
+#undef  CONFIG_FBCON_VGA_PLANES
+#undef  CONFIG_FBCON_VGA
+#undef  CONFIG_FBCON_HGA
+#define CONFIG_FBCON_FONTWIDTH8_ONLY 1
+#define CONFIG_FBCON_FONTS 1
+#define CONFIG_FONT_8x8 1
+#define CONFIG_FONT_8x16 1
+#undef  CONFIG_FONT_SUN8x16
+#undef  CONFIG_FONT_PEARL_8x8
+#undef  CONFIG_FONT_ACORN_8x8
+
+/*
+ * Sound
+ */
+#define CONFIG_SOUND 1
+#undef  CONFIG_SOUND_ALI5455
+#define CONFIG_SOUND_ALI5455_MODULE 1
+#define CONFIG_SOUND_ALI5455_CODECSPDIFOUT_PCMOUTSHARE 1
+#define CONFIG_SOUND_ALI5455_CODECSPDIFOUT_CODECINDEPENDENTDMA 1
+#define CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_PCMOUTSHARE 1
+#define CONFIG_SOUND_ALI5455_CONTROLLERSPDIFOUT_CONTROLLERINDEPENDENTDMA 1
+#undef  CONFIG_SOUND_BT878
+#define CONFIG_SOUND_BT878_MODULE 1
+#undef  CONFIG_SOUND_CMPCI
+#define CONFIG_SOUND_CMPCI_MODULE 1
+#define CONFIG_SOUND_CMPCI_FM 1
+#define CONFIG_SOUND_CMPCI_FMIO 0x388
+#define CONFIG_SOUND_CMPCI_FMIO 0x388
+#define CONFIG_SOUND_CMPCI_MIDI 1
+#define CONFIG_SOUND_CMPCI_MPUIO 0x330
+#define CONFIG_SOUND_CMPCI_JOYSTICK 1
+#define CONFIG_SOUND_CMPCI_CM8738 1
+#define CONFIG_SOUND_CMPCI_SPDIFINVERSE 1
+#define CONFIG_SOUND_CMPCI_SPDIFLOOP 1
+#define CONFIG_SOUND_CMPCI_SPEAKERS (2)
+#undef  CONFIG_SOUND_EMU10K1
+#define CONFIG_SOUND_EMU10K1_MODULE 1
+#define CONFIG_MIDI_EMU10K1 1
+#undef  CONFIG_SOUND_FUSION
+#define CONFIG_SOUND_FUSION_MODULE 1
+#undef  CONFIG_SOUND_CS4281
+#define CONFIG_SOUND_CS4281_MODULE 1
+#undef  CONFIG_SOUND_ES1370
+#define CONFIG_SOUND_ES1370_MODULE 1
+#undef  CONFIG_SOUND_ES1371
+#define CONFIG_SOUND_ES1371_MODULE 1
+#undef  CONFIG_SOUND_ESSSOLO1
+#define CONFIG_SOUND_ESSSOLO1_MODULE 1
+#undef  CONFIG_SOUND_MAESTRO
+#define CONFIG_SOUND_MAESTRO_MODULE 1
+#undef  CONFIG_SOUND_MAESTRO3
+#define CONFIG_SOUND_MAESTRO3_MODULE 1
+#undef  CONFIG_SOUND_FORTE
+#define CONFIG_SOUND_FORTE_MODULE 1
+#undef  CONFIG_SOUND_ICH
+#define CONFIG_SOUND_ICH_MODULE 1
+#undef  CONFIG_SOUND_RME96XX
+#define CONFIG_SOUND_RME96XX_MODULE 1
+#undef  CONFIG_SOUND_SONICVIBES
+#define CONFIG_SOUND_SONICVIBES_MODULE 1
+#undef  CONFIG_SOUND_TRIDENT
+#define CONFIG_SOUND_TRIDENT_MODULE 1
+#undef  CONFIG_SOUND_MSNDCLAS
+#define CONFIG_SOUND_MSNDCLAS_MODULE 1
+#undef  CONFIG_MSNDCLAS_HAVE_BOOT
+#define CONFIG_MSNDCLAS_INIT_FILE "/etc/sound/msndinit.bin"
+#define CONFIG_MSNDCLAS_PERM_FILE "/etc/sound/msndperm.bin"
+#undef  CONFIG_SOUND_MSNDPIN
+#define CONFIG_SOUND_MSNDPIN_MODULE 1
+#undef  CONFIG_MSNDPIN_HAVE_BOOT
+#define CONFIG_MSNDPIN_INIT_FILE "/etc/sound/pndspini.bin"
+#define CONFIG_MSNDPIN_PERM_FILE "/etc/sound/pndsperm.bin"
+#undef  CONFIG_SOUND_VIA82CXXX
+#define CONFIG_SOUND_VIA82CXXX_MODULE 1
+#define CONFIG_MIDI_VIA82CXXX 1
+#undef  CONFIG_SOUND_OSS
+#define CONFIG_SOUND_OSS_MODULE 1
+#undef  CONFIG_SOUND_TRACEINIT
+#undef  CONFIG_SOUND_DMAP
+#undef  CONFIG_SOUND_AD1816
+#define CONFIG_SOUND_AD1816_MODULE 1
+#undef  CONFIG_SOUND_AD1889
+#define CONFIG_SOUND_AD1889_MODULE 1
+#undef  CONFIG_SOUND_SGALAXY
+#define CONFIG_SOUND_SGALAXY_MODULE 1
+#undef  CONFIG_SOUND_ADLIB
+#define CONFIG_SOUND_ADLIB_MODULE 1
+#undef  CONFIG_SOUND_ACI_MIXER
+#define CONFIG_SOUND_ACI_MIXER_MODULE 1
+#undef  CONFIG_SOUND_CS4232
+#define CONFIG_SOUND_CS4232_MODULE 1
+#undef  CONFIG_SOUND_SSCAPE
+#define CONFIG_SOUND_SSCAPE_MODULE 1
+#undef  CONFIG_SOUND_GUS
+#define CONFIG_SOUND_GUS_MODULE 1
+#undef  CONFIG_SOUND_GUS16
+#undef  CONFIG_SOUND_GUSMAX
+#undef  CONFIG_SOUND_VMIDI
+#define CONFIG_SOUND_VMIDI_MODULE 1
+#undef  CONFIG_SOUND_TRIX
+#define CONFIG_SOUND_TRIX_MODULE 1
+#undef  CONFIG_SOUND_MSS
+#define CONFIG_SOUND_MSS_MODULE 1
+#undef  CONFIG_SOUND_MPU401
+#define CONFIG_SOUND_MPU401_MODULE 1
+#undef  CONFIG_SOUND_NM256
+#define CONFIG_SOUND_NM256_MODULE 1
+#undef  CONFIG_SOUND_MAD16
+#define CONFIG_SOUND_MAD16_MODULE 1
+#define CONFIG_MAD16_OLDCARD 1
+#undef  CONFIG_SOUND_PAS
+#define CONFIG_SOUND_PAS_MODULE 1
+#undef  CONFIG_PAS_JOYSTICK
+#undef  CONFIG_SOUND_PSS
+#define CONFIG_SOUND_PSS_MODULE 1
+#undef  CONFIG_PSS_MIXER
+#undef  CONFIG_PSS_HAVE_BOOT
+#undef  CONFIG_SOUND_SB
+#define CONFIG_SOUND_SB_MODULE 1
+#undef  CONFIG_SOUND_AWE32_SYNTH
+#define CONFIG_SOUND_AWE32_SYNTH_MODULE 1
+#undef  CONFIG_SOUND_KAHLUA
+#define CONFIG_SOUND_KAHLUA_MODULE 1
+#undef  CONFIG_SOUND_WAVEFRONT
+#define CONFIG_SOUND_WAVEFRONT_MODULE 1
+#undef  CONFIG_SOUND_MAUI
+#define CONFIG_SOUND_MAUI_MODULE 1
+#undef  CONFIG_SOUND_YM3812
+#define CONFIG_SOUND_YM3812_MODULE 1
+#undef  CONFIG_SOUND_OPL3SA1
+#define CONFIG_SOUND_OPL3SA1_MODULE 1
+#undef  CONFIG_SOUND_OPL3SA2
+#define CONFIG_SOUND_OPL3SA2_MODULE 1
+#undef  CONFIG_SOUND_YMFPCI
+#define CONFIG_SOUND_YMFPCI_MODULE 1
+#define CONFIG_SOUND_YMFPCI_LEGACY 1
+#undef  CONFIG_SOUND_UART6850
+#define CONFIG_SOUND_UART6850_MODULE 1
+#undef  CONFIG_SOUND_AEDSP16
+#define CONFIG_SOUND_AEDSP16_MODULE 1
+#undef  CONFIG_SC6600
+#undef  CONFIG_AEDSP16_SBPRO
+#undef  CONFIG_AEDSP16_MSS
+#undef  CONFIG_AEDSP16_MPU401
+#undef  CONFIG_SOUND_TVMIXER
+#undef  CONFIG_SOUND_AD1980
+#define CONFIG_SOUND_AD1980_MODULE 1
+#undef  CONFIG_SOUND_WM97XX
+#define CONFIG_SOUND_WM97XX_MODULE 1
+
+/*
+ * USB support
+ */
+#undef  CONFIG_USB
+
+/*
+ * Support for USB gadgets
+ */
+#undef  CONFIG_USB_GADGET
+
+/*
+ * Bluetooth support
+ */
+#undef  CONFIG_BLUEZ
+
+/*
+ * Kernel hacking
+ */
+#undef  CONFIG_DEBUG_KERNEL
+#define CONFIG_LOG_BUF_SHIFT (0)
+
+/*
+ * Cryptographic options
+ */
+#undef  CONFIG_CRYPTO
+
+/*
+ * Library routines
+ */
+#undef  CONFIG_CRC32
+#undef  CONFIG_ZLIB_INFLATE
+#undef  CONFIG_ZLIB_DEFLATE
diff -uNr linux-2.4.37.9/include/linux/biglogo2.h linux-2.4.37.9-amithlon/include/linux/biglogo2.h
--- linux-2.4.37.9/include/linux/biglogo2.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/biglogo2.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,4521 @@
+#define LOGO_FRAMES 9
+#define LINUX_LOGO_COLORS 224
+#define INCLUDE_LINUX_LOGOBW 1
+#define INCLUDE_LINUX_LOGO16 1
+
+unsigned char linux_logo_red[] = { 
+0x02, 
+0x0e, 0x20, 0x29, 0x1a, 0x1a, 0x0a, 0x0e, 0x29, 0x3c, 0x53, 
+0x58, 0x57, 0x69, 0x52, 0x4a, 0x44, 0x36, 0x2e, 0x1a, 0x63, 
+0x70, 0x7a, 0x7d, 0x84, 0x7c, 0x71, 0x59, 0x3d, 0x31, 0x32, 
+0x7e, 0x84, 0x9c, 0x94, 0x9a, 0x8d, 0x76, 0x65, 0x52, 0x4c, 
+0x78, 0x8c, 0x94, 0x9a, 0xa6, 0xb0, 0xaa, 0xa0, 0xa0, 0x6a, 
+0x5c, 0x36, 0x9a, 0xa3, 0xbe, 0xb8, 0xc4, 0xbf, 0x92, 0x4e, 
+0x1a, 0xbe, 0xcc, 0x9e, 0x2a, 0xcc, 0xca, 0xda, 0xd5, 0xaa, 
+0x9e, 0x48, 0xdc, 0xc0, 0xce, 0xd6, 0xce, 0xe7, 0xdf, 0xb8, 
+0xb0, 0xe2, 0xc6, 0xd6, 0xe2, 0xfa, 0x4a, 0x43, 0xea, 0xc6, 
+0xe2, 0xf2, 0xee, 0xd0, 0xca, 0x47, 0xfa, 0xee, 0x74, 0xfc, 
+0xfb, 0xfb, 0xfb, 0xfa, 0xfc, 0xf5, 0xeb, 0x6d, 0x5e, 0xfc, 
+0xfd, 0xfe, 0xfb, 0xfe, 0xf9, 0x9d, 0x66, 0xfe, 0xfc, 0xfc, 
+0xfc, 0xf9, 0xfb, 0xf1, 0x8c, 0x6b, 0x79, 0x13, 0xfd, 0xfe, 
+0xfe, 0xfe, 0xf6, 0xfa, 0xfc, 0x1a, 0x20, 0xf8, 0xe6, 0xa5, 
+0xdd, 0x13, 0xe2, 0xb4, 0x50, 0x36, 0x30, 0x2c, 0x93, 0x78, 
+0xc8, 0xca, 0xde, 0xa4, 0x1f, 0xbe, 0xfe, 0xd5, 0xbe, 0x42, 
+0xe6, 0x72, 0xfc, 0xce, 0xfe, 0xfe, 0x5a, 0x98, 0xc9, 0x62, 
+0x32, 0x66, 0x3b, 0xa0, 0xb2, 0xc5, 0xd6, 0xce, 0xd2, 0xc2, 
+0xfe, 0xfe, 0x7b, 0x5e, 0xb2, 0xa6, 0xde, 0xb1, 0xb6, 0xb6, 
+0x86, 0xb0, 0xc6, 0xd6, 0x8a, 0x2e, 0xba, 0xe2, 0};
+unsigned char linux_logo_green[] = { 
+0x02, 
+0x0e, 0x20, 0x28, 0x1a, 0x13, 0x03, 0x02, 0x02, 0x02, 0x02, 
+0x16, 0x34, 0x36, 0x26, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+0x02, 0x12, 0x44, 0x84, 0x7c, 0x70, 0x58, 0x3c, 0x30, 0x02, 
+0x02, 0x02, 0x54, 0x94, 0x9a, 0x8c, 0x76, 0x64, 0x52, 0x4c, 
+0x02, 0x02, 0x02, 0x3c, 0xa6, 0xb0, 0xaa, 0xa0, 0x8e, 0x02, 
+0x02, 0x36, 0x02, 0x02, 0x80, 0xb8, 0xc4, 0xbe, 0x1e, 0x1a, 
+0x0a, 0x1a, 0xcc, 0x22, 0x12, 0x35, 0xb2, 0xda, 0xd4, 0x02, 
+0x02, 0x20, 0x9a, 0x03, 0x03, 0x0e, 0x62, 0xe6, 0xdf, 0x03, 
+0x02, 0xb2, 0x03, 0x03, 0x02, 0x5d, 0x16, 0x41, 0x04, 0x62, 
+0x4a, 0x02, 0x03, 0x6a, 0x02, 0x46, 0x03, 0xbe, 0x22, 0x0a, 
+0x0e, 0x16, 0x12, 0x24, 0x6f, 0xf2, 0xea, 0x29, 0x5e, 0x1c, 
+0x2d, 0x37, 0xea, 0xfe, 0xf6, 0x62, 0x3a, 0x52, 0xb2, 0x7f, 
+0x90, 0x88, 0xfa, 0xee, 0x7f, 0x6a, 0x36, 0x12, 0x99, 0xcf, 
+0xe1, 0x3e, 0xc2, 0xde, 0x48, 0x0e, 0x03, 0xd5, 0x26, 0x6a, 
+0x19, 0x04, 0x12, 0x7e, 0x2a, 0x12, 0x1e, 0x16, 0x4a, 0x53, 
+0x3f, 0x92, 0xa2, 0x16, 0x13, 0x7a, 0xc6, 0x12, 0x26, 0x35, 
+0x76, 0x19, 0xa5, 0xb6, 0xe6, 0x76, 0x3e, 0x2c, 0x67, 0x48, 
+0x0e, 0x22, 0x1f, 0x7b, 0x5e, 0x9e, 0x81, 0x4e, 0xa6, 0x1f, 
+0xc2, 0xba, 0x3a, 0x42, 0x36, 0x4e, 0x62, 0x9f, 0x14, 0x2a, 
+0x6a, 0x4a, 0x86, 0x4a, 0x12, 0x0f, 0x8e, 0x96, 0};
+unsigned char linux_logo_blue[] = { 
+0x02, 
+0x0e, 0x20, 0x28, 0x1a, 0x13, 0x03, 0x02, 0x02, 0x02, 0x02, 
+0x16, 0x34, 0x36, 0x26, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+0x02, 0x12, 0x44, 0x84, 0x7c, 0x70, 0x58, 0x3c, 0x30, 0x02, 
+0x02, 0x02, 0x54, 0x94, 0x9a, 0x8c, 0x76, 0x64, 0x52, 0x4c, 
+0x02, 0x02, 0x02, 0x3c, 0xa6, 0xb0, 0xaa, 0xa0, 0x8e, 0x02, 
+0x02, 0x36, 0x02, 0x02, 0x80, 0xb8, 0xc4, 0xbe, 0x1e, 0x1a, 
+0x0a, 0x1a, 0xcc, 0x22, 0x12, 0x35, 0xb2, 0xda, 0xd4, 0x02, 
+0x02, 0x20, 0x9a, 0x03, 0x03, 0x0e, 0x62, 0xe6, 0xdf, 0x03, 
+0x02, 0xb2, 0x03, 0x03, 0x02, 0x5d, 0x16, 0x41, 0x04, 0x62, 
+0x4a, 0x02, 0x03, 0x6a, 0x02, 0x46, 0x03, 0xbe, 0x22, 0x0a, 
+0x0e, 0x16, 0x12, 0x24, 0x6f, 0xf2, 0xea, 0x29, 0x5e, 0x1c, 
+0x2d, 0x37, 0xea, 0xfe, 0xf6, 0x62, 0x3a, 0x52, 0xb2, 0x7f, 
+0x90, 0x88, 0xfa, 0xee, 0x7f, 0x6a, 0x36, 0x12, 0x99, 0xcf, 
+0xe1, 0x3e, 0xc2, 0xde, 0x48, 0x0e, 0x03, 0xd5, 0x26, 0x6a, 
+0x19, 0x04, 0x12, 0x7e, 0x2a, 0x12, 0x1e, 0x16, 0x4a, 0x53, 
+0x3f, 0x92, 0xa2, 0x16, 0x13, 0x7a, 0xc6, 0x12, 0x26, 0x35, 
+0x76, 0x19, 0xa5, 0xb6, 0xe6, 0x76, 0x3e, 0x2c, 0x67, 0x48, 
+0x0e, 0x22, 0x1f, 0x7b, 0x5e, 0x9e, 0x81, 0x4e, 0xa6, 0x1f, 
+0xc2, 0xba, 0x3a, 0x42, 0x36, 0x4e, 0x62, 0x9f, 0x14, 0x2a, 
+0x6a, 0x4a, 0x86, 0x4a, 0x12, 0x0f, 0x8e, 0x96, 0};
+
+
+#define BLCK 0
+
+unsigned char linux_logo[]={
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0x24,0x24,0x25,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x28,0x29,0x2a,0x2b,
+	0x2c,0x2d,0x2e,0x2f,0x2f,0x30,0x31,0x32,0x28,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x32,0x34,0x35,0x36,0x37,
+	0x38,0x39,0x38,0x39,0x3a,0x3a,0x3b,0x2c,0x2a,0x30,0x2e,0x3c,0x3d,
+	0x22,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x35,0x3f,0x40,0x41,
+	0x42,0x42,0x43,0x42,0x43,0x42,0x44,0x38,0x39,0x45,0x46,0x2d,0x2e,
+	0x47,0x48,0x3c,0x3d,0x24,0x27,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x49,0x4a,0x4b,0x4c,
+	0x4d,0x4d,0x4e,0x4e,0x4e,0x4f,0x50,0x50,0x43,0x42,0x51,0x45,0x36,
+	0x52,0x34,0x53,0x2b,0x2e,0x3c,0x54,0x23,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x53,0x4a,0x55,0x56,
+	0x57,0x58,0x59,0x5a,0x5a,0x58,0x5a,0x58,0x4e,0x4e,0x4d,0x50,0x51,
+	0x5b,0x40,0x3f,0x35,0x34,0x53,0x2a,0x2f,0x5c,0x23,0x28,0x33,0x33,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x5d,0x40,0x55,0x56,
+	0x5e,0x4e,0x59,0x5f,0x5f,0x5f,0x5f,0x5f,0x59,0x59,0x5a,0x58,0x4e,
+	0x4e,0x60,0x4b,0x4a,0x40,0x3f,0x49,0x35,0x53,0x2a,0x2f,0x29,0x61,
+	0x61,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x42,0x4f,
+	0x4e,0x62,0x63,0x5f,0x64,0x64,0x64,0x64,0x65,0x65,0x5f,0x5f,0x59,
+	0x59,0x5a,0x4c,0x66,0x67,0x4b,0x4a,0x40,0x49,0x49,0x52,0x53,0x2a,
+	0x2f,0x68,0x3d,0x22,0x24,0x33,0x27,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x50,
+	0x58,0x59,0x69,0x6a,0x6b,0x6c,0x6d,0x69,0x6e,0x6f,0x6f,0x6f,0x6f,
+	0x65,0x65,0x65,0x57,0x70,0x71,0x56,0x67,0x4b,0x4a,0x40,0x49,0x35,
+	0x52,0x53,0x2f,0x5c,0x3c,0x3d,0x22,0x24,0x25,0x24,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,
+	0x50,0x58,0x5f,0x72,0x73,0x74,0x75,0x75,0x75,0x75,0x75,0x76,0x69,
+	0x6e,0x6e,0x64,0x65,0x59,0x5e,0x70,0x71,0x66,0x56,0x55,0x4b,0x4a,
+	0x40,0x49,0x35,0x34,0x2a,0x77,0x78,0x54,0x23,0x22,0x24,0x24,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x22,0x43,0x4e,0x65,0x6f,0x62,0x75,0x75,0x75,0x75,0x75,0x75,0x75,
+	0x75,0x74,0x79,0x7a,0x72,0x6f,0x7b,0x73,0x6a,0x70,0x71,0x66,0x56,
+	0x4b,0x4a,0x40,0x3f,0x35,0x52,0x53,0x2b,0x48,0x78,0x3d,0x22,0x24,
+	0x24,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x42,0x58,0x65,0x6f,0x7b,0x75,0x75,0x7c,0x7c,0x7c,0x7c,
+	0x7d,0x7d,0x7c,0x75,0x79,0x75,0x75,0x7b,0x7e,0x5e,0x7f,0x70,0x70,
+	0x66,0x56,0x56,0x4b,0x4a,0x40,0x49,0x35,0x34,0x5c,0x47,0x80,0x54,
+	0x23,0x22,0x24,0x24,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x46,0x4e,0x5f,0x64,0x72,0x75,0x79,0x7d,0x7c,0x7c,
+	0x7c,0x7c,0x81,0x7c,0x81,0x81,0x7c,0x79,0x75,0x82,0x6e,0x64,0x5f,
+	0x6d,0x5e,0x71,0x71,0x67,0x55,0x4a,0x40,0x3f,0x35,0x34,0x83,0x3b,
+	0x48,0x78,0x3d,0x22,0x24,0x24,0x25,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x23,0x50,0x59,0x64,0x6e,0x79,0x75,0x7c,0x7c,
+	0x81,0x81,0x81,0x81,0x84,0x85,0x86,0x87,0x88,0x87,0x89,0x8a,0x8b,
+	0x6e,0x65,0x65,0x59,0x50,0x41,0x71,0x55,0x4b,0x4a,0x40,0x49,0x52,
+	0x8c,0x8d,0x48,0x80,0x54,0x23,0x25,0x24,0x24,0x33,0x33,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x58,0x5f,0x6e,0x76,0x75,0x7c,
+	0x81,0x81,0x81,0x81,0x84,0x86,0x8e,0x8f,0x8f,0x90,0x8f,0x8f,0x91,
+	0x92,0x93,0x8b,0x6f,0x65,0x59,0x5f,0x5a,0x58,0x94,0x4c,0x4a,0x40,
+	0x49,0x52,0x95,0x8d,0x47,0x80,0x3c,0x3d,0x22,0x24,0x24,0x25,0x33,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x4f,0x59,0x6f,0x6f,0x75,
+	0x7d,0x7c,0x81,0x81,0x81,0x85,0x8e,0x88,0x90,0x96,0x96,0x76,0x76,
+	0x97,0x92,0x92,0x92,0x93,0x6e,0x6f,0x5f,0x59,0x58,0x4e,0x4e,0x50,
+	0x42,0x41,0x36,0x35,0x2d,0x46,0x47,0x48,0x3c,0x3d,0x22,0x24,0x24,
+	0x24,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x58,0x65,0x6e,
+	0x76,0x79,0x81,0x81,0x81,0x81,0x84,0x8e,0x8f,0x96,0x89,0x98,0x99,
+	0x9a,0x9a,0x9b,0x92,0x92,0x92,0x92,0x9c,0x6f,0x65,0x59,0x5a,0x58,
+	0x4f,0x50,0x43,0x44,0x9d,0x9e,0x9f,0x8d,0x8d,0x80,0x78,0x54,0x23,
+	0xa0,0x24,0xa0,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x50,0x59,
+	0x65,0x64,0x75,0x7d,0x81,0x81,0x81,0x85,0x88,0x90,0x96,0x98,0xa1,
+	0x97,0x82,0xa2,0xa3,0x92,0x92,0x92,0x92,0x92,0x9b,0x6e,0x65,0x5f,
+	0x5a,0x58,0x4f,0x50,0x43,0x42,0x38,0x39,0x52,0x53,0x5c,0x3c,0x78,
+	0x54,0x23,0x24,0x24,0x24,0x33,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2b,
+	0x41,0x5a,0x64,0x98,0x7d,0x81,0x81,0x81,0x81,0x87,0x8f,0xa4,0x98,
+	0x97,0xa5,0xa6,0xa3,0xa3,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,
+	0x65,0x5f,0x5a,0x58,0x4e,0x4d,0x43,0x44,0x38,0x39,0x35,0x34,0x53,
+	0x2a,0x30,0x22,0x23,0x24,0x24,0x24,0x25,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x40,0x70,0x6b,0x7b,0x89,0x74,0x81,0x81,0x81,0x84,0x8e,0xa7,
+	0x89,0xa1,0xa2,0xa3,0x9b,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0x64,0x5f,0x5a,0x58,0x4e,0x4d,0x50,0x42,0x38,0x37,0x52,
+	0x34,0x2a,0x2f,0x30,0x31,0x28,0x33,0xa8,0x24,0x24,0x33,0x33,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x4b,0x71,0x6b,0x5e,0x9c,0x8a,0x9a,0x8f,0x81,0x86,
+	0x8f,0x96,0x99,0xa5,0xa3,0x9b,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x64,0x5f,0x5a,0x58,0x4f,0x50,0x43,0x44,0x44,
+	0x37,0x52,0x34,0x2a,0x2f,0x30,0x3e,0x28,0x33,0x27,0x33,0x33,0x27,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x29,0x55,0x70,0x6b,0x98,0x9c,0x92,0x92,0x92,
+	0xa3,0x98,0xa7,0x89,0xa1,0xa2,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x64,0x5f,0x5a,0x58,0x4e,0x50,0x43,
+	0x44,0x38,0x83,0x35,0x34,0x2a,0x2f,0x29,0x31,0x28,0xa9,0x33,0x33,
+	0x33,0x25,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x30,0x56,0x70,0x6b,0x72,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x92,0xa6,0xa3,0xa3,0x93,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,0x6f,0x5f,0x5a,0x4e,0x4f,
+	0x50,0x43,0x44,0x44,0x49,0x52,0x53,0x53,0x2f,0x30,0x3e,0x28,0x33,
+	0x33,0x33,0x27,0x24,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x56,0x70,0x6b,0x6e,
+	0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x65,0x59,0x5a,
+	0x4e,0x4f,0x50,0x43,0x44,0x46,0x49,0x52,0x53,0x2a,0x30,0x29,0x31,
+	0x28,0x33,0x27,0xa9,0x33,0x25,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3f,0x56,0x6a,
+	0x5e,0x6f,0x93,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x65,
+	0x59,0x58,0x4e,0x4f,0x43,0x42,0x44,0x9f,0x49,0x34,0x53,0x2a,0x2f,
+	0x30,0x32,0x28,0x33,0x33,0x33,0x27,0x24,0x24,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3f,
+	0x56,0x70,0x7e,0x6e,0x8a,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x9b,0x9b,0x8a,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x6e,0x5f,0x5a,0x58,0x4e,0x4d,0x43,0x42,0x38,0x36,0x49,0x34,0x53,
+	0x2f,0x30,0x29,0x32,0x28,0x33,0x33,0x33,0x33,0x24,0x24,0xa0,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x3f,0x56,0x70,0x7e,0x6f,0x8b,0x8a,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x91,0x91,0x91,0xa3,0xaa,0xa5,0xa2,0xa3,
+	0x92,0x93,0x65,0x5f,0x5a,0x4e,0x4d,0x50,0x42,0x44,0x9d,0x49,0x52,
+	0x34,0x2a,0x2a,0x30,0x29,0x28,0xa9,0x27,0x33,0x33,0x27,0x24,0x24,
+	0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x49,0x67,0x71,0x7e,0x64,0x8b,0x9c,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0xa2,0xa2,0xa2,0x82,0x82,0xa1,
+	0x9a,0x76,0xa7,0x98,0x72,0x59,0x58,0x4e,0x4d,0x50,0x43,0x44,0x37,
+	0x35,0x52,0x34,0x2a,0x2f,0x30,0x31,0x32,0xa9,0x33,0x33,0x33,0x33,
+	0x25,0x24,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x49,0x4b,0x56,0x7e,0x65,0x6e,0x8b,0x9c,
+	0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa2,0x97,0x82,0x97,0x97,
+	0x9a,0x9a,0x76,0xa7,0xab,0x5e,0x71,0x5e,0xac,0x50,0x4d,0x42,0x44,
+	0x44,0x36,0x35,0x34,0x53,0x2a,0x30,0x29,0x31,0x28,0x33,0x33,0x27,
+	0x33,0x27,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x4b,0x56,0x57,0x5f,0x6f,
+	0x6e,0x8b,0x9c,0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x9a,0x98,0x9a,
+	0x98,0x98,0x89,0x96,0x90,0x88,0xad,0x70,0x70,0x66,0x66,0x56,0x60,
+	0xac,0x38,0x9d,0x49,0x52,0x34,0x2a,0x2a,0x2f,0x29,0x3e,0x28,0x33,
+	0x33,0x33,0x33,0xae,0x24,0x24,0xa0,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2f,0x4a,0x67,0x57,
+	0x5f,0x65,0x64,0x6e,0x8b,0x8a,0x9c,0x9b,0x92,0x92,0x92,0x91,0x76,
+	0x96,0x76,0x76,0x96,0xa4,0x90,0xad,0xad,0x6a,0x70,0x71,0x56,0x67,
+	0x4b,0x4a,0x40,0x40,0x9f,0x8c,0x52,0x53,0x2a,0x2f,0x30,0x3e,0x32,
+	0xa9,0x33,0x33,0x33,0x33,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x40,
+	0x4b,0x94,0x59,0x65,0x65,0x64,0x6f,0x8b,0x8b,0x8a,0x8a,0x9b,0x9b,
+	0xa1,0x88,0x90,0x90,0x90,0x8f,0xab,0xad,0x74,0x6a,0x71,0x71,0x56,
+	0x56,0x55,0x4b,0x4a,0x40,0x49,0x45,0x3a,0x9e,0x2d,0x2b,0x30,0x29,
+	0x31,0x28,0x33,0x33,0x27,0x33,0x27,0x24,0x25,0x24,0x25,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x3d,0x37,0x5b,0x41,0x5a,0x59,0x65,0x64,0x64,0x6f,0x6f,0x6f,0x6e,
+	0x6e,0x8b,0x76,0xaf,0xaf,0xaf,0xaf,0xaf,0x6c,0x6b,0x6a,0x70,0x71,
+	0x66,0x56,0x67,0x4b,0x4a,0x40,0x40,0x83,0x39,0x3a,0x46,0x3b,0x47,
+	0x78,0x5c,0x32,0xa9,0x33,0x33,0x33,0x33,0x33,0x24,0x24,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x45,0x44,0x94,0x58,0x5a,0x59,0x5f,0x65,0x64,0x64,
+	0x6f,0x64,0x6f,0x6f,0x6c,0x6b,0x74,0x6c,0x73,0x73,0x6a,0x70,0x71,
+	0x71,0x66,0x56,0x55,0x55,0x4b,0x4a,0x40,0x49,0x37,0x45,0x46,0x46,
+	0x3b,0x48,0x78,0x54,0x3d,0x22,0x25,0x33,0x33,0x27,0x5d,0x24,0x24,
+	0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x3b,0x38,0x41,0x56,0x5b,0xb0,0x59,0x5f,
+	0x5f,0x65,0x65,0x65,0x65,0x5f,0x6b,0x73,0x73,0x6a,0x6a,0x70,0x70,
+	0x71,0x71,0x56,0x56,0x67,0x55,0x4a,0x40,0x40,0x49,0x36,0x39,0x46,
+	0x46,0x3b,0x48,0x80,0x3c,0x3d,0x23,0x24,0x24,0x24,0x25,0x25,0x24,
+	0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x3a,0x9d,0x4b,0x56,0x66,
+	0x71,0x7a,0x58,0x5f,0x5f,0x5f,0x5f,0x7e,0x6a,0x6a,0x70,0x70,0x70,
+	0x71,0x71,0x66,0x56,0x56,0x55,0x4b,0x4b,0x4a,0x40,0x49,0x49,0x37,
+	0x3a,0x46,0x3b,0x47,0x80,0x3c,0x54,0x23,0x22,0x25,0x24,0x24,0x24,
+	0x24,0x27,0x33,0x5d,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x46,0x38,0x40,
+	0x4b,0x55,0x56,0x66,0x70,0x4c,0x57,0x59,0x59,0x7a,0x70,0x70,0x70,
+	0x70,0x71,0x71,0x56,0x56,0x56,0x4b,0x4b,0x4a,0x4a,0x40,0x49,0x35,
+	0x36,0x3a,0x46,0x8d,0x47,0x48,0x80,0x54,0x3d,0x23,0x22,0x24,0x25,
+	0x24,0x25,0x33,0x33,0x33,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0x3a,0x83,0x4a,0x4b,0x55,0x67,0x56,0x71,0x71,0x71,0x94,0x62,0x66,
+	0x71,0x66,0x56,0x56,0x56,0x56,0x55,0x55,0x4b,0x4a,0x40,0x40,0x3f,
+	0x49,0x52,0x8c,0x9e,0x8d,0x3b,0x48,0x80,0x3c,0x54,0x23,0x22,0x24,
+	0x24,0x24,0x24,0x24,0x27,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x21,0x3b,0x9f,0x3f,0x40,0x4b,0x55,0x67,0x56,0x56,0x66,0x66,
+	0x4f,0x57,0x4c,0x56,0x56,0x56,0x67,0x4b,0x4b,0x4a,0x4a,0x40,0x40,
+	0x49,0x35,0x35,0x34,0x9e,0x8d,0x3b,0x47,0x48,0x3c,0x54,0x23,0x23,
+	0xa0,0x24,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x3d,0x46,0x35,0x49,0x40,0x4a,0x4b,0x4b,0x55,
+	0x55,0x67,0x4d,0x4f,0x4d,0x50,0x41,0x5b,0x55,0x4a,0x4a,0x40,0x40,
+	0x49,0x49,0x49,0x52,0x52,0x8c,0x46,0x3b,0x48,0x80,0x3c,0x54,0x3d,
+	0x22,0x24,0x24,0x24,0x24,0x24,0xa0,0x33,0x33,0x27,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x48,0x83,0x35,0x49,0x3f,0x40,
+	0x4a,0x4a,0x4b,0x4b,0x50,0x43,0x43,0x50,0x43,0x42,0x44,0x4c,0x36,
+	0x40,0x49,0x49,0x35,0x52,0x34,0x2b,0x8d,0x3b,0x47,0x80,0x78,0x54,
+	0x3d,0x23,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x25,0x3c,0x53,0x52,
+	0x35,0x49,0x49,0x40,0x40,0x5b,0x44,0x44,0x44,0x44,0x42,0x44,0x38,
+	0x38,0x38,0x9e,0x9f,0x49,0x34,0x34,0x53,0x95,0x47,0x48,0x80,0x78,
+	0x54,0x3d,0x23,0x24,0x24,0xa0,0x24,0xa0,0x24,0x24,0x27,0x33,0x27,
+	0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,
+	0x2b,0x53,0x34,0x52,0x49,0x35,0x49,0x36,0x44,0x38,0x44,0x38,0x39,
+	0x39,0x39,0x39,0x45,0x45,0x3a,0x3a,0x2d,0x8c,0x77,0x47,0x48,0x80,
+	0x78,0x54,0x3d,0x23,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,
+	0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x26,0x23,0x30,0x2f,0x53,0x34,0x34,0x35,0x83,0x45,0x45,0x45,
+	0x39,0x39,0x45,0x3a,0x3a,0x9e,0x46,0x46,0x8d,0x3b,0x3b,0x2b,0x68,
+	0xb1,0x3c,0x54,0x23,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x27,
+	0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x21,0xb2,0x30,0x2f,0x2a,0x53,0x34,0x2b,0x3a,
+	0x46,0x3a,0x46,0x46,0x9e,0x46,0x46,0x46,0x8d,0x3b,0x3b,0x48,0x3c,
+	0x29,0x31,0x32,0x28,0x61,0xa0,0x24,0x24,0x24,0x24,0x24,0xa0,0x24,
+	0x33,0x33,0x27,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x61,0x31,0x30,0x30,0x2f,
+	0x2a,0x8d,0x3b,0x8d,0x8d,0x8d,0x3b,0x8d,0x3b,0x3b,0x48,0x48,0x48,
+	0x78,0x30,0x3e,0x3e,0x32,0xa9,0xa9,0x33,0x33,0x27,0x33,0x24,0x24,
+	0x24,0x27,0x33,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x24,0xb3,
+	0xb2,0x30,0x30,0x47,0x48,0x47,0x47,0x48,0x47,0x48,0x48,0x80,0x80,
+	0x78,0x3c,0xb4,0x3e,0x32,0x28,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,
+	0x27,0x33,0x24,0x5d,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x24,0xb3,0xb3,0x61,0x3c,0x3c,0x78,0x78,0x3c,0x78,0x3c,0x3c,
+	0x3c,0x54,0x3d,0xb2,0x32,0x28,0x33,0x33,0x33,0x33,0x27,0x33,0x33,
+	0x33,0x33,0x33,0x25,0x24,0x25,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x21,0x24,0x22,0xb4,0xb4,0x23,0x3d,0x3d,0x3d,
+	0x3d,0x3d,0x3d,0x23,0xb3,0x28,0x33,0x33,0x33,0x27,0x33,0x33,0x33,
+	0x27,0x33,0x33,0x27,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x25,0x24,0x33,0xa9,0x33,
+	0x25,0x22,0x22,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x25,0x25,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x33,
+	0x33,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x33,0x27,0x33,0x33,
+	0x27,0x33,0x33,0x27,0x33,0x25,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x26,0x27,0x33,0x33,0x25,0x24,0x24,0x25,0x24,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x25,0x25,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x21,0x24,0x24,0x24,0x24,
+	0x25,0x24,0x25,0x27,0x24,0x25,0x24,0x21,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x26,0x26,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0x24,0x24,0xa0,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x28,0x29,0x2a,0x2a,
+	0x53,0x80,0x47,0x5c,0x2f,0x30,0x31,0x3e,0xa9,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x32,0x53,0x35,0x49,0x49,
+	0x3f,0x37,0x45,0x39,0x45,0x3a,0x37,0x2d,0x2a,0x2f,0x30,0x31,0x61,
+	0x22,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x31,0x35,0x40,0x40,0x4a,
+	0x4a,0xb5,0x42,0x42,0x44,0x42,0x38,0x38,0x39,0x3a,0x3a,0x37,0xb1,
+	0xb1,0x48,0x3c,0x3d,0x24,0x25,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x49,0x4a,0x4b,0x55,
+	0x56,0x60,0x51,0x4f,0x4f,0x4e,0x4d,0x50,0x50,0x43,0x44,0x44,0x39,
+	0x45,0xb6,0x53,0x77,0x2e,0x3c,0x54,0x23,0x25,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x53,0x4a,0x55,0x56,
+	0x71,0x71,0xb7,0x58,0x58,0x58,0x58,0x58,0x4e,0x4f,0x4d,0x50,0x43,
+	0x42,0x44,0x39,0x52,0x34,0x34,0x2a,0x30,0x77,0x3d,0x23,0xa8,0x33,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa8,0x40,0x55,0x56,
+	0x71,0x6a,0x70,0xb8,0x59,0x5f,0x5f,0x5f,0x59,0x59,0x5a,0x58,0x58,
+	0x4e,0x50,0x50,0x42,0x60,0x3f,0x49,0x52,0x34,0x2a,0x30,0x29,0x3e,
+	0xa9,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x42,0x4f,
+	0x4f,0x7a,0xab,0x70,0xb9,0x65,0x65,0x64,0x65,0x65,0x5f,0x5f,0x5f,
+	0x59,0x58,0x58,0x4e,0x4d,0xac,0x3f,0x40,0x49,0x35,0x52,0x34,0x2a,
+	0x2f,0x29,0x32,0x61,0x25,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x50,
+	0x58,0x5f,0x5f,0x65,0x64,0xb7,0x7a,0x69,0x6e,0x6e,0x6e,0x6e,0x6f,
+	0x65,0x5f,0x5f,0x59,0x58,0x58,0x4f,0xba,0x4b,0x4a,0x40,0x49,0x35,
+	0x34,0x53,0x2a,0x30,0x29,0xbb,0x23,0x24,0x25,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,
+	0x50,0x58,0x5f,0x64,0x6f,0x6e,0x76,0x74,0x75,0x75,0x75,0x76,0x69,
+	0x6f,0x6e,0x6f,0x65,0x65,0x5f,0x59,0x5a,0xbc,0x4b,0x4b,0x4b,0x4a,
+	0x40,0x49,0x35,0x34,0x53,0x2f,0x30,0x3e,0x23,0x24,0x24,0x24,0x25,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x22,0x50,0x58,0x65,0x6f,0x6e,0x9c,0xb9,0x74,0x75,0x79,0x75,0x75,
+	0x74,0x75,0x6b,0x76,0xb9,0x6f,0x65,0x65,0x5f,0x58,0x71,0x66,0x56,
+	0x55,0x4a,0x40,0x49,0x35,0x52,0x53,0x2a,0x30,0x29,0x54,0x22,0x24,
+	0x24,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x44,0x4e,0x65,0x6f,0x8b,0x8a,0xbd,0x75,0x7c,0x7d,0x7c,
+	0x7d,0x7c,0x7d,0x79,0x75,0x74,0x75,0xbe,0x7a,0x63,0x65,0x7a,0x70,
+	0x66,0x56,0x67,0x4b,0x4a,0x40,0x49,0x35,0x34,0x53,0x2f,0x29,0x54,
+	0x23,0x22,0x24,0xa0,0x24,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x46,0x4e,0x5f,0x6f,0x8b,0x9c,0x93,0xa4,0x7c,0x7c,
+	0x81,0x7c,0x81,0x7c,0x81,0x81,0x79,0x81,0x75,0x75,0x75,0x74,0xbf,
+	0x7a,0x73,0x71,0x56,0x56,0x55,0x4a,0x40,0x49,0x35,0x34,0x53,0x2a,
+	0x30,0xc0,0x3d,0x22,0x24,0x24,0x24,0x25,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x23,0x4f,0x59,0x64,0x6e,0x8a,0x92,0x99,0x79,
+	0x81,0x81,0x81,0x81,0x84,0x85,0x86,0x87,0x88,0x87,0x84,0x74,0x75,
+	0x74,0xc1,0x65,0x5f,0x4d,0x7a,0x56,0x67,0x4b,0x4a,0x3f,0x49,0x52,
+	0x34,0x2a,0x2f,0xb1,0x54,0x23,0x24,0x24,0x24,0x25,0x33,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x58,0x5f,0x6e,0x8a,0x92,0x91,
+	0x7c,0x81,0x81,0x81,0x84,0x87,0x8e,0x8f,0x8f,0x8f,0x8f,0x8f,0x88,
+	0x88,0xad,0xbe,0x64,0x5f,0x5f,0x5a,0x58,0x4e,0xac,0xb5,0x4a,0x40,
+	0x49,0x35,0x34,0x53,0x30,0xb1,0x3c,0x23,0x22,0x25,0x24,0x24,0x25,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x4f,0x5f,0x6f,0x9c,0x9b,
+	0x92,0x76,0x81,0x81,0x81,0x85,0x8e,0x8f,0xa4,0xa7,0x96,0x76,0x76,
+	0x96,0xa7,0x8f,0x88,0xc1,0x8b,0x64,0x5f,0x59,0x58,0x4e,0x4f,0x50,
+	0x42,0xb5,0xc2,0x49,0x34,0x53,0x2f,0x2e,0x78,0x3d,0x23,0x24,0x24,
+	0x24,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x58,0x5f,0x6e,
+	0x8a,0x92,0xa3,0x81,0x81,0x81,0x84,0x8e,0x8f,0xa7,0x89,0x98,0x99,
+	0x99,0x99,0x9a,0x89,0x96,0xa4,0x91,0x8a,0x6f,0x65,0x59,0x5a,0x58,
+	0x4e,0x50,0x42,0x42,0x38,0x9e,0x9f,0x53,0x2a,0x54,0x78,0x3d,0x22,
+	0x24,0x24,0x24,0x25,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x50,0x59,
+	0x64,0x8b,0x9b,0x92,0x89,0x81,0x81,0x85,0x8e,0x8f,0x96,0x98,0x99,
+	0x82,0x82,0xbd,0x82,0xc3,0xc3,0x89,0xc3,0x9b,0x92,0x6e,0x65,0x5f,
+	0x5a,0x4e,0x4f,0x4d,0x43,0x42,0x38,0x39,0x3a,0x46,0x80,0x2c,0x80,
+	0x54,0x23,0x24,0x24,0x24,0x24,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2a,
+	0x41,0xc4,0x6f,0x9c,0x9b,0x92,0x81,0x81,0x81,0x87,0x8f,0x96,0x98,
+	0xc3,0xbd,0xaa,0xa3,0xc5,0xa3,0xa2,0x82,0xc3,0x91,0x92,0x92,0x8b,
+	0x64,0x59,0x5a,0x58,0x4e,0x50,0x43,0x44,0x38,0x45,0x45,0x9e,0x3b,
+	0x2f,0x30,0x23,0x23,0x24,0x24,0x24,0x24,0x24,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x40,0x71,0x6a,0xb7,0x99,0x9b,0x99,0x81,0x81,0x85,0x8f,0xa4,
+	0xc6,0xc3,0xaa,0xa3,0x93,0x93,0x9b,0x93,0xc5,0xaa,0xaa,0x92,0x92,
+	0x92,0x93,0x6f,0x5f,0x5a,0x58,0x4f,0x50,0x50,0x42,0x38,0x39,0x3a,
+	0x9e,0x3b,0x2f,0x29,0x31,0x28,0x33,0x21,0x25,0x24,0xa0,0x33,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x4b,0x71,0x6b,0x74,0x74,0x84,0xc3,0x8f,0x81,0x84,
+	0x8f,0x96,0x99,0x82,0xa3,0x93,0x92,0x92,0x92,0x9b,0x93,0xa3,0x91,
+	0x92,0x92,0x92,0x93,0x64,0x5f,0x59,0x4e,0x4e,0x50,0x43,0x44,0x38,
+	0x39,0x3a,0x46,0x3b,0x2a,0x30,0x31,0x28,0x33,0x33,0x33,0x33,0x24,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x29,0x67,0x70,0x74,0x74,0x79,0x86,0x92,0x92,
+	0xa3,0x98,0xa7,0x89,0xc3,0xa2,0xc5,0x9b,0x92,0x92,0x92,0x92,0x9b,
+	0x92,0x92,0x92,0x92,0x92,0x9b,0x64,0x5f,0x59,0x58,0x4e,0x50,0x43,
+	0x42,0x9d,0x39,0x3a,0x9e,0xc7,0x2f,0x29,0x3e,0x28,0x33,0x33,0x27,
+	0x33,0x33,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,0x56,0x70,0x6b,0x74,0x75,0x98,
+	0x92,0x92,0x92,0x92,0x9b,0xc5,0xaa,0xc5,0x93,0x92,0x92,0x92,0x92,
+	0x92,0x93,0x92,0x92,0x92,0x92,0x92,0x9b,0x6f,0x59,0x58,0x4e,0x4f,
+	0x50,0x43,0x42,0x38,0x39,0x3a,0x46,0x2c,0x2f,0x30,0x31,0x28,0x33,
+	0x33,0x33,0x33,0x27,0x5d,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x56,0x6a,0x74,0x74,
+	0x79,0xc3,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x93,0x92,0x92,0x92,0x92,0x92,0x93,0x64,0x5f,0x5a,
+	0x4e,0x4f,0x50,0x42,0x42,0x39,0x39,0x3a,0x46,0x2e,0x2f,0x29,0x3e,
+	0x28,0x33,0x33,0x33,0x33,0x33,0x27,0x25,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3f,0x56,0x70,
+	0x6b,0x75,0x75,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x8b,0x65,
+	0x59,0x58,0x4e,0x4d,0x50,0x42,0x44,0x38,0x45,0x3a,0x8d,0x53,0x2f,
+	0x29,0x3e,0x28,0x33,0x27,0x33,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x40,
+	0x56,0x70,0x7f,0x74,0xbe,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x6f,0x5f,0x5a,0x58,0x4f,0x50,0x43,0x44,0x38,0x39,0x3a,0x3a,0x3b,
+	0x2a,0x30,0x29,0x32,0xa9,0x33,0x33,0x33,0x27,0x33,0x33,0x25,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x3f,0x67,0x70,0x6b,0x74,0xc1,0x8a,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa3,0x82,0xaa,0xc5,
+	0x92,0x93,0x64,0x59,0x58,0x4e,0x4d,0x50,0x43,0x42,0x38,0x39,0x45,
+	0x9e,0x2d,0x2a,0x30,0x29,0x32,0x28,0x33,0x33,0x33,0x33,0x33,0x27,
+	0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x49,0x55,0x71,0x6a,0x6b,0xc1,0x8b,0x93,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x82,0xc3,
+	0x98,0x96,0xa7,0xc1,0xc4,0x5f,0x58,0x4e,0x4f,0x43,0x42,0x44,0x38,
+	0x45,0x3a,0x46,0x2e,0x2f,0x30,0x31,0x28,0xa9,0x33,0x27,0x33,0x33,
+	0x33,0xae,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x49,0x4b,0x71,0x6a,0x6b,0xc1,0x8b,0x8a,
+	0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xaa,
+	0x99,0xc6,0x76,0xa4,0x8f,0xbe,0x73,0xba,0x41,0x4d,0x4d,0x43,0x42,
+	0x38,0x39,0x3a,0x3a,0x8d,0x2a,0x2f,0x29,0x31,0x28,0x33,0x33,0x33,
+	0x27,0x33,0x33,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x35,0x4b,0x56,0x70,0x6a,0xb8,
+	0x6e,0x8b,0x9c,0x93,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x99,0x89,0x96,0xa4,0x8f,0xbe,0x70,0x70,0x70,0x70,0x56,0x60,
+	0x41,0x44,0x38,0x39,0x3a,0x9e,0xc7,0x2a,0x30,0x31,0x3e,0xa9,0x33,
+	0x33,0x33,0x33,0x33,0x27,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x77,0x4a,0x56,0x70,
+	0x6a,0xc4,0x64,0x6e,0x8b,0x9c,0x8a,0x93,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0xc5,0x96,0xa4,0xa4,0xad,0xbe,0x6c,0x71,0x71,0x56,0x67,
+	0x4b,0x4a,0x4a,0x40,0x95,0xb6,0x3a,0x46,0xb1,0x2f,0x30,0x29,0x32,
+	0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x24,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x3f,
+	0x55,0x71,0x70,0xc4,0x64,0x6f,0x6f,0x8b,0x8b,0x9c,0x8a,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x99,0x8f,0x8e,0xbe,0xad,0x71,0x70,0x66,0x66,
+	0x56,0x55,0x4b,0x4a,0x40,0x3f,0x49,0x35,0x34,0x2c,0x34,0x30,0x29,
+	0x3e,0x28,0xa9,0x33,0x27,0x33,0x33,0x27,0x33,0x24,0xa0,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x3d,0xb6,0xba,0x56,0x66,0xc4,0x5f,0x65,0x64,0x64,0x6f,0x6e,0x6e,
+	0x8b,0x8b,0x9c,0x8a,0x8a,0x9c,0xab,0xbe,0xbe,0x73,0x70,0x70,0x71,
+	0x66,0x56,0x55,0x4b,0x4a,0x40,0x3f,0x49,0x35,0x34,0x34,0x2e,0x3b,
+	0x78,0x77,0x31,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x3a,0x44,0xac,0xc8,0xb8,0x59,0x5f,0x65,0x64,0x64,
+	0x64,0x6f,0x6f,0x6f,0x6f,0x6f,0x64,0x82,0x70,0x6b,0x6a,0x70,0x70,
+	0x66,0x56,0x56,0x67,0x4b,0x4b,0x40,0x40,0x49,0x35,0x52,0x53,0x53,
+	0x80,0x48,0x78,0x54,0x3d,0x22,0xa0,0x33,0x33,0x27,0x33,0x33,0x25,
+	0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x8d,0x38,0x42,0x50,0xbc,0xac,0x59,0x5f,
+	0x5f,0x5f,0x65,0x65,0x65,0x65,0x65,0x65,0x64,0xc9,0x73,0x70,0x70,
+	0x71,0x66,0x66,0x56,0x55,0x4b,0x4b,0x40,0x40,0x49,0x49,0x35,0x34,
+	0x34,0x2a,0x3b,0x78,0x3c,0x3d,0x23,0x24,0x24,0x24,0x25,0x25,0x33,
+	0x27,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x45,0x44,0x43,0x41,0x66,
+	0x71,0xc9,0x5a,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x59,0x5f,0xb7,0x71,
+	0x70,0x71,0x71,0x56,0x56,0x67,0x4b,0x4a,0x4a,0x40,0x3f,0x35,0x35,
+	0x34,0x53,0x2a,0xb1,0x47,0x78,0x54,0x23,0x22,0x24,0x25,0x24,0x24,
+	0x25,0x24,0x24,0xae,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x46,0x39,0x42,
+	0xb5,0x55,0x56,0x56,0x56,0xb7,0xb8,0x59,0x59,0x59,0x59,0x59,0x5a,
+	0x71,0x71,0x66,0x56,0x56,0x56,0x55,0x4b,0x4b,0x4a,0x40,0x49,0x49,
+	0x35,0x34,0x34,0x53,0x5c,0x47,0x78,0x3c,0x3d,0x23,0x22,0x24,0x24,
+	0x24,0x24,0x24,0x25,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0x3a,0x38,0x41,0x4b,0x55,0x56,0x56,0x56,0x56,0x71,0x7a,0x4f,0x5a,
+	0x58,0x51,0x70,0x56,0x56,0x56,0x55,0x4b,0x4a,0x4a,0x40,0x40,0x3f,
+	0x35,0x35,0x52,0x53,0x53,0x2f,0xb1,0x48,0x3c,0x3d,0x23,0x22,0x25,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0xa0,0x8d,0x3a,0x44,0x40,0x4b,0x4b,0x67,0x67,0x56,0x67,0x56,
+	0x71,0xc8,0xac,0x41,0x56,0x56,0x67,0x4b,0x4b,0x4b,0x4a,0x40,0x40,
+	0x49,0x49,0x35,0x52,0x53,0x53,0x2a,0x77,0x48,0x3c,0x3d,0x3d,0x22,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x54,0x46,0x3a,0xc2,0x4a,0x4a,0x4b,0x4b,0x55,
+	0x55,0x67,0x67,0x56,0x66,0x51,0x41,0x60,0x4b,0x4a,0x4a,0x40,0x40,
+	0x3f,0x49,0x35,0x35,0x34,0x34,0x53,0x2f,0x2f,0x2c,0x78,0x54,0x3d,
+	0x23,0xa0,0x24,0x24,0x24,0xa0,0x24,0x24,0xa0,0x33,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x48,0x46,0x2d,0x49,0x3f,0x40,
+	0x4a,0x4a,0x4a,0x4b,0x4b,0x4b,0x4b,0x42,0x43,0x42,0x44,0x4c,0x40,
+	0x40,0x49,0x35,0x35,0x52,0x34,0x34,0x2a,0x2a,0x2a,0x29,0x78,0x54,
+	0x3d,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x48,0x8d,0x52,
+	0x35,0x49,0x3f,0x40,0x40,0x40,0x40,0x4a,0xba,0x42,0x42,0x38,0x44,
+	0x44,0x38,0x9e,0x9f,0x35,0x52,0x34,0x53,0x53,0x2f,0x2f,0x30,0xc0,
+	0x54,0x3d,0x23,0x22,0x24,0x24,0xa0,0x24,0x24,0x24,0x24,0x24,0x27,
+	0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,
+	0x48,0x77,0x34,0x52,0x35,0x49,0x49,0x49,0x3f,0x3f,0xca,0x38,0x38,
+	0x38,0x39,0x39,0x39,0x3a,0x3a,0x9e,0xca,0x2e,0x2a,0x2f,0x2f,0x29,
+	0x77,0x3c,0x3d,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x25,
+	0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x21,0x3d,0xb1,0x2a,0x53,0x34,0x34,0x52,0x35,0x35,0x35,0x2d,
+	0x39,0x45,0x3a,0x3a,0x3a,0x3a,0x46,0x46,0x8d,0x8d,0x47,0x47,0xb1,
+	0x5c,0xcb,0x54,0x23,0x23,0x24,0x24,0x24,0x24,0x24,0xa0,0x24,0x24,
+	0x24,0x27,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x21,0x3d,0x29,0x2f,0x2a,0x53,0x53,0x53,0x34,
+	0x52,0xb6,0x3a,0x46,0x9e,0x46,0x46,0x8d,0x8d,0x3b,0x47,0x47,0x48,
+	0x78,0x3c,0x3c,0x28,0x61,0xa0,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,
+	0x24,0xa0,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x61,0x29,0x30,0x2f,0x2a,
+	0x2a,0x2a,0x2a,0x8d,0x8d,0x8d,0x8d,0x3b,0x3b,0x3b,0x47,0x47,0x80,
+	0x78,0x78,0x3c,0x3d,0xb4,0x28,0xa9,0x33,0x33,0x27,0xae,0x24,0x24,
+	0x24,0x24,0x24,0x27,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0xb3,
+	0x29,0x30,0x30,0x2f,0x2f,0x47,0x48,0x48,0x48,0x48,0x48,0x48,0x78,
+	0x78,0x3c,0x3c,0x3d,0x23,0x23,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x21,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x5d,0x23,0x22,0x61,0x30,0x29,0x80,0x78,0x78,0x78,0x3c,0x3c,
+	0x3c,0x54,0x54,0x3d,0x23,0x23,0x22,0x28,0x33,0x27,0x33,0x27,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xae,0x24,0x22,0x23,0x61,0x3d,0x3d,0x3d,0x3d,
+	0x3d,0x3d,0x23,0x23,0x22,0x22,0x22,0x25,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x33,0x27,0x33,0x25,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x24,0x24,0x25,0x33,0xa9,
+	0x61,0x22,0x22,0x22,0x22,0x24,0x24,0x24,0x33,0x33,0x27,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x25,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0x33,0x27,0x33,0x33,0x33,0x33,0x25,0x24,0x24,0x33,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x33,0x33,0x27,0xa8,0x24,0x21,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x27,0x33,0x27,0x33,0x33,0x33,0x25,0x24,0x33,0x27,
+	0x33,0x33,0x33,0x33,0x33,0x27,0xbb,0x24,0x21,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,BLCK,0x24,0x24,0x24,0x24,
+	0x24,0x25,0x24,0x25,0x27,0x24,0x25,0x21,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x26,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0x24,0x24,0x25,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x28,0x29,0x2a,0x2a,
+	0x53,0xcc,0xc7,0x47,0x2e,0xcd,0x5c,0x28,0xa9,0xae,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x61,0x36,0x35,0x49,0x49,
+	0x49,0x49,0x49,0x8c,0xca,0x3a,0xb6,0x2d,0x2a,0x2f,0x30,0x29,0x28,
+	0xa9,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcb,0x49,0x3f,0x3f,0x40,
+	0x4a,0x4b,0x4b,0x5b,0xac,0x44,0x44,0x38,0x39,0x3a,0x9e,0xb6,0xc7,
+	0x2f,0x30,0xcd,0x23,0x22,0x25,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb3,0x36,0x40,0x4b,0x55,
+	0x56,0x56,0x56,0x56,0x5b,0x4d,0x50,0x50,0x43,0x42,0x44,0x38,0x39,
+	0x3a,0x46,0x46,0x2c,0x3d,0x80,0x3d,0x23,0x25,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x24,0xcc,0x4a,0x67,0x56,
+	0x71,0x71,0x70,0x70,0x70,0xce,0x5a,0x58,0x4e,0x4f,0x4f,0x4d,0x50,
+	0x42,0x44,0x38,0x39,0x3a,0x95,0x53,0x2f,0xcd,0x23,0x23,0x25,0x33,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x5b,0x55,0x56,
+	0x70,0x70,0x70,0x6a,0x6a,0x6a,0xb8,0x5f,0x59,0x59,0x59,0x58,0x4e,
+	0x4f,0x50,0x50,0x42,0x44,0x38,0x39,0x52,0x34,0x2a,0x2f,0x30,0x3e,
+	0xa9,0x25,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0xce,0x4f,
+	0x4f,0xcf,0x62,0x6a,0x6b,0x6b,0x6b,0xd0,0x65,0x65,0x5f,0x5f,0x5f,
+	0x59,0x58,0x58,0x4e,0x4d,0x50,0x42,0x44,0xb6,0x35,0x35,0x34,0x2a,
+	0x2f,0x29,0x3e,0xa9,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0xce,
+	0x4e,0x5f,0x5f,0x65,0x64,0x65,0xd1,0xd2,0xd3,0x6f,0x6e,0x6f,0x6f,
+	0x65,0x5f,0x5f,0x59,0x5a,0x58,0x4e,0x4f,0x50,0x42,0x9f,0x49,0x35,
+	0x34,0x53,0x2a,0x30,0x31,0x28,0x33,0x24,0x25,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,
+	0xce,0x58,0x5f,0x64,0x6e,0x6e,0x9c,0x9c,0x8b,0x96,0x75,0x7e,0xa1,
+	0x6f,0x6f,0x6f,0x65,0x65,0x5f,0x59,0x58,0x58,0x4f,0x4d,0x51,0x4b,
+	0x40,0x49,0x35,0x34,0x53,0x2f,0x30,0x31,0x28,0x24,0x24,0x25,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x33,0xce,0x58,0x5f,0x6f,0x6e,0x8b,0x9c,0x8a,0x8a,0xc3,0x75,0x79,
+	0x75,0x74,0x6c,0x76,0xd3,0x6f,0x65,0x65,0x5f,0x59,0x58,0x4e,0x4f,
+	0x41,0x4a,0x40,0x49,0x35,0x34,0x53,0x2a,0x30,0x29,0x32,0xa9,0x25,
+	0x22,0x25,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x41,0x58,0x65,0x6f,0x8b,0x8a,0x93,0x9b,0x92,0xaa,0x75,
+	0x7d,0x7d,0x7d,0x7d,0x75,0x74,0x74,0xbe,0x7e,0xd3,0x65,0x5f,0x59,
+	0x58,0x4e,0x67,0x4b,0x4a,0x40,0x49,0x35,0x34,0x53,0x2f,0x30,0x31,
+	0x28,0x24,0x24,0x24,0x25,0xae,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0xcc,0x4e,0x59,0x6f,0x8b,0x9c,0x9b,0x92,0x92,0x92,
+	0x90,0x81,0x81,0x7c,0x81,0x7d,0x7d,0x7d,0x75,0x74,0x74,0x6b,0xd4,
+	0xcf,0xd3,0x59,0xac,0x56,0x55,0x4a,0x40,0x3f,0x35,0x52,0x53,0x2a,
+	0x30,0x31,0x32,0x25,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa9,0xce,0x59,0x6f,0x6e,0x8a,0x9b,0x92,0x92,
+	0x92,0xa1,0x7c,0x81,0x81,0x86,0x87,0x8e,0x8e,0x87,0x87,0x79,0x75,
+	0x74,0x74,0x73,0x70,0xd4,0xce,0x71,0x67,0x4b,0x4a,0x3f,0x49,0x52,
+	0x53,0x2a,0x2f,0x30,0x3e,0xb4,0x25,0x24,0x24,0x25,0x25,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcc,0x58,0x5f,0x6e,0x8a,0x9b,0x92,
+	0x92,0x92,0x8a,0x81,0x81,0x86,0x88,0x8f,0x8f,0x8f,0x8f,0x8f,0x88,
+	0x8e,0x86,0x75,0x6b,0x73,0x73,0xba,0x58,0x4e,0xac,0x4c,0x4a,0x40,
+	0x49,0x35,0x34,0x53,0x2f,0x29,0x3e,0xb4,0x22,0x24,0x24,0x24,0x24,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x51,0x5f,0x6f,0x9c,0x9b,
+	0x92,0x92,0x92,0x92,0x89,0x84,0x8e,0x88,0x90,0x96,0x96,0x76,0x76,
+	0x96,0xa7,0x8f,0x88,0xbe,0x74,0x6b,0x73,0x7a,0x59,0x4e,0x4f,0x50,
+	0x42,0xb5,0xc2,0x49,0x34,0x53,0x2a,0x30,0x31,0xcb,0x22,0x24,0x24,
+	0x24,0x25,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcc,0x58,0x5f,0x8b,
+	0x93,0x92,0x92,0x92,0x92,0xc5,0x81,0x88,0x8f,0xa7,0x89,0x98,0x99,
+	0x99,0x99,0x98,0x89,0x96,0xa4,0x88,0xaf,0x7f,0x73,0xc4,0x5a,0x58,
+	0x4e,0x4d,0x43,0x42,0x38,0x3a,0x95,0x34,0x2a,0x30,0x29,0x28,0x23,
+	0xa0,0x24,0x24,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0xce,0x5f,
+	0x65,0x8b,0x9b,0x92,0x92,0x92,0x92,0x89,0x87,0x8f,0x96,0x98,0xa1,
+	0x97,0xd5,0xbd,0xbd,0x97,0xa1,0x98,0x76,0x90,0x88,0x6c,0x62,0x5f,
+	0x5a,0x58,0x4f,0x50,0x43,0x44,0x38,0x39,0x3a,0x46,0xc7,0x77,0x30,
+	0x3e,0x23,0x24,0x24,0x24,0x24,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x78,
+	0xcf,0xc4,0x6f,0x8a,0x9b,0x92,0x92,0x92,0x9b,0x87,0x88,0x96,0x98,
+	0x97,0xd5,0xa6,0xc5,0xa3,0xa6,0xa2,0xd6,0xa1,0xc6,0x96,0x8f,0xaf,
+	0xd1,0x5f,0x5a,0x58,0x4e,0x4d,0x43,0x42,0x44,0x39,0x3a,0x46,0x8d,
+	0x47,0x78,0xb3,0x23,0x24,0x24,0x24,0x24,0x24,0x25,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x4c,0x56,0x6a,0xd2,0xa1,0x9b,0x92,0x92,0x92,0x98,0x8e,0xa4,
+	0xc6,0xc3,0xbd,0xc5,0x8a,0x93,0x93,0x93,0xa3,0xaa,0xd6,0x99,0x89,
+	0x90,0x88,0x6f,0x5f,0x5a,0x58,0x4f,0x50,0x43,0x44,0x38,0x39,0x45,
+	0x46,0x8d,0x47,0x78,0x54,0x28,0x33,0x21,0x24,0x24,0x24,0x25,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0xc8,0x71,0x6b,0x74,0x75,0x7d,0x89,0xa6,0x92,0x88,
+	0x88,0x96,0x99,0xd6,0xc5,0x93,0x92,0x92,0x92,0x9b,0x93,0xc5,0xd5,
+	0xc3,0xc6,0x96,0x98,0x6f,0x5f,0x59,0x4e,0x4e,0x4d,0x43,0x42,0x38,
+	0x39,0x3a,0x9e,0x3b,0x48,0x80,0x54,0x32,0x33,0x33,0x33,0x27,0x24,
+	0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x3c,0x67,0x70,0x6b,0x74,0x75,0x7d,0x81,0x81,
+	0x76,0x9a,0xa7,0x89,0xc3,0xa2,0xc5,0x9b,0x92,0x92,0x92,0x9b,0x93,
+	0xc5,0xbd,0x97,0x98,0x96,0xaa,0x6e,0x5f,0x59,0x4e,0x4f,0x50,0x43,
+	0x42,0x38,0x39,0x3a,0x9e,0x8d,0x48,0x78,0x3d,0x32,0x33,0x33,0x33,
+	0x33,0x33,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x80,0x56,0x70,0x6b,0x75,0x75,0x81,
+	0x7c,0x81,0x99,0x92,0x92,0xa3,0xa2,0xc5,0x93,0x92,0x92,0x92,0x92,
+	0x92,0x9b,0xc5,0xaa,0xc3,0x9a,0x89,0x92,0x6f,0x5f,0x58,0x58,0x4f,
+	0x50,0x42,0x44,0x38,0x39,0x3a,0x46,0x3b,0x47,0x78,0xcd,0x32,0x33,
+	0x33,0x27,0x33,0x33,0x33,0xae,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcc,0x67,0x6a,0x6b,0x75,
+	0x79,0x7d,0x81,0x81,0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x93,0xc5,0xa2,0x97,0xc6,0xd6,0x9b,0x6f,0x5f,0x58,
+	0x4e,0x4f,0x50,0x42,0x42,0x39,0x39,0x3a,0x9e,0x3b,0x47,0x78,0xb3,
+	0x28,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xd7,0x56,0x70,
+	0x6b,0x74,0x75,0x7d,0x7c,0x88,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x93,0x8a,0xa6,0xbd,0xc3,0xc6,0x93,0x9c,0x65,
+	0x59,0x58,0x4e,0x4d,0x50,0x42,0x44,0x38,0x45,0x9e,0x8d,0x3b,0x48,
+	0x78,0xcd,0x28,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x9f,
+	0x56,0x70,0x6b,0x74,0x75,0x7d,0x7d,0x98,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa6,0xd6,0x99,0xa1,0x92,
+	0x6e,0x5f,0x59,0x58,0x4e,0x50,0x43,0x42,0x38,0x39,0x45,0x3a,0x8d,
+	0x47,0x80,0x3c,0x31,0xa9,0x33,0x33,0x27,0x33,0x33,0x33,0x27,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0xd7,0x56,0x71,0x73,0x75,0x75,0x75,0x79,0xa1,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa3,0x97,
+	0xbd,0x92,0x6f,0x5f,0x58,0x4e,0x4d,0x50,0x42,0x44,0x38,0x39,0x3a,
+	0x46,0x8d,0x47,0x48,0x3c,0x32,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x9f,0x56,0x71,0x6a,0x6b,0x74,0x75,0x75,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x96,0xd1,0xc4,0x5f,0x58,0x4e,0x4f,0x50,0x42,0x44,0x38,
+	0x39,0x3a,0x46,0x3b,0x48,0x80,0xb1,0x28,0xa9,0x33,0x27,0x33,0x33,
+	0x27,0x33,0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0xd7,0x55,0x71,0x6a,0x7f,0x75,0x75,0x75,
+	0x8a,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0xd6,0x88,0x6c,0x73,0xba,0x7a,0x50,0x50,0x43,0x42,
+	0x44,0x39,0x45,0x3a,0x46,0x3b,0x48,0x78,0xcd,0x28,0x33,0x33,0x33,
+	0x33,0x33,0xa9,0x27,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x8c,0x4b,0x56,0x6a,0x6a,0x6b,
+	0x75,0x62,0x9c,0x93,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x89,0xbe,0x6a,0x70,0x66,0x56,0x56,0x5b,
+	0x41,0x44,0x38,0x39,0x3a,0x9e,0x8d,0x47,0x48,0x3c,0xcb,0xa9,0x33,
+	0x33,0x33,0x27,0x33,0x33,0x33,0xae,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x5c,0x4a,0x56,0x71,
+	0x6a,0x6b,0x74,0x7e,0x8b,0x9c,0x8a,0x93,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0xa3,0xad,0x70,0x70,0x71,0x56,0x56,
+	0x55,0x4b,0x4a,0x3f,0xd7,0xb6,0x3a,0x46,0x8d,0x47,0x78,0x3d,0x32,
+	0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcb,0x40,
+	0x67,0x66,0x70,0x73,0x6b,0x7e,0x6e,0x6e,0x8b,0x9c,0x8a,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x6e,0xd1,0x73,0x70,0x66,0x66,
+	0x56,0x55,0x4b,0x4a,0x40,0x49,0x35,0x52,0x53,0x8c,0x80,0x48,0x78,
+	0xcd,0x32,0x33,0x33,0x27,0x33,0x33,0x27,0x33,0x27,0x25,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x28,0xb6,0xba,0x56,0x71,0x70,0x73,0x7e,0x64,0x6f,0x6f,0x6f,0x6e,
+	0x8b,0x8b,0x9c,0x8a,0x8a,0x9c,0x8b,0x6f,0x64,0x5f,0x62,0x70,0x71,
+	0x56,0x56,0x55,0x4b,0x4a,0x40,0x3f,0x49,0x35,0x34,0x53,0x2a,0x2a,
+	0x30,0x68,0xcb,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x3a,0x44,0xac,0xc8,0x70,0x6a,0x7e,0x5f,0x64,0x6f,
+	0x64,0x6f,0x6f,0x6f,0x6f,0x6f,0x64,0x64,0x64,0x65,0x5f,0xc4,0x71,
+	0x66,0x66,0x56,0x67,0x4b,0x4a,0x4a,0x40,0x49,0x35,0x52,0x34,0x53,
+	0x2f,0x30,0x29,0xb3,0x23,0x22,0x25,0x33,0x33,0x27,0x33,0x33,0x33,
+	0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0xc7,0x38,0x43,0x4f,0x51,0xd2,0x7a,0x5f,
+	0x5f,0x5f,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x5f,0x5f,0x59,0x59,
+	0x7a,0x71,0x66,0x56,0x55,0x4b,0x4b,0x4a,0x3f,0x49,0x35,0x35,0x34,
+	0x53,0x2a,0x2f,0x30,0x29,0xcd,0x23,0x24,0x24,0x24,0x25,0xbb,0x27,
+	0x33,0x27,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x3a,0x44,0x50,0x4d,0x4e,
+	0xac,0xcf,0xc4,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x59,0x59,
+	0x5a,0x5a,0xba,0x56,0x67,0x67,0x4b,0x4a,0x40,0x40,0x3f,0x49,0x35,
+	0x34,0x53,0x2a,0x2a,0x30,0x29,0x32,0x3d,0x22,0x24,0x25,0x24,0x24,
+	0x25,0x24,0x25,0xbb,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x46,0x39,0x44,
+	0x50,0x4d,0xcf,0x71,0x71,0x4c,0xd1,0x59,0x59,0x59,0x59,0x5a,0x5a,
+	0x58,0x58,0x4e,0xd0,0x56,0x56,0x55,0x4b,0x4a,0x4a,0x40,0x3f,0x49,
+	0x35,0x34,0x34,0x2a,0x2a,0x30,0x30,0x31,0x61,0x23,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xc0,
+	0x3a,0x38,0x42,0x50,0x41,0x56,0x56,0x71,0x56,0xba,0xcf,0x4e,0x5a,
+	0x58,0x58,0x58,0x58,0x4f,0xb5,0x67,0x55,0x4b,0x4a,0x4a,0x40,0x49,
+	0x49,0x35,0x52,0x53,0x53,0x2a,0x2f,0x29,0x29,0x3e,0x23,0x22,0x24,
+	0x24,0x24,0xa0,0x22,0x25,0x24,0x25,0x27,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x21,0x3b,0x3a,0x38,0x44,0xac,0x55,0x67,0x67,0x66,0x56,0x66,
+	0x71,0x4c,0xac,0x4e,0x4f,0x4d,0x4d,0xba,0x4b,0x4a,0x4a,0x40,0x3f,
+	0x49,0x49,0x35,0x34,0x53,0x53,0x2a,0x2f,0x30,0x29,0x3e,0x61,0x23,
+	0x24,0x24,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x54,0x46,0x45,0x38,0x44,0x4a,0x4a,0x4b,0x55,
+	0x55,0x67,0x55,0x56,0x67,0x55,0x41,0xce,0xce,0x4b,0x4a,0x40,0x40,
+	0x3f,0x49,0x35,0x35,0x34,0x34,0x2a,0x2a,0x2f,0x30,0x29,0x3e,0x32,
+	0x22,0x24,0x25,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x48,0x46,0x3a,0x39,0x3f,0x40,
+	0x4a,0x4a,0x4a,0x4a,0x4b,0x4b,0x4b,0x4a,0x4b,0x4a,0x4c,0xb5,0x40,
+	0x40,0x49,0x49,0x35,0x35,0x34,0x34,0x2a,0x2a,0x2f,0x30,0x29,0x3e,
+	0x28,0xb3,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x24,0x48,0x46,0x3a,
+	0x8c,0x3f,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x3f,0x38,
+	0x38,0x38,0x3a,0x9f,0x35,0x34,0x34,0x53,0x2a,0x2a,0x2f,0x30,0x29,
+	0x3e,0x28,0x5d,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,
+	0x47,0x8d,0x95,0x52,0x35,0x49,0x49,0x3f,0x3f,0x3f,0x3f,0x49,0x3f,
+	0xc2,0x38,0x39,0x45,0x3a,0x3a,0x3a,0x95,0xcc,0x53,0x2f,0x30,0x29,
+	0x29,0x3e,0x32,0x28,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x25,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x26,0x54,0x48,0x3b,0x53,0x34,0x52,0x52,0x35,0x35,0x35,0x35,
+	0x35,0x35,0x9f,0x3a,0x3a,0x9e,0x9e,0x46,0x8d,0x8d,0x3b,0x47,0xb1,
+	0x77,0x31,0x32,0x28,0xa9,0x24,0x25,0x24,0x24,0x24,0xa0,0x24,0xa0,
+	0x24,0x24,0xae,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x78,0x68,0x2a,0x53,0x53,0x53,0x34,
+	0x34,0x34,0x34,0x34,0x46,0x9e,0x46,0x46,0x8d,0x3b,0x47,0x48,0x80,
+	0x78,0x3c,0x3c,0x54,0xb4,0xbb,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0xb4,0x54,0x30,0x2f,0x2a,
+	0x2f,0x53,0x53,0x53,0x2a,0x2a,0x46,0x3b,0x3b,0x47,0x47,0x48,0x48,
+	0x80,0x78,0x3c,0x3d,0x3d,0x23,0x22,0x25,0x33,0x33,0x33,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0xa9,0xcb,
+	0x31,0x30,0x30,0x30,0x30,0x2f,0x2a,0x68,0x47,0x48,0x48,0x80,0x78,
+	0x78,0x3c,0x54,0x3d,0x3d,0x23,0x22,0x24,0xae,0x33,0x27,0x33,0x27,
+	0x33,0x27,0x33,0xa0,0x24,0xa0,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x33,0x22,0xb3,0xb4,0x29,0x31,0x29,0x29,0x3c,0x80,0x3c,0x78,
+	0x3c,0x54,0x54,0x3d,0x3d,0x22,0x22,0x24,0x24,0x33,0x33,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x27,0x24,0x22,0x23,0x61,0xcb,0x32,0x3d,0x3d,
+	0x3d,0x23,0x3d,0x23,0x23,0x22,0x22,0x24,0x24,0x25,0x33,0x27,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xbb,0x24,0x25,0x24,0x33,
+	0xbb,0x23,0x22,0x24,0x24,0x25,0x24,0x24,0x24,0x24,0x24,0x27,0x33,
+	0x33,0x33,0x27,0x33,0x27,0x33,0x27,0xa9,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x22,
+	0x25,0x27,0x33,0x27,0x33,0x33,0x24,0x24,0x24,0xa0,0x24,0x5d,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x21,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x27,0x33,0x33,0x33,0x27,0x33,0x27,0x33,0x33,0x27,
+	0x33,0x33,0x33,0x27,0x33,0x33,0x33,0x25,0x21,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x26,0x24,0x24,0x25,0x24,
+	0x24,0x25,0x24,0x25,0x33,0x33,0x25,BLCK,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0xa8,
+	0x24,0x24,0x25,0xa0,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x23,0x77,0x77,0x53,
+	0x53,0x2c,0x2c,0x3b,0x48,0x48,0x3c,0x61,0x61,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x2c,0x83,0x49,0x35,
+	0x49,0x49,0x49,0x35,0x35,0x34,0xd8,0xc7,0x2a,0x2f,0x30,0x31,0x28,
+	0xa9,0x27,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x54,0xb6,0x40,0x4a,0x4a,
+	0x4a,0x4b,0x4a,0x4b,0x4a,0x40,0x83,0xb6,0x38,0x39,0x3a,0x3b,0x2c,
+	0x2a,0x30,0x29,0x28,0x22,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,0xb6,0x83,0x4b,0x55,
+	0x56,0x56,0x56,0x56,0x56,0x56,0x55,0xd9,0x43,0x42,0x44,0x38,0x39,
+	0x3a,0x9e,0x8d,0xc7,0x2e,0x29,0x3d,0x23,0x24,0x25,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x24,0x46,0xda,0x4b,0x71,
+	0x71,0x71,0x70,0x70,0x70,0x71,0x71,0x66,0xac,0x4f,0x4f,0x50,0x50,
+	0x42,0x44,0x38,0x39,0x3a,0x46,0x47,0x78,0x2e,0x22,0x23,0x24,0x25,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa8,0x44,0x60,0x56,
+	0x70,0x70,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x70,0xb0,0x5a,0x58,0x4e,
+	0x4e,0x50,0x50,0x42,0x44,0x38,0x39,0x3a,0x46,0x2c,0x2f,0x30,0x3e,
+	0x28,0x24,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4a,0xb0,
+	0x4d,0xcf,0x62,0x6a,0x6b,0x7f,0x7f,0x7f,0x7f,0x7f,0xd1,0x5f,0x5f,
+	0x59,0x58,0x58,0x4f,0x4d,0x50,0x42,0x44,0x38,0x39,0x3a,0x2c,0x2a,
+	0x2f,0x29,0x32,0xa9,0x33,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4b,
+	0xb0,0x59,0x5f,0x65,0x64,0x65,0xd1,0xb7,0x74,0x6b,0x6b,0xdb,0x64,
+	0x65,0x65,0x5f,0x59,0x5a,0x58,0x4e,0x4d,0x50,0x42,0x44,0x38,0x39,
+	0x35,0x53,0x2f,0x30,0x29,0x28,0x33,0x33,0x25,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,
+	0x4b,0x57,0x5f,0x6f,0x6f,0x6e,0x9c,0x8b,0xc5,0x9c,0x8b,0xd1,0xdb,
+	0x6e,0x6f,0x64,0x65,0x65,0x5f,0x59,0x5a,0x58,0x4f,0x4d,0x43,0x42,
+	0x38,0x39,0x35,0x34,0x53,0x2f,0x30,0x31,0xa9,0x33,0x33,0x25,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0xa9,0x4a,0xb0,0x5f,0x6f,0x6e,0x9c,0x8a,0x8a,0x93,0x93,0x93,0x8a,
+	0x6e,0x79,0x74,0xdb,0x97,0x6f,0x64,0x5f,0x5f,0x59,0x58,0x4e,0x4f,
+	0x50,0x42,0x42,0xb6,0x49,0x52,0x53,0x2a,0x2f,0x29,0x31,0xa9,0x27,
+	0x22,0x25,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x4a,0xd9,0x5f,0x6f,0x8b,0x9c,0x93,0x9b,0x92,0x92,0x92,
+	0x92,0x9b,0x90,0x75,0x79,0x74,0x6b,0x6c,0xdb,0x5a,0x5f,0x5f,0x59,
+	0x58,0x4e,0x4f,0x50,0x42,0xd7,0x40,0x35,0x34,0x2a,0x2f,0x30,0x3e,
+	0x32,0x33,0x33,0x24,0x25,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x52,0x67,0x5f,0x6f,0x8b,0x9c,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x97,0x79,0x81,0x79,0x7d,0x75,0x75,0x74,0x75,0x5e,
+	0x6d,0x63,0x58,0x58,0x4d,0x50,0x43,0x36,0x49,0x35,0x52,0x53,0x2a,
+	0x30,0x29,0x28,0xa9,0x27,0x24,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa9,0x55,0xdc,0x6f,0x8b,0x8a,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x8a,0x87,0x8e,0x8e,0x8e,0x85,0x87,0x79,0x74,
+	0x74,0x6b,0x6a,0x70,0xdd,0xac,0x4f,0x4d,0x42,0x4b,0x40,0x35,0x35,
+	0x34,0x2a,0x2f,0x30,0x3e,0x28,0x33,0x24,0x24,0x24,0x25,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0xd9,0x5f,0x8b,0x9c,0x9b,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0xc6,0x88,0x8f,0x8f,0x8f,0x8f,0x88,
+	0x8e,0x87,0x75,0x74,0x7f,0x73,0x6a,0x70,0x56,0xde,0x4c,0x4a,0x40,
+	0x49,0x35,0x34,0x53,0x2f,0x30,0x3e,0x28,0x33,0x24,0x24,0xa0,0x22,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x67,0x69,0x6f,0x8b,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xc5,0x90,0xa7,0x96,0x76,0x76,
+	0x76,0x90,0x90,0x88,0xbe,0x6c,0x7f,0x6a,0x70,0x70,0x56,0x67,0x94,
+	0x43,0x37,0x83,0x49,0x34,0x53,0x2f,0x30,0x31,0x28,0xa9,0x33,0x24,
+	0x24,0xa0,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x34,0xd9,0x5f,0x6e,
+	0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x99,0xc6,0x98,0x99,
+	0x99,0x99,0x98,0xc6,0x96,0x90,0x88,0xaf,0x74,0x73,0x6a,0x71,0x71,
+	0x67,0x4f,0x43,0x42,0x9d,0x3a,0x9f,0x34,0x2a,0x2f,0x29,0x3e,0xa9,
+	0x27,0x24,0x24,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x55,0xb0,
+	0x64,0x8b,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x98,0xa1,
+	0xd6,0xd5,0xd5,0xd6,0xd6,0xa1,0x98,0x96,0x90,0x88,0x6c,0x73,0x6a,
+	0x71,0x66,0xd9,0x4f,0x43,0x42,0x38,0x39,0x3a,0x46,0xc7,0x77,0x30,
+	0x3e,0x28,0x33,0x25,0x24,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0xcf,0x59,0x6f,0x9c,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xd6,
+	0x97,0xd5,0xaa,0xa6,0xc5,0xa6,0xbd,0xbd,0xa1,0x98,0x96,0x8f,0xaf,
+	0x73,0x6a,0x70,0x66,0xac,0x4d,0x42,0x44,0x38,0x39,0x3a,0x46,0x8d,
+	0x47,0x78,0xb3,0x28,0x27,0x24,0x24,0x24,0x25,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x42,0xcf,0x73,0xb7,0xa1,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0xa1,0xa2,0x91,0x8a,0x93,0x93,0x93,0x91,0xa2,0xbd,0x99,0x76,
+	0xa4,0x88,0x6c,0x70,0x70,0x71,0x4f,0x4d,0x50,0x42,0x38,0x39,0x45,
+	0x46,0x3b,0x47,0x80,0x3c,0x23,0x22,0xa0,0x24,0x24,0x24,0xa0,0x26,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x43,0xd9,0x6b,0x74,0x75,0x75,0xc6,0xa6,0x92,0x92,
+	0x92,0x92,0xa2,0xd5,0xa6,0x93,0x92,0x92,0x92,0x92,0x8a,0x91,0xd5,
+	0xa1,0xc6,0xa7,0x88,0x6c,0x6a,0x71,0xd9,0x4e,0x4d,0x42,0x44,0x38,
+	0x39,0x3a,0x9e,0x3b,0x48,0x78,0x54,0x3d,0x24,0x5d,0x27,0x33,0x24,
+	0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x78,0x4d,0x6a,0x6b,0x74,0x7d,0x7c,0x7c,0x81,
+	0x8f,0x99,0x92,0x92,0xd5,0xbd,0x93,0x9b,0x92,0x92,0x92,0x92,0x8a,
+	0xc5,0xa2,0x97,0x98,0x96,0x8f,0x6c,0x6a,0x70,0xac,0x4e,0x4d,0x43,
+	0x42,0x38,0x39,0x3a,0x46,0x8d,0x47,0x80,0x54,0x23,0x22,0x33,0x33,
+	0x33,0x33,0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x80,0xb0,0x70,0x6b,0x75,0x75,0x7c,
+	0x81,0x81,0x81,0x8e,0xa4,0xbd,0xa6,0x91,0x93,0x92,0x92,0x92,0x92,
+	0x92,0x9b,0x91,0xa2,0x97,0x98,0x96,0x88,0xad,0x6b,0x71,0x63,0x4f,
+	0x50,0x43,0x44,0x38,0x39,0x3a,0x46,0x3b,0x48,0x78,0x54,0x3d,0x24,
+	0x5d,0x33,0x27,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x46,0xda,0x6a,0x6b,0x75,
+	0x79,0x79,0x7c,0x81,0x81,0x88,0xa4,0xa2,0x9b,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x9b,0x8a,0xc5,0xa2,0x97,0x98,0x96,0x88,0x5e,0x70,0xd9,
+	0x4e,0x4d,0x50,0x42,0x44,0x38,0x39,0x3a,0x46,0x8d,0x48,0x78,0x54,
+	0x23,0x22,0x27,0x33,0x33,0x33,0x27,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,0xda,0x70,
+	0x6b,0x74,0x75,0x7c,0x7c,0x7c,0x84,0x86,0xa4,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x9b,0x8a,0xa6,0xbd,0xa1,0xc6,0xa7,0x8f,0x6c,
+	0x6a,0xac,0x58,0x4f,0x50,0x42,0x44,0x39,0x45,0x9e,0x8d,0x3b,0x48,
+	0x78,0x3d,0x3d,0x24,0x33,0x33,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,
+	0xda,0x6a,0x6b,0x74,0x75,0x7d,0x7c,0x81,0x81,0x8e,0x89,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa6,0xd6,0x99,0x76,0xa4,
+	0xad,0x70,0x6a,0x58,0x4f,0x4d,0x50,0x42,0x44,0x39,0x45,0x3a,0x8d,
+	0x3b,0x48,0x78,0x3d,0x23,0x25,0x33,0x27,0x33,0x33,0x33,0x33,0x26,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x44,0xc8,0x70,0x6b,0x74,0x75,0x79,0x7d,0x7c,0x84,0x87,0x99,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xc5,0x97,
+	0x96,0x8f,0xbe,0x6b,0xda,0x4e,0x4f,0x50,0x42,0x44,0x38,0x39,0x3a,
+	0x46,0x8d,0x47,0x80,0x78,0x3d,0x23,0x25,0x33,0x33,0x33,0x27,0x33,
+	0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x38,0x67,0x71,0x73,0x6b,0x74,0x75,0x79,0x79,0x7c,
+	0x84,0xa6,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x93,0x69,0xb7,0x70,0x57,0x4e,0x4d,0x50,0x42,0x44,0x38,
+	0x39,0x3a,0x46,0x3b,0x47,0x80,0x54,0x3d,0x22,0xa0,0x33,0x33,0x33,
+	0x33,0x33,0x27,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x39,0x67,0x71,0x6a,0x6b,0x74,0x74,0x75,
+	0x79,0x7d,0x81,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x8b,0x6f,0x5f,0xdc,0xcf,0xdc,0x4d,0x43,0x42,
+	0x38,0x39,0x3a,0x3a,0x8d,0x3b,0x48,0x78,0x54,0x23,0x22,0xa0,0x33,
+	0x33,0x27,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x60,0x56,0x70,0x73,0x6b,
+	0x74,0x75,0x75,0x79,0x8f,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x8b,0x64,0x5f,0x5a,0xac,0x71,0x67,0x60,
+	0xdf,0x44,0x38,0x39,0x3a,0x9e,0x8d,0x47,0x48,0x78,0x3d,0x23,0x24,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x47,0x37,0x67,0x70,
+	0x6a,0x6b,0x6b,0x6b,0x75,0x6b,0xc6,0x93,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8b,0x64,0x5f,0x5a,0x58,0x60,0x56,
+	0x4b,0x4b,0x4a,0x4a,0x9f,0xb6,0x3a,0x8d,0x3b,0x47,0x80,0x54,0x3d,
+	0x23,0x24,0x33,0x33,0x27,0x33,0x27,0x33,0x33,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x37,
+	0x56,0x71,0x70,0x6a,0x6b,0x6b,0x74,0x74,0xd1,0x8b,0x8a,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x8b,0x64,0x5f,0x59,0x5a,0xdc,
+	0x71,0x67,0x4b,0x4a,0x40,0x49,0x49,0x35,0x34,0x2c,0xd8,0x48,0x78,
+	0x54,0x23,0x22,0xa0,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x3e,0x83,0x60,0x67,0x71,0x6a,0x6a,0x7f,0x6b,0x74,0x69,0x8b,0x6e,
+	0x8b,0x8b,0x9c,0x8a,0x8a,0x9c,0x8b,0x6f,0x64,0x65,0x59,0x5a,0x58,
+	0x4e,0xda,0x67,0x4b,0x4a,0x40,0x3f,0x49,0x35,0x34,0x53,0x53,0x2f,
+	0x29,0x2e,0x3d,0x23,0x24,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x83,0x38,0xac,0x5b,0x70,0x70,0x6a,0x73,0x7f,0x5f,
+	0x6f,0x64,0x6f,0x6f,0x6f,0x6f,0x64,0x64,0x65,0x65,0x5f,0x5f,0x5a,
+	0x58,0x4e,0x4e,0x67,0x67,0x4b,0x40,0x40,0x49,0x35,0x52,0x34,0x2a,
+	0x2f,0x30,0x29,0x32,0x28,0x28,0x27,0x33,0x33,0x27,0x33,0x27,0x33,
+	0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x2a,0x38,0x43,0x4f,0xdc,0xd9,0x70,0x6a,
+	0x6a,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x5f,0x59,0x5a,
+	0x58,0x58,0x4e,0x4e,0xac,0x55,0x4b,0x40,0x40,0x49,0x49,0x52,0x34,
+	0x53,0x2a,0x2f,0x30,0x29,0x32,0xa9,0x33,0x24,0x24,0x25,0x25,0x33,
+	0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,0xb6,0x44,0x50,0x4d,0x4e,
+	0x63,0xcf,0x70,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x59,0x59,0x59,
+	0x5a,0x5a,0x58,0x4e,0x4f,0x4d,0xd9,0x40,0x4a,0x40,0x3f,0x49,0x35,
+	0x34,0x53,0x53,0x2f,0x30,0x29,0x3e,0x32,0xa9,0x33,0x25,0x24,0x25,
+	0x24,0x25,0x24,0xa0,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x2c,0x39,0x42,
+	0x50,0x4f,0x4e,0x58,0x5a,0xb7,0xb0,0x59,0x59,0x59,0x59,0x59,0x5a,
+	0x5a,0x58,0x58,0x4e,0x4f,0x4f,0x4d,0x44,0x4a,0x4a,0x40,0x3f,0x35,
+	0x35,0x34,0x34,0x53,0x2f,0x2f,0x30,0x3e,0x32,0xa9,0x33,0xa0,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,
+	0x3a,0x38,0x44,0x50,0x4d,0x4e,0x4e,0x56,0x66,0xdd,0xcf,0x4e,0x58,
+	0x58,0x58,0x58,0x4e,0x4e,0x4f,0x4d,0x50,0x50,0x37,0x4b,0x40,0x3f,
+	0x49,0x35,0x52,0x34,0x53,0x2a,0x2f,0x30,0x29,0x3e,0x28,0x33,0x33,
+	0x24,0x24,0x24,0xa0,0x24,0x25,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x27,0xc7,0x3a,0x44,0x44,0x42,0x50,0x4d,0x67,0x56,0x56,0x66,
+	0x56,0xd9,0xac,0x4e,0x4f,0x4d,0x50,0x50,0x50,0x43,0x42,0x4a,0x40,
+	0x49,0x49,0x35,0x34,0x53,0x53,0x2a,0x2f,0x29,0x29,0x3e,0x28,0xa9,
+	0x33,0xa0,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x25,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xb4,0x46,0x39,0x38,0x44,0x42,0x42,0x55,0x55,
+	0x55,0x67,0x67,0x67,0x55,0x55,0xda,0x57,0x50,0x42,0x42,0x44,0xb6,
+	0x4a,0x49,0x35,0x35,0x52,0x34,0x2a,0x2a,0x2f,0x30,0x29,0x3e,0x28,
+	0xa9,0x33,0x33,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x3c,0x46,0x3a,0x39,0x38,0x44,
+	0x4a,0x4a,0x4b,0x4b,0x4b,0x4b,0x4a,0x4b,0x4a,0x4a,0x36,0xb5,0x9d,
+	0x44,0x36,0x49,0x35,0x52,0x34,0x53,0x53,0x2a,0x2f,0x30,0x29,0x3e,
+	0x28,0x28,0x33,0x33,0x24,0xa0,0x24,0x24,0x24,0x24,0x24,0x24,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x5d,0x47,0x46,0x3a,
+	0x39,0x39,0x36,0x40,0x40,0x40,0x40,0x4a,0x40,0x40,0x40,0x40,0x40,
+	0x40,0x40,0x9f,0x9f,0x35,0x34,0x34,0x53,0x2a,0x2a,0x30,0x30,0x29,
+	0x31,0x32,0xa9,0x33,0x33,0x27,0x24,0x24,0x25,0x24,0x24,0x24,0x24,
+	0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb3,
+	0x48,0x8d,0x46,0x45,0x9f,0x49,0x49,0x49,0x3f,0x49,0x3f,0x49,0x49,
+	0x49,0x49,0x35,0x52,0xb6,0x3a,0x3a,0xc7,0x2e,0x2a,0x2f,0x30,0x30,
+	0x29,0x3e,0x32,0xa9,0x33,0x33,0x33,0x24,0x24,0x24,0x24,0x24,0x24,
+	0xa0,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x3d,0x48,0x3b,0x8d,0x2c,0x35,0x52,0x35,0x35,0x35,0x35,
+	0x35,0x35,0x52,0x52,0x52,0x52,0x3a,0x46,0x46,0x3b,0x3b,0x3b,0x2e,
+	0x77,0x31,0x3e,0x28,0xa9,0x33,0x33,0x33,0x24,0x24,0xa0,0x24,0xa0,
+	0x24,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x26,0x23,0x80,0x48,0x3b,0x53,0x53,0x53,0x34,
+	0x34,0x52,0x34,0x34,0x34,0x53,0x34,0xd8,0x8d,0x3b,0x47,0x47,0x48,
+	0x78,0x78,0x54,0x54,0xb3,0x25,0x33,0x33,0x27,0x24,0x25,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb4,0x54,0x80,0x77,0x2a,
+	0x2a,0x2a,0x2a,0x53,0x2a,0x53,0x53,0x2a,0x2f,0x8d,0x47,0x48,0x48,
+	0x78,0x78,0x3c,0x3d,0x23,0x23,0x22,0x25,0x24,0x25,0xae,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,0x61,
+	0x29,0x29,0x30,0x2f,0x2f,0x2f,0x2f,0x2f,0x2f,0x30,0x2e,0x48,0x78,
+	0x78,0x54,0x3c,0x3d,0x23,0x23,0x23,0x25,0x24,0x24,0x24,0x5d,0x33,
+	0x33,0x27,0x33,0xa0,0x24,0x24,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x33,0xa9,0xb3,0x61,0x29,0x29,0x29,0x29,0x29,0x29,0x77,0x78,
+	0x54,0x54,0x54,0x3d,0x3d,0x23,0x22,0x24,0x24,0x24,0x24,0x24,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x27,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x27,0x33,0x22,0x23,0x61,0x28,0x3e,0x32,0x32,
+	0x23,0x3d,0x3d,0x23,0x23,0x22,0x22,0x25,0x22,0xa0,0x24,0xa0,0x24,
+	0x33,0x27,0x33,0x33,0x27,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x24,0x24,0x24,0x24,
+	0xa8,0xa8,0x22,0x22,0x22,0x25,0xa0,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x24,0x27,0x33,0x33,0x33,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0x25,0x24,0xbb,0x33,0x33,0x27,0x25,0x24,0x24,0x24,0x24,0xa0,0x24,
+	0x24,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0xa0,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x24,0x24,
+	0x24,0x27,0x33,0x27,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x26,0x33,0x33,0x33,0xa0,
+	0x24,0x24,0x24,0x24,0x33,0x33,0xa8,0x26,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x33,0x33,0x25,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x3d,0x78,0xd8,0xb1,
+	0x2f,0x2c,0x2c,0x3b,0x48,0x48,0x3c,0x3d,0x23,0xa8,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x46,0x3a,0x9f,0x49,
+	0x49,0x3f,0x3f,0x49,0x35,0x34,0x83,0xb1,0x46,0x68,0x30,0x31,0x28,
+	0xa9,0x27,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,0x39,0x44,0x9f,0x4b,
+	0x4a,0x4b,0x4b,0x4a,0x4a,0x4a,0x40,0x3f,0x49,0x83,0x3a,0xd8,0x2d,
+	0x2f,0x30,0x29,0x28,0xa9,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,0x39,0x44,0xac,0x55,
+	0x56,0x56,0x56,0x56,0x67,0x56,0x67,0x4b,0x4a,0x4b,0x9f,0x38,0x39,
+	0x45,0x9e,0x8d,0xd8,0x68,0x29,0x3e,0x25,0x24,0x25,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x25,0x46,0x42,0x50,0xde,
+	0x67,0x71,0x70,0x70,0x71,0x71,0x71,0x66,0x66,0x56,0x67,0xb5,0x43,
+	0x42,0x44,0x38,0x39,0x3a,0x46,0x3b,0x48,0x68,0x3d,0x23,0x24,0xa0,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa8,0x44,0x50,0x51,
+	0xdd,0x71,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x70,0x70,0x71,0x71,0xe0,
+	0x4e,0x50,0x50,0x42,0x44,0x38,0x39,0x3a,0x9e,0x3b,0x48,0x68,0x3e,
+	0xa9,0x22,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4a,0x56,
+	0xe0,0xcf,0xbf,0x73,0x7f,0x6b,0x6b,0x7f,0x7f,0x7f,0x6a,0x6a,0x70,
+	0xde,0x58,0x58,0x4e,0x4d,0x50,0x42,0x44,0x38,0x39,0x3a,0x46,0x3b,
+	0x3d,0x30,0x32,0xa9,0x33,0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4b,
+	0x66,0xde,0x65,0x64,0x65,0xaa,0xe1,0xe2,0x6b,0x74,0x6b,0x6b,0x6b,
+	0x7f,0xbe,0x59,0x59,0x58,0x58,0x4e,0x4d,0x50,0x42,0x44,0x39,0x39,
+	0x3a,0x46,0xb1,0x30,0x29,0x28,0x33,0x33,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,
+	0x4b,0x71,0xde,0x65,0x6f,0x6e,0x9c,0x8b,0xa6,0x8b,0x8b,0x9a,0xe2,
+	0x74,0x6b,0x6b,0xd3,0x65,0x5f,0x59,0x58,0x58,0x4f,0x50,0x50,0x42,
+	0x38,0x39,0x45,0x46,0x2d,0x2f,0x30,0x31,0x28,0x33,0x27,0xa9,0x25,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0xa9,0x4b,0x71,0x7f,0xc4,0x8b,0x9c,0x8a,0x8a,0x8a,0x9b,0x9b,0x8a,
+	0x9c,0x9c,0xa3,0x57,0x98,0x64,0x65,0x65,0x5f,0x59,0x58,0x4e,0x4e,
+	0x50,0x43,0x42,0x38,0x39,0x3a,0x2c,0x2a,0x30,0x29,0x32,0xa9,0x33,
+	0x33,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x40,0x66,0x73,0xd3,0x64,0x91,0x8a,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x9b,0x9b,0x93,0xbd,0x6b,0xbe,0x89,0xd3,0x65,0x5f,0x59,
+	0x58,0x4e,0x4d,0x43,0x42,0x44,0x39,0x45,0x2d,0x53,0x2f,0x30,0x3e,
+	0x28,0x33,0x33,0x33,0x25,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x34,0x66,0x70,0xe2,0x8b,0x93,0x9b,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x7b,0x75,0x6b,0x73,0x73,0x6c,
+	0xac,0xd3,0x58,0x4e,0x4e,0x50,0x42,0x44,0x38,0x39,0x83,0x34,0x2a,
+	0x30,0x29,0x28,0x33,0x33,0x27,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa9,0x55,0x70,0x6c,0x6f,0x8a,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xd6,0x85,0x85,0xaf,0x75,
+	0x6b,0x6b,0x7f,0x6a,0xde,0xac,0x4e,0x4d,0x50,0x42,0x38,0x39,0x52,
+	0x53,0x2a,0x2f,0x30,0x31,0xa9,0x33,0x33,0x33,0x24,0x25,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x66,0x7f,0xe1,0x8b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x96,0x8f,0x8e,
+	0x8e,0xaf,0x75,0x6b,0x73,0x6a,0x70,0x70,0x66,0xe0,0xac,0x42,0x44,
+	0x39,0x35,0x34,0x53,0x2f,0x30,0x31,0x28,0x33,0x33,0x27,0x25,0x24,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x56,0x70,0xab,0x8b,0x9b,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xbd,0x76,
+	0x96,0xa4,0x8f,0x8e,0x85,0xbe,0x7f,0x6a,0x70,0x71,0x56,0x56,0x4b,
+	0x4a,0x37,0xb5,0x35,0x34,0x53,0x2a,0x30,0x29,0x32,0xa9,0x33,0x33,
+	0x24,0x25,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x71,0x6a,0xe1,
+	0x8b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x97,0x99,0x98,0x89,0x76,0xa4,0x8e,0xaf,0x6b,0x7f,0x70,0x71,0x66,
+	0x56,0x55,0x4b,0x4a,0x37,0xdf,0x2d,0x34,0x2a,0x30,0x29,0x32,0xa9,
+	0x33,0x33,0xa0,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4b,0x70,
+	0x6b,0x9c,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x8a,0xbd,0xd6,0xd6,0xc3,0x98,0x76,0xa4,0x88,0x6c,0x7f,0x6a,
+	0x70,0x66,0x56,0x55,0x4a,0x4a,0xb5,0x39,0x3a,0x46,0xd8,0x68,0x30,
+	0x3e,0xa9,0x33,0x33,0x27,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x78,
+	0xcf,0x70,0xc1,0x8b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x91,0x91,0xc5,0xa2,0x97,0xa1,0x98,0x96,0x8f,0xaf,
+	0x6b,0x70,0x70,0x66,0x56,0x55,0x4b,0x40,0x38,0x39,0x45,0x46,0x3b,
+	0x48,0x78,0xb3,0x28,0x33,0x33,0x33,0x24,0x24,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x44,0x58,0x65,0xe2,0xa1,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x93,0x8a,0x91,0x91,0xa2,0xd6,0x9a,0x76,
+	0xa4,0xab,0xbe,0x6a,0x70,0x71,0x56,0x55,0x4b,0xe3,0x38,0x39,0x3a,
+	0x9e,0x3b,0x48,0x80,0x54,0x3d,0x24,0xae,0x33,0x24,0x24,0x25,0xa0,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x50,0x59,0xc4,0x6b,0x74,0x79,0x98,0xa2,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0xc5,0xa2,
+	0xa1,0x98,0x96,0x88,0xbe,0x70,0x71,0x66,0x56,0x55,0x4b,0x9f,0x38,
+	0x39,0x3a,0x46,0x8d,0x47,0x78,0x54,0x23,0x22,0x24,0x24,0x27,0x24,
+	0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x78,0x4d,0x59,0x89,0x73,0x75,0x7d,0x7c,0x81,
+	0x8f,0x99,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,
+	0xc5,0xa2,0x97,0xc6,0x96,0x8f,0x6c,0x73,0x70,0x66,0x56,0x55,0x4b,
+	0xb5,0x44,0x39,0x3a,0x46,0x3b,0x47,0x78,0x54,0x3d,0x22,0x25,0x24,
+	0x33,0x27,0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x80,0x4f,0x59,0xe2,0x74,0x79,0x7d,
+	0x81,0x81,0x81,0x87,0xa4,0x97,0xc5,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0xc5,0xbd,0x97,0x9a,0x96,0x8f,0xbe,0x70,0x71,0x66,0x56,
+	0x4b,0x4a,0x42,0x38,0x39,0x3a,0x46,0x8d,0x48,0x80,0x54,0x23,0x22,
+	0x24,0x25,0x33,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x46,0x4f,0x59,0x73,0x75,
+	0x75,0x7d,0x7c,0x81,0x81,0x88,0xa4,0x98,0x97,0xc5,0x93,0x92,0x92,
+	0x92,0x92,0x92,0x8a,0x91,0xbd,0x97,0xc6,0x96,0xab,0xbe,0x6a,0x71,
+	0x56,0x56,0x4b,0x83,0x44,0x38,0x39,0x3a,0x46,0x8d,0x48,0x78,0x54,
+	0x23,0x22,0x24,0x24,0x27,0x33,0x33,0x27,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,0x4e,0x59,
+	0x7f,0x74,0x79,0x7d,0x81,0x81,0x81,0x88,0x90,0x98,0xc3,0xa2,0x93,
+	0x92,0x92,0x92,0x92,0x92,0xc5,0xc5,0xa2,0xa1,0xc1,0x96,0xab,0xbe,
+	0x70,0x71,0x66,0x67,0x56,0xb5,0x44,0x38,0x45,0x3a,0x8d,0x47,0x48,
+	0x78,0x54,0x23,0x24,0x24,0x25,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,
+	0x4e,0xe1,0x7f,0x74,0x75,0x75,0x7d,0x7c,0x81,0x86,0xa4,0x76,0xa1,
+	0xa2,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0xa2,0xd6,0x9a,0x76,0xa4,
+	0xab,0x7f,0x71,0x66,0x56,0x55,0x4b,0x51,0x38,0x39,0x3a,0x3a,0x8d,
+	0x3b,0x48,0x78,0x3d,0x23,0x24,0x24,0x24,0x33,0x27,0x33,0x33,0x26,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x38,0x4f,0xcf,0x7f,0x6b,0x75,0x79,0x7d,0x81,0x81,0x87,0x8f,
+	0x96,0x99,0x97,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xc5,0x97,
+	0x96,0x8f,0xbe,0xdd,0x71,0x66,0x67,0x4b,0x4a,0x44,0x38,0x39,0x45,
+	0x46,0x8d,0x47,0x48,0x54,0x54,0x23,0x24,0x24,0x25,0x33,0x33,0x33,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x38,0x4d,0xcf,0x7f,0x6b,0x74,0x75,0x75,0x7c,0x81,
+	0x87,0x88,0xa4,0x89,0x97,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x93,0x9a,0xde,0x6a,0x71,0x56,0x67,0x4b,0xb5,0x42,0x38,
+	0x45,0x3a,0x46,0x3b,0x48,0x80,0x54,0x3d,0x22,0x24,0x24,0x24,0x33,
+	0x33,0x27,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x39,0x50,0xcf,0x6a,0x6b,0x74,0x75,0x79,
+	0x75,0x7d,0x81,0x87,0x8f,0x96,0xd6,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x8b,0x6f,0x5f,0xd3,0xcf,0x56,0x55,0x4b,0x44,
+	0x38,0x38,0x3a,0x3a,0x46,0x3b,0x48,0x78,0x54,0x23,0x24,0x24,0x24,
+	0xa0,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x43,0xcf,0x70,0x73,0x6b,
+	0x74,0x75,0x75,0x75,0x75,0x81,0x87,0x8f,0xc5,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x9c,0x64,0x5f,0x5a,0x58,0x4e,0x4f,0xdf,
+	0xe0,0x44,0x38,0x39,0x3a,0x9e,0x8d,0x47,0x48,0x78,0x3d,0x23,0x22,
+	0x24,0x24,0x5d,0x27,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x47,0x42,0xe0,0x71,
+	0x6a,0x7f,0x6b,0x6b,0x75,0x75,0x79,0x79,0xaf,0x87,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8b,0x64,0x5f,0x5a,0x58,0x4e,0x4f,
+	0x50,0x50,0xd7,0x49,0x9f,0xb5,0x3a,0x8d,0x8d,0x47,0x80,0x54,0x3d,
+	0x23,0xa0,0x24,0x24,0x33,0x33,0x27,0x33,0x33,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x44,
+	0xb5,0x66,0x70,0x6a,0x6b,0x6b,0x6b,0x74,0x75,0x75,0x75,0xa7,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x6f,0x64,0x5f,0x59,0x58,0x4e,
+	0x4f,0x4d,0x50,0x42,0x4a,0x3f,0x35,0x34,0x53,0xb1,0xd8,0x48,0x78,
+	0x54,0x23,0x22,0x24,0x24,0xa0,0x33,0x33,0x33,0x33,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x3e,0x83,0x9f,0x56,0x71,0x6a,0x6a,0x7f,0x6b,0x74,0x6b,0x74,0x6b,
+	0xc1,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x6f,0x64,0x65,0x5f,0x59,0x58,
+	0x4e,0x4f,0x4d,0x50,0x43,0xb5,0x40,0x49,0x35,0x34,0x34,0x53,0x2f,
+	0x29,0x68,0x3d,0x23,0x24,0x24,0x24,0x24,0x33,0x33,0x27,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x35,0x4a,0xac,0xde,0x66,0x70,0x6a,0x7f,0x7f,0x6b,
+	0x6b,0x6b,0xe1,0x6e,0x6f,0x6f,0x64,0x65,0x6f,0x5f,0x5f,0x59,0x5a,
+	0x58,0x58,0x4f,0x4d,0x50,0x42,0x42,0x83,0x40,0x35,0x52,0x53,0x53,
+	0x2a,0x30,0x29,0x3e,0x28,0xa9,0x5d,0x24,0x24,0x33,0x33,0x33,0x33,
+	0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x3f,0x43,0x50,0xe1,0xe0,0x70,0x6a,
+	0x6a,0x73,0x7f,0x6b,0x65,0x5f,0x64,0x65,0x65,0x65,0x5f,0x59,0x59,
+	0x5a,0x58,0x4e,0x4f,0x4f,0x50,0x42,0x42,0x38,0x3f,0x35,0x52,0x34,
+	0x53,0x2a,0x2f,0x30,0x29,0x32,0xa9,0x33,0x27,0x33,0x27,0xa8,0x33,
+	0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,0x35,0x44,0x43,0x4f,0x4e,
+	0x4e,0xcf,0x70,0x6a,0x6a,0x6a,0x5f,0x5f,0x5f,0x59,0x5f,0x59,0x59,
+	0x5a,0x58,0x58,0x4e,0x4f,0x50,0x50,0x43,0x42,0x44,0x9f,0x40,0x35,
+	0x34,0x53,0x2a,0x2f,0x30,0x29,0x31,0x28,0xa9,0x33,0x33,0x33,0x33,
+	0x25,0x24,0x25,0xa8,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x53,0x37,0x44,
+	0x50,0x4d,0x4e,0x58,0x5a,0x57,0xe0,0x6a,0x59,0x59,0x59,0x5a,0x5a,
+	0x58,0x58,0x58,0x4e,0x4e,0x4f,0x4d,0x50,0x43,0x42,0x44,0x38,0x49,
+	0x35,0x34,0x34,0x2a,0x2a,0x2f,0x30,0x31,0x28,0xa9,0x33,0x33,0x33,
+	0x33,0x24,0x24,0x24,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,
+	0x83,0x39,0x42,0x50,0x4d,0x4f,0x4e,0x4e,0x58,0xe1,0xcf,0x4e,0x5a,
+	0x58,0x58,0x4e,0x4e,0x4e,0x4f,0x4d,0x50,0x50,0x42,0x44,0x44,0x38,
+	0xd7,0x35,0x52,0x34,0x53,0x2a,0x2f,0x30,0x31,0x3e,0x28,0x33,0x33,
+	0x27,0x33,0x27,0x24,0x25,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x27,0x2a,0x45,0x38,0x44,0x42,0x50,0x4f,0x4f,0x4e,0xac,0x66,
+	0x56,0xde,0xac,0x4e,0x4e,0x4d,0x50,0x50,0x43,0x43,0x42,0x44,0x38,
+	0x38,0x39,0x35,0x52,0x34,0x53,0x2a,0x2f,0x30,0x31,0x31,0x28,0xa9,
+	0x33,0x33,0x33,0x33,0x25,0x24,0x24,0x24,0x24,0x24,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x31,0x2d,0x45,0x38,0x44,0x42,0x43,0x50,0x50,
+	0xe0,0x67,0x55,0x56,0x55,0x55,0xe0,0x44,0x50,0x43,0x42,0x44,0x44,
+	0x38,0x39,0x39,0x37,0x34,0x53,0x53,0x2a,0x2f,0x30,0x29,0x3e,0x28,
+	0xa9,0x33,0x33,0x33,0x33,0x33,0x24,0x24,0x24,0xa0,0x24,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x30,0x46,0x45,0x39,0x38,0x44,
+	0x42,0x42,0xb5,0x4a,0x4b,0x4b,0x4b,0x4a,0x4a,0x4b,0xe3,0xb5,0x38,
+	0x44,0x38,0x39,0x39,0x3a,0x35,0x34,0x2a,0x2a,0x2f,0x30,0x29,0x31,
+	0x32,0xa9,0x33,0x33,0x27,0x33,0x27,0x24,0x24,0x24,0x24,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0xc0,0x46,0x3a,
+	0x45,0x39,0x38,0x44,0xb5,0x40,0x40,0x40,0x40,0x4a,0x40,0x40,0x3f,
+	0x49,0x49,0x83,0x37,0x3a,0x3a,0xca,0x53,0x2a,0x2a,0x2f,0x30,0x29,
+	0x3e,0x32,0x28,0x33,0x33,0x33,0x33,0x33,0x24,0x24,0x24,0x24,0x24,
+	0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x32,
+	0x48,0x8d,0x9e,0x3a,0x39,0x45,0x37,0x3f,0x49,0x3f,0x3f,0x49,0x49,
+	0x49,0x49,0x49,0x35,0x35,0x52,0x35,0xb1,0xb1,0x2a,0x2f,0x30,0x29,
+	0x31,0x3e,0x28,0xa9,0xa9,0x27,0x33,0x33,0x33,0x27,0x24,0xa0,0x24,
+	0xa0,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x26,0xcb,0x48,0x3b,0x8d,0x9e,0x3a,0x2c,0x49,0x35,0x35,0x35,
+	0x35,0x35,0x52,0x52,0x52,0x34,0x34,0x53,0x53,0x2d,0x3b,0x47,0xb1,
+	0x68,0x29,0x32,0x28,0xa9,0x33,0x33,0x33,0x33,0x27,0xa9,0x25,0x24,
+	0x24,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x80,0x47,0x3b,0x8d,0xd8,0x34,0x34,
+	0x34,0x34,0x34,0x34,0x34,0x34,0x53,0x53,0x2a,0x2a,0x2f,0x47,0x80,
+	0x78,0x78,0x3c,0x3d,0xcd,0xa8,0x33,0x33,0x33,0x33,0x33,0x33,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x22,0x54,0x48,0x48,0x47,
+	0x53,0x2a,0x53,0x2a,0x53,0x2a,0x2a,0x2a,0x2a,0x2a,0x2f,0x2f,0x78,
+	0x80,0x78,0x3c,0x3d,0x3d,0x23,0x22,0x25,0x24,0x25,0xa0,0x27,0x33,
+	0x25,0x24,0x24,0xa0,0x24,0xa0,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0xa9,0xcb,
+	0xc0,0x80,0x30,0x30,0x2f,0x2f,0x2f,0x2f,0x2f,0x2f,0x30,0x30,0x30,
+	0x68,0x78,0x54,0x3d,0x3d,0x23,0x22,0x24,0x25,0x24,0x24,0x24,0x24,
+	0xbb,0x27,0x33,0xa0,0x24,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x26,0x33,0xa9,0xcb,0xcb,0x31,0x29,0x29,0x29,0x29,0x29,0x29,0x31,
+	0x31,0x29,0x54,0x3d,0x3d,0x22,0x22,0x24,0x24,0x24,0x24,0xa0,0x24,
+	0x24,0x24,0x33,0x33,0x33,0x33,0x27,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x27,0x33,0xa9,0x23,0xe4,0xcb,0x3e,0x32,0x32,
+	0x32,0x32,0x28,0x23,0x23,0x22,0x22,0x24,0x24,0x24,0x25,0x24,0x24,
+	0x24,0x24,0x24,0x33,0x33,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x25,0x24,0x25,0x24,
+	0xa8,0xa9,0x33,0x33,0x24,0x25,0x24,0x25,0x24,0x24,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x27,0x33,0x27,0xa9,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x24,
+	0x24,0x24,0x24,0x24,0x25,0x33,0x24,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x21,0x25,0x33,0x33,0x33,0x33,0x33,0x27,0x24,0x24,
+	0x24,0x24,0x24,0x27,0x27,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x26,0x27,0x33,0x33,0x33,
+	0x27,0x27,0x24,0x24,0x33,0x33,0x33,0x26,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x3d,0x78,0x3b,0x8d,
+	0xc7,0x2a,0xcc,0x47,0x48,0x80,0x3c,0x54,0x23,0x25,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x46,0x3a,0x39,0x39,
+	0xd7,0x49,0x49,0x35,0x52,0x35,0xb1,0xcc,0x8d,0x48,0x80,0x68,0x28,
+	0xa9,0x27,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,0x39,0x44,0x42,0x42,
+	0xb5,0x4a,0x4a,0x4a,0x4a,0x40,0x40,0x40,0x49,0x35,0x52,0xb1,0xc7,
+	0x2f,0x30,0x29,0x32,0xa9,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x54,0x39,0x42,0x43,0x50,
+	0x57,0x67,0x56,0x56,0x56,0x56,0x67,0x55,0x4b,0x4a,0x40,0x40,0x49,
+	0xb6,0x3a,0x8d,0xc7,0x68,0x29,0x32,0xa9,0x24,0x25,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x24,0x46,0x42,0x50,0x4e,
+	0x58,0xe0,0x56,0x71,0x70,0x71,0x71,0x56,0x66,0x56,0x67,0x55,0x4b,
+	0x4a,0xd7,0x9d,0x39,0x3a,0x46,0x3b,0x48,0x68,0xe4,0xa9,0x24,0x25,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa8,0x44,0x50,0x4e,
+	0x59,0x59,0xbf,0x70,0x6a,0x6a,0x6a,0x6a,0x70,0x70,0x71,0x71,0x56,
+	0x56,0x66,0x83,0x42,0x44,0x38,0x39,0x3a,0x46,0x8d,0x48,0x78,0x3d,
+	0x22,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4a,0x56,
+	0xdd,0x7e,0x57,0xbf,0x6b,0x6b,0x7f,0x7f,0x7f,0x7f,0x73,0x6a,0x70,
+	0x70,0x71,0x66,0x56,0x50,0x50,0x42,0x44,0x38,0x39,0x3a,0x46,0x3b,
+	0x48,0x78,0xb3,0xa9,0x33,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4b,
+	0x66,0x6a,0x6a,0x6b,0x5a,0xaa,0x57,0x7b,0x74,0x74,0x6b,0x6b,0x7f,
+	0x7f,0x73,0x6a,0x70,0x6a,0xac,0x4f,0x4d,0x50,0x42,0x44,0x38,0x45,
+	0x3a,0x46,0x3b,0x48,0x3d,0x28,0x33,0x33,0x33,0x25,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,
+	0x4b,0x71,0x6a,0x6b,0x74,0xb9,0x8b,0x8b,0x91,0x6e,0x6e,0x9a,0x7b,
+	0x74,0x74,0x6b,0x6b,0x73,0x6a,0xbf,0x59,0x58,0x4f,0x4d,0x43,0x42,
+	0x38,0x39,0x3a,0x46,0x8d,0x47,0x80,0x29,0x28,0x33,0x33,0x33,0x25,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0xa9,0x4b,0x71,0x73,0x6b,0x6b,0x97,0x8a,0x8a,0x93,0x93,0x93,0x93,
+	0x9c,0x8b,0x6f,0x9a,0x7b,0x6b,0x7f,0x70,0xb9,0x59,0x5a,0x4e,0x4e,
+	0x50,0x42,0x42,0x38,0x39,0x3a,0x46,0x3b,0x48,0x29,0x28,0xa9,0x33,
+	0x33,0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x4a,0x66,0x73,0x6b,0x75,0x76,0x8b,0x9b,0x9b,0x92,0x92,
+	0x9b,0x9b,0x92,0x93,0x8a,0x8b,0x6f,0x64,0xc9,0x7e,0x65,0x59,0x59,
+	0x58,0x4e,0x4f,0x43,0x42,0x44,0x39,0x45,0x9e,0x8d,0x48,0x30,0x3e,
+	0x28,0x33,0x27,0x33,0x33,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x53,0x56,0x6a,0x6b,0x74,0xab,0x8a,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x8a,0x8b,0x8b,0x6c,0x6c,
+	0x7e,0x58,0x58,0x58,0x4f,0x50,0x43,0x44,0x38,0x39,0x3a,0x46,0x3b,
+	0x2f,0x29,0x28,0xa9,0x33,0x33,0x33,0x25,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa9,0x55,0x70,0x6b,0x75,0x75,0x97,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x99,
+	0x7f,0x6a,0x73,0x6a,0xbf,0xac,0x4e,0x4d,0x50,0x42,0x38,0x39,0x3a,
+	0x46,0x3b,0x2f,0x30,0x32,0xa9,0x33,0x33,0x27,0x33,0x25,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x35,0x71,0x6a,0x74,0x74,0x76,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x9b,0xab,0x74,0x6c,0x7f,0x6a,0x70,0x70,0x66,0xb5,0xac,0x42,0x44,
+	0x39,0x3a,0x3a,0x8d,0x2a,0x30,0x29,0x28,0x33,0x33,0x33,0x33,0x24,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x67,0x6a,0x74,0x75,0x79,
+	0x8b,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0xc3,0x88,0x79,0x74,0x6b,0x6a,0x70,0x71,0x66,0x56,0x4b,
+	0x4a,0xd7,0x9d,0x45,0x3a,0x8d,0x2f,0x30,0x29,0x28,0xa9,0x33,0x27,
+	0x33,0xa8,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x34,0x71,0x6a,0x74,
+	0x75,0x89,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x89,0xa4,0x88,0xbe,0x74,0x73,0x70,0x70,0x66,
+	0x56,0x67,0x4b,0x4a,0x3f,0x49,0x2d,0x3b,0x53,0x2f,0x29,0x3e,0xa9,
+	0x33,0x33,0x27,0x33,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x55,0x70,
+	0x6b,0x75,0x79,0xc5,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0xa3,0x98,0x76,0xa4,0x88,0x6c,0x7f,0x6a,
+	0x71,0x71,0x56,0x55,0x4b,0x40,0x3f,0x35,0x35,0xcc,0xc7,0x77,0x30,
+	0x32,0xa9,0x33,0x33,0x33,0x33,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0xac,0xdd,0x74,0x74,0x76,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xbd,0xa1,0x89,0x96,0x8f,0xbe,
+	0x74,0x70,0x70,0x66,0x56,0x55,0x4a,0x4a,0x3f,0x49,0x34,0x2d,0x8d,
+	0x47,0x78,0xb3,0x28,0x33,0x33,0x33,0x27,0x24,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x44,0x58,0x5f,0xb9,0x76,0xc3,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xaa,0x97,0xa1,0x89,
+	0xa4,0xab,0x74,0x6a,0x71,0x66,0x56,0x67,0x4a,0x40,0x3f,0x49,0x52,
+	0x2d,0x8d,0x47,0x78,0x3c,0x23,0x24,0x5d,0x33,0x33,0x5d,0x25,0xa0,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x50,0x5a,0x64,0x6f,0x9c,0xaf,0x89,0xaa,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0xa6,0xa2,
+	0xc3,0x89,0x96,0x88,0xbe,0x6a,0x70,0x66,0x56,0x55,0x4b,0x4a,0x3f,
+	0x35,0x35,0x47,0x8d,0x48,0x80,0xc0,0x23,0x22,0x25,0x24,0x25,0x27,
+	0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x78,0x4d,0x59,0x6f,0x8b,0x9a,0x79,0x7c,0x81,
+	0x8f,0xa1,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,
+	0x91,0xa2,0xc3,0x98,0x96,0x8f,0xbe,0x6a,0x70,0x66,0x56,0x55,0x4a,
+	0x40,0x3f,0x35,0x35,0x9e,0x8d,0x48,0x80,0x54,0x23,0x22,0x24,0x24,
+	0x24,0x24,0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x80,0x4f,0x59,0x6f,0x8b,0x76,0x7d,
+	0x81,0x81,0x81,0x86,0xa4,0xc3,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0xc5,0xbd,0xd6,0x9a,0x96,0x8f,0xbe,0x6a,0x71,0x66,0x56,
+	0x4b,0x4b,0x40,0x3f,0x3f,0x34,0x46,0x3b,0x47,0x78,0x3c,0x23,0x22,
+	0x25,0x24,0x24,0x24,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x46,0x4f,0x59,0x6f,0x8b,
+	0x74,0x7c,0x7c,0x81,0x81,0x88,0xa4,0x98,0xd6,0xa6,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x91,0xbd,0xc3,0x98,0x96,0xab,0xbe,0x6a,0x71,
+	0x56,0x56,0x4b,0x4a,0x40,0x49,0x35,0x95,0x9e,0x3b,0x48,0x78,0x54,
+	0x23,0x22,0x24,0x25,0x24,0x25,0x27,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,0x4e,0x59,
+	0x64,0x6f,0x75,0x7d,0x81,0x81,0x81,0x88,0xa4,0x89,0xc3,0xaa,0x91,
+	0x9b,0x92,0x92,0x92,0x9b,0x91,0xa6,0xa2,0xc3,0x89,0x96,0xab,0x6c,
+	0x70,0x71,0x56,0x55,0x4b,0x4a,0x40,0x3f,0x35,0xb6,0x46,0x47,0x47,
+	0x78,0x54,0x23,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,
+	0x4e,0x59,0x65,0xc6,0x74,0x79,0x7c,0x7c,0x81,0x86,0x8f,0x89,0xa1,
+	0xbd,0xa3,0x8a,0x9b,0x9b,0x92,0x92,0x92,0xa6,0xd6,0x9a,0x76,0xa4,
+	0xab,0x6a,0x70,0x66,0x56,0x67,0x4b,0x40,0x3f,0x49,0x52,0x9e,0x8d,
+	0x3b,0x48,0x78,0x3d,0x23,0x24,0x24,0x24,0x24,0x25,0x33,0x33,0x26,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x38,0x4f,0x59,0x64,0x7e,0x75,0x75,0x7d,0x7c,0x81,0x86,0x8f,
+	0x96,0x9a,0xd6,0xa2,0xa6,0x91,0x91,0x92,0x92,0x92,0x92,0x91,0xc3,
+	0x96,0x8f,0x6c,0x6a,0x71,0x66,0x67,0x4b,0x4b,0x4a,0x3f,0x35,0x83,
+	0x3a,0x8d,0x47,0x80,0x54,0x54,0x23,0x24,0x24,0x24,0x24,0x24,0x27,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x38,0x4d,0x5a,0x65,0xc9,0x75,0x75,0x7d,0x7d,0x7c,
+	0x81,0x88,0xa4,0x89,0xa1,0xd6,0xbd,0xaa,0x91,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x93,0x99,0xbf,0x6a,0x66,0x56,0x55,0x4b,0x4a,0x40,0x49,
+	0x35,0x2d,0x46,0x8d,0x48,0x48,0x54,0x3d,0x24,0x24,0xa0,0x24,0x24,
+	0x25,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x39,0x50,0x58,0x5f,0x7b,0x74,0x74,0x75,
+	0x79,0x79,0x81,0x87,0x8f,0x96,0x89,0x9a,0xc3,0x97,0x91,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x8b,0x6f,0x5f,0x4f,0xac,0x56,0x67,0x4a,0x40,
+	0x40,0x49,0x35,0x46,0x46,0x47,0x47,0x78,0x54,0x23,0x22,0x24,0x24,
+	0x24,0x24,0x24,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x43,0x4e,0x59,0xbf,0x6b,
+	0x74,0x75,0x75,0x75,0x79,0xaf,0x87,0x8f,0xa4,0x89,0x89,0x99,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x9c,0x6f,0x5f,0x59,0x58,0x4f,0x4f,0xac,
+	0xb5,0x40,0x3f,0x49,0x34,0x3a,0x8d,0x3b,0x48,0x3c,0x3d,0x23,0x24,
+	0x24,0x24,0x24,0x24,0x5d,0x27,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x47,0x42,0x4e,0x5a,
+	0xdd,0x7f,0x6b,0x74,0x74,0x75,0x79,0x7c,0x79,0x8e,0x8f,0xa4,0x96,
+	0x9a,0x92,0x92,0x92,0x92,0x92,0x9c,0x65,0x5f,0x5a,0x58,0x4e,0x4d,
+	0x4d,0x43,0x42,0x44,0xb6,0x83,0x95,0x9e,0x3b,0x48,0x80,0x54,0x3d,
+	0x23,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x44,
+	0x50,0x58,0xdd,0x73,0x7f,0x6b,0x74,0x74,0x75,0x75,0x75,0xaf,0x85,
+	0x88,0x88,0xa1,0x92,0x92,0x92,0x8a,0x6f,0x64,0x5f,0x59,0x58,0x4e,
+	0x4f,0x4d,0x43,0x42,0x44,0x38,0x38,0x45,0x34,0xb1,0x3b,0x80,0x80,
+	0x54,0x23,0x22,0x24,0xa0,0x24,0x24,0xa0,0x33,0x33,0x27,0x27,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x32,0x83,0x44,0x4d,0xbf,0x70,0x73,0x7f,0x6b,0x6b,0x6b,0x74,0x74,
+	0x75,0x74,0x74,0x79,0xaa,0x9c,0x9c,0x6f,0x64,0x65,0x5f,0x59,0x58,
+	0x4e,0x4e,0x4d,0x50,0x42,0x44,0x38,0x39,0x3a,0xb6,0x34,0x53,0x2f,
+	0x30,0x77,0x3d,0x23,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x52,0x4b,0xd7,0xbf,0x66,0x70,0x73,0x7f,0x6b,0x6b,
+	0x6b,0x6b,0x6b,0x6b,0x6c,0xbe,0x6f,0x65,0x64,0x65,0x5f,0x59,0x5a,
+	0x58,0x58,0x4f,0x4d,0x50,0x42,0x42,0x38,0x38,0x39,0x3a,0xcc,0x53,
+	0x2a,0x30,0x29,0x31,0x28,0xa9,0xae,0x24,0xa0,0x24,0x24,0x21,0x33,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x40,0x67,0xb5,0x57,0xe0,0x70,0x6a,
+	0x6a,0x73,0x7f,0x7f,0x7f,0x7f,0x73,0x7e,0x65,0x65,0x5f,0x59,0x5a,
+	0x58,0x58,0x4e,0x4f,0x4d,0x43,0x43,0x42,0x44,0x38,0x39,0x3a,0x46,
+	0x53,0x2a,0x2f,0x30,0x31,0x32,0xa9,0x33,0x33,0x33,0x33,0xae,0x24,
+	0xa9,0x27,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,0x52,0x40,0xb5,0x4e,0x4e,
+	0x4e,0x7e,0xdd,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0xc9,0x5f,0x59,0x59,
+	0x5a,0x5a,0x58,0x4e,0x4e,0x50,0x50,0x43,0x44,0x44,0x38,0x39,0x45,
+	0x9e,0x2d,0x53,0x2f,0x2f,0x29,0x31,0x28,0xa9,0x33,0x27,0x33,0x33,
+	0x33,0x33,0x25,0x25,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x53,0x40,0xd7,
+	0x50,0x4d,0x4e,0x4e,0x58,0x57,0xe0,0x70,0x70,0x70,0x70,0x4e,0x5a,
+	0x58,0x58,0x58,0x4e,0x4f,0x4f,0x50,0x50,0x43,0x44,0x44,0x38,0x39,
+	0x45,0x3a,0xca,0x53,0x2f,0x2f,0x29,0x31,0x32,0xa9,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x24,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,
+	0x52,0x3f,0x42,0x43,0x50,0x4f,0x4e,0x4e,0x58,0x4f,0x7e,0x71,0x71,
+	0x5a,0x58,0x58,0x4e,0x4e,0x4f,0x4d,0x4d,0x43,0x42,0x42,0x44,0x38,
+	0x39,0x45,0x3a,0x9e,0x2d,0x2a,0x2f,0x29,0x29,0x32,0x28,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x24,0xa0,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x27,0x2a,0x49,0x45,0x42,0x43,0x50,0x4d,0x4f,0x4f,0x4f,0x4e,
+	0x58,0xac,0xac,0x4e,0x4f,0x4f,0x50,0x50,0x50,0x42,0x42,0x42,0x38,
+	0x39,0x39,0x3a,0x3a,0x9e,0xca,0x2a,0x2f,0x30,0x29,0x3e,0x28,0xa9,
+	0x33,0x33,0x27,0x33,0x33,0x27,0xa8,0x24,0x24,0x24,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x32,0x34,0x9f,0x38,0x44,0x42,0x43,0x50,0x50,
+	0x4d,0x50,0x4d,0xac,0x56,0x55,0xb5,0x57,0x50,0x42,0x42,0x44,0x44,
+	0x38,0x38,0x39,0x45,0x3a,0x46,0x8d,0xcc,0x30,0x30,0x29,0x3e,0x32,
+	0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x24,0x24,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x30,0x53,0x3a,0x39,0x38,0x44,
+	0x44,0x42,0x43,0x43,0x43,0xb5,0x4b,0x4a,0x4b,0x4a,0x3f,0xb5,0x38,
+	0x44,0x39,0x39,0x45,0x3a,0x9e,0x46,0x8d,0x3b,0x2f,0x30,0x29,0x3e,
+	0x32,0xa9,0x33,0x33,0x33,0x27,0x33,0x33,0x27,0x24,0x24,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x2f,0x3b,0x45,
+	0x39,0x38,0x38,0x44,0x44,0x44,0x44,0x83,0x4b,0x40,0x40,0x40,0x3f,
+	0x40,0x49,0x83,0x4c,0x45,0x3a,0x46,0x46,0x8d,0x47,0x68,0x2f,0x29,
+	0x31,0x28,0x28,0x33,0x33,0x27,0x33,0x33,0x33,0x33,0x33,0x24,0x24,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x32,
+	0x68,0x8d,0x9e,0x3a,0x39,0x39,0x38,0x9d,0x44,0x3f,0x3f,0x3f,0x49,
+	0x49,0x49,0x49,0x35,0x34,0x34,0x34,0xcc,0xc7,0x3b,0x48,0xd8,0x30,
+	0x29,0x3e,0x28,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x24,
+	0x25,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x31,0x3c,0x3b,0x46,0x46,0x3a,0x3a,0x45,0x39,0x49,0x35,
+	0x35,0x35,0x52,0x52,0x52,0x52,0x34,0x53,0x2a,0x53,0x2a,0x2f,0x68,
+	0x77,0x3e,0x32,0x28,0x28,0x33,0x33,0x27,0x33,0x33,0x33,0x27,0x33,
+	0x25,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x26,0xcb,0x80,0x48,0x3b,0x8d,0x46,0x46,0x46,
+	0x34,0x34,0x52,0x34,0x34,0x53,0x34,0x53,0x53,0x2a,0x2a,0x2f,0x30,
+	0x29,0x68,0x54,0x54,0xb3,0x61,0x27,0x33,0x33,0x33,0x27,0x33,0x33,
+	0x33,0x24,0x24,0x24,0xa0,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x23,0x3c,0x80,0x47,0x3b,
+	0x3b,0x3b,0x53,0x53,0x2a,0x2a,0x53,0x2a,0x2a,0x2f,0x2f,0x2f,0x30,
+	0x30,0x29,0x30,0x54,0x3d,0x23,0x22,0x25,0x24,0x25,0x24,0x33,0x33,
+	0x33,0x33,0x25,0x24,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xe4,0xe4,
+	0x3d,0x78,0x48,0x48,0x2f,0x2f,0x2f,0x2f,0x2f,0x30,0x30,0x30,0x30,
+	0x29,0x29,0x3e,0xb3,0x54,0x23,0x22,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x25,0x24,0x25,0xa0,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x33,0x28,0xe4,0xb4,0x3c,0x29,0x29,0x29,0x29,0x29,0x29,0x29,
+	0x31,0x3e,0x3e,0x28,0x28,0x23,0x22,0x24,0x25,0x24,0x24,0xa0,0x24,
+	0x25,0x24,0x24,0x24,0x33,0x33,0x27,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x27,0x33,0xa9,0x28,0xbb,0xcb,0x3e,0x32,0x32,
+	0x32,0x28,0x28,0x28,0xa9,0xa9,0xbb,0x24,0xa0,0x24,0x24,0x25,0x24,
+	0x24,0x24,0x24,0x24,0x25,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x33,0x24,0x25,0x24,
+	0xa8,0xa9,0xa9,0xa9,0x33,0x33,0x33,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x24,0x24,0x24,0x25,0x24,0x25,0x33,0x24,0x25,0x24,0x25,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0xa0,0x24,0x24,0x24,0xa0,0x33,0x33,0x33,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x27,0x27,0x33,0x27,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x26,0x33,0x33,0x27,0x33,
+	0x27,0x33,0x27,0x27,0x27,0x27,0x33,0x27,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x21,0x21,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x23,0x78,0x3b,0x8d,
+	0x3b,0x2d,0x68,0xc0,0x2e,0x48,0x3c,0x54,0x23,0xa8,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x46,0x45,0x39,0x39,
+	0x38,0x39,0xb6,0xcc,0x35,0x35,0x2b,0x2d,0x8d,0x48,0x80,0x3c,0x3d,
+	0xae,0x27,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x54,0x39,0x44,0x44,0x42,
+	0x42,0x42,0xac,0x5b,0x4a,0x4b,0x40,0x3f,0x49,0x35,0x34,0x2b,0xcc,
+	0x47,0xb1,0x31,0x3e,0xa9,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcd,0x39,0x42,0x50,0x50,
+	0x4f,0x4e,0x4e,0x4c,0x55,0x55,0x55,0x4b,0x4b,0x4b,0x40,0x3f,0x3f,
+	0x35,0x34,0x2b,0x78,0x68,0x29,0x32,0xa9,0x33,0x25,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x46,0x42,0x4d,0x4f,
+	0x5a,0x58,0x59,0xe5,0xbf,0x66,0x71,0x71,0x66,0x56,0x67,0x55,0x4b,
+	0x40,0x40,0x49,0x49,0xb6,0x46,0x3b,0x48,0x2e,0xe4,0xa9,0x33,0x25,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa8,0x44,0x50,0x4e,
+	0x5a,0x59,0x5f,0x5f,0xb8,0x70,0x6a,0x6a,0x70,0x70,0x71,0x71,0x56,
+	0x56,0x55,0x4b,0x4b,0x3f,0x5b,0x45,0x3a,0x46,0x3b,0x48,0x78,0x3d,
+	0x25,0x24,0x24,0x25,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4a,0x56,
+	0xdd,0xc9,0xb8,0x65,0x65,0xb8,0x6b,0x7f,0x73,0x7f,0x6a,0x6a,0x70,
+	0x70,0x71,0x66,0x56,0x55,0x4b,0x4a,0xac,0x38,0x39,0x3a,0x46,0x3b,
+	0x48,0x78,0x54,0x23,0x5d,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x4b,
+	0x66,0x6a,0x6a,0x6a,0x73,0x6c,0xa1,0xd2,0x6b,0x74,0x6b,0x6b,0x6b,
+	0x7f,0x73,0x6a,0x70,0x71,0x71,0x56,0x4b,0x5b,0x42,0x44,0x38,0x45,
+	0x3a,0x46,0x47,0x48,0x3c,0x23,0xbb,0x33,0x33,0x24,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,
+	0x4b,0x71,0x6a,0x6b,0x6b,0x74,0x75,0xad,0x9c,0x8b,0x8b,0x9a,0xd2,
+	0x75,0x6b,0x6b,0x6b,0x73,0x6a,0x70,0x71,0x71,0x56,0x44,0x50,0x42,
+	0x44,0x39,0x45,0x9e,0x8d,0x47,0x80,0x54,0x23,0x33,0x33,0x33,0x27,
+	0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x22,0x4b,0x71,0x73,0x6b,0x74,0x75,0x75,0x74,0xaa,0x9b,0x9b,0x8a,
+	0x9c,0x9c,0x6f,0x9a,0x62,0x6b,0x7f,0x73,0x6a,0x70,0x56,0xd4,0x4f,
+	0x50,0x42,0x44,0x38,0x45,0x3a,0x46,0x3b,0x48,0x78,0x3d,0xa9,0x33,
+	0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x5b,0x56,0x73,0x74,0x75,0x75,0x79,0x7d,0x72,0x9b,0x9b,
+	0x92,0x9b,0x9b,0x92,0x8a,0x9c,0x8b,0x64,0xc9,0xad,0x6a,0x6a,0x71,
+	0xbc,0x4e,0x4f,0x50,0x42,0x44,0x38,0x3a,0x9e,0x8d,0x47,0x80,0x54,
+	0x28,0x33,0x33,0x33,0x27,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0xcc,0x56,0x6a,0x6b,0x74,0x75,0x7d,0x7d,0x96,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,0x8a,0x91,0x6e,0x6f,0x59,
+	0xc9,0xd9,0x5a,0x58,0x4f,0x50,0x43,0x44,0x38,0x45,0x3a,0x8d,0x47,
+	0x48,0x78,0xb4,0xa9,0x33,0x33,0x33,0x33,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x22,0x67,0x70,0x6b,0x75,0x79,0x7d,0x7d,0x84,
+	0x8a,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x8b,
+	0x6e,0x65,0x65,0xd2,0xd4,0xdf,0x4e,0x50,0x43,0x42,0x44,0x39,0x45,
+	0x9e,0x8d,0x48,0x80,0xb4,0x28,0x33,0x33,0x33,0x33,0x25,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x71,0x6a,0x74,0x75,0x79,0x7d,
+	0x7c,0xa1,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x9b,0x8b,0x6f,0x5f,0x6a,0x70,0x70,0x70,0x4c,0xdf,0x42,0x38,
+	0x38,0x45,0x9e,0x8d,0x47,0x80,0xcd,0x28,0x33,0x33,0x27,0x33,0x33,
+	0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa9,0x67,0x6a,0x6b,0x75,0x7d,
+	0x7d,0x81,0x8f,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x93,0x6e,0xbc,0x7f,0x70,0x71,0x71,0x56,0x67,
+	0x4a,0x4c,0x3a,0x39,0x3a,0x46,0x3b,0x48,0xcd,0x32,0xa9,0x33,0x33,
+	0x33,0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xcc,0x71,0x6a,0x75,
+	0x75,0x7d,0x81,0x81,0xc3,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0xad,0x73,0x6a,0x71,0x66,
+	0x56,0x55,0x4b,0x40,0x49,0xe3,0x2c,0x8d,0x3b,0x48,0xcd,0x32,0xa9,
+	0x33,0x33,0x27,0x33,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x55,0x70,
+	0x6b,0x75,0x75,0x7c,0x81,0x8f,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xd6,0x6c,0x73,0x6a,
+	0x71,0x71,0x56,0x4b,0x4a,0x40,0x3f,0x35,0x35,0x34,0x2b,0x78,0x68,
+	0x31,0xa9,0x33,0x33,0x33,0x33,0x27,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0xc9,0x6a,0x6b,0x75,0x7c,0x7c,0x81,0xa1,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x89,0xad,
+	0x6b,0x70,0x70,0x66,0x56,0x67,0x4b,0x4a,0x49,0x49,0x52,0x34,0x2a,
+	0x2a,0xcd,0xcd,0x28,0x33,0x27,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0xdf,0x58,0x65,0x72,0xa7,0x75,0x7c,0x81,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x91,
+	0xa4,0xad,0x6c,0x6a,0x70,0x66,0x56,0x55,0x4a,0x4a,0x3f,0x35,0x52,
+	0x34,0x2a,0x2f,0x68,0x54,0x23,0xb4,0x5d,0x27,0x33,0x33,0x27,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x50,0x59,0x5f,0x6f,0x9c,0x8a,0x99,0xa1,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0xd6,0x96,0x8f,0x6c,0x6a,0x71,0x66,0x56,0x55,0x4b,0x40,0x3f,
+	0x49,0x52,0x34,0x2a,0x30,0x2e,0x3c,0x3d,0x22,0x24,0x24,0x25,0x33,
+	0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xcd,0x4d,0x59,0x6f,0x8b,0x93,0x92,0x92,0xa4,
+	0x8f,0x99,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0xa1,0x96,0x88,0x6c,0x6b,0x71,0x66,0x67,0x4b,0x4b,
+	0x40,0x3f,0x49,0x52,0x34,0x2a,0x2f,0xc0,0x3d,0x23,0x22,0x25,0x24,
+	0x24,0x25,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x80,0x4f,0x59,0x6f,0x8b,0x9b,0x92,
+	0x93,0x81,0x81,0x8e,0xa4,0x97,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x8a,0x9a,0x96,0x8f,0xbe,0x70,0x70,0x66,0x56,
+	0x55,0x4a,0x4a,0x49,0x35,0x34,0x34,0x2a,0x2f,0x78,0x3c,0x23,0x22,
+	0x24,0x24,0x24,0x24,0x24,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x48,0x4e,0x59,0x6f,0x6e,
+	0x93,0x92,0x99,0x81,0x81,0x8e,0x90,0xc6,0xd6,0xa6,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0xa2,0xc6,0x96,0x8f,0x6c,0x70,0x71,
+	0x56,0x67,0x4b,0x4a,0x40,0x3f,0x49,0x34,0x53,0x2a,0x2f,0x80,0x54,
+	0x23,0x22,0x24,0xa0,0x24,0x24,0x24,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x41,0x4e,0x59,
+	0x64,0x8b,0x8a,0x9b,0x89,0x81,0x81,0x88,0xa4,0x89,0xc3,0xa2,0x91,
+	0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,0x97,0x89,0x96,0xad,0x6c,
+	0x70,0x71,0x66,0x67,0x4b,0x4a,0x40,0x49,0x35,0x52,0x53,0x2a,0x2a,
+	0x78,0x54,0x23,0x24,0x24,0x24,0x24,0xa0,0x24,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x38,
+	0x4e,0x59,0x64,0x6f,0x93,0x93,0x84,0x7c,0x84,0x8e,0x90,0x89,0xa1,
+	0xbd,0xa3,0x8a,0x9b,0x9b,0x9b,0x8a,0x92,0x92,0xc5,0x99,0x76,0xa4,
+	0xad,0xbe,0x71,0x56,0x56,0x55,0x4a,0x4a,0x40,0x35,0x35,0x34,0x53,
+	0x2f,0xb1,0x80,0x54,0x23,0x24,0x24,0x24,0x24,0x24,0x25,0x33,0x26,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x38,0x4f,0x59,0x65,0x6e,0x8b,0x8a,0x75,0x7c,0x81,0x85,0x8f,
+	0x96,0x9a,0xd6,0xa2,0xa6,0x91,0x91,0xc5,0xa6,0xa2,0xbd,0x8b,0x97,
+	0x96,0x8f,0xbe,0x70,0x71,0x66,0x67,0x55,0x4b,0x40,0x3f,0x49,0x52,
+	0x34,0x2a,0x2f,0xc0,0x54,0x3d,0x23,0x25,0x24,0x24,0x24,0x24,0x24,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x39,0x4d,0x59,0x65,0x6f,0x6e,0x72,0x7d,0x7d,0x7c,
+	0x85,0x8f,0xa4,0x89,0x99,0xd6,0xa2,0xa2,0xaa,0xa2,0xbd,0xd6,0x97,
+	0x92,0x92,0x9b,0x99,0xb7,0x70,0x71,0x56,0x55,0x4b,0x4a,0x3f,0x49,
+	0x35,0x52,0x34,0x2a,0x2f,0x48,0x54,0x23,0x23,0x24,0x24,0x24,0xa0,
+	0x24,0xa0,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x39,0x50,0x58,0x5f,0x65,0x6f,0x89,0x75,
+	0x75,0x79,0x81,0x84,0x8f,0xa7,0x89,0x99,0xa1,0xd6,0xd6,0xd6,0xc3,
+	0xa1,0xbd,0x92,0x92,0x8b,0x64,0x5f,0x4e,0xd2,0x56,0x67,0x4a,0x4a,
+	0x40,0x49,0x35,0x34,0x53,0x2a,0x2f,0x80,0x54,0x23,0x22,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb6,0x43,0x4e,0x59,0x65,0x6f,
+	0xc9,0x75,0x75,0x75,0x7d,0x85,0x8e,0x90,0xa7,0x76,0xc6,0x9a,0x9a,
+	0x9a,0x98,0x89,0x8a,0x92,0x9c,0x64,0x5f,0x5a,0x58,0x4e,0x4f,0x44,
+	0x4c,0x40,0x49,0x35,0x35,0x34,0x53,0x2f,0x2e,0x80,0x54,0x23,0x24,
+	0xa0,0x24,0x24,0x24,0x24,0x25,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x78,0x42,0x4e,0x59,
+	0x5f,0x6f,0x7a,0x74,0x75,0x75,0x75,0x75,0x84,0x8e,0x8f,0xa4,0x96,
+	0x96,0x76,0x96,0x96,0x76,0x92,0x8b,0x64,0x5f,0x5a,0x58,0x4e,0x4d,
+	0x50,0x42,0x42,0x44,0xb6,0xcc,0x52,0x53,0x2a,0x30,0x78,0x54,0x3d,
+	0x22,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x44,
+	0x50,0x58,0x59,0x65,0xd2,0x75,0x6b,0x74,0x75,0x74,0x75,0x75,0x85,
+	0x8e,0x88,0x90,0x8f,0x8f,0x8f,0x99,0x9c,0x64,0x5f,0x59,0x58,0x4e,
+	0x4e,0x50,0x50,0x42,0x38,0x9d,0x38,0x45,0x46,0x2d,0x2b,0x2a,0x80,
+	0x54,0x23,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0xa0,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0xb2,0xcc,0x44,0x4f,0x58,0x59,0xd2,0x73,0x6b,0x6b,0x74,0x74,0x74,
+	0x75,0x75,0x6c,0xaf,0xaf,0xad,0xaf,0xaf,0x5f,0x65,0x5f,0x59,0x58,
+	0x58,0x4f,0x50,0x50,0x42,0x44,0x38,0x38,0x3a,0x3a,0x46,0x8d,0x47,
+	0xb1,0xcd,0x3d,0x23,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x35,0x4a,0x4c,0xb8,0x58,0xd9,0x6a,0x7f,0x7f,0x6b,
+	0x6b,0x6b,0x6b,0x6b,0x74,0x6b,0x6b,0x6b,0x6b,0xd4,0x65,0x59,0x5a,
+	0x58,0x4e,0x4e,0x4d,0x50,0x42,0x42,0x44,0x39,0x39,0x3a,0x9e,0x8d,
+	0x47,0x48,0x31,0x31,0x28,0xa9,0x27,0x24,0x24,0x24,0xa0,0x24,0x24,
+	0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x2b,0x49,0x4a,0x55,0x5b,0xb7,0x70,0x6a,
+	0x6a,0x73,0x7f,0x7f,0x73,0x7f,0x7f,0x6b,0x7f,0x73,0x6a,0xc9,0x59,
+	0x5a,0x58,0x4e,0x4e,0x4d,0x50,0x42,0x42,0x44,0x38,0x39,0x3a,0x46,
+	0x8d,0x3b,0x47,0xc0,0x29,0x32,0x28,0xa9,0x33,0x33,0x27,0x5d,0x24,
+	0x24,0x24,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,0x52,0x40,0x4b,0x56,0xd2,
+	0x4e,0xc9,0x70,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x70,0x70,
+	0xdc,0x5a,0x58,0x4e,0x4f,0x50,0x50,0x43,0x44,0x44,0x38,0x39,0x45,
+	0x3a,0x46,0x3b,0x48,0x48,0xcb,0x31,0x28,0xa9,0x33,0x27,0x33,0x33,
+	0x27,0x33,0x33,0xa8,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x53,0x49,0x40,
+	0x4a,0x41,0x4e,0x4e,0x5a,0xbc,0xd9,0x70,0x70,0x70,0x70,0x70,0x71,
+	0x71,0x70,0x5a,0x4e,0x4e,0x4f,0x50,0x50,0x43,0x42,0x44,0x38,0x39,
+	0x45,0x3a,0x46,0x8d,0x47,0x48,0xc7,0x29,0x32,0xa9,0x33,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x27,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,
+	0x52,0x49,0x4a,0x41,0x4f,0x4f,0x4e,0x58,0x5a,0x4e,0x7a,0x70,0x66,
+	0x71,0x66,0x66,0x41,0x4e,0x4f,0x4d,0x50,0x50,0x42,0x44,0x44,0x38,
+	0x39,0x45,0x3a,0x46,0x8d,0x3b,0x48,0x80,0xcb,0x3e,0x28,0x33,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x27,0x2a,0x35,0x49,0xe3,0x43,0x50,0x4d,0x4f,0x4f,0x4e,0x4e,
+	0x4e,0xbc,0x4c,0x56,0x67,0xbc,0x4f,0x50,0x50,0x43,0x42,0x44,0x44,
+	0x38,0x39,0x45,0x3a,0x46,0x8d,0x3b,0x47,0x80,0xc0,0x31,0x28,0xa9,
+	0x33,0x27,0x33,0x27,0x33,0x27,0x33,0x33,0x25,0x24,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x32,0x53,0x35,0x49,0x42,0x42,0x42,0x50,0x50,
+	0x4d,0x4d,0x4d,0x4d,0x4f,0x4d,0x41,0x42,0x50,0x42,0x42,0x44,0x44,
+	0x38,0x39,0x45,0x3a,0x9e,0x46,0x8d,0x3b,0x48,0x48,0x3c,0xcb,0x28,
+	0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x24,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x30,0x53,0x35,0xb6,0x38,0x42,
+	0x44,0x42,0x42,0x43,0x42,0x43,0x43,0x43,0x94,0x4a,0xe3,0x41,0x38,
+	0x44,0x38,0x39,0x39,0x3a,0x3a,0x46,0x8d,0x3b,0x48,0x48,0x78,0x23,
+	0x3e,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x2f,0x53,0x95,
+	0x39,0x38,0x38,0x44,0x44,0x42,0x42,0x42,0x44,0x42,0x4c,0x49,0x3f,
+	0x49,0x49,0xe3,0xb6,0x3a,0x3a,0x46,0x46,0x8d,0x47,0x47,0x80,0x3c,
+	0x3d,0x29,0x28,0x33,0x33,0x33,0x27,0x33,0x33,0x33,0x33,0x33,0x24,
+	0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,
+	0x2f,0x53,0x9e,0x3a,0x39,0x39,0x38,0x39,0x38,0x38,0x38,0x39,0xe3,
+	0x3f,0x35,0x49,0x35,0x34,0x34,0x53,0xcc,0x95,0x3b,0x47,0x48,0x80,
+	0x3c,0x54,0xb2,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x33,
+	0x27,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x3e,0x30,0x78,0x46,0x9e,0x3a,0x45,0x3a,0x45,0x39,0x45,
+	0x45,0x35,0x35,0x52,0x34,0x34,0x34,0x53,0x53,0x2a,0x2f,0x2f,0x68,
+	0x68,0x78,0x3d,0x23,0x28,0x33,0x33,0x33,0x27,0x33,0x33,0x27,0xa9,
+	0x33,0x33,0x25,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0xcb,0x2a,0x48,0x3b,0x8d,0x8d,0x9e,0x9e,
+	0x9e,0x3a,0x2d,0x34,0x34,0x53,0x34,0x53,0x2a,0x2a,0x2f,0x2f,0x2f,
+	0x29,0x29,0x31,0x32,0xcd,0xa8,0x33,0x27,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0xbb,0x3d,0x80,0x47,0x47,
+	0x3b,0x3b,0x8d,0x8d,0x2d,0x2a,0x2a,0x2a,0x2a,0x2a,0x2f,0x2f,0x2f,
+	0x29,0x29,0x31,0x32,0x28,0xa9,0x22,0x25,0x24,0x25,0x24,0x27,0x33,
+	0x33,0x33,0x33,0x33,0x25,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x22,0xb3,
+	0x54,0x80,0x80,0x48,0x48,0x47,0x2f,0x2f,0x2f,0x2f,0x2f,0x2f,0x29,
+	0x29,0x29,0x31,0x32,0x28,0x28,0xa9,0x24,0x25,0x24,0x24,0x24,0x25,
+	0x24,0x25,0x24,0xae,0x33,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x26,0x24,0xa9,0xcb,0xb3,0x3c,0x3c,0x78,0x29,0x29,0x29,0x29,0x31,
+	0x29,0x31,0x32,0x32,0x28,0xa9,0xa9,0x33,0x24,0x24,0x24,0x25,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x25,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x21,0x33,0xa9,0xa9,0xb3,0x23,0x32,0x32,0x28,
+	0x32,0x28,0x28,0x28,0xa9,0xa9,0x33,0x33,0x33,0x24,0x25,0x24,0x24,
+	0x24,0x24,0x24,0xa0,0x24,0x25,0xa0,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x33,0x33,0xa8,0x24,
+	0xe4,0x33,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0xae,0x24,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x27,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x33,
+	0xa0,0x24,0x24,0x25,0x24,0x25,0x33,0x33,0x33,0x33,0x25,0x24,0x25,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x33,0x27,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x26,0x21,0x24,0x24,0x24,0x24,0x25,0x24,0x27,0x24,0x24,
+	0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x27,0x27,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x21,0x27,0x33,0x33,0x33,
+	0x33,0x27,0x33,0x27,0x25,0x21,0x33,BLCK,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x26,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x33,
+	0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x61,0xb1,0x3b,0x8d,
+	0x3b,0xb1,0x68,0x2a,0x2f,0x2f,0x23,0xb3,0x61,0xa0,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb3,0x2d,0x3a,0x39,0x38,
+	0x38,0x39,0x39,0x39,0x39,0x2d,0x52,0x34,0x8d,0x47,0x48,0x3c,0x3d,
+	0x22,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb3,0x46,0x44,0x42,0x42,
+	0x42,0x42,0x43,0x43,0x43,0xb5,0x40,0x49,0x49,0x35,0x52,0x5c,0x2e,
+	0x47,0x48,0x3c,0xcb,0x33,0x33,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,0xb6,0x44,0x43,0x50,
+	0x4d,0x4e,0x4e,0x4e,0x4e,0x50,0x5b,0x4b,0x4a,0x4a,0x40,0x40,0x3f,
+	0x49,0x52,0x53,0x5c,0xb1,0x29,0x32,0xa9,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x68,0xce,0x50,0x4e,
+	0xc4,0x5a,0x5a,0x5a,0x5a,0x5a,0xe5,0x70,0x56,0x56,0x67,0x55,0x4a,
+	0x4a,0x40,0x49,0x49,0x35,0x53,0x2b,0x48,0x68,0xcb,0xa9,0x33,0x27,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x5b,0x4d,0x4e,
+	0x59,0x59,0x5f,0x5f,0x5f,0x5f,0x5f,0xe5,0x70,0x71,0x71,0x71,0x66,
+	0x56,0x67,0x4b,0x4a,0x40,0x49,0x35,0x52,0x95,0x3b,0x47,0x78,0x3d,
+	0x61,0x33,0x24,0x25,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x94,0x67,
+	0xdd,0xcf,0xe6,0x65,0x64,0x64,0x64,0x64,0xe6,0x6a,0x73,0x73,0x6a,
+	0x70,0x71,0x66,0x56,0x67,0x4b,0x4b,0x40,0x49,0x49,0x3a,0x46,0x3b,
+	0x48,0x78,0x3d,0x22,0x24,0x24,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0xda,
+	0x56,0x6a,0x7f,0x7f,0x7f,0x7f,0xd1,0xe6,0x8b,0x58,0x7f,0x6b,0x6b,
+	0x73,0x6a,0x6a,0x70,0x71,0x66,0x56,0x67,0x4b,0x4a,0x4a,0x83,0x45,
+	0x9e,0x46,0x47,0x48,0x3c,0x3d,0x22,0x24,0x33,0x24,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,
+	0xce,0x66,0x6a,0x7f,0x6b,0x74,0x75,0x74,0x75,0x75,0x6c,0x99,0x7b,
+	0x74,0x6b,0x74,0x73,0x73,0x6a,0x70,0x71,0x66,0x56,0x55,0x4b,0x4a,
+	0xb6,0x39,0x45,0x9e,0x8d,0x47,0x80,0x54,0x3d,0x24,0x27,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x24,0xce,0x66,0x73,0x6b,0x74,0x75,0x75,0x75,0x79,0x75,0x75,0x97,
+	0x8a,0x8b,0x8b,0xc1,0x62,0x6b,0x73,0x73,0x6a,0x70,0x71,0x56,0x56,
+	0x4b,0x4a,0xce,0x38,0x39,0x3a,0x46,0x3b,0x48,0x78,0x3d,0x23,0x33,
+	0x27,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x42,0x66,0x73,0x74,0x75,0x75,0x79,0x7d,0x7d,0x7c,0x7c,
+	0x89,0x93,0x92,0x9b,0x93,0x9c,0x8b,0x64,0xd1,0xbe,0x73,0x6a,0x70,
+	0x71,0x56,0x67,0x5b,0x42,0x44,0x39,0x3a,0x9e,0x8d,0x47,0x80,0x54,
+	0x3d,0x24,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x9e,0x5b,0x6a,0x6b,0x74,0x75,0x7d,0x7d,0x7c,0x7c,
+	0x7c,0x8f,0x92,0x92,0x92,0x92,0x92,0x9b,0x8a,0xa6,0x6e,0x6f,0x59,
+	0xcf,0xdd,0x71,0x66,0x67,0xda,0x43,0x44,0x38,0x39,0x3a,0x46,0x47,
+	0x48,0x3c,0x3d,0x22,0xae,0x27,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x22,0xce,0x6a,0x74,0x75,0x75,0x7d,0x7d,0x81,
+	0x81,0x81,0x81,0xa5,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x8b,
+	0x6e,0x64,0x65,0x5f,0xdc,0xe0,0x56,0x50,0x50,0x42,0x38,0x39,0x3a,
+	0x9e,0x3b,0x47,0x78,0x54,0x3d,0x5d,0x33,0x33,0x33,0x33,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x45,0xdd,0x6a,0x74,0x75,0x7c,0x7c,
+	0x7c,0x81,0x81,0x81,0x76,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0x6e,0x6f,0x65,0x5f,0x59,0x5a,0xe5,0x4c,0x94,0x42,0x44,
+	0x39,0x45,0x9e,0x8d,0x48,0x80,0x54,0x23,0xbb,0x33,0x33,0x27,0x33,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0xb5,0x6a,0x6b,0x75,0x75,
+	0x7c,0x81,0x81,0x81,0x81,0x84,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x93,0x6e,0x65,0x5f,0x59,0x58,0xe0,0x67,0x4b,
+	0x4a,0x4c,0x3a,0x39,0x9e,0x46,0x3b,0x48,0x3c,0x3d,0x22,0x33,0x33,
+	0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x5e,0x73,0x75,
+	0x75,0x7c,0x7c,0x81,0x81,0x81,0x84,0x9a,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x8a,0x6f,0x65,0x59,0x59,0x70,
+	0x56,0x67,0x4a,0x40,0x40,0x83,0x2d,0x46,0x47,0x48,0x78,0x3d,0x23,
+	0x33,0x33,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0xce,0x70,
+	0x6b,0x75,0x79,0x7c,0x81,0x81,0x81,0x84,0x8e,0x9b,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x6f,0x64,0x5f,
+	0xe5,0x66,0x56,0x67,0x4a,0x40,0x3f,0x35,0x52,0x34,0x5c,0xb1,0x80,
+	0x54,0x22,0x33,0x33,0x33,0x33,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x77,
+	0xcf,0xdd,0x6b,0x75,0x7d,0x81,0x81,0x81,0x81,0x87,0x9a,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,
+	0x65,0x5f,0xe0,0x71,0x56,0x55,0x4b,0x4a,0x49,0x49,0x52,0x34,0x2a,
+	0x2f,0x29,0xb3,0x23,0x33,0x27,0x33,0x33,0x33,0x33,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x40,0x58,0x65,0xe6,0x76,0x75,0x81,0x81,0x81,0x84,0x8f,0x91,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0x65,0x5f,0x70,0x66,0x56,0x55,0x4b,0x4a,0x49,0x35,0x35,
+	0x34,0x2a,0x2f,0x30,0x31,0x28,0x24,0x33,0x33,0x27,0x33,0x33,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x4c,0x5a,0x65,0x6f,0x9c,0x8a,0x99,0x8f,0x81,0x86,
+	0x76,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x6f,0xe5,0x70,0x71,0x56,0x55,0x4a,0x40,0x40,
+	0x49,0x52,0x53,0x53,0x2f,0x29,0x3e,0x28,0x22,0x24,0x24,0xbb,0x27,
+	0x33,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x29,0xb5,0x59,0x6f,0x9c,0x9b,0x92,0x92,0x92,
+	0xa3,0x9a,0xd6,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x64,0xe0,0x6a,0x66,0x56,0x55,0x4b,
+	0x40,0x49,0x49,0x52,0x53,0x2a,0x2f,0x30,0x31,0x28,0x22,0x24,0x24,
+	0x24,0x25,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x30,0xb0,0x5f,0x64,0x8b,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x90,0x97,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,0x6f,0x6b,0x70,0x66,0x56,
+	0x55,0x4a,0x4a,0x3f,0x35,0x52,0x34,0x53,0x2f,0x29,0x3e,0x28,0x23,
+	0x25,0x24,0x24,0x24,0x24,0x25,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x4e,0x59,0x6f,0x8b,
+	0x93,0x92,0x92,0x92,0x92,0x97,0xa4,0xc6,0x97,0xc5,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x69,0x6a,0x71,
+	0x56,0x67,0x4b,0x4a,0x40,0x3f,0x35,0x34,0x53,0x2a,0x2f,0x30,0x3e,
+	0x28,0x22,0x24,0xa0,0x24,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x49,0x4e,0x59,
+	0x64,0x6e,0x8a,0x92,0x92,0x92,0x92,0x9a,0xa4,0x98,0xc3,0xa2,0x91,
+	0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,0x62,
+	0x6a,0x71,0x56,0x67,0x4b,0x4a,0x40,0x49,0x35,0x34,0x53,0x2a,0x30,
+	0x29,0x28,0x61,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3f,
+	0x4e,0x59,0x64,0x6e,0x9c,0x9b,0x92,0x92,0x92,0x88,0x8f,0x89,0x99,
+	0xa2,0xa3,0x93,0x9b,0x9b,0x9b,0x91,0x92,0x92,0x92,0x92,0x92,0x92,
+	0xaa,0x6a,0x70,0x66,0x56,0x67,0x4a,0x4a,0x40,0x49,0x35,0x34,0x53,
+	0x2a,0x30,0x29,0x32,0x61,0x24,0x24,0x24,0x24,0x24,0xa0,0x24,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x26,0x4a,0x4f,0x59,0x65,0x6f,0x8b,0x93,0x92,0x92,0x91,0x84,0x8f,
+	0x76,0x9a,0x97,0xa2,0xa3,0x91,0x91,0x91,0xc5,0xa2,0xbd,0xa2,0xc5,
+	0x92,0x8a,0xe6,0x6a,0x71,0x66,0x67,0x4b,0x4b,0x40,0x3f,0x35,0x52,
+	0x34,0x2a,0x2f,0x30,0x29,0x32,0xbb,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x2d,0x4d,0x5a,0x65,0x6f,0x8b,0x9c,0x9b,0x92,0xa1,
+	0x81,0x88,0xa4,0x89,0xa1,0x97,0xa2,0xa2,0xa2,0xa2,0xa5,0x97,0x97,
+	0xc6,0x76,0x96,0xd1,0x7b,0x71,0x66,0x56,0x67,0x4b,0x4a,0x40,0x3f,
+	0x35,0x52,0x34,0x2a,0x2f,0x30,0x31,0x32,0x24,0x24,0x24,0xa0,0x24,
+	0x24,0x24,0x24,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x83,0x50,0x58,0x5f,0x64,0x6f,0x8b,0x9c,
+	0x8a,0xc6,0x81,0x87,0x8f,0xa7,0x89,0x9a,0x97,0x97,0x97,0x97,0x97,
+	0xa1,0xc6,0x76,0xa4,0x88,0x62,0x5f,0xdc,0xcf,0x70,0x55,0x4a,0x40,
+	0x40,0x49,0x35,0x34,0x53,0x2a,0x30,0x29,0x3e,0x28,0x23,0xa0,0x24,
+	0x24,0x24,0x24,0x24,0x25,0xae,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x50,0x4e,0x5f,0x65,0x6f,
+	0x6e,0x8b,0x8a,0x8f,0x75,0x85,0x86,0x8f,0x96,0x89,0xc6,0x9a,0x9a,
+	0x98,0xc6,0x89,0x96,0xa4,0x8f,0xad,0xc1,0x59,0x58,0x4e,0x4d,0xce,
+	0x4c,0x40,0x49,0x35,0x35,0x34,0x2a,0x2a,0x2f,0x29,0x32,0x22,0x22,
+	0x25,0x24,0x24,0x24,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2f,0x42,0x4f,0x5a,
+	0x5f,0x65,0x64,0x6e,0x6e,0x74,0x75,0x79,0x84,0x87,0x8e,0xa4,0x96,
+	0x96,0x76,0x76,0x96,0xa4,0xa4,0xad,0xbe,0x71,0x5a,0x4e,0x4e,0x4e,
+	0x50,0x43,0x42,0x44,0x37,0x83,0x52,0x53,0x2a,0x2f,0x29,0x31,0x28,
+	0x61,0x24,0x24,0x24,0xa0,0x24,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x44,
+	0x50,0x58,0x59,0x5f,0x64,0x6f,0x6f,0x74,0x75,0x75,0x75,0x6c,0x87,
+	0x88,0x8e,0x8f,0x90,0x8f,0x8f,0x8e,0xbe,0xad,0x6a,0xe0,0x5a,0x4e,
+	0x4f,0x50,0x43,0x42,0x44,0x38,0x39,0x39,0x46,0x9f,0x5c,0x2f,0x29,
+	0x31,0x28,0x22,0x24,0x24,0x24,0x24,0x24,0x24,0xa0,0x24,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x3d,0x83,0xce,0x4f,0x5a,0x5f,0x5f,0x65,0x5f,0x6b,0x6b,0x74,0x74,
+	0x74,0x79,0x6c,0x79,0xad,0x87,0xbe,0xad,0x6c,0x6a,0x6a,0x70,0x57,
+	0x4e,0x4e,0x50,0x50,0x42,0x44,0x38,0x38,0x45,0x9e,0x46,0x3b,0x3b,
+	0xc0,0xb3,0x32,0x61,0x24,0x24,0x24,0x24,0x24,0xa0,0x24,0x24,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x2d,0x40,0x4c,0xe5,0x5a,0x5f,0x5f,0xe6,0x7f,0x6b,
+	0x6b,0x6b,0x6b,0x6b,0x6b,0x74,0x6b,0x6b,0x6b,0x7f,0x6a,0x70,0x70,
+	0x71,0x58,0x4f,0x4f,0x50,0x43,0x42,0x44,0x39,0x39,0x3a,0x46,0x8d,
+	0x47,0x48,0x78,0x3c,0x3d,0x24,0x5d,0x24,0x24,0x24,0x24,0x24,0x24,
+	0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x2e,0x3f,0x40,0x4b,0xdd,0xb0,0x59,0xb0,
+	0x6a,0x73,0x7f,0x6b,0x6b,0x7f,0x7f,0x73,0x73,0x6a,0x6a,0x70,0x70,
+	0x71,0x71,0xe0,0x4e,0x4f,0x50,0x42,0x42,0x44,0x38,0x39,0x3a,0x9e,
+	0x46,0x3b,0x47,0x80,0x3c,0x3d,0x23,0xa9,0x27,0x33,0x27,0xae,0x24,
+	0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3d,0x35,0x40,0x4b,0x4b,0x66,
+	0x70,0xcf,0x6a,0x6a,0x70,0x6a,0x6a,0x6a,0x6a,0x6a,0x6a,0x70,0x70,
+	0x70,0x71,0x66,0x56,0xe5,0x50,0x50,0x43,0x42,0x44,0x38,0x39,0x45,
+	0x3a,0x8d,0x8d,0x48,0x48,0x78,0x54,0x23,0x24,0xa9,0x33,0x33,0x33,
+	0x33,0x27,0x33,0xae,0xae,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x2b,0x35,0x4a,
+	0x4b,0x67,0x67,0xd2,0x58,0xb0,0xe0,0x70,0x70,0x70,0x70,0x70,0x71,
+	0x71,0x71,0x66,0x56,0x66,0x5b,0x4d,0x50,0x42,0x42,0x44,0x38,0x39,
+	0x45,0x3a,0x46,0x8d,0x47,0x48,0x78,0x54,0x3d,0x23,0x5d,0x33,0x33,
+	0x27,0x33,0x33,0x33,0x33,0x33,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2f,
+	0x34,0x3f,0x4a,0x4b,0x55,0x4c,0x4e,0x58,0x4e,0x4f,0xcf,0x70,0x66,
+	0x71,0x66,0x66,0x56,0x56,0x56,0x67,0xb5,0x50,0x43,0x44,0x44,0x38,
+	0x39,0x45,0x3a,0x46,0x8d,0x3b,0x47,0x80,0x3c,0x3d,0x23,0x22,0x33,
+	0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x33,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x21,0x2a,0x52,0x49,0x4a,0x4b,0x5b,0x4f,0x4f,0x4e,0x4e,0x58,
+	0x4e,0x57,0xe0,0x56,0x56,0x56,0x67,0x4b,0x55,0x43,0x42,0x44,0x44,
+	0x39,0x39,0x3a,0x3a,0x46,0x8d,0x3b,0x47,0x80,0x3c,0x54,0x3d,0x22,
+	0xae,0x33,0x33,0x27,0x33,0x33,0xa9,0x27,0x33,0x25,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xcb,0x53,0x35,0x49,0x40,0x4b,0x43,0x43,0x4d,
+	0x50,0x4d,0x50,0x4d,0x50,0x50,0x94,0x5b,0x55,0x4a,0x4c,0x44,0x44,
+	0x38,0x38,0x45,0x45,0x9e,0x46,0x8d,0x3b,0x48,0x48,0x3c,0x54,0x3d,
+	0x23,0xbb,0x33,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x33,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x2f,0x53,0x35,0x49,0x3f,0x42,
+	0x42,0x42,0x43,0x43,0x50,0x50,0x43,0x43,0x43,0x43,0xce,0x37,0x94,
+	0x44,0x38,0x39,0x45,0x3a,0x3a,0x46,0x8d,0x3b,0x48,0x48,0x3c,0x54,
+	0x3d,0x22,0x24,0x33,0x33,0x33,0x27,0x33,0x33,0x33,0x33,0x27,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x5d,0x2f,0x53,0x34,
+	0x35,0x3a,0x9d,0x44,0x44,0x44,0x44,0x42,0x44,0x44,0x44,0x44,0x44,
+	0x39,0x49,0x83,0x37,0x3a,0x3a,0x46,0x8d,0x8d,0x47,0x47,0x80,0x3c,
+	0x54,0x3d,0x23,0x24,0x33,0x33,0x27,0xa9,0x33,0x33,0x33,0x33,0x33,
+	0x24,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x28,
+	0x2f,0x53,0x35,0x2d,0x39,0x39,0x39,0x38,0x38,0x38,0x38,0x38,0x38,
+	0x39,0x39,0xb6,0x35,0x35,0x52,0x35,0x68,0x2d,0x8d,0x47,0x48,0x80,
+	0x3c,0x54,0x3d,0x23,0x24,0x33,0x33,0x33,0x33,0x27,0x33,0x33,0x27,
+	0x33,0x33,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x26,0x32,0x30,0x2a,0x5c,0x3a,0x3a,0x3a,0x45,0x45,0x39,0x39,
+	0x45,0x45,0x3a,0x3a,0x35,0x34,0x34,0x53,0x53,0x53,0x2f,0x2f,0x2e,
+	0xb1,0x3c,0x54,0x23,0x22,0x22,0xa0,0x33,0x27,0x33,0x33,0x33,0x33,
+	0x33,0x33,0x33,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0xcb,0x30,0x2a,0x3b,0x8d,0x46,0x46,0x9e,
+	0x3a,0x46,0x3a,0x9e,0x46,0xb6,0x53,0x53,0x2a,0x2a,0x2a,0x2f,0x2f,
+	0x29,0x3e,0x32,0x32,0x61,0xa8,0x24,0x24,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x33,0x27,0x33,0xa0,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x61,0x29,0x2e,0x48,0x3b,
+	0x47,0x3b,0x8d,0x8d,0x8d,0x8d,0x3b,0x2e,0x2a,0x2a,0x2f,0x2f,0x30,
+	0x29,0x29,0x31,0x3e,0x28,0xa9,0x33,0x33,0x33,0x24,0xa0,0x33,0x33,
+	0x27,0x33,0x33,0x33,0x33,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x22,0x3d,
+	0x3c,0x78,0x48,0x48,0x48,0x48,0x48,0x47,0x48,0x2f,0x30,0x30,0x30,
+	0x29,0x29,0x31,0x3e,0x28,0x28,0xa9,0x33,0x33,0x33,0x25,0x24,0x24,
+	0x25,0x24,0x25,0xae,0x33,0x27,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x24,0x22,0xe4,0xb4,0x3c,0x78,0x78,0x3c,0x78,0x2e,0x29,0x29,
+	0x31,0x3e,0x3e,0x28,0x28,0xa9,0xa9,0x33,0x33,0x33,0x27,0x24,0x24,
+	0x25,0x24,0x24,0x24,0x24,0x25,0x24,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa0,0x33,0x28,0xa9,0xb3,0x23,0x54,0x3d,0x28,
+	0x32,0x28,0x28,0x28,0xa9,0x28,0x33,0x33,0x33,0x33,0x33,0x33,0x25,
+	0x24,0x24,0x24,0x24,0x25,0x24,0x24,0x24,0xae,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x33,0x33,0x33,0xae,
+	0xbb,0xa9,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x27,0x33,0xa0,
+	0x24,0x24,0x25,0x24,0x24,0x24,0x24,0x24,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x33,0xa9,0x24,0x25,0x24,0x25,0x33,0x33,0x33,0x27,0x33,0x33,0x33,
+	0x24,0x25,0x24,0x24,0x24,0x24,0x24,0x24,0xa0,0x26,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x26,0xa0,0x24,0x24,0x24,0x24,0x25,0x24,0x25,0x33,0x33,
+	0x25,0x24,0x24,0x24,0x24,0x24,0x24,0x24,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x21,0x27,0x33,0x33,0x27,
+	0x33,0x27,0x33,0x27,0x24,0x24,0x27,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x26,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	  BLCK,BLCK,BLCK,BLCK,
+
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x24,
+	0xa8,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x27,0x28,0xcd,0x2c,0xca,
+	0x3b,0x2c,0x68,0x2a,0x2f,0x30,0x29,0x3e,0xb4,0xa8,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x32,0x34,0x9f,0x39,0x39,
+	0x39,0x39,0x39,0x39,0x39,0x3a,0xd8,0xcc,0xca,0x47,0x48,0x54,0x3d,
+	0x22,0x21,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x35,0xb5,0x44,0x42,
+	0x42,0x43,0x50,0x43,0x42,0x44,0x44,0x38,0x9f,0x35,0x34,0xcc,0x2e,
+	0x47,0x80,0x3c,0x3d,0xa8,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x49,0xc8,0x43,0x4d,
+	0x50,0x4e,0x4e,0x4f,0x4f,0x4e,0x4d,0x4d,0x44,0xc8,0x40,0x3f,0x49,
+	0x35,0x34,0x53,0x2e,0x2e,0x3c,0xb3,0xa9,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x33,0x53,0x4a,0xce,0x4e,
+	0x58,0x5a,0x5a,0x59,0x5a,0x5a,0x58,0x58,0x4e,0x43,0xba,0x4b,0x4a,
+	0x4a,0x40,0x49,0x35,0x52,0x53,0x2a,0x2f,0xcd,0x3e,0x28,0x33,0x33,
+	0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x25,0x3f,0xba,0xb0,
+	0x58,0x59,0x5f,0x5f,0x5f,0x5f,0x5f,0x59,0x59,0x59,0xd0,0x56,0x66,
+	0x56,0x67,0x4b,0x4a,0x40,0x3f,0x35,0x52,0x34,0x2a,0x68,0x78,0x3d,
+	0x61,0x33,0x33,0x25,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x42,0xce,
+	0xba,0x7a,0xd0,0x65,0x65,0x64,0x64,0x64,0x64,0x65,0x5f,0x59,0xab,
+	0x71,0x71,0x66,0x56,0x67,0x4b,0x4a,0x40,0x3f,0x35,0x52,0x34,0x2e,
+	0x48,0x3c,0x3d,0x22,0x24,0x27,0x25,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x50,
+	0xb0,0x6a,0x6a,0x6b,0x7f,0x74,0x7e,0xb9,0x6f,0x6e,0x6f,0x6f,0x64,
+	0xb7,0x6a,0x70,0x6a,0x71,0x71,0x56,0x56,0x4b,0x4a,0x40,0x3f,0x35,
+	0x52,0x2c,0x3b,0x48,0x3c,0x3d,0x22,0x24,0x24,0x24,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,
+	0x50,0x4e,0x6a,0x7f,0x74,0x74,0x75,0x75,0x75,0x75,0x75,0x76,0xc3,
+	0x6f,0xc9,0x6b,0x6b,0x6a,0x6a,0x70,0x71,0x66,0x56,0x67,0x4b,0x4a,
+	0x40,0x49,0x35,0xca,0x8d,0x47,0x80,0x54,0x23,0x24,0x24,0x33,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x22,0x50,0x4e,0xb7,0x6b,0x74,0x75,0x75,0x75,0x75,0x79,0x75,0x75,
+	0x6b,0x75,0xb7,0x98,0xb7,0x6b,0x6b,0x6a,0x6a,0x70,0x71,0x66,0x56,
+	0x55,0x4a,0x40,0x3f,0x49,0x9e,0x46,0x8d,0x48,0x78,0x3d,0x23,0x24,
+	0x24,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x42,0x58,0xb7,0x7f,0x74,0x75,0x75,0x7c,0x7d,0x7c,0x7c,
+	0x7c,0x7d,0x79,0x87,0xa6,0x8b,0x6e,0xaa,0x7a,0xd4,0x73,0x6a,0x70,
+	0x66,0x56,0x67,0x4b,0x4a,0x3f,0x49,0x45,0x9e,0x8d,0x47,0x80,0x54,
+	0x23,0x24,0x25,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x46,0x4e,0xd0,0x7f,0x75,0x75,0x7d,0x7c,0x7c,0x7c,
+	0x7c,0x7c,0x7c,0x7c,0x81,0xb9,0x9b,0x9b,0x8a,0x8b,0x8b,0x6f,0x59,
+	0xc9,0x70,0x71,0x66,0x56,0x55,0x4a,0x4b,0xcc,0x39,0x9e,0x46,0x47,
+	0x48,0x3c,0x54,0x22,0x24,0x25,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x22,0x4d,0x5a,0x6c,0x74,0x75,0x7d,0x7c,0x81,
+	0x81,0x81,0x81,0x81,0x81,0x87,0xa4,0x92,0x92,0x92,0x92,0x93,0x8b,
+	0x6e,0x65,0x65,0x5f,0xd0,0xcf,0x56,0x67,0x4b,0x4a,0xb5,0x39,0x3a,
+	0x9e,0x3b,0x47,0x78,0x54,0x23,0x24,0x24,0x27,0x33,0x33,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x45,0x58,0xc9,0x6b,0x75,0x7d,0x7c,
+	0x7c,0x81,0x81,0x81,0x84,0x87,0x88,0x8f,0xa6,0x92,0x92,0x92,0x92,
+	0x92,0x9b,0x6e,0x6f,0x65,0x5f,0x59,0x58,0x58,0x41,0xb5,0x4a,0xb6,
+	0x38,0x45,0x9e,0x8d,0x47,0x80,0x3c,0x3d,0x22,0x25,0x33,0x33,0x33,
+	0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x4f,0x59,0x6b,0x75,0x7d,
+	0x7c,0x81,0x81,0x81,0x81,0x81,0x88,0x88,0x90,0x98,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x93,0x6e,0x65,0x5f,0x59,0x58,0x58,0x4f,0xdc,
+	0x42,0x4c,0xdf,0x39,0x9e,0x8d,0x3b,0x48,0x54,0x3d,0x22,0x24,0xae,
+	0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3a,0x58,0xc9,0x6b,
+	0x75,0x7d,0x7c,0x81,0x81,0x81,0x84,0x88,0x8f,0x96,0x89,0x8a,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,0x6f,0x65,0x59,0x5a,0x58,
+	0x4f,0x50,0xce,0x40,0x35,0x3f,0xd7,0x46,0x47,0x48,0x78,0x3d,0x23,
+	0x24,0x24,0x27,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x22,0x4d,0x59,
+	0x6b,0x75,0x7d,0x7c,0x81,0x81,0x81,0x84,0x88,0x8f,0x96,0xc6,0xbd,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x6f,0x64,0x5f,
+	0x5a,0x58,0x4e,0x4d,0xb6,0x4b,0x49,0x35,0x53,0x53,0xcc,0x2c,0x80,
+	0x54,0x22,0x24,0x25,0x33,0x33,0x27,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x29,
+	0xcf,0x7a,0x6b,0x75,0x7d,0x7c,0x81,0x81,0x84,0x87,0x8e,0x96,0x98,
+	0xc3,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,
+	0x65,0x59,0x59,0x4e,0x4e,0x4d,0xc8,0x4a,0x40,0x35,0x35,0x53,0x2f,
+	0x30,0x29,0xcd,0x23,0x22,0x24,0x33,0x33,0x33,0x33,0x26,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x40,0x71,0xd0,0xa1,0x76,0x75,0x81,0x81,0x81,0x84,0x88,0xa7,
+	0xc6,0xc3,0xa3,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x93,0x6f,0x5f,0x59,0x4e,0x4f,0x4d,0x4b,0x40,0x3f,0x35,0x35,
+	0x34,0x2a,0x2f,0x29,0x31,0x28,0x33,0xa8,0x27,0x33,0x33,0x33,0x27,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x4b,0x71,0x65,0x6f,0x8a,0x91,0x99,0x8f,0x81,0x87,
+	0x8f,0x96,0x99,0xbd,0x8a,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x9b,0x64,0x5f,0x5a,0x58,0x4e,0xce,0x4b,0x4a,0x3f,
+	0x49,0x52,0x53,0x2a,0x2f,0x30,0x3e,0x32,0x33,0x33,0x24,0x25,0x33,
+	0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x29,0x67,0xb7,0x64,0x8b,0x9b,0x92,0x92,0x92,
+	0xa3,0x98,0xa7,0x76,0xc3,0xaa,0x92,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x9b,0x6f,0x5f,0x5a,0x58,0x4f,0x4c,0x4b,
+	0x40,0x3f,0x35,0x35,0x34,0x2a,0x2f,0x29,0x31,0x28,0x33,0x33,0x24,
+	0x24,0xa0,0x24,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x30,0x4b,0xc9,0x64,0x8b,0x93,0x92,
+	0x92,0x92,0x92,0x92,0x92,0xc5,0xaa,0xa3,0x92,0x92,0x92,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9b,0x64,0x5f,0x58,0x4e,0x4f,
+	0xba,0x4a,0x4a,0x3f,0x49,0x34,0x53,0x53,0x2f,0x30,0x3e,0x28,0xa9,
+	0x27,0x24,0x24,0x24,0x24,0x25,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x53,0x67,0xd0,0x64,0x8b,
+	0x8a,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa3,0x9b,0x92,0x92,
+	0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x93,0x65,0x5f,0x5a,
+	0x4e,0xb0,0x4b,0x4a,0x40,0x49,0x49,0x34,0x53,0x2a,0x30,0x30,0x3e,
+	0x28,0xa9,0x33,0x25,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x49,0x67,0x5a,
+	0x64,0x8b,0x93,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0xa6,0x91,
+	0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x9c,0x64,
+	0x59,0x58,0x4f,0xcf,0x4b,0x4a,0x40,0x49,0x35,0x52,0x53,0x2a,0x2f,
+	0x29,0x3e,0x28,0x33,0x27,0x24,0x24,0xa0,0x24,0x25,0x21,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3f,
+	0x56,0x59,0x65,0x6e,0x9c,0x9b,0x92,0x92,0x92,0x92,0x92,0x92,0xaa,
+	0xbd,0xc5,0x8a,0x9b,0x9b,0x9b,0x8a,0x92,0x92,0x92,0x92,0x92,0x92,
+	0x6f,0x5f,0x59,0x58,0x4f,0x4b,0x4a,0x4a,0x40,0x49,0x35,0x34,0x53,
+	0x2a,0x30,0x29,0x32,0x28,0x33,0x33,0x24,0x24,0x24,0x24,0x24,0x21,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x3f,0x67,0x59,0x64,0x6f,0x9c,0x93,0x9b,0x92,0x92,0x92,0x92,
+	0x92,0x97,0x97,0xaa,0xa3,0x8a,0x91,0xa3,0xa6,0xa6,0xbd,0xbd,0xa3,
+	0x92,0x8a,0x64,0x59,0x58,0x4e,0xb0,0x55,0x4b,0x40,0x3f,0x35,0x52,
+	0x34,0x53,0x2f,0x30,0x29,0x32,0xa9,0x33,0x27,0x24,0x24,0x24,0x24,
+	0x25,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x49,0x55,0x5a,0x65,0x64,0x8b,0x8a,0x93,0x92,0x92,
+	0x92,0x92,0x92,0xc6,0x99,0x72,0xbd,0xa6,0xaa,0xbd,0xd5,0xd5,0xc3,
+	0x9a,0x76,0xa7,0x9a,0x5a,0x5f,0x58,0x4e,0x4c,0x4b,0x4a,0x40,0x49,
+	0x35,0x34,0x53,0x2a,0x2f,0x30,0x3e,0x28,0xa9,0x33,0x33,0x24,0x24,
+	0x24,0x24,0xa0,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x35,0xba,0x58,0x5f,0x64,0x6f,0x8b,0x8a,
+	0x93,0x9b,0x92,0x92,0xbd,0xa7,0xc6,0x99,0xc3,0x97,0x97,0x97,0xc3,
+	0x99,0x89,0x96,0xa7,0x88,0x6c,0x70,0x70,0xcf,0x4d,0xba,0x4b,0x40,
+	0x3f,0x49,0x35,0x34,0x53,0x2a,0x30,0x29,0x31,0x28,0x33,0x33,0x21,
+	0x24,0x24,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x52,0x4a,0x4e,0x5f,0x65,0x64,
+	0x6e,0x8b,0x8a,0x93,0x9b,0x92,0x99,0x8f,0xa7,0x76,0xc6,0x9a,0x9a,
+	0x9a,0x9a,0xc6,0x96,0xa7,0x8e,0xbe,0x70,0x71,0x71,0x56,0xc8,0xce,
+	0x4c,0x40,0x3f,0x49,0x35,0x34,0x53,0x2a,0x30,0x29,0x3e,0x28,0x33,
+	0x33,0x25,0x24,0x24,0x24,0x24,0xa0,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x2f,0x4a,0x4f,0x5a,
+	0x5f,0x64,0x64,0x6e,0x8b,0x9c,0x8a,0x93,0x90,0x88,0x8f,0x90,0x96,
+	0x96,0x76,0x76,0xa4,0xa7,0x90,0x88,0xbe,0x70,0x70,0x71,0x67,0xba,
+	0xcf,0x43,0x42,0x44,0xb6,0xcc,0x52,0x53,0x2a,0x2f,0x29,0x29,0x28,
+	0xa9,0x33,0x27,0x24,0x24,0xa0,0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3e,0x3f,
+	0x50,0x58,0x59,0x65,0x65,0x6f,0x6f,0x8b,0x8b,0x8b,0x75,0x75,0x87,
+	0x88,0x8f,0x8f,0x90,0x8f,0x8f,0x8e,0x6c,0xbe,0xdd,0x70,0x71,0x66,
+	0x56,0x4b,0x50,0x42,0x44,0x9d,0x39,0x45,0x9e,0x2c,0x2f,0x2a,0x29,
+	0x31,0x28,0x33,0x33,0x33,0x24,0x24,0x24,0x24,0x24,0x25,0x21,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x23,0xb6,0xce,0x4f,0x58,0x59,0x65,0x65,0x64,0x6f,0x6f,0x65,0x74,
+	0x74,0x6c,0x74,0x6b,0x87,0xad,0xad,0xaf,0xbe,0x70,0x6a,0x70,0x71,
+	0x56,0x67,0x67,0xb5,0x50,0x44,0x44,0x39,0x45,0x9e,0x46,0x8d,0x3b,
+	0x80,0xcd,0x28,0xa9,0x33,0x33,0x25,0xa0,0x24,0x24,0xa0,0x24,0x24,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,0x45,0x40,0xb5,0xb0,0x5a,0x59,0x5f,0x65,0x65,0x64,
+	0x99,0x73,0x6b,0x6b,0x6c,0x6b,0x74,0x7f,0x7f,0x6a,0x6a,0x6a,0x70,
+	0x71,0x66,0x56,0x55,0x4b,0x38,0x42,0x38,0x38,0x45,0x3a,0x46,0x8d,
+	0x3b,0x48,0x78,0x54,0x3d,0xb4,0x24,0x33,0x24,0x24,0x24,0x24,0x24,
+	0x24,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,0x46,0xd7,0x4a,0x56,0xc8,0xb0,0x59,0x5f,
+	0x5f,0x65,0xc9,0x6b,0x6b,0x6b,0x6b,0x6b,0x6a,0x6a,0x6a,0x6a,0x70,
+	0x71,0x71,0x56,0x56,0x67,0x4b,0xc8,0x42,0x44,0x38,0x39,0x45,0x9e,
+	0x46,0x3b,0x48,0x80,0x3c,0x3d,0x23,0x22,0x25,0x24,0x27,0x5d,0x24,
+	0x24,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x23,0x9f,0x3f,0x4b,0x56,0x66,
+	0x70,0xcf,0x5a,0x5f,0x7a,0x6a,0x6a,0x6a,0x6a,0x6a,0x70,0x70,0x70,
+	0x71,0x71,0x66,0x56,0x56,0x67,0x55,0x4a,0x41,0x42,0x38,0x39,0x3a,
+	0x3a,0x46,0x3b,0x3b,0x80,0x3c,0x54,0x23,0x22,0x24,0x24,0x33,0x33,
+	0x27,0x33,0x27,0xae,0x24,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xa0,0x46,0x49,0x40,
+	0x4b,0x55,0x56,0x71,0x66,0xb7,0xb7,0x6a,0x70,0x71,0x70,0x70,0x70,
+	0x71,0x71,0x71,0x56,0x56,0x56,0x55,0x4b,0x40,0x4b,0x42,0x38,0x39,
+	0x45,0x3a,0x46,0x3b,0x3b,0x48,0x80,0x54,0x3d,0x23,0x24,0x24,0x24,
+	0x33,0x33,0x33,0x33,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x3c,
+	0xcc,0x3f,0x4a,0x4b,0x55,0x67,0x56,0x56,0xb0,0x4e,0xcf,0x70,0x66,
+	0x66,0x71,0x56,0x56,0x56,0x67,0x55,0x4b,0x4b,0x4a,0x40,0xb6,0x38,
+	0x39,0x45,0x3a,0x9e,0x8d,0x3b,0x48,0x78,0x3c,0x3d,0x23,0x22,0x24,
+	0xa0,0x27,0x33,0x33,0x33,0x33,0x33,0x33,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x21,0x2c,0x52,0x49,0x40,0x4b,0x4b,0x67,0x67,0xb0,0x4e,0x4e,
+	0x58,0xb0,0x4c,0x56,0x56,0x56,0x67,0x55,0x4b,0x4a,0x4a,0x4a,0x4a,
+	0x39,0x39,0x45,0x9e,0x46,0x8d,0x3b,0x48,0x80,0x78,0x54,0x3d,0x22,
+	0x24,0x24,0x24,0x33,0x27,0x33,0x33,0x27,0x33,0x33,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x3d,0x34,0x35,0x49,0x40,0x4a,0x4a,0x4b,0xce,
+	0x4f,0x4d,0x4d,0x4e,0x4d,0x4d,0xcf,0xc8,0x4b,0x4b,0x4a,0x40,0x3f,
+	0x49,0x9f,0x39,0x45,0x3a,0x9e,0x8d,0x47,0x47,0x48,0x3c,0x54,0x23,
+	0x23,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x26,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x68,0x34,0x52,0x49,0x3f,0x40,
+	0x4b,0xdf,0x43,0x43,0x43,0x43,0x43,0x43,0x42,0x42,0x9d,0xb5,0x40,
+	0x40,0x49,0x49,0xdf,0x3a,0x9e,0x46,0x8d,0x47,0x47,0x48,0x3c,0x54,
+	0x3d,0x23,0x24,0x24,0x25,0x24,0x33,0x33,0x33,0x33,0x27,0x33,0x33,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x24,0x2f,0x53,0x34,
+	0x35,0x49,0x40,0xb6,0x42,0x44,0x44,0x44,0x44,0x42,0x44,0x44,0x38,
+	0x44,0x38,0xdf,0x9f,0x9f,0x3a,0x46,0x8d,0x8d,0x3b,0x48,0x80,0x3c,
+	0x54,0x3d,0x22,0x22,0xa0,0x24,0x24,0x27,0x33,0x27,0x33,0x33,0x33,
+	0x33,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0xb4,
+	0x2f,0x53,0x34,0x52,0x49,0x9f,0x38,0x38,0x38,0x38,0x38,0x38,0x38,
+	0x39,0x39,0x45,0x45,0x3a,0x3a,0x34,0xcc,0x2c,0x8d,0x47,0x48,0x80,
+	0x3c,0x54,0x3d,0x23,0x22,0x24,0x24,0x24,0x33,0x33,0x33,0x33,0x33,
+	0x27,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,0x26,0x28,0x2f,0x2a,0x53,0x53,0x9f,0x45,0x45,0x39,0x45,0x45,
+	0x39,0x45,0x45,0x3a,0x3a,0x3a,0x46,0xca,0x53,0x53,0x2a,0x2f,0x68,
+	0x2e,0x78,0x54,0x23,0x22,0x22,0xa0,0x24,0x24,0xa0,0x33,0x33,0x33,
+	0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0x21,0x32,0x29,0x2f,0x2a,0xcc,0x46,0x46,0x46,
+	0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x8d,0x46,0x8d,0x2f,0x2a,0x2f,0x30,
+	0x29,0x29,0x3e,0x32,0x61,0x25,0x24,0x24,0x24,0x24,0x24,0x33,0x27,
+	0x33,0x27,0x33,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x61,0x3e,0x30,0x30,0x3b,
+	0x3b,0x3b,0x8d,0x8d,0x8d,0x8d,0x8d,0x8d,0x47,0x3b,0xc7,0x2f,0x30,
+	0x30,0x29,0x3e,0x32,0x28,0xa9,0x33,0x33,0x33,0x27,0x33,0x24,0x33,
+	0x33,0x33,0x33,0x33,0x33,0x27,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x22,0xcd,
+	0x61,0x78,0x48,0x48,0x48,0x48,0x47,0x48,0x48,0x48,0x48,0x80,0x30,
+	0x29,0x29,0x3e,0x32,0x28,0x28,0xa9,0x33,0x33,0x33,0x33,0x33,0x27,
+	0x24,0x25,0x24,0x33,0x27,0x33,0x33,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	0x26,0x24,0x22,0x23,0xcd,0x3c,0x3c,0x3c,0x78,0x78,0x78,0x3c,0x3c,
+	0xcd,0x31,0x32,0x32,0x28,0xa9,0xa9,0x33,0x33,0x33,0x33,0x27,0x33,
+	0x33,0x25,0x24,0x24,0x24,0x24,0x25,0xa0,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,0xa0,0x22,0x33,0xa9,0xb3,0x23,0x3d,0x3d,0x3d,
+	0x3d,0x23,0x28,0x28,0xa9,0xa9,0xa9,0x33,0x33,0x33,0x27,0x33,0x33,
+	0x33,0xae,0x24,0x24,0x24,0x25,0x24,0x24,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x25,0x33,0x33,0x33,0xa9,
+	0xa8,0x23,0x25,0xa9,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
+	0x33,0x33,0x24,0x25,0x24,0x24,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x26,0x33,
+	0x33,0x27,0x33,0x33,0x24,0x25,0x33,0x27,0x33,0x33,0x27,0x33,0x33,
+	0x27,0x33,0xa0,0x25,0x24,0x24,0x24,0x24,0xa0,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x27,0x25,0x24,0x24,0x24,0x25,0x24,0x25,0x33,0x33,
+	0x33,0x33,0x25,0x24,0x24,0x24,0x24,0x24,0x21,0x21,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,0x21,0x21,0x24,0x24,0x24,0x24,
+	0xa0,0x27,0x33,0x33,0x24,0x24,0x24,0x21,0x21,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,0x27,0x26,0x26,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,BLCK,
+	BLCK,BLCK,BLCK,BLCK};
diff -uNr linux-2.4.37.9/include/linux/biglogo.h linux-2.4.37.9-amithlon/include/linux/biglogo.h
--- linux-2.4.37.9/include/linux/biglogo.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/biglogo.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,8489 @@
+#define LOGO_FRAMES 19
+#define LINUX_LOGO_COLORS 224
+#define INCLUDE_LINUX_LOGOBW 1
+#define INCLUDE_LINUX_LOGO16 1
+
+unsigned char linux_logo_red[]  = {
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 
+  0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 
+  0x02, 0x02, 0x06, 0x06, 0x06, 0x02, 0x06, 0x02, 0x0a, 0x0a, 0x07, 0x07, 0x03, 0x06, 0x05, 0x02, 
+  0x02, 0x06, 0x02, 0x06, 0x0a, 0x0a, 0x08, 0x06, 0x06, 0x09, 0x0b, 0x0a, 0x0a, 0x0a, 0x0a, 0x02, 
+  0x02, 0x04, 0x02, 0x06, 0x09, 0x0a, 0x0b, 0x0e, 0x0e, 0x0e, 0x03, 0x0a, 0x0a, 0x0e, 0x0d, 0x09, 
+  0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x02, 0x0e, 0x0e, 0x0e, 0x12, 0x0a, 0x11, 0x02, 0x12, 0x12, 
+  0x0c, 0x12, 0x12, 0x12, 0x20, 0x06, 0x12, 0x11, 0x21, 0x15, 0x70, 0x02, 0x02, 0x0e, 0x56, 0xc9, 
+  0x02, 0x18, 0x02, 0xfa, 0x02, 0x02, 0xe6, 0x02, 0x02, 0x7b, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x0b, 0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x06, 0x05, 0x02, 0x02, 0x06, 0x0a, 0x06, 0x03, 0x0a, 0x0a, 0x06, 0x07, 0x02, 0x02, 0x03, 
+  0x0a, 0x06, 0x06, 0x06, 0x08, 0x0b, 0x06, 0x02, 0x02, 0x0a, 0x09, 0x06, 0x0e, 0x0e, 0x0e, 0x0a, 
+  0x09, 0x04, 0x02, 0x0e, 0x0c, 0x0e, 0x0a, 0x0d, 0x0e, 0x0e, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x12, 
+  0x0e, 0x0e, 0x11, 0x12, 0x0a, 0x02, 0x0c, 0x12, 0x02, 0x15, 0x02, 0x02, 0x12, 0x14, 0x22, 0x4e, 
+  0x46, 0x0e, 0xc9, 0x7b, 0x0e, 0x02, 0xfa, 0x02, 0x12, 0x02, 0x02, 0x0e, 0x12, 0xe6, 0x02, 0x02, 
+  0x02, 0x02, 0x0e, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0b, 0x11, 0x02, 0x02, 0x02, 
+  0x02, 0x0f, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x05, 0x02, 0x02, 0x02, 
+  0x06, 0x06, 0x05, 0x06, 0x02, 0x02, 0x06, 0x02, 0x05, 0x02, 0x0a, 0x06, 0x04, 0x02, 0x06, 0x03, 
+  0x07, 0x0b, 0x06, 0x09, 0x02, 0x07, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x09, 0x06, 0x0a, 0x02, 0x0e, 
+  0x0d, 0x02, 0x06, 0x0e, 0x0e, 0x0e, 0x09, 0x08, 0x0e, 0x0e, 0x0e, 0x0e, 0x13, 0x0b, 0x0e, 0x06, 
+  0x0e, 0x12, 0x12, 0x12, 0x0e, 0x12, 0x12, 0x02, 0x12, 0x15, 0x11, 0x02, 0x70, 0x0e, 0x02, 0x0e, 
+  0xc9, 0x05, 0x12, 0x02, 0x02, 0x02, 0xfa, 0x50, 0x02, 0x02, 0x02, 0x02, 0x02, 0x12, 0x02, 0x02, 
+  0x0c, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x02, 0x02, 0x02, 0x0b, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 
+  0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 
+  0x05, 0x06, 0x05, 0x02, 0x06, 0x06, 0x06, 0x04, 0x06, 0x02, 0x06, 0x06, 0x0a, 0x06, 0x06, 0x02, 
+  0x0a, 0x0a, 0x0a, 0x0a, 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x06, 0x02, 0x0b, 0x0d, 0x08, 0x06, 
+  0x0e, 0x0e, 0x09, 0x0a, 0x02, 0x02, 0x0e, 0x0e, 0x0e, 0x06, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x06, 
+  0x0e, 0x0e, 0x17, 0x12, 0x0e, 0x0e, 0x06, 0x0e, 0x0e, 0x12, 0x12, 0x02, 0x12, 0x0c, 0x21, 0x15, 
+  0x12, 0x11, 0x02, 0x02, 0x14, 0x42, 0x4e, 0x11, 0x12, 0x02, 0x74, 0xc9, 0x18, 0x03, 0x02, 0x02, 
+  0x02, 0x0a, 0x4e, 0xfa, 0xe6, 0x02, 0x02, 0x02, 0x16, 0x1a, 0x0b, 0x02, 0x02, 0x02, 0x0c, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x12, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x06, 
+  0x05, 0x06, 0x02, 0x02, 0x05, 0x02, 0x03, 0x06, 0x06, 0x09, 0x06, 0x06, 0x04, 0x02, 0x0a, 0x0a, 
+  0x06, 0x0a, 0x0a, 0x09, 0x0a, 0x0a, 0x06, 0x02, 0x02, 0x02, 0x07, 0x0b, 0x0a, 0x0a, 0x0a, 0x0e, 
+  0x0e, 0x0e, 0x0e, 0x0d, 0x02, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x0e, 0x14, 0x0e, 
+  0x11, 0x0e, 0x0e, 0x08, 0x06, 0x12, 0x0e, 0x12, 0x12, 0x11, 0x14, 0x12, 0x0a, 0x02, 0x03, 0x13, 
+  0x12, 0x18, 0x11, 0x02, 0x0c, 0x29, 0x21, 0x42, 0x02, 0x12, 0x74, 0xc9, 0x02, 0x02, 0x0b, 0x80, 
+  0xfa, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x05, 0x02, 0x0b, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 
+  0x05, 0x06, 0x02, 0x02, 0x02, 0x06, 0x03, 0x06, 0x06, 0x07, 0x06, 0x06, 0x02, 0x02, 0x06, 0x07, 
+  0x0a, 0x03, 0x06, 0x0a, 0x0a, 0x0a, 0x0a, 0x09, 0x06, 0x06, 0x09, 0x0b, 0x0a, 0x0a, 0x0a, 0x0d, 
+  0x08, 0x07, 0x0a, 0x0e, 0x0e, 0x0b, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x02, 0x0e, 0x11, 0x0c, 0x0e, 0x02, 0x0e, 0x14, 0x12, 0x12, 0x02, 0x12, 0x11, 0x18, 0x02, 
+  0x0c, 0x1a, 0x21, 0x42, 0x12, 0xc9, 0x74, 0x0e, 0x02, 0x02, 0xfa, 0x0e, 0x02, 0x0b, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x29, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x02, 0x06, 0x02, 
+  0x06, 0x07, 0x02, 0x06, 0x06, 0x06, 0x09, 0x07, 0x0a, 0x06, 0x0a, 0x03, 0x08, 0x0a, 0x0a, 0x0a, 
+  0x0a, 0x09, 0x0a, 0x0a, 0x0a, 0x0b, 0x08, 0x0e, 0x02, 0x0a, 0x0e, 0x0d, 0x02, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x0e, 0x0e, 0x06, 0x0e, 0x0e, 0x0e, 0x02, 0x0a, 0x0c, 0x0e, 0x0e, 0x06, 0x11, 0x12, 0x0e, 
+  0x12, 0x14, 0x12, 0x17, 0x02, 0x05, 0x12, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x11, 0x20, 0x70, 
+  0x10, 0x0e, 0x02, 0x02, 0xe6, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x0b, 0x02, 0x02, 
+  0x02, 0x0c, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 
+  0x18, 0x16, 0x1a, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x12, 0x21, 0x02, 0x02, 
+  0x05, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x06, 0x02, 0x03, 0x05, 0x06, 
+  0x02, 0x06, 0x06, 0x07, 0x06, 0x02, 0x06, 0x09, 0x0a, 0x06, 0x03, 0x0a, 0x02, 0x0a, 0x0a, 0x06, 
+  0x0a, 0x09, 0x0a, 0x02, 0x06, 0x0d, 0x0a, 0x0e, 0x08, 0x0e, 0x0b, 0x0e, 0x0a, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x0e, 0x05, 0x03, 0x0e, 0x0c, 0x0e, 0x02, 0x02, 0x0e, 0x14, 0x0e, 0x0e, 0x0a, 0x12, 0x12, 
+  0x06, 0x12, 0x12, 0x06, 0x11, 0x12, 0x12, 0x0e, 0x02, 0x06, 0x0a, 0x12, 0x15, 0x02, 0x02, 0x0e, 
+  0x62, 0x22, 0x4e, 0x02, 0x12, 0x17, 0xc9, 0x02, 0x02, 0x02, 0x14, 0x02, 0xfa, 0x20, 0x02, 0x12, 
+  0x08, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x0b, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x12, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x06, 0x02, 
+  0x02, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x02, 0x04, 0x06, 0x09, 0x06, 0x03, 0x03, 0x06, 0x06, 
+  0x06, 0x0a, 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0d, 0x08, 0x08, 0x0a, 0x0a, 0x0e, 0x0e, 
+  0x0e, 0x0e, 0x0b, 0x0b, 0x02, 0x0a, 0x0a, 0x02, 0x0e, 0x0e, 0x0e, 0x12, 0x0e, 0x02, 0x02, 0x0e, 
+  0x12, 0x0e, 0x12, 0x12, 0x12, 0x0c, 0x02, 0x0e, 0x15, 0x06, 0x02, 0x02, 0x02, 0x12, 0x46, 0x09, 
+  0x16, 0x7b, 0xc9, 0x14, 0x02, 0x02, 0x02, 0x12, 0x11, 0xfa, 0x06, 0x02, 0x02, 0x0c, 0x02, 0x02, 
+  0x02, 0x02, 0x20, 0x0e, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x14, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x06, 0x02, 0x02, 0x02, 
+  0x02, 0x06, 0x05, 0x02, 0x02, 0x06, 0x06, 0x07, 0x06, 0x02, 0x02, 0x06, 0x0a, 0x02, 0x02, 0x06, 
+  0x0a, 0x0a, 0x09, 0x06, 0x09, 0x0a, 0x03, 0x0d, 0x08, 0x0a, 0x0a, 0x0a, 0x02, 0x0a, 0x0a, 0x07, 
+  0x0b, 0x0a, 0x05, 0x0e, 0x0e, 0x0a, 0x02, 0x0e, 0x0e, 0x0e, 0x0e, 0x02, 0x0e, 0x04, 0x12, 0x12, 
+  0x12, 0x02, 0x02, 0x0b, 0x02, 0x0e, 0x15, 0x0b, 0x0a, 0x4a, 0x0e, 0x17, 0x22, 0x7b, 0xc9, 0x02, 
+  0x0c, 0x12, 0x2a, 0xfa, 0x02, 0x0c, 0x0a, 0x02, 0x12, 0x02, 0x02, 0x02, 0x02, 0x1a, 0x14, 0x11, 
+  0x02, 0x02, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0f, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x12, 
+  0x02, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x16, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x03, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 
+  0x06, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x07, 0x02, 0x06, 0x0a, 0x0a, 0x06, 0x02, 
+  0x02, 0x09, 0x09, 0x06, 0x03, 0x0a, 0x03, 0x02, 0x05, 0x08, 0x0a, 0x0d, 0x0a, 0x0a, 0x0a, 0x07, 
+  0x02, 0x02, 0x0a, 0x02, 0x0b, 0x0a, 0x02, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x06, 0x02, 0x0b, 0x0a, 
+  0x0a, 0x0e, 0x02, 0x0e, 0x12, 0x0e, 0x0e, 0x0a, 0x12, 0x02, 0x12, 0x06, 0x15, 0x17, 0x22, 0x46, 
+  0x0e, 0x0a, 0x0c, 0x2a, 0xc9, 0x7b, 0x0a, 0x02, 0x02, 0x0b, 0xfa, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x0c, 0x14, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x14, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x05, 0x02, 0x02, 0x02, 
+  0x02, 0x05, 0x06, 0x06, 0x06, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x02, 0x02, 0x06, 0x0a, 0x0a, 
+  0x09, 0x07, 0x06, 0x02, 0x02, 0x06, 0x0a, 0x09, 0x06, 0x02, 0x05, 0x0b, 0x0a, 0x0a, 0x0a, 0x04, 
+  0x0a, 0x0a, 0x0b, 0x0e, 0x02, 0x0b, 0x0e, 0x0a, 0x0e, 0x02, 0x0e, 0x0e, 0x07, 0x07, 0x09, 0x06, 
+  0x0a, 0x0e, 0x12, 0x0e, 0x08, 0x0f, 0x0e, 0x12, 0x0c, 0x12, 0x06, 0x02, 0x15, 0x0e, 0x0a, 0x0e, 
+  0x22, 0x46, 0x02, 0xc9, 0x7b, 0x0d, 0x06, 0x02, 0xfa, 0x02, 0x0a, 0x02, 0x02, 0x20, 0x02, 0x02, 
+  0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x02, 0x02, 
+  0x02, 0x02, 0x05, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x03, 
+  0x02, 0x02, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x02, 0x06, 0x06, 0x05, 0x06, 0x07, 0x09, 0x0a, 
+  0x0a, 0x02, 0x06, 0x09, 0x0a, 0x09, 0x0a, 0x07, 0x06, 0x02, 0x06, 0x0a, 0x0a, 0x0a, 0x0b, 0x02, 
+  0x0e, 0x0a, 0x0b, 0x03, 0x04, 0x02, 0x0e, 0x0e, 0x07, 0x06, 0x02, 0x0e, 0x0e, 0x0d, 0x0a, 0x0c, 
+  0x0e, 0x0c, 0x08, 0x02, 0x0e, 0x0e, 0x0a, 0x12, 0x0e, 0x0e, 0x12, 0x0a, 0x12, 0x14, 0x0e, 0x15, 
+  0x11, 0x0e, 0x02, 0x22, 0x46, 0x02, 0x2a, 0xc9, 0x7b, 0x0a, 0x0f, 0x0e, 0x02, 0x02, 0x02, 0x02, 
+  0xfa, 0x02, 0x02, 0x03, 0x0e, 0x02, 0x02, 0x0e, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x0a, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x20, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x0e, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x05, 
+  0x06, 0x02, 0x05, 0x06, 0x06, 0x06, 0x02, 0x02, 0x06, 0x06, 0x07, 0x06, 0x06, 0x09, 0x06, 0x0a, 
+  0x05, 0x02, 0x07, 0x09, 0x0a, 0x02, 0x0a, 0x02, 0x02, 0x02, 0x0a, 0x0b, 0x0a, 0x06, 0x06, 0x02, 
+  0x0e, 0x0e, 0x0e, 0x07, 0x0a, 0x02, 0x0e, 0x0c, 0x0b, 0x0a, 0x0e, 0x0e, 0x0a, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x0d, 0x02, 0x02, 0x0e, 0x11, 0x12, 0x0e, 0x14, 0x12, 0x12, 0x13, 0x12, 0x0e, 0x12, 0x0e, 
+  0x15, 0x02, 0x20, 0x62, 0x50, 0x16, 0x12, 0x14, 0x70, 0xc9, 0x11, 0x10, 0x0b, 0x02, 0x02, 0x46, 
+  0xfa, 0xe6, 0x11, 0x02, 0x02, 0x12, 0x12, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x12, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x0c, 0x0e, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x05, 0x06, 0x05, 0x06, 0x05, 0x04, 0x02, 0x02, 0x06, 0x06, 0x06, 0x0a, 0x0a, 0x07, 
+  0x0a, 0x0a, 0x0a, 0x07, 0x0a, 0x09, 0x08, 0x0b, 0x0e, 0x02, 0x0e, 0x0a, 0x06, 0x02, 0x0e, 0x0c, 
+  0x0a, 0x09, 0x02, 0x02, 0x0c, 0x0e, 0x0e, 0x0e, 0x0d, 0x02, 0x07, 0x0e, 0x0a, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x0e, 0x14, 0x12, 0x11, 0x0e, 0x0e, 0x12, 0x06, 0x12, 0x12, 0x12, 0x02, 0x16, 0x12, 0x02, 
+  0x18, 0x4e, 0x12, 0x12, 0x1a, 0xc9, 0x0b, 0x06, 0x02, 0x02, 0x02, 0xfa, 0x80, 0x0c, 0x02, 0x06, 
+  0x11, 0x74, 0xe6, 0x02, 0x02, 0x02, 0x02, 0x4e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x02, 0x12, 0x02, 0x02, 0x02, 
+  0x02, 0x05, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x05, 0x02, 0x06, 0x04, 0x06, 0x05, 0x06, 0x02, 0x02, 0x06, 0x0a, 0x06, 0x02, 0x0a, 0x07, 0x0a, 
+  0x0a, 0x0a, 0x08, 0x0b, 0x0a, 0x0e, 0x0e, 0x06, 0x06, 0x0e, 0x0a, 0x0a, 0x09, 0x0a, 0x06, 0x02, 
+  0x09, 0x08, 0x0e, 0x0e, 0x0e, 0x0e, 0x05, 0x02, 0x0e, 0x0e, 0x0d, 0x09, 0x0b, 0x0e, 0x0e, 0x02, 
+  0x06, 0x11, 0x11, 0x0e, 0x16, 0x12, 0x12, 0x02, 0x02, 0x14, 0x12, 0x11, 0x18, 0x12, 0x02, 0x0c, 
+  0x14, 0x6a, 0x06, 0x02, 0xe6, 0x02, 0x02, 0x02, 0x21, 0x02, 0x02, 0x02, 0x02, 0x07, 0x56, 0xc9, 
+  0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 
+  0x02, 0x05, 0x06, 0x06, 0x02, 0x06, 0x06, 0x07, 0x06, 0x03, 0x09, 0x0a, 0x06, 0x02, 0x0a, 0x0a, 
+  0x0a, 0x03, 0x02, 0x0a, 0x08, 0x09, 0x0e, 0x0b, 0x0e, 0x07, 0x0b, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 
+  0x0e, 0x0e, 0x0d, 0x0a, 0x0e, 0x0e, 0x0a, 0x02, 0x11, 0x0e, 0x0e, 0x0a, 0x11, 0x12, 0x12, 0x0e, 
+  0x06, 0x12, 0x18, 0x0a, 0x02, 0x29, 0x42, 0x0a, 0x02, 0x02, 0x06, 0x0b, 0x12, 0x11, 0x74, 0xc9, 
+  0x80, 0x02, 0x02, 0x02, 0xfa, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x05, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 
+  0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x02, 
+  0x05, 0x06, 0x02, 0x06, 0x05, 0x02, 0x02, 0x06, 0x09, 0x06, 0x02, 0x06, 0x0a, 0x06, 0x07, 0x0a, 
+  0x0a, 0x0a, 0x0a, 0x0a, 0x09, 0x06, 0x02, 0x04, 0x02, 0x0b, 0x08, 0x0e, 0x06, 0x07, 0x0e, 0x0a, 
+  0x0e, 0x07, 0x0a, 0x0b, 0x0e, 0x0e, 0x0d, 0x0e, 0x0e, 0x0c, 0x16, 0x0e, 0x0e, 0x0e, 0x0a, 0x0e, 
+  0x11, 0x12, 0x03, 0x0e, 0x12, 0x02, 0x12, 0x06, 0x12, 0x02, 0x02, 0x18, 0x02, 0x02, 0x29, 0x6a, 
+  0x02, 0x74, 0xe6, 0x02, 0x02, 0x0a, 0x11, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x0a, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 
+  0x05, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x05, 0x03, 
+  0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x0a, 0x03, 0x05, 0x02, 
+  0x0a, 0x0a, 0x02, 0x0a, 0x06, 0x0a, 0x0a, 0x0b, 0x0e, 0x0b, 0x0a, 0x08, 0x0e, 0x0a, 0x09, 0x02, 
+  0x0a, 0x0a, 0x0d, 0x0e, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x02, 0x0e, 0x0e, 0x0e, 0x02, 0x03, 0x0e, 
+  0x11, 0x0e, 0x06, 0x12, 0x12, 0x04, 0x0e, 0x12, 0x02, 0x09, 0x12, 0x11, 0x1a, 0x18, 0x74, 0x11, 
+  0x02, 0xe6, 0x02, 0x02, 0x02, 0x6a, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 
+  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
+  0x02, 0x05, 0x02, 0x02, 0x02, 0x05, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+};
+
+unsigned char linux_logo_green[]  = {
+  0x02, 0x3a, 0x76, 0x56, 0x72, 0x1e, 0x36, 0x6e, 0x19, 0x52, 0x6a, 0x4e, 0x66, 0x4a, 0x66, 0x46, 
+  0x62, 0x31, 0x5e, 0x42, 0x5a, 0x3e, 0x2a, 0x12, 0x0e, 0x06, 0x0a, 0x24, 0x0e, 0x27, 0x3f, 0x17, 
+  0x17, 0x0a, 0x46, 0x41, 0x42, 0x20, 0x4d, 0x06, 0x5b, 0x6a, 0x52, 0x50, 0x34, 0x20, 0x19, 0x12, 
+  0x4a, 0x52, 0x32, 0x4a, 0x66, 0x66, 0x43, 0x26, 0x1e, 0x32, 0x78, 0x61, 0x70, 0x66, 0x40, 0x0f, 
+  0x0a, 0x21, 0x2a, 0x2a, 0x2a, 0x36, 0x78, 0x80, 0x86, 0x8c, 0x3a, 0x2f, 0x3a, 0x92, 0x3f, 0x56, 
+  0x6a, 0x42, 0x72, 0x4a, 0x4e, 0x99, 0x02, 0x46, 0x54, 0x9e, 0xa4, 0x62, 0x52, 0x22, 0x56, 0x5a, 
+  0x5f, 0xaf, 0xaa, 0x5b, 0xbc, 0x1f, 0x56, 0x5d, 0x7c, 0xb9, 0xea, 0x1a, 0x0e, 0x4e, 0xae, 0xfc, 
+  0x16, 0x62, 0x56, 0xfe, 0x1e, 0x16, 0xfe, 0x26, 0x1e, 0xf7, 0x32, 0x2e, 0x32, 0x2e, 0x3e, 0x3e, 
+  0x4e, 0x56, 0x3a, 0x36, 0x2a, 0x42, 0x46, 0x16, 0x7a, 0x42, 0x23, 0x46, 0x4a, 0x4a, 0x4e, 0x52, 
+  0x4e, 0x52, 0x4e, 0x56, 0x5a, 0x3a, 0x36, 0x0a, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x5a, 0x36, 0x72, 0x56, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x46, 
+  0x62, 0x5e, 0x66, 0x42, 0x3e, 0x2a, 0x12, 0x06, 0x0e, 0x0a, 0x24, 0x3f, 0x20, 0x17, 0x12, 0x0e, 
+  0x0a, 0x3a, 0x19, 0x0f, 0x4a, 0x52, 0x66, 0x4a, 0x31, 0x66, 0x61, 0x46, 0x52, 0x27, 0x17, 0x3a, 
+  0x2f, 0x26, 0x1e, 0x1f, 0x4e, 0x78, 0x2a, 0x0a, 0x1a, 0x70, 0x32, 0x20, 0x80, 0x86, 0x42, 0x36, 
+  0x2a, 0x21, 0x1e, 0x8c, 0x6a, 0x46, 0x3a, 0x3f, 0x99, 0x92, 0x62, 0x72, 0x5f, 0x4a, 0x6e, 0xa4, 
+  0x9e, 0x4e, 0x52, 0xaf, 0x6a, 0x22, 0x8a, 0xaa, 0x36, 0xb9, 0x02, 0x0e, 0x56, 0x75, 0xc8, 0xda, 
+  0xde, 0x4e, 0xfc, 0xf7, 0x59, 0x16, 0xfe, 0x16, 0x5a, 0x26, 0x1e, 0x54, 0x5b, 0xfe, 0x2a, 0x2e, 
+  0x2a, 0x16, 0x72, 0x7a, 0x32, 0x36, 0x2e, 0x23, 0x3a, 0x3e, 0x56, 0x4e, 0x5d, 0x36, 0x42, 0x42, 
+  0x46, 0x8b, 0x46, 0x3a, 0x4a, 0x4a, 0x4e, 0x52, 0x52, 0x4e, 0x56, 0x56, 0x5a, 0x4e, 0x3e, 0x32, 
+  0x06, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x1e, 0x6e, 0x52, 0x19, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x46, 
+  0x62, 0x5e, 0x66, 0x42, 0x5a, 0x3e, 0x2a, 0x12, 0x0e, 0x0a, 0x24, 0x31, 0x31, 0x20, 0x17, 0x12, 
+  0x4a, 0x3a, 0x3f, 0x1e, 0x0e, 0x0f, 0x4d, 0x27, 0x19, 0x16, 0x5b, 0x20, 0x21, 0x4a, 0x52, 0x3a, 
+  0x52, 0x78, 0x32, 0x56, 0x06, 0x62, 0x62, 0x3a, 0x36, 0x61, 0x2f, 0x2a, 0x26, 0x40, 0x17, 0x80, 
+  0x3f, 0x36, 0x2a, 0x8c, 0x99, 0x42, 0x32, 0x43, 0x86, 0x54, 0x4a, 0x4e, 0x72, 0x4c, 0x46, 0x1f, 
+  0x9e, 0xa4, 0x7e, 0x92, 0x92, 0xaa, 0x82, 0x2e, 0xaf, 0xb9, 0x52, 0x02, 0xea, 0x4e, 0x0a, 0x6e, 
+  0xfc, 0x5a, 0x5a, 0x1a, 0x16, 0x0e, 0xfe, 0xc0, 0x16, 0x2a, 0x22, 0x26, 0x1e, 0x56, 0x2e, 0x1e, 
+  0x8a, 0x32, 0x2a, 0x3a, 0x3e, 0x3e, 0x3a, 0x42, 0x42, 0x46, 0x36, 0x6a, 0x52, 0x4e, 0x4e, 0x4e, 
+  0x46, 0x36, 0x4a, 0x4e, 0x52, 0x56, 0x4a, 0x56, 0x56, 0x32, 0x23, 0x06, 0x0a, 0x0a, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x66, 0x46, 
+  0x62, 0x31, 0x5e, 0x42, 0x5a, 0x3e, 0x12, 0x27, 0x0e, 0x24, 0x1e, 0x0a, 0x31, 0x17, 0x12, 0x0f, 
+  0x3f, 0x41, 0x19, 0x2a, 0x4a, 0x4d, 0x20, 0x21, 0x1e, 0x20, 0x42, 0x46, 0x5b, 0x2a, 0x26, 0x4a, 
+  0x40, 0x62, 0x66, 0x2f, 0x2a, 0x61, 0x6a, 0x70, 0x3a, 0x36, 0x3a, 0x0e, 0x78, 0x3f, 0x43, 0x32, 
+  0x80, 0x42, 0x32, 0x31, 0x06, 0x17, 0x82, 0x5f, 0x46, 0x1f, 0x86, 0x92, 0x4a, 0x46, 0x22, 0x52, 
+  0x8c, 0x99, 0xa5, 0xa4, 0x4e, 0x4e, 0x42, 0x9e, 0x54, 0xaf, 0x56, 0x2a, 0xaa, 0x5f, 0x7c, 0xb9, 
+  0x5b, 0x52, 0x02, 0x0e, 0x75, 0x98, 0x9a, 0x5d, 0x56, 0x0a, 0xc2, 0xfc, 0x62, 0x34, 0x1a, 0x16, 
+  0x0a, 0x7a, 0xa2, 0xfe, 0xfe, 0x1e, 0x16, 0x06, 0x82, 0x66, 0x4e, 0x26, 0x16, 0x36, 0x8a, 0x2a, 
+  0x1e, 0x32, 0x2e, 0x3a, 0x3e, 0x3a, 0x36, 0x36, 0x23, 0x3e, 0x42, 0x46, 0x4e, 0x46, 0x5a, 0x42, 
+  0x4a, 0x4e, 0x4e, 0x52, 0x4a, 0x56, 0x52, 0x5a, 0x56, 0x2e, 0x32, 0x0a, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x46, 0x62, 
+  0x66, 0x5e, 0x12, 0x42, 0x5a, 0x3e, 0x27, 0x0e, 0x24, 0x1e, 0x0a, 0x31, 0x20, 0x0e, 0x17, 0x3a, 
+  0x3f, 0x41, 0x16, 0x12, 0x19, 0x2a, 0x31, 0x46, 0x4d, 0x56, 0x4a, 0x26, 0x21, 0x4a, 0x5b, 0x62, 
+  0x2a, 0x2f, 0x66, 0x32, 0x70, 0x36, 0x32, 0x2a, 0x06, 0x0a, 0x62, 0x78, 0x40, 0x3a, 0x6a, 0x80, 
+  0x46, 0x86, 0x42, 0x3f, 0x17, 0x6a, 0x8c, 0x5f, 0x4a, 0x92, 0x99, 0x4e, 0x50, 0x72, 0x98, 0x82, 
+  0x52, 0x54, 0x4e, 0x43, 0x20, 0xa4, 0x9e, 0x5b, 0x56, 0x6c, 0x75, 0x56, 0x66, 0x02, 0x3a, 0x72, 
+  0x7e, 0x62, 0x5d, 0x0e, 0x5f, 0x78, 0x7c, 0x98, 0x0f, 0x5a, 0xc2, 0xfc, 0x1a, 0x16, 0x78, 0xcf, 
+  0xfe, 0x1e, 0x16, 0x26, 0x22, 0x66, 0x5a, 0x2e, 0x4e, 0x6e, 0x23, 0x1e, 0x3a, 0x3e, 0x2e, 0x56, 
+  0x3a, 0x36, 0x32, 0x32, 0x2a, 0x42, 0x42, 0x46, 0x46, 0x3e, 0x36, 0x4a, 0x4e, 0x52, 0x52, 0x4e, 
+  0x4e, 0x4a, 0x56, 0x0a, 0x06, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x52, 0x6e, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 0x46, 0x62, 
+  0x5e, 0x42, 0x5a, 0x3e, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x24, 0x1e, 0x0a, 0x31, 0x17, 0x0f, 0x4e, 
+  0x3f, 0x41, 0x16, 0x20, 0x12, 0x52, 0x31, 0x4a, 0x4d, 0x50, 0x2a, 0x26, 0x16, 0x27, 0x42, 0x52, 
+  0x5b, 0x34, 0x46, 0x2f, 0x62, 0x6a, 0x36, 0x32, 0x46, 0x3a, 0x56, 0x78, 0x70, 0x66, 0x3a, 0x3f, 
+  0x43, 0x62, 0x40, 0x86, 0x5a, 0x4c, 0x32, 0x42, 0x80, 0x82, 0x4a, 0x46, 0x8c, 0x5f, 0x4e, 0x4e, 
+  0x59, 0x06, 0x54, 0x52, 0x8a, 0x92, 0x06, 0x99, 0x75, 0x56, 0x56, 0x02, 0x5b, 0x5d, 0x62, 0x0e, 
+  0x5f, 0x66, 0x7c, 0x98, 0xa4, 0xfc, 0xc2, 0x6e, 0x0e, 0x1a, 0xfe, 0x9e, 0x16, 0x4e, 0x22, 0x1e, 
+  0x0a, 0x2e, 0x26, 0x23, 0x32, 0x2a, 0x3a, 0x3e, 0x2e, 0x2a, 0x52, 0x78, 0x3e, 0x3a, 0x36, 0x32, 
+  0x1e, 0x42, 0x46, 0x17, 0x4e, 0x4a, 0x72, 0x46, 0x42, 0x4a, 0x4e, 0x4e, 0x52, 0x56, 0x56, 0x36, 
+  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x72, 0x19, 0x36, 0x6e, 0x52, 0x6a, 0x4a, 0x66, 0x4a, 0x66, 0x46, 0x62, 
+  0x31, 0x5e, 0x42, 0x5a, 0x3e, 0x24, 0x0e, 0x12, 0x1e, 0x31, 0x2a, 0x3f, 0x41, 0x4e, 0x4d, 0x32, 
+  0x4a, 0x50, 0x27, 0x26, 0x2a, 0x3a, 0x56, 0x52, 0x62, 0x32, 0x2f, 0x34, 0x43, 0x5b, 0x66, 0x66, 
+  0x36, 0x32, 0x6a, 0x70, 0x3a, 0x78, 0x4e, 0x42, 0x17, 0x66, 0x59, 0x3f, 0x0a, 0x46, 0x5a, 0x80, 
+  0x4a, 0x8c, 0x86, 0x52, 0x4e, 0x4e, 0x99, 0x06, 0x40, 0x8a, 0x6e, 0x92, 0x46, 0x52, 0x56, 0x9e, 
+  0xa4, 0x75, 0x56, 0xa5, 0x02, 0x19, 0x5b, 0x72, 0x17, 0x0a, 0x06, 0x0e, 0x0a, 0x5d, 0xbc, 0xea, 
+  0x7b, 0x54, 0x0e, 0x12, 0xfe, 0x0a, 0x1a, 0x16, 0x56, 0x16, 0x1e, 0x26, 0x56, 0x78, 0x2e, 0x2a, 
+  0x22, 0x5f, 0x36, 0x32, 0x2a, 0x23, 0x1e, 0x3a, 0x3e, 0x2e, 0x36, 0x32, 0x3a, 0x42, 0x42, 0x46, 
+  0x62, 0x82, 0x9e, 0x6a, 0x3e, 0x3a, 0x46, 0x4a, 0x4e, 0x4e, 0x52, 0x4e, 0x5a, 0x7c, 0x56, 0x52, 
+  0x5a, 0x4a, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x66, 0x46, 
+  0x62, 0x5e, 0x5a, 0x3e, 0x42, 0x12, 0x24, 0x0e, 0x0a, 0x1e, 0x31, 0x3a, 0x2a, 0x31, 0x3f, 0x41, 
+  0x20, 0x2a, 0x4d, 0x50, 0x26, 0x0a, 0x4a, 0x56, 0x5b, 0x42, 0x34, 0x2f, 0x27, 0x62, 0x36, 0x46, 
+  0x6a, 0x32, 0x40, 0x12, 0x32, 0x3f, 0x3a, 0x42, 0x43, 0x86, 0x78, 0x80, 0x70, 0x59, 0x46, 0x8c, 
+  0x4a, 0x92, 0x19, 0x3a, 0x54, 0x8a, 0x99, 0x06, 0x16, 0x4e, 0x98, 0x4e, 0x9e, 0x66, 0xa4, 0x7e, 
+  0x52, 0x56, 0xaa, 0x20, 0x52, 0x92, 0xaf, 0x82, 0x4a, 0x1e, 0x6a, 0x5b, 0xb9, 0x02, 0x0e, 0x72, 
+  0xe3, 0xc8, 0xda, 0x0a, 0x56, 0xa5, 0xfc, 0x0f, 0x1a, 0x16, 0x75, 0x52, 0xfe, 0xbc, 0x52, 0x5a, 
+  0x4e, 0x22, 0x26, 0x2a, 0x2a, 0x1e, 0x5f, 0x36, 0x2e, 0x1e, 0x3a, 0x3e, 0x36, 0x32, 0x2e, 0x23, 
+  0x42, 0x42, 0x46, 0x4e, 0x7a, 0x3e, 0x46, 0x4a, 0x4a, 0x4e, 0x82, 0x4e, 0x3a, 0x36, 0x56, 0x56, 
+  0x5a, 0x32, 0x4e, 0x16, 0x06, 0x0a, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x52, 0x6e, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x62, 0x66, 
+  0x31, 0x5e, 0x46, 0x5a, 0x42, 0x3e, 0x2a, 0x12, 0x0a, 0x0e, 0x24, 0x1e, 0x27, 0x31, 0x3a, 0x06, 
+  0x20, 0x3f, 0x41, 0x19, 0x46, 0x4d, 0x50, 0x4a, 0x21, 0x4a, 0x56, 0x46, 0x3a, 0x34, 0x2a, 0x26, 
+  0x1e, 0x5b, 0x32, 0x36, 0x31, 0x40, 0x3a, 0x62, 0x2f, 0x3f, 0x43, 0x4e, 0x66, 0x70, 0x42, 0x8c, 
+  0x86, 0x80, 0x78, 0x78, 0x12, 0x7a, 0x6a, 0x1a, 0x5f, 0x92, 0x46, 0x7e, 0x99, 0x02, 0x16, 0x72, 
+  0x92, 0x9e, 0xa4, 0xaa, 0xaf, 0x5f, 0x22, 0x82, 0xb9, 0x52, 0x0e, 0x06, 0x2a, 0x5b, 0xde, 0x2a, 
+  0x82, 0xf7, 0xfc, 0x75, 0x16, 0x17, 0x0a, 0x82, 0x5d, 0xfe, 0x20, 0x26, 0x1e, 0x8a, 0x2e, 0x2a, 
+  0x23, 0x1e, 0xbc, 0x5e, 0x4c, 0x32, 0x3e, 0x3e, 0x2e, 0x3a, 0x36, 0x32, 0x42, 0x42, 0x46, 0x98, 
+  0x36, 0x46, 0x4a, 0x4e, 0x52, 0x52, 0x4e, 0x16, 0x56, 0x5a, 0x56, 0x4a, 0x3a, 0x0e, 0x4e, 0x0a, 
+  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 0x46, 0x62, 
+  0x31, 0x5e, 0x66, 0x42, 0x5a, 0x3e, 0x12, 0x0e, 0x0a, 0x24, 0x1e, 0x31, 0x3a, 0x2a, 0x06, 0x06, 
+  0x20, 0x41, 0x3f, 0x4e, 0x0a, 0x46, 0x4d, 0x50, 0x4a, 0x0e, 0x27, 0x2a, 0x2f, 0x0e, 0x16, 0x26, 
+  0x31, 0x36, 0x32, 0x32, 0x56, 0x5b, 0x3a, 0x3f, 0x4e, 0x61, 0x6a, 0x62, 0x12, 0x3a, 0x66, 0x62, 
+  0x78, 0x70, 0x19, 0x80, 0x86, 0x66, 0x16, 0x8c, 0x92, 0x99, 0x4e, 0x1a, 0x9e, 0x21, 0xa4, 0xaf, 
+  0xaa, 0x0a, 0x17, 0x4c, 0x02, 0x54, 0xb9, 0x78, 0x7a, 0xca, 0x4a, 0xa5, 0xc8, 0xf7, 0xfc, 0x0a, 
+  0x5f, 0x82, 0xce, 0xfe, 0x1e, 0x8a, 0x6a, 0x4a, 0x5a, 0x22, 0x26, 0x1e, 0x16, 0x9e, 0x75, 0x6c, 
+  0x2e, 0x2a, 0x66, 0x36, 0x32, 0x2e, 0x3a, 0x3e, 0x8b, 0x5f, 0x36, 0x23, 0x42, 0x46, 0x72, 0x56, 
+  0x4a, 0x59, 0x46, 0x3e, 0x42, 0x3a, 0x4e, 0x52, 0x52, 0x82, 0x56, 0x36, 0x4e, 0x4e, 0x56, 0x5a, 
+  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x5a, 0x36, 0x72, 0x56, 0x1e, 0x6e, 0x52, 0x19, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 
+  0x46, 0x62, 0x31, 0x5e, 0x42, 0x66, 0x3e, 0x2a, 0x0e, 0x0a, 0x12, 0x24, 0x27, 0x31, 0x06, 0x4e, 
+  0x41, 0x3f, 0x21, 0x0e, 0x17, 0x20, 0x1e, 0x26, 0x3a, 0x50, 0x0a, 0x2a, 0x2f, 0x5b, 0x4d, 0x12, 
+  0x1e, 0x2a, 0x32, 0x32, 0x3a, 0x62, 0x34, 0x06, 0x19, 0x4e, 0x40, 0x3f, 0x3a, 0x6a, 0x70, 0x52, 
+  0x0a, 0x0f, 0x66, 0x32, 0x78, 0x66, 0x17, 0x62, 0x80, 0x82, 0x8c, 0x86, 0x42, 0x0e, 0x78, 0x36, 
+  0x61, 0x92, 0x16, 0x99, 0xa4, 0x9e, 0x4a, 0x31, 0xaa, 0x02, 0xaf, 0x20, 0xb9, 0xa5, 0xc8, 0xe5, 
+  0x4e, 0x6a, 0x5f, 0xce, 0xfc, 0xf7, 0x7a, 0x0a, 0x16, 0x4c, 0xfe, 0x1a, 0x16, 0x22, 0x23, 0x1e, 
+  0x8a, 0x98, 0x26, 0x2e, 0x2a, 0x36, 0x2a, 0x3a, 0x3e, 0x2e, 0x36, 0x32, 0x42, 0x42, 0x46, 0x46, 
+  0x4a, 0x4e, 0x4e, 0x52, 0x75, 0x56, 0x5a, 0x4a, 0x4e, 0x3e, 0x3a, 0x52, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x5a, 0x72, 0x56, 0x1e, 0x36, 0x6e, 0x52, 0x19, 0x6a, 0x4a, 0x66, 0x4a, 0x66, 
+  0x46, 0x62, 0x32, 0x5e, 0x42, 0x3e, 0x12, 0x24, 0x0e, 0x0a, 0x2a, 0x31, 0x31, 0x06, 0x4e, 0x0f, 
+  0x17, 0x19, 0x41, 0x46, 0x4d, 0x06, 0x1a, 0x1e, 0x20, 0x26, 0x4a, 0x0a, 0x16, 0x2a, 0x2f, 0x5b, 
+  0x56, 0x52, 0x42, 0x20, 0x12, 0x46, 0x36, 0x32, 0x3a, 0x0e, 0x3f, 0x4c, 0x70, 0x66, 0x61, 0x21, 
+  0x62, 0x6a, 0x78, 0x80, 0x0a, 0x78, 0x86, 0x3a, 0x8c, 0x27, 0x92, 0x99, 0x62, 0x50, 0x2a, 0x1f, 
+  0x66, 0x9e, 0xa4, 0x5e, 0x4e, 0x8b, 0x82, 0xaa, 0x8a, 0xaf, 0x52, 0x02, 0xb9, 0x46, 0x31, 0x6e, 
+  0xc8, 0xe5, 0x0e, 0xfc, 0xf7, 0x3f, 0x32, 0x16, 0xfe, 0x1e, 0x66, 0x22, 0x26, 0xbc, 0x2a, 0x16, 
+  0x59, 0x36, 0x32, 0x1e, 0x3a, 0x3e, 0x2e, 0x7a, 0x3e, 0x3a, 0x42, 0x42, 0x46, 0x6a, 0x46, 0x4a, 
+  0x4e, 0x52, 0x56, 0x72, 0x4e, 0x32, 0x2e, 0x2a, 0x4a, 0x4e, 0x52, 0x56, 0x36, 0x5a, 0x23, 0x56, 
+  0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x1e, 0x52, 0x6e, 0x19, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x46, 
+  0x62, 0x5e, 0x66, 0x3e, 0x5a, 0x42, 0x27, 0x12, 0x0e, 0x0a, 0x24, 0x0f, 0x17, 0x2a, 0x31, 0x31, 
+  0x06, 0x0e, 0x19, 0x1e, 0x42, 0x4a, 0x41, 0x46, 0x06, 0x20, 0x26, 0x3f, 0x4d, 0x50, 0x2a, 0x2f, 
+  0x5b, 0x4a, 0x32, 0x32, 0x62, 0x56, 0x66, 0x52, 0x46, 0x17, 0x52, 0x3a, 0x70, 0x6a, 0x78, 0x12, 
+  0x80, 0x66, 0x78, 0x34, 0x21, 0x0a, 0x86, 0x8c, 0x62, 0x2a, 0x22, 0x99, 0x92, 0x3f, 0x36, 0x8a, 
+  0x54, 0x6a, 0x4e, 0x02, 0x9e, 0x6e, 0x40, 0xa4, 0x72, 0x5f, 0xaa, 0x7a, 0xaf, 0x98, 0x59, 0xb9, 
+  0x6c, 0x4a, 0x36, 0xc8, 0xe5, 0x0e, 0xce, 0xfc, 0xf7, 0x6a, 0x8b, 0x46, 0x2a, 0x0a, 0x1a, 0x16, 
+  0xfe, 0x16, 0x1e, 0x3a, 0x4e, 0x1e, 0x16, 0x5a, 0x4e, 0x4c, 0x2a, 0x26, 0x23, 0x3e, 0x2e, 0x32, 
+  0x3a, 0x31, 0x42, 0x3a, 0x36, 0x32, 0x2e, 0x3e, 0x42, 0x42, 0x46, 0xbc, 0x46, 0x36, 0x4a, 0x4a, 
+  0x4e, 0x4e, 0x52, 0x82, 0x56, 0x52, 0x5a, 0x56, 0x4e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 0x46, 0x62, 
+  0x31, 0x5e, 0x42, 0x5a, 0x66, 0x3e, 0x2a, 0x12, 0x0e, 0x0a, 0x3a, 0x06, 0x24, 0x0f, 0x16, 0x31, 
+  0x3a, 0x12, 0x19, 0x1e, 0x42, 0x41, 0x1e, 0x4e, 0x26, 0x4d, 0x50, 0x4a, 0x2a, 0x2a, 0x32, 0x5b, 
+  0x3f, 0x06, 0x52, 0x32, 0x66, 0x0e, 0x70, 0x27, 0x17, 0x20, 0x62, 0x78, 0x6a, 0x20, 0x1f, 0x17, 
+  0x86, 0x80, 0x5e, 0x62, 0x2f, 0x0a, 0x8c, 0x6a, 0x78, 0x36, 0x92, 0x5a, 0x3a, 0x99, 0x82, 0x42, 
+  0x46, 0x3f, 0x0a, 0x02, 0x9e, 0x6c, 0xa4, 0x4a, 0x98, 0x82, 0x92, 0x72, 0xaa, 0x4e, 0xaf, 0x4e, 
+  0xb9, 0x0e, 0xbc, 0xe3, 0xc0, 0x82, 0x5a, 0x75, 0xea, 0xfc, 0x5d, 0x7b, 0x4e, 0x1a, 0x16, 0xe5, 
+  0xfe, 0xfe, 0x52, 0x1e, 0x16, 0x5b, 0x56, 0x36, 0x1e, 0x26, 0x2e, 0x2a, 0x22, 0x23, 0xc8, 0x56, 
+  0x32, 0x36, 0x2e, 0x3a, 0x3e, 0x56, 0x3e, 0x3a, 0x42, 0x42, 0x46, 0x36, 0x4c, 0x52, 0x46, 0x4a, 
+  0x4e, 0x52, 0x5f, 0x72, 0x2a, 0x4a, 0x5a, 0x4e, 0x32, 0x4e, 0x56, 0x0a, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 0x46, 0x62, 
+  0x31, 0x5e, 0x3e, 0x5a, 0x42, 0x2a, 0x0a, 0x12, 0x06, 0x66, 0x3a, 0x06, 0x0a, 0x24, 0x1e, 0x0e, 
+  0x17, 0x4e, 0x19, 0x1e, 0x3f, 0x4d, 0x31, 0x21, 0x20, 0x22, 0x20, 0x4a, 0x26, 0x2f, 0x5b, 0x52, 
+  0x62, 0x6a, 0x66, 0x50, 0x70, 0x32, 0x43, 0x78, 0x80, 0x12, 0x86, 0x36, 0x2a, 0x16, 0x8c, 0x6a, 
+  0x3a, 0x2a, 0x17, 0x0a, 0x8a, 0x92, 0x6e, 0x42, 0x3f, 0x0e, 0x62, 0x99, 0x6a, 0x54, 0x46, 0x72, 
+  0x4e, 0x4a, 0x98, 0xa4, 0x52, 0x4e, 0x9e, 0xaa, 0x52, 0xaf, 0x56, 0x56, 0x02, 0x82, 0x5a, 0x0e, 
+  0x62, 0xa2, 0x5b, 0x82, 0x66, 0xfc, 0x4e, 0x42, 0x0a, 0x1a, 0x16, 0xfe, 0xcf, 0x5f, 0x26, 0x32, 
+  0x5d, 0xc2, 0xfe, 0x2e, 0x2a, 0x23, 0x1e, 0x9a, 0x46, 0x32, 0x2a, 0x1e, 0x16, 0x3a, 0x3e, 0x2e, 
+  0x56, 0x98, 0x3a, 0x36, 0x42, 0x42, 0x46, 0x56, 0x4a, 0x4a, 0x4e, 0x52, 0x7e, 0x4e, 0x52, 0x4e, 
+  0x56, 0x5a, 0x3e, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x66, 0x62, 
+  0x31, 0x5e, 0x42, 0x5a, 0x3e, 0x27, 0x0a, 0x12, 0x0e, 0x06, 0x06, 0x0a, 0x24, 0x1e, 0x0f, 0x0e, 
+  0x31, 0x12, 0x1e, 0x21, 0x41, 0x3f, 0x46, 0x2a, 0x4a, 0x4a, 0x5b, 0x4d, 0x46, 0x62, 0x52, 0x66, 
+  0x6a, 0x70, 0x4e, 0x78, 0x36, 0x80, 0x42, 0x2a, 0x32, 0x86, 0x40, 0x3a, 0x32, 0x2f, 0x26, 0x20, 
+  0x56, 0x43, 0x92, 0x8c, 0x9e, 0x54, 0x19, 0x17, 0x4e, 0x46, 0x3f, 0x2a, 0x78, 0x4e, 0x4a, 0x1e, 
+  0x3a, 0x52, 0x6c, 0x99, 0x82, 0x5a, 0x56, 0x1a, 0x02, 0x75, 0x5b, 0x5d, 0x62, 0x56, 0x0e, 0x5f, 
+  0x98, 0xb6, 0x42, 0x0a, 0xfe, 0x16, 0x0a, 0x16, 0x7c, 0x36, 0x22, 0x23, 0x1e, 0x62, 0xae, 0xfc, 
+  0x31, 0x2e, 0x26, 0x2a, 0x4a, 0x3a, 0x32, 0x3a, 0x3e, 0x46, 0x36, 0x32, 0x16, 0x42, 0x42, 0x46, 
+  0x3e, 0x36, 0x2e, 0x4a, 0x4e, 0x4e, 0x52, 0x2a, 0x52, 0x56, 0x5a, 0x56, 0x4e, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x36, 0x72, 0x19, 0x6e, 0x52, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 0x46, 0x62, 
+  0x66, 0x5e, 0x42, 0x5a, 0x3e, 0x0e, 0x20, 0x0a, 0x06, 0x0e, 0x24, 0x1e, 0x12, 0x12, 0x31, 0x17, 
+  0x4e, 0x3f, 0x41, 0x3a, 0x27, 0x46, 0x4d, 0x50, 0x4a, 0x31, 0x56, 0x5b, 0x46, 0x2a, 0x66, 0x6a, 
+  0x62, 0x3a, 0x06, 0x70, 0x43, 0x32, 0x80, 0x78, 0x5a, 0x62, 0x78, 0x32, 0x5f, 0x8c, 0x86, 0x5e, 
+  0x4a, 0x59, 0x3f, 0x40, 0x42, 0x46, 0x3a, 0x02, 0x52, 0x4e, 0x4e, 0x36, 0x6c, 0x56, 0x56, 0x54, 
+  0x26, 0x5b, 0x62, 0x2f, 0x16, 0x78, 0x98, 0x31, 0x16, 0x0e, 0x42, 0x4c, 0x5a, 0x5d, 0xc2, 0xfc, 
+  0xcf, 0x0f, 0x0a, 0x1a, 0xfe, 0x1e, 0x1e, 0x16, 0x22, 0x23, 0x2a, 0x26, 0x34, 0x32, 0x32, 0x36, 
+  0x2e, 0x3a, 0x3e, 0x3a, 0x2a, 0x42, 0x46, 0x42, 0x4a, 0x46, 0x4e, 0x5a, 0x52, 0x3e, 0x56, 0x4a, 
+  0x4e, 0x4e, 0x42, 0x56, 0x56, 0x52, 0x36, 0x2e, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x56, 0x72, 0x19, 0x36, 0x52, 0x6e, 0x32, 0x6a, 0x4e, 0x4a, 0x66, 0x66, 0x46, 
+  0x62, 0x31, 0x5e, 0x42, 0x5a, 0x3e, 0x12, 0x24, 0x0e, 0x0a, 0x06, 0x0a, 0x1e, 0x20, 0x3f, 0x27, 
+  0x31, 0x3a, 0x2a, 0x41, 0x19, 0x17, 0x0a, 0x4d, 0x56, 0x4a, 0x06, 0x46, 0x5b, 0x2a, 0x52, 0x62, 
+  0x66, 0x36, 0x70, 0x61, 0x32, 0x20, 0x16, 0x21, 0x4a, 0x78, 0x43, 0x80, 0x46, 0x62, 0x5f, 0x3a, 
+  0x86, 0x50, 0x6a, 0x4c, 0x5e, 0x46, 0x3f, 0x4e, 0x4a, 0x6a, 0x82, 0x6e, 0x54, 0x59, 0x40, 0x4e, 
+  0x52, 0x5a, 0x3a, 0x42, 0x56, 0x0e, 0x56, 0x26, 0x5b, 0x0a, 0x02, 0x62, 0x16, 0x0e, 0x78, 0xb6, 
+  0x12, 0xc2, 0xfe, 0x1a, 0x16, 0x2f, 0x5d, 0x1e, 0x2e, 0x4e, 0x22, 0x1e, 0x31, 0x2a, 0x26, 0x32, 
+  0x36, 0x2e, 0x2a, 0x3a, 0x3e, 0x4e, 0x3e, 0x3a, 0x23, 0x42, 0x42, 0x46, 0x4a, 0x46, 0x4a, 0x5a, 
+  0x56, 0x4e, 0x52, 0x4e, 0x32, 0x52, 0x56, 0x56, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x3a, 0x76, 0x5a, 0x36, 0x72, 0x56, 0x1e, 0x6e, 0x52, 0x19, 0x32, 0x6a, 0x4a, 0x4a, 0x66, 
+  0x46, 0x62, 0x5e, 0x66, 0x42, 0x3e, 0x2a, 0x0a, 0x06, 0x0e, 0x0e, 0x24, 0x0a, 0x27, 0x3f, 0x31, 
+  0x4e, 0x4a, 0x46, 0x41, 0x42, 0x3a, 0x31, 0x20, 0x4d, 0x16, 0x17, 0x0a, 0x5b, 0x34, 0x19, 0x12, 
+  0x66, 0x6a, 0x06, 0x70, 0x2a, 0x2f, 0x3a, 0x78, 0x80, 0x78, 0x66, 0x43, 0x86, 0x31, 0x32, 0x17, 
+  0x36, 0x40, 0x3f, 0x8c, 0x26, 0x42, 0x46, 0x99, 0x92, 0x12, 0x4a, 0x4e, 0x5f, 0x02, 0x3a, 0x54, 
+  0x52, 0x9e, 0x20, 0x56, 0x56, 0x21, 0x4e, 0xa4, 0x22, 0x2a, 0x5b, 0x5d, 0x66, 0x62, 0xc2, 0x6c, 
+  0x0e, 0xfe, 0x0f, 0x1a, 0x16, 0xb6, 0x72, 0x1e, 0x16, 0x26, 0x2a, 0x46, 0x2e, 0x4e, 0x32, 0x32, 
+  0x23, 0x3e, 0x3e, 0x2e, 0x4e, 0x42, 0x3a, 0x3a, 0x36, 0x2a, 0x1e, 0x42, 0x46, 0x4a, 0x4e, 0x52, 
+  0x4a, 0x56, 0x52, 0x56, 0x56, 0x5a, 0x36, 0x4e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+
+};
+
+unsigned char linux_logo_blue[]  = {
+  0x02, 0x31, 0x66, 0x4a, 0x62, 0x11, 0x2d, 0x5f, 0x14, 0x47, 0x5c, 0x43, 0x5c, 0x3d, 0x56, 0x3d, 
+  0x55, 0x20, 0x51, 0x38, 0x4e, 0x36, 0x1b, 0x0b, 0x0d, 0x0e, 0x12, 0x15, 0x22, 0x25, 0x26, 0x2c, 
+  0x25, 0x16, 0x26, 0x21, 0x2a, 0x26, 0x26, 0x12, 0x2f, 0x38, 0x31, 0x2a, 0x38, 0x42, 0x35, 0x32, 
+  0x43, 0x37, 0x2b, 0x2a, 0x36, 0x32, 0x55, 0x4c, 0x3a, 0x66, 0x3d, 0x3a, 0x39, 0x3a, 0x66, 0x1e, 
+  0x1a, 0x31, 0x6f, 0x4c, 0x57, 0x6c, 0x4e, 0x40, 0x43, 0x47, 0x3d, 0x5c, 0x74, 0x4b, 0x7d, 0x2b, 
+  0x71, 0x86, 0x7e, 0x94, 0x9a, 0x4d, 0x0a, 0x8c, 0x9a, 0x50, 0x53, 0x31, 0xa5, 0x5d, 0xae, 0xa7, 
+  0xa0, 0x58, 0x57, 0xb6, 0x6c, 0x3e, 0xaa, 0xc6, 0xaa, 0x5e, 0xbc, 0x4a, 0x2c, 0xa1, 0xde, 0xf9, 
+  0x3e, 0xbc, 0xe9, 0xfe, 0x50, 0x42, 0xfe, 0x6c, 0x58, 0xc4, 0x4e, 0x7e, 0x8d, 0x84, 0xaa, 0xb0, 
+  0xb5, 0xde, 0xa4, 0x99, 0x76, 0xbb, 0xc6, 0x3a, 0x7f, 0xb5, 0x64, 0xc0, 0xcc, 0xd2, 0xd8, 0xe7, 
+  0xde, 0xe0, 0xd2, 0xf2, 0xe7, 0x9e, 0x92, 0x22, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4e, 0x2d, 0x62, 0x4a, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 
+  0x55, 0x51, 0x5c, 0x38, 0x36, 0x1b, 0x0b, 0x0e, 0x0d, 0x12, 0x15, 0x26, 0x26, 0x25, 0x32, 0x22, 
+  0x16, 0x1e, 0x35, 0x1e, 0x43, 0x37, 0x36, 0x2a, 0x20, 0x3a, 0x3a, 0x2d, 0x31, 0x25, 0x2c, 0x3d, 
+  0x5c, 0x4c, 0x3a, 0x3e, 0x5e, 0x3d, 0x4c, 0x1a, 0x4a, 0x39, 0x66, 0x42, 0x40, 0x43, 0x86, 0x6c, 
+  0x57, 0x31, 0x50, 0x47, 0x71, 0x8c, 0x74, 0x7d, 0x4d, 0x4b, 0x48, 0x7e, 0x7c, 0x94, 0x7d, 0x53, 
+  0x50, 0xa1, 0xa5, 0x58, 0x38, 0x5d, 0x67, 0x57, 0x86, 0x5e, 0x0a, 0x2c, 0xae, 0x99, 0x6e, 0xa2, 
+  0x96, 0x9a, 0xf9, 0xc4, 0x86, 0x42, 0xfe, 0x3e, 0xa7, 0x6c, 0x58, 0x9a, 0xb6, 0xfe, 0x6f, 0x7e, 
+  0x76, 0x3a, 0x82, 0x7f, 0x8d, 0x92, 0x84, 0x64, 0xa4, 0xb0, 0xaa, 0xb5, 0xc6, 0x99, 0xb5, 0xbb, 
+  0xc6, 0x74, 0xc0, 0x9e, 0xcc, 0xd2, 0xd8, 0xe0, 0xe7, 0xde, 0xe9, 0xf2, 0xe7, 0xd2, 0xaa, 0x86, 
+  0x12, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x11, 0x5f, 0x47, 0x14, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 
+  0x55, 0x51, 0x5c, 0x38, 0x4e, 0x36, 0x1b, 0x0b, 0x0d, 0x12, 0x15, 0x20, 0x1a, 0x26, 0x25, 0x32, 
+  0x2a, 0x1e, 0x26, 0x3a, 0x2c, 0x1e, 0x26, 0x25, 0x35, 0x3a, 0x2f, 0x42, 0x31, 0x43, 0x37, 0x3d, 
+  0x31, 0x3d, 0x4e, 0x2b, 0x0e, 0x48, 0x31, 0x74, 0x6c, 0x3a, 0x5c, 0x57, 0x4c, 0x66, 0x2c, 0x40, 
+  0x7d, 0x86, 0x4c, 0x47, 0x4d, 0x86, 0x66, 0x55, 0x43, 0x9a, 0x94, 0x9a, 0x87, 0x7d, 0x8c, 0x3e, 
+  0x50, 0x53, 0x7a, 0x66, 0x4b, 0x57, 0x77, 0x7e, 0x58, 0x5e, 0xa5, 0x0a, 0xbc, 0xa1, 0x1a, 0x7d, 
+  0xf9, 0xe7, 0xa7, 0x4a, 0x3e, 0x22, 0xfe, 0xc3, 0x42, 0x6f, 0x5d, 0x6c, 0x50, 0xae, 0x84, 0x58, 
+  0x67, 0x8d, 0x76, 0xa4, 0xb0, 0xaa, 0x9e, 0xb5, 0xbb, 0xc6, 0x99, 0x8a, 0xe0, 0xd8, 0xd2, 0xb5, 
+  0xc0, 0x92, 0xd2, 0xde, 0xe7, 0xe9, 0xcc, 0xf2, 0xde, 0x86, 0x64, 0x12, 0x22, 0x16, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x5c, 0x56, 0x3d, 
+  0x55, 0x20, 0x51, 0x38, 0x4e, 0x36, 0x0b, 0x25, 0x0d, 0x15, 0x11, 0x12, 0x1a, 0x25, 0x32, 0x1e, 
+  0x26, 0x21, 0x35, 0x1b, 0x2a, 0x26, 0x42, 0x31, 0x3a, 0x26, 0x2a, 0x2d, 0x2f, 0x4c, 0x4c, 0x43, 
+  0x66, 0x31, 0x32, 0x5c, 0x57, 0x3a, 0x38, 0x39, 0x74, 0x6c, 0x1e, 0x22, 0x3d, 0x7d, 0x55, 0x4e, 
+  0x40, 0x86, 0x66, 0x62, 0x0e, 0x2c, 0x5a, 0x7c, 0x8c, 0x3e, 0x43, 0x4b, 0x94, 0x26, 0x5d, 0x37, 
+  0x47, 0x4d, 0x6f, 0x53, 0xa1, 0x9a, 0xa6, 0x50, 0x9a, 0x58, 0xaa, 0x6f, 0x57, 0xa0, 0xaa, 0x5e, 
+  0xb6, 0xa5, 0x0a, 0x2c, 0x99, 0xc8, 0xe2, 0xc6, 0xae, 0x1a, 0xea, 0xf9, 0xbc, 0x38, 0x4a, 0x42, 
+  0x22, 0x7f, 0xde, 0xfe, 0xfe, 0x50, 0x3e, 0x12, 0x9d, 0xbe, 0xb5, 0x6c, 0x3a, 0x86, 0x67, 0x76, 
+  0x58, 0x8d, 0x84, 0xa4, 0xb0, 0x9e, 0x99, 0x92, 0x64, 0xaa, 0xbb, 0xc6, 0xd2, 0xc0, 0xa7, 0xb5, 
+  0xcc, 0xd8, 0xde, 0xe0, 0xd2, 0xf2, 0xe7, 0xe7, 0xe9, 0x7e, 0x86, 0x16, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x5c, 0x51, 0x0b, 0x38, 0x4e, 0x36, 0x25, 0x0d, 0x15, 0x11, 0x12, 0x1a, 0x26, 0x22, 0x25, 0x1e, 
+  0x26, 0x21, 0x3a, 0x32, 0x35, 0x1b, 0x20, 0x26, 0x26, 0x2b, 0x2a, 0x4c, 0x31, 0x43, 0x2f, 0x31, 
+  0x4c, 0x5c, 0x32, 0x66, 0x39, 0x6c, 0x4e, 0x6f, 0x0e, 0x1a, 0x48, 0x3d, 0x66, 0x74, 0x38, 0x40, 
+  0x8c, 0x43, 0x86, 0x7d, 0x2c, 0x71, 0x47, 0x7c, 0x94, 0x4b, 0x4d, 0x9a, 0x2a, 0x7e, 0x68, 0x5a, 
+  0xa5, 0x9a, 0xa1, 0x55, 0x42, 0x53, 0x50, 0xb6, 0xaa, 0x95, 0x99, 0xae, 0x3a, 0x0a, 0x3d, 0x87, 
+  0x7a, 0xbc, 0xc6, 0x2c, 0xa0, 0xca, 0xaa, 0xc8, 0x1e, 0xa7, 0xea, 0xf9, 0x4a, 0x42, 0x4e, 0xf0, 
+  0xfe, 0x50, 0x3e, 0x6c, 0x5d, 0x36, 0xe7, 0x7e, 0xb5, 0x7d, 0x64, 0x58, 0xa4, 0xb0, 0x84, 0xe9, 
+  0x9e, 0x99, 0x8d, 0x86, 0x76, 0xb5, 0xbb, 0xc6, 0xc0, 0xaa, 0x92, 0xcc, 0xd8, 0xe0, 0xe7, 0xde, 
+  0xd2, 0xd2, 0xf2, 0x22, 0x12, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x47, 0x5f, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x51, 0x38, 0x4e, 0x36, 0x0b, 0x1b, 0x12, 0x0d, 0x5c, 0x15, 0x11, 0x16, 0x1a, 0x25, 0x1e, 0x43, 
+  0x26, 0x21, 0x3a, 0x26, 0x32, 0x37, 0x20, 0x2a, 0x26, 0x2a, 0x4c, 0x4c, 0x42, 0x25, 0x2a, 0x31, 
+  0x2f, 0x38, 0x2d, 0x5c, 0x31, 0x38, 0x6c, 0x66, 0x26, 0x1e, 0x2b, 0x3d, 0x39, 0x32, 0x74, 0x7d, 
+  0x55, 0x48, 0x66, 0x43, 0x72, 0x7d, 0x4e, 0x86, 0x40, 0x5a, 0x94, 0x8c, 0x47, 0x7c, 0x9a, 0xa1, 
+  0x86, 0x0e, 0x9a, 0xa5, 0x67, 0x4b, 0x12, 0x4d, 0x99, 0xae, 0xaa, 0x0a, 0xb6, 0xc6, 0xbc, 0x2c, 
+  0xa0, 0xbe, 0xaa, 0xc8, 0x53, 0xf9, 0xea, 0x7d, 0x22, 0x4a, 0xfe, 0x50, 0x3e, 0xb5, 0x5d, 0x50, 
+  0x1a, 0x7e, 0x6c, 0x64, 0x86, 0x76, 0xa4, 0xb0, 0x84, 0x6f, 0xe0, 0xca, 0xaa, 0x9e, 0x99, 0x8d, 
+  0x58, 0xbb, 0xc6, 0x2c, 0xd8, 0xcc, 0x82, 0xc0, 0xb5, 0xd2, 0xd2, 0xde, 0xe7, 0xe9, 0xf2, 0x92, 
+  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x62, 0x14, 0x2d, 0x5f, 0x47, 0x5c, 0x43, 0x5c, 0x3d, 0x56, 0x3d, 0x55, 
+  0x20, 0x51, 0x38, 0x4e, 0x36, 0x15, 0x0d, 0x0b, 0x11, 0x1a, 0x1b, 0x26, 0x21, 0x43, 0x26, 0x2b, 
+  0x2a, 0x2a, 0x25, 0x4c, 0x4c, 0x1e, 0x2b, 0x31, 0x31, 0x4e, 0x5c, 0x38, 0x55, 0x2f, 0x32, 0x36, 
+  0x6c, 0x66, 0x38, 0x39, 0x74, 0x3d, 0x5e, 0x86, 0x25, 0x3a, 0x86, 0x7d, 0x12, 0x8c, 0x72, 0x40, 
+  0x94, 0x47, 0x43, 0x37, 0x9a, 0xa1, 0x4d, 0x0e, 0x66, 0x67, 0x7d, 0x4b, 0x26, 0xa5, 0xae, 0x50, 
+  0x53, 0x99, 0xaa, 0x6f, 0x0a, 0x35, 0xb6, 0x82, 0x2c, 0x1a, 0x12, 0x2c, 0x16, 0xc6, 0x6c, 0xbc, 
+  0x8d, 0x9a, 0x22, 0x32, 0xfe, 0x22, 0x4a, 0x42, 0xf2, 0x3e, 0x50, 0x6c, 0xde, 0x4e, 0x7e, 0x6f, 
+  0x5d, 0xa0, 0x92, 0x86, 0x76, 0x64, 0x58, 0xa4, 0xb0, 0x84, 0x99, 0x8d, 0x3d, 0xb5, 0xbb, 0xc6, 
+  0xbc, 0x9d, 0x79, 0x8a, 0xaa, 0x9e, 0xc0, 0xd2, 0xd8, 0xde, 0xe0, 0xb5, 0xa7, 0xaa, 0xe9, 0xe7, 
+  0xe7, 0xcc, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x5c, 0x3d, 
+  0x55, 0x51, 0x4e, 0x36, 0x38, 0x0b, 0x15, 0x0d, 0x12, 0x11, 0x1a, 0x1e, 0x1b, 0x20, 0x26, 0x21, 
+  0x26, 0x4c, 0x26, 0x2a, 0x4c, 0x22, 0x2a, 0x2b, 0x2f, 0x2a, 0x38, 0x5c, 0x25, 0x31, 0x6c, 0x2d, 
+  0x38, 0x66, 0x66, 0x32, 0x4e, 0x7d, 0x74, 0x86, 0x55, 0x43, 0x3d, 0x40, 0x39, 0x86, 0x8c, 0x47, 
+  0x94, 0x4b, 0x35, 0x3d, 0x9a, 0x67, 0x4d, 0x0e, 0x42, 0xa1, 0x68, 0x9a, 0x50, 0x32, 0x53, 0x7a, 
+  0x37, 0xaa, 0x57, 0x42, 0xa5, 0x66, 0x58, 0x5a, 0x43, 0x3a, 0x8a, 0xb6, 0x5e, 0x0a, 0x2c, 0x82, 
+  0xb9, 0x6e, 0xa2, 0x1a, 0xae, 0x6f, 0xf9, 0x1e, 0x4a, 0x3e, 0x99, 0xe7, 0xfe, 0x6c, 0xe0, 0xa7, 
+  0x5e, 0x5d, 0x6c, 0x76, 0x6f, 0x50, 0x7c, 0x86, 0x84, 0x58, 0xa4, 0xb0, 0x99, 0x8d, 0x7e, 0x64, 
+  0xb5, 0xbb, 0xc6, 0xb5, 0x7f, 0xaa, 0xc0, 0xcc, 0xd2, 0xd8, 0x77, 0xde, 0x9e, 0x92, 0xf2, 0xe9, 
+  0xe7, 0x86, 0xd2, 0x3a, 0x12, 0x16, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x47, 0x5f, 0x2b, 0x5c, 0x43, 0x3d, 0x5c, 0x55, 0x56, 
+  0x20, 0x51, 0x3d, 0x4e, 0x38, 0x36, 0x1b, 0x0b, 0x12, 0x0d, 0x15, 0x11, 0x25, 0x1a, 0x1e, 0x0e, 
+  0x26, 0x26, 0x21, 0x35, 0x26, 0x26, 0x2a, 0x43, 0x31, 0x2a, 0x2b, 0x2d, 0x3d, 0x38, 0x4c, 0x4c, 
+  0x3a, 0x2f, 0x66, 0x6c, 0x62, 0x66, 0x74, 0x31, 0x5c, 0x7d, 0x55, 0x5e, 0x3a, 0x39, 0x86, 0x47, 
+  0x43, 0x40, 0x4e, 0x3d, 0x32, 0x7f, 0x38, 0x4a, 0x7c, 0x4b, 0x8c, 0x7a, 0x4d, 0x0a, 0x3e, 0x82, 
+  0x66, 0x50, 0x53, 0x57, 0x58, 0xa0, 0x5d, 0x5a, 0x5e, 0x37, 0x2c, 0x12, 0x6f, 0xb6, 0x96, 0x57, 
+  0x9d, 0xc4, 0xf9, 0x99, 0x42, 0x25, 0x1a, 0x77, 0xc6, 0xfe, 0x42, 0x6c, 0x58, 0x67, 0x7e, 0x76, 
+  0x64, 0x50, 0x6c, 0x76, 0x7d, 0x86, 0xaa, 0xb0, 0x84, 0xa4, 0x99, 0x8d, 0xb5, 0xbb, 0xc6, 0x68, 
+  0x92, 0xc0, 0xd2, 0xd8, 0xe0, 0xe7, 0xde, 0x3a, 0xf2, 0xe7, 0xe9, 0xcc, 0x9e, 0x22, 0xd2, 0x16, 
+  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x20, 0x51, 0x5c, 0x38, 0x4e, 0x36, 0x0b, 0x0d, 0x12, 0x15, 0x11, 0x1a, 0x1e, 0x1b, 0x12, 0x0e, 
+  0x26, 0x21, 0x26, 0x43, 0x16, 0x26, 0x26, 0x2a, 0x2a, 0x22, 0x25, 0x4c, 0x5c, 0x2c, 0x42, 0x4c, 
+  0x62, 0x6c, 0x66, 0x4e, 0x2b, 0x2f, 0x3d, 0x7d, 0x5e, 0x3a, 0x38, 0x31, 0x32, 0x74, 0x3a, 0x48, 
+  0x3d, 0x39, 0x35, 0x40, 0x43, 0x32, 0x3a, 0x47, 0x4b, 0x4d, 0x9a, 0x4a, 0x50, 0x31, 0x53, 0x58, 
+  0x57, 0x1a, 0x25, 0x7d, 0x0a, 0x9a, 0x5e, 0x4e, 0x7f, 0xb2, 0x94, 0x6f, 0x6e, 0xc4, 0xf9, 0x22, 
+  0xa0, 0x77, 0x76, 0xfe, 0x50, 0x67, 0x8a, 0xd2, 0xa7, 0x5d, 0x6c, 0x58, 0x3e, 0x79, 0x99, 0x95, 
+  0x7e, 0x76, 0x36, 0x86, 0x8d, 0x84, 0xa4, 0xb0, 0x74, 0x7c, 0x99, 0x64, 0xbb, 0xc6, 0x82, 0xae, 
+  0xcc, 0x86, 0xc0, 0xaa, 0xb5, 0x9e, 0xde, 0xe0, 0xe7, 0x9d, 0xe9, 0x92, 0xd2, 0xd8, 0xf2, 0xe7, 
+  0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4e, 0x2d, 0x62, 0x4a, 0x11, 0x5f, 0x47, 0x14, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 
+  0x3d, 0x55, 0x20, 0x51, 0x38, 0x5c, 0x36, 0x1b, 0x0d, 0x12, 0x0b, 0x15, 0x25, 0x1a, 0x0e, 0x43, 
+  0x21, 0x26, 0x31, 0x22, 0x25, 0x26, 0x3a, 0x4c, 0x1e, 0x2a, 0x1a, 0x4c, 0x5c, 0x2f, 0x26, 0x32, 
+  0x50, 0x57, 0x66, 0x4e, 0x3d, 0x31, 0x38, 0x12, 0x35, 0x5e, 0x66, 0x7d, 0x74, 0x38, 0x39, 0x31, 
+  0x16, 0x1e, 0x36, 0x86, 0x3d, 0x32, 0x2c, 0x48, 0x40, 0x5a, 0x47, 0x43, 0x2a, 0x2c, 0x4e, 0x6c, 
+  0x3a, 0x4b, 0x3a, 0x4d, 0x53, 0x50, 0x94, 0x62, 0x57, 0x0a, 0x58, 0x42, 0x5e, 0x6f, 0x6e, 0x8e, 
+  0x9a, 0x8a, 0xa0, 0x76, 0xf9, 0xc4, 0x7f, 0x22, 0x3e, 0x7d, 0xfe, 0x4a, 0x42, 0x5d, 0x64, 0x58, 
+  0x67, 0x68, 0x6c, 0x7e, 0x76, 0x92, 0x6f, 0xa4, 0xb0, 0x84, 0x99, 0x8d, 0xb5, 0xbb, 0xc6, 0xc0, 
+  0xcc, 0xd8, 0xde, 0xe7, 0x99, 0xf2, 0xe7, 0xd2, 0xd2, 0xaa, 0x9e, 0xe0, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4e, 0x62, 0x4a, 0x11, 0x2d, 0x5f, 0x47, 0x14, 0x5c, 0x43, 0x5c, 0x3d, 0x56, 
+  0x3d, 0x55, 0x2b, 0x51, 0x38, 0x36, 0x0b, 0x15, 0x0d, 0x12, 0x1b, 0x20, 0x1a, 0x12, 0x43, 0x1e, 
+  0x25, 0x35, 0x21, 0x26, 0x26, 0x0e, 0x4a, 0x3a, 0x42, 0x4c, 0x2a, 0x16, 0x3a, 0x4c, 0x5c, 0x2f, 
+  0x2b, 0x31, 0x2a, 0x26, 0x32, 0x2d, 0x6c, 0x66, 0x1e, 0x22, 0x26, 0x7d, 0x39, 0x32, 0x3a, 0x31, 
+  0x31, 0x38, 0x3d, 0x40, 0x1a, 0x4e, 0x43, 0x74, 0x47, 0x25, 0x4b, 0x4d, 0x48, 0x2a, 0x57, 0x3e, 
+  0x3a, 0x50, 0x53, 0x76, 0x5e, 0x74, 0x5a, 0x57, 0x67, 0x58, 0x37, 0x0a, 0x5e, 0x8c, 0x62, 0x7d, 
+  0x6e, 0x8e, 0x2c, 0xf9, 0xc4, 0x7d, 0x4e, 0x3e, 0xfe, 0x58, 0x36, 0x5d, 0x6c, 0x6c, 0x76, 0x42, 
+  0x86, 0x99, 0x8d, 0x50, 0xa4, 0xb0, 0x84, 0x7f, 0xaa, 0x9e, 0xb5, 0xbb, 0xc6, 0x8a, 0xc0, 0xd2, 
+  0xde, 0xe7, 0xde, 0x82, 0xd8, 0x86, 0x7e, 0x6f, 0xcc, 0xd2, 0xe0, 0xf2, 0x92, 0xe7, 0x64, 0xe9, 
+  0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x11, 0x47, 0x5f, 0x14, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 
+  0x55, 0x51, 0x5c, 0x36, 0x4e, 0x38, 0x25, 0x0b, 0x0d, 0x12, 0x15, 0x1e, 0x25, 0x1b, 0x1a, 0x20, 
+  0x12, 0x22, 0x35, 0x3a, 0x2a, 0x2a, 0x21, 0x26, 0x0e, 0x42, 0x4c, 0x26, 0x26, 0x2a, 0x57, 0x5c, 
+  0x2f, 0x43, 0x4e, 0x66, 0x31, 0x2b, 0x32, 0x31, 0x2d, 0x2c, 0x37, 0x74, 0x39, 0x38, 0x3d, 0x32, 
+  0x40, 0x36, 0x4e, 0x38, 0x31, 0x16, 0x43, 0x47, 0x48, 0x4c, 0x5d, 0x4d, 0x4b, 0x7d, 0x6c, 0x67, 
+  0x9a, 0x71, 0x5e, 0x0a, 0x50, 0x7d, 0x66, 0x53, 0x7e, 0x7c, 0x57, 0x7f, 0x58, 0x68, 0x86, 0x5e, 
+  0x95, 0x94, 0x86, 0x6e, 0x8e, 0x2c, 0x76, 0xf9, 0xc4, 0x8a, 0x74, 0x8c, 0x6f, 0x1a, 0x4a, 0x42, 
+  0xfe, 0x3a, 0x50, 0x3d, 0xa1, 0x58, 0x3e, 0x72, 0xb5, 0x7d, 0x76, 0x6c, 0x64, 0xaa, 0x84, 0x8d, 
+  0xa4, 0x62, 0xa6, 0x9e, 0x99, 0x86, 0x7e, 0xb0, 0xb5, 0xbb, 0xc6, 0x6c, 0xc0, 0x92, 0xcc, 0xd2, 
+  0xd8, 0xde, 0xe0, 0x5a, 0xe9, 0xe7, 0xe7, 0xf2, 0xd2, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x20, 0x51, 0x38, 0x4e, 0x5c, 0x36, 0x1b, 0x0b, 0x0d, 0x12, 0x3d, 0x12, 0x15, 0x1e, 0x3a, 0x1a, 
+  0x1e, 0x32, 0x35, 0x3a, 0x2a, 0x21, 0x11, 0x43, 0x4c, 0x26, 0x2a, 0x2a, 0x4c, 0x57, 0x4e, 0x2f, 
+  0x26, 0x0e, 0x31, 0x66, 0x32, 0x22, 0x39, 0x25, 0x25, 0x26, 0x31, 0x3d, 0x38, 0x42, 0x3e, 0x2c, 
+  0x43, 0x40, 0x76, 0x48, 0x5c, 0x16, 0x47, 0x71, 0x4e, 0x6c, 0x4b, 0x72, 0x74, 0x4d, 0x5a, 0x86, 
+  0x8c, 0x7d, 0x22, 0x0a, 0x50, 0x95, 0x53, 0x94, 0x68, 0x77, 0x66, 0x87, 0x57, 0x9a, 0x58, 0xa1, 
+  0x5e, 0x2c, 0x6c, 0xb9, 0xc3, 0x9d, 0xa7, 0x99, 0xbc, 0xf9, 0xc6, 0x8d, 0xb5, 0x4a, 0x3e, 0x8e, 
+  0xfe, 0xfe, 0xa5, 0x50, 0x42, 0xb6, 0xaa, 0x86, 0x58, 0x6c, 0x7e, 0x76, 0x5d, 0x64, 0x6e, 0xf2, 
+  0x8d, 0x92, 0x84, 0xa4, 0xb0, 0xae, 0xaa, 0x9e, 0xb5, 0xbb, 0xc6, 0x99, 0x7d, 0xe0, 0xc0, 0xcc, 
+  0xd8, 0xe7, 0xa0, 0x82, 0x6f, 0xd2, 0xe7, 0xde, 0x86, 0xd2, 0xe9, 0x1a, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x20, 0x51, 0x36, 0x4e, 0x38, 0x1b, 0x12, 0x0b, 0x0e, 0x5c, 0x3d, 0x12, 0x22, 0x15, 0x11, 0x0d, 
+  0x25, 0x43, 0x35, 0x3a, 0x26, 0x26, 0x1a, 0x31, 0x26, 0x5d, 0x42, 0x2a, 0x4c, 0x5c, 0x2f, 0x31, 
+  0x31, 0x38, 0x32, 0x2a, 0x39, 0x66, 0x55, 0x3d, 0x40, 0x32, 0x43, 0x6c, 0x4c, 0x3a, 0x47, 0x71, 
+  0x74, 0x57, 0x2c, 0x16, 0x67, 0x4b, 0x7d, 0x86, 0x7d, 0x22, 0x48, 0x4d, 0x8a, 0x9a, 0x8c, 0x82, 
+  0xa1, 0x94, 0x68, 0x53, 0xa5, 0x9a, 0x50, 0x57, 0x37, 0x58, 0xae, 0xaa, 0x0a, 0x9d, 0xa7, 0x2c, 
+  0xbc, 0xde, 0xb6, 0x77, 0xbe, 0xf9, 0xb5, 0xa6, 0x1a, 0x4a, 0x42, 0xfe, 0xf0, 0xa0, 0x6c, 0x4e, 
+  0xc6, 0xea, 0xfe, 0x7e, 0x6f, 0x64, 0x50, 0xe2, 0xc0, 0x8d, 0x76, 0x58, 0x3e, 0xa4, 0xb0, 0x84, 
+  0xe9, 0xc8, 0x9e, 0x99, 0xb5, 0xbb, 0xc6, 0xde, 0xcc, 0xd2, 0xde, 0xe0, 0x7a, 0xd8, 0xe7, 0xd2, 
+  0xf2, 0xe7, 0xaa, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x5c, 0x56, 0x55, 
+  0x20, 0x51, 0x38, 0x4e, 0x36, 0x25, 0x12, 0x0b, 0x0d, 0x0e, 0x12, 0x1a, 0x15, 0x11, 0x1e, 0x22, 
+  0x1a, 0x32, 0x3a, 0x31, 0x21, 0x26, 0x26, 0x1b, 0x43, 0x2a, 0x2f, 0x26, 0x3d, 0x31, 0x31, 0x32, 
+  0x38, 0x39, 0x5e, 0x3d, 0x6c, 0x40, 0x86, 0x4c, 0x4e, 0x43, 0x66, 0x74, 0x66, 0x5c, 0x4c, 0x26, 
+  0x2b, 0x55, 0x4b, 0x47, 0x50, 0x9a, 0x35, 0x25, 0xa1, 0x8c, 0x7d, 0x57, 0x4e, 0x9a, 0x94, 0x50, 
+  0x1e, 0xa5, 0x95, 0x4d, 0x9d, 0xa7, 0xae, 0x4a, 0x0a, 0x99, 0xb6, 0xc6, 0xbc, 0xaa, 0x2c, 0xa0, 
+  0x68, 0xee, 0xa6, 0x16, 0xfe, 0x3a, 0x22, 0x42, 0xaa, 0x86, 0x5d, 0x64, 0x58, 0x48, 0xde, 0xf9, 
+  0x62, 0x84, 0x6c, 0x76, 0xcc, 0x9e, 0x8d, 0xa4, 0xb0, 0xc6, 0x99, 0x86, 0x3e, 0xb5, 0xbb, 0xc0, 
+  0xaa, 0x92, 0x7e, 0xd2, 0xd8, 0xde, 0xe7, 0x6f, 0xe0, 0xe9, 0xe7, 0xf2, 0xd2, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x2d, 0x62, 0x14, 0x5f, 0x47, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x3d, 0x55, 
+  0x5c, 0x51, 0x38, 0x4e, 0x36, 0x0d, 0x26, 0x12, 0x0e, 0x22, 0x15, 0x11, 0x0b, 0x32, 0x1a, 0x25, 
+  0x43, 0x26, 0x21, 0x1e, 0x25, 0x26, 0x26, 0x2a, 0x2a, 0x20, 0x2b, 0x2f, 0x2d, 0x1b, 0x32, 0x38, 
+  0x31, 0x3d, 0x12, 0x39, 0x55, 0x66, 0x40, 0x4e, 0x72, 0x48, 0x3d, 0x4e, 0x7c, 0x47, 0x43, 0x76, 
+  0x94, 0x86, 0x7d, 0x66, 0x86, 0x8c, 0x74, 0x0a, 0xa5, 0xa1, 0x9a, 0x6c, 0x95, 0xae, 0xaa, 0x9a, 
+  0x4c, 0xb6, 0xbc, 0x5c, 0x3a, 0xca, 0xc8, 0x62, 0x3e, 0x2c, 0x2a, 0x7d, 0xa7, 0xc6, 0xea, 0xf9, 
+  0xf0, 0x1e, 0x1a, 0x4a, 0xfe, 0x50, 0x58, 0x42, 0x5d, 0x64, 0x76, 0x6c, 0x38, 0x8d, 0x86, 0x99, 
+  0x84, 0xa4, 0xb0, 0x9e, 0x6f, 0xbb, 0xc6, 0xa6, 0xcc, 0xc0, 0xd8, 0xe7, 0xe7, 0xaa, 0xde, 0xd2, 
+  0xde, 0xd2, 0xb5, 0xe9, 0xf2, 0xe0, 0x92, 0x7e, 0x22, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4a, 0x62, 0x14, 0x2d, 0x47, 0x5f, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 0x5c, 0x3d, 
+  0x55, 0x20, 0x51, 0x38, 0x4e, 0x36, 0x0b, 0x15, 0x0d, 0x12, 0x0e, 0x22, 0x11, 0x26, 0x26, 0x25, 
+  0x1a, 0x1e, 0x1b, 0x21, 0x35, 0x25, 0x16, 0x26, 0x2b, 0x2a, 0x12, 0x26, 0x2f, 0x4c, 0x31, 0x31, 
+  0x32, 0x6c, 0x39, 0x3a, 0x66, 0x42, 0x3e, 0x31, 0x43, 0x3d, 0x55, 0x40, 0x2d, 0x48, 0x7c, 0x74, 
+  0x43, 0x2a, 0x38, 0x7d, 0x76, 0x8c, 0x7d, 0x9a, 0x94, 0x71, 0x9d, 0x7d, 0x9a, 0x86, 0x66, 0xa1, 
+  0xa5, 0xa7, 0x3d, 0x86, 0xaa, 0x22, 0xae, 0x4c, 0xb6, 0x1a, 0x0a, 0xbc, 0x3a, 0x2c, 0xca, 0xee, 
+  0x32, 0xea, 0xfe, 0x4a, 0x42, 0x5c, 0xc6, 0x50, 0x7e, 0xb5, 0x5d, 0x58, 0x62, 0x6f, 0x6c, 0x8d, 
+  0x99, 0x84, 0x76, 0xa4, 0xb0, 0xde, 0xaa, 0x9e, 0x64, 0xb5, 0xbb, 0xc6, 0xd2, 0xc0, 0xcc, 0xe7, 
+  0xde, 0xd8, 0xe0, 0xd2, 0x86, 0xe7, 0xe9, 0xf2, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+
+  0x02, 0x31, 0x66, 0x4e, 0x2d, 0x62, 0x4a, 0x11, 0x5f, 0x47, 0x14, 0x2b, 0x5c, 0x43, 0x3d, 0x56, 
+  0x3d, 0x55, 0x51, 0x5c, 0x38, 0x36, 0x1b, 0x12, 0x0e, 0x0d, 0x22, 0x15, 0x1a, 0x25, 0x26, 0x20, 
+  0x43, 0x2a, 0x26, 0x21, 0x2a, 0x1e, 0x1a, 0x26, 0x26, 0x3a, 0x2c, 0x16, 0x2f, 0x38, 0x35, 0x32, 
+  0x32, 0x38, 0x12, 0x39, 0x4c, 0x5c, 0x74, 0x3d, 0x40, 0x4e, 0x36, 0x55, 0x43, 0x62, 0x66, 0x25, 
+  0x6c, 0x66, 0x7d, 0x47, 0x4c, 0x86, 0x8c, 0x4d, 0x4b, 0x0b, 0x94, 0xa1, 0x7c, 0x0a, 0x3d, 0x9a, 
+  0xa5, 0x50, 0x42, 0xae, 0xaa, 0x31, 0x9a, 0x53, 0x5d, 0x57, 0xb6, 0xc6, 0xbe, 0xbc, 0xea, 0x95, 
+  0x2c, 0xfe, 0x1e, 0x4a, 0x3e, 0xee, 0x7e, 0x50, 0x42, 0x6c, 0x6f, 0xc6, 0x7e, 0xb5, 0x8d, 0x86, 
+  0x64, 0xaa, 0xb0, 0x84, 0xde, 0xb5, 0xa4, 0x9e, 0x99, 0x76, 0x58, 0xbb, 0xc0, 0xd2, 0xd8, 0xe0, 
+  0xcc, 0xde, 0xe7, 0xe9, 0xf2, 0xe7, 0x92, 0xd2, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+
+};
+
+unsigned char linux_logo[]  = {
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x21, 0x21, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x23, 0x21, 0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x27, 0x24, 
+  0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x27, 0x21, 0x28, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x27, 0x27, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x27, 0x27, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x24, 0x24, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x28, 0x2b, 0x2c, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x28, 0x2d, 0x2e, 0x2e, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x28, 0x2d, 0x2e, 0x2e, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x28, 0x2f, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 
+  0x32, 0x30, 0x30, 0x2c, 0x30, 0x2a, 0x2c, 0x2a, 0x2c, 0x27, 0x27, 0x2a, 0x2a, 0x27, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x2a, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x33, 0x34, 
+  0x32, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x2e, 0x2a, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x34, 0x33, 0x33, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x27, 0x24, 0x24, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x33, 0x34, 
+  0x32, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x2e, 0x2a, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x34, 0x33, 0x33, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x27, 0x24, 0x24, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x39, 0x39, 0x39, 0x37, 0x37, 0x37, 0x35, 0x34, 
+  0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x34, 0x34, 0x32, 
+  0x34, 0x32, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0x2e, 0x2c, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x23, 
+  0x33, 0x28, 0x37, 0x28, 0x3b, 0x3b, 0x25, 0x3b, 0x3b, 0x3c, 0x3a, 0x3a, 0x39, 0x3a, 0x39, 0x38, 
+  0x3d, 0x33, 0x22, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x23, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2a, 0x2e, 0x2e, 0x2a, 0x2a, 0x27, 0x2a, 0x3e, 0x37, 
+  0x25, 0x25, 0x3b, 0x31, 0x31, 0x31, 0x31, 0x31, 0x36, 0x3f, 0x3d, 0x40, 0x3c, 0x41, 0x3a, 0x3a, 
+  0x39, 0x3a, 0x37, 0x34, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x23, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2a, 0x2e, 0x2e, 0x2a, 0x2a, 0x27, 0x2a, 0x3e, 0x37, 
+  0x25, 0x25, 0x3b, 0x31, 0x31, 0x31, 0x31, 0x31, 0x36, 0x3f, 0x3d, 0x40, 0x3c, 0x41, 0x3a, 0x3a, 
+  0x39, 0x3a, 0x37, 0x34, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x2b, 0x29, 0x23, 0x23, 0x34, 
+  0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x29, 0x37, 0x3b, 0x31, 
+  0x31, 0x42, 0x43, 0x44, 0x43, 0x44, 0x43, 0x43, 0x43, 0x31, 0x31, 0x31, 0x36, 0x36, 0x3c, 0x28, 
+  0x39, 0x3a, 0x39, 0x37, 0x45, 0x24, 0x24, 0x24, 0x27, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2b, 0x29, 0x29, 0x23, 0x23, 0x34, 
+  0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2b, 0x28, 0x36, 0x31, 0x44, 
+  0x42, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x43, 0x43, 0x43, 0x31, 0x36, 0x40, 
+  0x3c, 0x47, 0x3a, 0x39, 0x3a, 0x3d, 0x24, 0x24, 0x24, 0x27, 0x27, 0x24, 0x27, 0x2a, 0x27, 0x27, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x2b, 0x29, 0x29, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2c, 0x2c, 0x3d, 0x25, 0x31, 0x43, 0x21, 0x46, 
+  0x46, 0x46, 0x48, 0x46, 0x49, 0x46, 0x48, 0x4a, 0x4b, 0x35, 0x4c, 0x4d, 0x21, 0x43, 0x43, 0x36, 
+  0x4e, 0x4f, 0x37, 0x47, 0x39, 0x3a, 0x38, 0x23, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x2b, 0x29, 0x29, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2c, 0x2c, 0x3d, 0x25, 0x31, 0x43, 0x21, 0x46, 
+  0x46, 0x46, 0x48, 0x46, 0x49, 0x46, 0x48, 0x4a, 0x4b, 0x35, 0x4c, 0x4d, 0x21, 0x43, 0x43, 0x36, 
+  0x4e, 0x4f, 0x37, 0x47, 0x39, 0x3a, 0x38, 0x23, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2f, 0x50, 0x2d, 0x29, 0x29, 0x29, 0x23, 0x34, 
+  0x34, 0x34, 0x34, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x51, 0x4f, 0x52, 0x43, 0x46, 0x53, 0x48, 
+  0x54, 0x54, 0x54, 0x55, 0x54, 0x48, 0x56, 0x51, 0x55, 0x29, 0x35, 0x33, 0x57, 0x4d, 0x4c, 0x31, 
+  0x58, 0x3f, 0x4f, 0x4f, 0x3a, 0x47, 0x47, 0x3a, 0x27, 0x27, 0x27, 0x24, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x33, 0x2f, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x23, 0x23, 
+  0x34, 0x32, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x29, 0x4f, 0x40, 0x43, 0x48, 0x48, 0x35, 0x59, 
+  0x54, 0x54, 0x5a, 0x5a, 0x32, 0x5b, 0x32, 0x5c, 0x5b, 0x5d, 0x29, 0x5e, 0x48, 0x35, 0x57, 0x57, 
+  0x4d, 0x58, 0x40, 0x5f, 0x37, 0x60, 0x47, 0x3a, 0x3d, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x33, 0x2f, 0x50, 0x2d, 0x2b, 0x29, 0x29, 0x23, 
+  0x34, 0x34, 0x34, 0x34, 0x32, 0x30, 0x30, 0x30, 0x3c, 0x61, 0x46, 0x62, 0x35, 0x2b, 0x32, 0x34, 
+  0x5c, 0x5a, 0x56, 0x5a, 0x34, 0x5a, 0x5a, 0x5a, 0x5c, 0x5c, 0x5c, 0x59, 0x51, 0x29, 0x35, 0x63, 
+  0x57, 0x58, 0x58, 0x4e, 0x4f, 0x3c, 0x3a, 0x47, 0x39, 0x33, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x33, 0x2f, 0x50, 0x2d, 0x2b, 0x29, 0x29, 0x23, 
+  0x34, 0x34, 0x34, 0x34, 0x32, 0x30, 0x30, 0x30, 0x3c, 0x61, 0x46, 0x62, 0x35, 0x2b, 0x32, 0x34, 
+  0x5c, 0x5a, 0x56, 0x5a, 0x34, 0x5a, 0x5a, 0x5a, 0x5c, 0x5c, 0x5c, 0x59, 0x51, 0x29, 0x35, 0x63, 
+  0x57, 0x58, 0x58, 0x4e, 0x4f, 0x3c, 0x3a, 0x47, 0x39, 0x33, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x21, 0x33, 0x33, 0x2f, 0x50, 0x2b, 0x2b, 0x29, 0x29, 0x23, 
+  0x34, 0x34, 0x32, 0x34, 0x32, 0x32, 0x30, 0x3d, 0x58, 0x57, 0x64, 0x59, 0x65, 0x56, 0x49, 0x66, 
+  0x67, 0x67, 0x68, 0x69, 0x67, 0x67, 0x67, 0x67, 0x67, 0x5c, 0x5c, 0x56, 0x32, 0x5d, 0x29, 0x48, 
+  0x35, 0x6a, 0x57, 0x58, 0x40, 0x4f, 0x3a, 0x47, 0x39, 0x39, 0x23, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x26, 0x21, 0x33, 0x2f, 0x2d, 0x2d, 0x2b, 0x29, 0x29, 0x29, 
+  0x23, 0x34, 0x34, 0x32, 0x32, 0x32, 0x2b, 0x3f, 0x58, 0x6b, 0x59, 0x6c, 0x6c, 0x32, 0x67, 0x68, 
+  0x67, 0x69, 0x69, 0x68, 0x6d, 0x69, 0x68, 0x68, 0x67, 0x69, 0x6c, 0x6e, 0x6c, 0x5b, 0x54, 0x5d, 
+  0x6f, 0x46, 0x26, 0x26, 0x58, 0x3f, 0x3c, 0x3a, 0x3a, 0x3a, 0x3d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x26, 0x33, 0x33, 0x2f, 0x2d, 0x2d, 0x2b, 0x29, 0x29, 0x29, 
+  0x23, 0x23, 0x34, 0x34, 0x32, 0x32, 0x45, 0x57, 0x64, 0x59, 0x65, 0x6e, 0x6c, 0x6e, 0x68, 0x27, 
+  0x70, 0x69, 0x6d, 0x6d, 0x6d, 0x6d, 0x69, 0x69, 0x69, 0x69, 0x5e, 0x71, 0x6e, 0x56, 0x5c, 0x5d, 
+  0x54, 0x2d, 0x63, 0x57, 0x58, 0x3f, 0x3f, 0x3c, 0x39, 0x39, 0x3a, 0x3b, 0x26, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x52, 0x20, 0x20, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x26, 0x33, 0x33, 0x2f, 0x2d, 0x2d, 0x2b, 0x29, 0x29, 0x29, 
+  0x23, 0x23, 0x34, 0x34, 0x32, 0x32, 0x45, 0x57, 0x64, 0x59, 0x65, 0x6e, 0x6c, 0x6e, 0x68, 0x27, 
+  0x70, 0x69, 0x6d, 0x6d, 0x6d, 0x6d, 0x69, 0x69, 0x69, 0x69, 0x5e, 0x71, 0x6e, 0x56, 0x5c, 0x5d, 
+  0x54, 0x2d, 0x63, 0x57, 0x58, 0x3f, 0x3f, 0x3c, 0x39, 0x39, 0x3a, 0x3b, 0x26, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x52, 0x20, 0x20, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2d, 0x29, 0x29, 0x23, 
+  0x29, 0x23, 0x23, 0x34, 0x34, 0x32, 0x3f, 0x4d, 0x59, 0x65, 0x6e, 0x6e, 0x71, 0x71, 0x72, 0x73, 
+  0x74, 0x27, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x69, 0x69, 0x6d, 0x68, 0x68, 0x5c, 0x5a, 0x54, 
+  0x54, 0x54, 0x2f, 0x4d, 0x4d, 0x58, 0x40, 0x4f, 0x41, 0x3a, 0x39, 0x76, 0x20, 0x20, 0x28, 0x52, 
+  0x2c, 0x2e, 0x52, 0x20, 0x47, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x52, 0x35, 0x33, 0x33, 0x33, 0x2d, 0x2d, 0x2b, 0x2b, 0x23, 
+  0x29, 0x23, 0x34, 0x34, 0x34, 0x6a, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x71, 0x77, 0x73, 0x77, 0x74, 
+  0x78, 0x74, 0x79, 0x79, 0x7a, 0x75, 0x75, 0x79, 0x75, 0x6d, 0x6d, 0x69, 0x69, 0x67, 0x67, 0x5a, 
+  0x7b, 0x5d, 0x56, 0x6b, 0x4d, 0x4d, 0x58, 0x4f, 0x38, 0x41, 0x3a, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x52, 0x52, 0x47, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x21, 0x35, 0x2f, 0x2d, 0x50, 0x2d, 0x29, 0x29, 
+  0x29, 0x23, 0x23, 0x34, 0x34, 0x4c, 0x57, 0x59, 0x65, 0x6e, 0x71, 0x73, 0x73, 0x74, 0x73, 0x74, 
+  0x7c, 0x7c, 0x72, 0x7a, 0x7a, 0x7a, 0x7a, 0x79, 0x75, 0x75, 0x75, 0x69, 0x69, 0x68, 0x67, 0x5a, 
+  0x5a, 0x54, 0x56, 0x64, 0x6b, 0x61, 0x58, 0x4e, 0x3c, 0x3a, 0x47, 0x3a, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x47, 0x47, 0x60, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x21, 0x35, 0x2f, 0x2d, 0x50, 0x2d, 0x29, 0x29, 
+  0x29, 0x23, 0x23, 0x34, 0x34, 0x4c, 0x57, 0x59, 0x65, 0x6e, 0x71, 0x73, 0x73, 0x74, 0x73, 0x74, 
+  0x7c, 0x7c, 0x72, 0x7a, 0x7a, 0x7a, 0x7a, 0x79, 0x75, 0x75, 0x75, 0x69, 0x69, 0x68, 0x67, 0x5a, 
+  0x5a, 0x54, 0x56, 0x64, 0x6b, 0x61, 0x58, 0x4e, 0x3c, 0x3a, 0x47, 0x3a, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x47, 0x47, 0x60, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x26, 0x33, 0x35, 0x33, 0x2f, 0x2d, 0x2b, 0x29, 0x29, 
+  0x23, 0x29, 0x23, 0x34, 0x23, 0x4f, 0x64, 0x65, 0x6e, 0x6e, 0x71, 0x77, 0x73, 0x7c, 0x7c, 0x7c, 
+  0x7c, 0x78, 0x7c, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x75, 0x79, 0x6d, 0x69, 0x69, 0x68, 0x5a, 
+  0x5a, 0x54, 0x59, 0x64, 0x63, 0x7d, 0x58, 0x4e, 0x4f, 0x3a, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x47, 0x60, 0x47, 0x47, 0x60, 0x47, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x21, 0x33, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2b, 
+  0x29, 0x23, 0x29, 0x23, 0x50, 0x4d, 0x6b, 0x6c, 0x6c, 0x71, 0x73, 0x74, 0x74, 0x7c, 0x7c, 0x7c, 
+  0x7e, 0x7e, 0x7f, 0x80, 0x81, 0x81, 0x81, 0x82, 0x7a, 0x7a, 0x75, 0x75, 0x6d, 0x69, 0x68, 0x67, 
+  0x5a, 0x32, 0x65, 0x59, 0x6b, 0x57, 0x61, 0x45, 0x4f, 0x3c, 0x3a, 0x3a, 0x76, 0x20, 0x20, 0x20, 
+  0x47, 0x60, 0x60, 0xb7, 0x60, 0x60, 0x60, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x52, 0x21, 0x21, 0x35, 0x33, 0x2d, 0x2d, 0x2b, 0x2b, 
+  0x2b, 0x23, 0x29, 0x23, 0x3d, 0x4d, 0x64, 0x6c, 0x6e, 0x71, 0x73, 0x73, 0x7c, 0x7c, 0x7e, 0x7e, 
+  0x7e, 0x7e, 0x83, 0x83, 0x81, 0x84, 0x81, 0x81, 0x7a, 0x7a, 0x7a, 0x75, 0x75, 0x6d, 0x69, 0x69, 
+  0x67, 0x5c, 0x6c, 0x6b, 0x6b, 0x64, 0x4d, 0x85, 0x3f, 0x5f, 0x47, 0x3a, 0x47, 0x20, 0x76, 0x4f, 
+  0x60, 0x60, 0x60, 0x60, 0x47, 0x60, 0x47, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x52, 0x21, 0x21, 0x35, 0x33, 0x2d, 0x2d, 0x2b, 0x2b, 
+  0x2b, 0x23, 0x29, 0x23, 0x3d, 0x4d, 0x64, 0x6c, 0x6e, 0x71, 0x73, 0x73, 0x7c, 0x7c, 0x7e, 0x7e, 
+  0x7e, 0x7e, 0x83, 0x83, 0x81, 0x84, 0x81, 0x81, 0x7a, 0x7a, 0x7a, 0x75, 0x75, 0x6d, 0x69, 0x69, 
+  0x67, 0x5c, 0x6c, 0x6b, 0x6b, 0x64, 0x4d, 0x85, 0x3f, 0x5f, 0x47, 0x3a, 0x47, 0x20, 0x76, 0x4f, 
+  0x60, 0x60, 0x60, 0x60, 0x47, 0x60, 0x47, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x26, 0x21, 0x33, 0x2f, 0x2f, 0x50, 0x2d, 0x2b, 
+  0x29, 0x2b, 0x33, 0x40, 0x60, 0x57, 0x59, 0x6e, 0x71, 0x73, 0x73, 0x7c, 0x7c, 0x86, 0x86, 0x83, 
+  0x83, 0x83, 0x87, 0x88, 0x89, 0x8a, 0x89, 0x84, 0x81, 0x82, 0x7a, 0x79, 0x75, 0x6d, 0x6d, 0x68, 
+  0x5a, 0x5c, 0x65, 0x59, 0x64, 0x64, 0x57, 0x8b, 0x3f, 0x3c, 0x3a, 0x47, 0x3a, 0x8c, 0x4f, 0x8c, 
+  0xb7, 0x47, 0x60, 0x60, 0x60, 0x60, 0x60, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x26, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2d, 0x2b, 
+  0x29, 0x21, 0x20, 0x20, 0x60, 0x57, 0x59, 0x6e, 0x6e, 0x77, 0x73, 0x8d, 0x7c, 0x7e, 0x86, 0x83, 
+  0x83, 0x80, 0x87, 0x8e, 0x8f, 0x8f, 0x8f, 0x8a, 0x84, 0x89, 0x82, 0x7a, 0x75, 0x75, 0x69, 0x69, 
+  0x67, 0x27, 0x6c, 0x65, 0x59, 0x63, 0x57, 0x58, 0x3f, 0x4f, 0x3a, 0x60, 0x8b, 0x90, 0x4f, 0x4f, 
+  0x3c, 0x47, 0x47, 0xb7, 0x47, 0x60, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x21, 0x33, 0x33, 0x2f, 0x2f, 0x50, 0x2b, 
+  0x37, 0x20, 0x20, 0x20, 0x3c, 0x63, 0x59, 0x6c, 0x71, 0x73, 0x8d, 0x7c, 0x7c, 0x7e, 0x7e, 0x7e, 
+  0x87, 0x91, 0x92, 0x8f, 0x8f, 0x93, 0x93, 0x8f, 0x8a, 0x81, 0x79, 0x7a, 0x79, 0x75, 0x75, 0x67, 
+  0x72, 0x5a, 0x5e, 0x65, 0x6b, 0x64, 0x57, 0x58, 0x40, 0x4f, 0x8b, 0x94, 0x8b, 0x95, 0x4f, 0x8c, 
+  0xb7, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x21, 0x33, 0x33, 0x2f, 0x2f, 0x50, 0x2b, 
+  0x37, 0x20, 0x20, 0x20, 0x3c, 0x63, 0x59, 0x6c, 0x71, 0x73, 0x8d, 0x7c, 0x7c, 0x7e, 0x7e, 0x7e, 
+  0x87, 0x91, 0x92, 0x8f, 0x8f, 0x93, 0x93, 0x8f, 0x8a, 0x81, 0x79, 0x7a, 0x79, 0x75, 0x75, 0x67, 
+  0x72, 0x5a, 0x5e, 0x65, 0x6b, 0x64, 0x57, 0x58, 0x40, 0x4f, 0x8b, 0x94, 0x8b, 0x95, 0x4f, 0x8c, 
+  0xb7, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x26, 0x21, 0x35, 0x35, 0x33, 0x2f, 0x2d, 0x38, 
+  0x20, 0x20, 0x20, 0x20, 0x47, 0x57, 0x59, 0x6e, 0x77, 0x73, 0x74, 0x7c, 0x7c, 0x7e, 0x83, 0x83, 
+  0x83, 0x87, 0x8e, 0x8f, 0x96, 0x93, 0x93, 0x93, 0x8a, 0x84, 0x7a, 0x7a, 0x79, 0x75, 0x24, 0x71, 
+  0x71, 0x5c, 0x65, 0x65, 0x59, 0x64, 0x57, 0x64, 0x7d, 0x97, 0x98, 0x94, 0x8b, 0x95, 0x4f, 0x4f, 
+  0x8c, 0x60, 0x47, 0x60, 0x47, 0xb7, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x52, 0x26, 0x21, 0x33, 0x33, 0x2f, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x60, 0x57, 0x59, 0x6c, 0x71, 0x77, 0x73, 0x7c, 0x7c, 0x7e, 0x83, 0x7f, 
+  0x83, 0x91, 0x91, 0x8e, 0x93, 0x93, 0x93, 0x8f, 0x99, 0x84, 0x81, 0x7a, 0x79, 0x72, 0x73, 0x73, 
+  0x71, 0x6e, 0x6c, 0x65, 0x9a, 0x9b, 0x9b, 0x62, 0x97, 0x7d, 0x7d, 0x98, 0x8b, 0x95, 0x4f, 0x8c, 
+  0x3c, 0x60, 0xb7, 0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x52, 0x21, 0x33, 0x56, 0x62, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x59, 0x6e, 0x71, 0x77, 0x8d, 0x8d, 0x7c, 0x7e, 0x7e, 0x87, 
+  0x83, 0x83, 0x91, 0x8e, 0x8f, 0x93, 0x8f, 0x8a, 0x89, 0x84, 0x7a, 0x7a, 0x7a, 0x73, 0x77, 0x71, 
+  0x71, 0x6e, 0x6e, 0x9c, 0x9c, 0x9d, 0x9b, 0x62, 0x97, 0x97, 0x98, 0x94, 0x8b, 0x8b, 0x90, 0x8c, 
+  0x8c, 0x60, 0x47, 0x60, 0x47, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x52, 0x21, 0x33, 0x56, 0x62, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x59, 0x6e, 0x71, 0x77, 0x8d, 0x8d, 0x7c, 0x7e, 0x7e, 0x87, 
+  0x83, 0x83, 0x91, 0x8e, 0x8f, 0x93, 0x8f, 0x8a, 0x89, 0x84, 0x7a, 0x7a, 0x7a, 0x73, 0x77, 0x71, 
+  0x71, 0x6e, 0x6e, 0x9c, 0x9c, 0x9d, 0x9b, 0x62, 0x97, 0x97, 0x98, 0x94, 0x8b, 0x8b, 0x90, 0x8c, 
+  0x8c, 0x60, 0x47, 0x60, 0x47, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x52, 0x21, 0x21, 0x31, 0x9e, 0x9f, 0x9d, 
+  0x8c, 0x20, 0x20, 0x20, 0x20, 0x58, 0x6b, 0x6c, 0x71, 0x73, 0x73, 0xa0, 0x7c, 0x7e, 0x7f, 0x83, 
+  0x91, 0x91, 0x91, 0xa1, 0x8e, 0x8e, 0x8e, 0x8e, 0x84, 0x81, 0x81, 0x7a, 0x79, 0x72, 0x73, 0x8d, 
+  0xa2, 0xa2, 0xa3, 0x9c, 0x9c, 0x9c, 0xa4, 0xa4, 0x97, 0x7d, 0x7d, 0x98, 0x94, 0x95, 0x4f, 0x4f, 
+  0x8c, 0x3c, 0x60, 0x60, 0x60, 0x47, 0x60, 0x60, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 0x26, 0x26, 0x21, 0x20, 0xa4, 0x9e, 0xa5, 
+  0xa5, 0xa6, 0xa3, 0x97, 0x90, 0xa7, 0x6b, 0x65, 0x6e, 0x77, 0x74, 0x78, 0x7c, 0x7c, 0x7e, 0x83, 
+  0x7e, 0x83, 0x83, 0x91, 0x87, 0x80, 0x91, 0x91, 0x78, 0x72, 0x24, 0x72, 0xa8, 0xa6, 0xa5, 0xa9, 
+  0x9f, 0xa2, 0xa2, 0x9c, 0x9c, 0x9c, 0x9d, 0xa4, 0x97, 0xaa, 0x7d, 0x8b, 0x8b, 0x8b, 0x4f, 0x4f, 
+  0x8c, 0xb7, 0x47, 0xb7, 0x60, 0x47, 0x60, 0x60, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x52, 0x26, 0x38, 0x20, 0x94, 0xa2, 0x9f, 
+  0xab, 0xa6, 0xac, 0xad, 0xae, 0xae, 0xaf, 0xa9, 0x9f, 0x83, 0xa6, 0x86, 0xa0, 0x7e, 0x7e, 0x7e, 
+  0x83, 0x83, 0x87, 0x91, 0xb0, 0xb1, 0xb2, 0xb1, 0xb1, 0xaf, 0xb1, 0xae, 0xa6, 0xa5, 0xa5, 0x9f, 
+  0xa2, 0xa2, 0xa3, 0xa3, 0x9c, 0x9d, 0x9b, 0xa4, 0x62, 0x97, 0x98, 0x7d, 0x8b, 0x95, 0x95, 0x4f, 
+  0x8c, 0x3c, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x52, 0x26, 0x38, 0x20, 0x94, 0xa2, 0x9f, 
+  0xab, 0xa6, 0xac, 0xad, 0xae, 0xae, 0xaf, 0xa9, 0x9f, 0x83, 0xa6, 0x86, 0xa0, 0x7e, 0x7e, 0x7e, 
+  0x83, 0x83, 0x87, 0x91, 0xb0, 0xb1, 0xb2, 0xb1, 0xb1, 0xaf, 0xb1, 0xae, 0xa6, 0xa5, 0xa5, 0x9f, 
+  0xa2, 0xa2, 0xa3, 0xa3, 0x9c, 0x9d, 0x9b, 0xa4, 0x62, 0x97, 0x98, 0x7d, 0x8b, 0x95, 0x95, 0x4f, 
+  0x8c, 0x3c, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x3d, 0x20, 0x20, 0x94, 0xa2, 0x9f, 
+  0xa9, 0xa5, 0xac, 0xad, 0xae, 0xb0, 0xb0, 0x92, 0xaf, 0xb3, 0xb3, 0xb3, 0xb3, 0xb4, 0xb3, 0xb3, 
+  0xb3, 0xb3, 0xb3, 0xb4, 0xb3, 0x92, 0xaf, 0xae, 0xae, 0xad, 0xad, 0xac, 0xa6, 0xab, 0xa5, 0xa9, 
+  0x9f, 0xa2, 0xb5, 0x9c, 0x9c, 0x9d, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x94, 0x8b, 0x90, 0x4f, 
+  0x8c, 0x3c, 0x47, 0x60, 0x60, 0x47, 0x47, 0x47, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x20, 0x20, 0x20, 0xa2, 0x9e, 
+  0x9f, 0xab, 0xa6, 0xac, 0xae, 0xb1, 0xb1, 0xaf, 0x92, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb4, 0xb3, 
+  0xb3, 0xb3, 0xb3, 0xb3, 0x92, 0x92, 0xb1, 0xb1, 0xae, 0xae, 0xac, 0xa6, 0xa6, 0xa5, 0xa9, 0x9f, 
+  0x9f, 0xa2, 0xa3, 0xa3, 0x9c, 0x9d, 0xa4, 0xa4, 0x97, 0x97, 0x7d, 0x98, 0x8b, 0x95, 0x90, 0x4f, 
+  0x8c, 0xb7, 0x60, 0x47, 0x60, 0xb7, 0x60, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x20, 0x20, 0x20, 0x20, 0xa3, 0x9e, 
+  0x9f, 0xa5, 0xab, 0xa6, 0xac, 0xae, 0xb0, 0xb0, 0xaf, 0xaf, 0xaf, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 
+  0xb3, 0xb3, 0xaf, 0xaf, 0x92, 0xb1, 0xb0, 0xb1, 0xad, 0xad, 0xad, 0xac, 0xab, 0xa5, 0xa9, 0x9f, 
+  0x9f, 0xa2, 0xb5, 0xa3, 0x9c, 0x9d, 0xa4, 0xa4, 0x97, 0xaa, 0x7d, 0x98, 0x94, 0x8b, 0x95, 0x4f, 
+  0x4f, 0x3c, 0x60, 0x47, 0xb7, 0x60, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x20, 0x20, 0x20, 0x20, 0xa3, 0x9e, 
+  0x9f, 0xa5, 0xab, 0xa6, 0xac, 0xae, 0xb0, 0xb0, 0xaf, 0xaf, 0xaf, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 
+  0xb3, 0xb3, 0xaf, 0xaf, 0x92, 0xb1, 0xb0, 0xb1, 0xad, 0xad, 0xad, 0xac, 0xab, 0xa5, 0xa9, 0x9f, 
+  0x9f, 0xa2, 0xb5, 0xa3, 0x9c, 0x9d, 0xa4, 0xa4, 0x97, 0xaa, 0x7d, 0x98, 0x94, 0x8b, 0x95, 0x4f, 
+  0x4f, 0x3c, 0x60, 0x47, 0xb7, 0x60, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x94, 0xb5, 
+  0x9f, 0xa9, 0xa5, 0xa6, 0xac, 0xad, 0xae, 0xb1, 0xb1, 0xaf, 0x92, 0xb3, 0xaf, 0xb3, 0xb3, 0xb3, 
+  0xb3, 0x92, 0xb3, 0x92, 0xaf, 0xb0, 0xb1, 0xae, 0xae, 0xad, 0xac, 0xa6, 0xa6, 0xa5, 0x9f, 0x9e, 
+  0x9e, 0xa2, 0xa3, 0xb6, 0x9c, 0x9c, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x98, 0x8b, 0x8b, 0x90, 0x4f, 
+  0x8c, 0xb7, 0x60, 0x60, 0x41, 0x60, 0x60, 0x47, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0xb5, 
+  0xa2, 0xa9, 0xa5, 0xa6, 0xa6, 0xad, 0xae, 0xae, 0xb1, 0xb0, 0xaf, 0x92, 0xaf, 0xb3, 0x92, 0x92, 
+  0xaf, 0xaf, 0x92, 0xb1, 0xaf, 0xb0, 0xb0, 0xae, 0xae, 0xac, 0xac, 0xa6, 0xab, 0xab, 0xa5, 0x9f, 
+  0x9e, 0xb5, 0xa3, 0xa3, 0x9c, 0x9d, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x94, 0x8b, 0x95, 0x90, 
+  0x4f, 0xb7, 0xb7, 0x47, 0x47, 0x47, 0xb7, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb7, 0xa3, 
+  0x9e, 0x9f, 0xa5, 0xa5, 0xac, 0xac, 0xad, 0xad, 0xae, 0xb1, 0xb1, 0xaf, 0xaf, 0xaf, 0xaf, 0xaf, 
+  0xaf, 0xaf, 0xaf, 0xb0, 0xb0, 0xb1, 0xae, 0xae, 0xad, 0xac, 0xa6, 0xa6, 0xa5, 0xa9, 0x9f, 0x9e, 
+  0xa2, 0xa2, 0xa3, 0xb6, 0x9c, 0x9d, 0xa4, 0xa4, 0x97, 0xaa, 0x97, 0x98, 0x8b, 0x8b, 0x95, 0x4f, 
+  0x8c, 0x3c, 0x3c, 0xb7, 0x60, 0x60, 0x41, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb7, 0xa3, 
+  0x9e, 0x9f, 0xa5, 0xa5, 0xac, 0xac, 0xad, 0xad, 0xae, 0xb1, 0xb1, 0xaf, 0xaf, 0xaf, 0xaf, 0xaf, 
+  0xaf, 0xaf, 0xaf, 0xb0, 0xb0, 0xb1, 0xae, 0xae, 0xad, 0xac, 0xa6, 0xa6, 0xa5, 0xa9, 0x9f, 0x9e, 
+  0xa2, 0xa2, 0xa3, 0xb6, 0x9c, 0x9d, 0xa4, 0xa4, 0x97, 0xaa, 0x97, 0x98, 0x8b, 0x8b, 0x95, 0x4f, 
+  0x8c, 0x3c, 0x3c, 0xb7, 0x60, 0x60, 0x41, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9c, 
+  0xa2, 0x9e, 0xa9, 0xa5, 0xab, 0xa6, 0xad, 0xad, 0xae, 0xb0, 0xb0, 0xb1, 0xb1, 0xaf, 0xaf, 0xaf, 
+  0xaf, 0xb1, 0xaf, 0xb1, 0xb0, 0xb0, 0xad, 0xae, 0xad, 0xac, 0xa6, 0xa6, 0xa5, 0xa5, 0x9f, 0x9f, 
+  0xa2, 0xa2, 0xa3, 0x9c, 0x9c, 0x9c, 0x9d, 0xa4, 0x97, 0xaa, 0x7d, 0x98, 0x94, 0x8b, 0x95, 0x90, 
+  0x8c, 0x8c, 0xb7, 0x60, 0x60, 0x60, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa3, 
+  0xa3, 0xa2, 0x9f, 0x9f, 0xa5, 0xa6, 0xac, 0xad, 0xad, 0xad, 0xae, 0xb0, 0xb0, 0xb0, 0xb1, 0xaf, 
+  0xb1, 0xb0, 0xb1, 0xb0, 0xae, 0xae, 0xae, 0xad, 0xac, 0xa6, 0xac, 0xab, 0xa5, 0xa9, 0x9f, 0x9e, 
+  0x9e, 0xb5, 0xa3, 0xa3, 0x9c, 0x9d, 0xa4, 0xa4, 0x62, 0x97, 0x7d, 0x7d, 0x98, 0x8b, 0x8b, 0x4f, 
+  0x4f, 0x8c, 0x3c, 0x60, 0x60, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 
+  0xa3, 0xa2, 0x9f, 0xa9, 0xa5, 0xab, 0xa6, 0xac, 0xae, 0xae, 0xae, 0xae, 0xb1, 0xb0, 0xb1, 0xb1, 
+  0xb1, 0xb0, 0xb0, 0xb1, 0xae, 0xae, 0xad, 0xad, 0xac, 0xa6, 0xa6, 0xab, 0xa5, 0xa9, 0x9f, 0xa2, 
+  0xa2, 0xa3, 0xa3, 0xb6, 0x9c, 0xb8, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x98, 0x94, 0x8b, 0x95, 0x95, 
+  0x4f, 0x8c, 0xb7, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 
+  0xa3, 0xa2, 0x9f, 0xa9, 0xa5, 0xab, 0xa6, 0xac, 0xae, 0xae, 0xae, 0xae, 0xb1, 0xb0, 0xb1, 0xb1, 
+  0xb1, 0xb0, 0xb0, 0xb1, 0xae, 0xae, 0xad, 0xad, 0xac, 0xa6, 0xa6, 0xab, 0xa5, 0xa9, 0x9f, 0xa2, 
+  0xa2, 0xa3, 0xa3, 0xb6, 0x9c, 0xb8, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x98, 0x94, 0x8b, 0x95, 0x95, 
+  0x4f, 0x8c, 0xb7, 0x47, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x95, 
+  0xa3, 0xb5, 0x9e, 0x9f, 0xa5, 0xa5, 0xa6, 0xa6, 0xa6, 0xac, 0xad, 0xae, 0xae, 0xae, 0xae, 0xb0, 
+  0xb0, 0xae, 0xae, 0xae, 0xae, 0xad, 0xb2, 0xad, 0xac, 0xa6, 0xab, 0xab, 0xa5, 0xa5, 0x9f, 0x9f, 
+  0xa2, 0xa2, 0x9c, 0x9c, 0x9d, 0x9d, 0xa4, 0xa4, 0x97, 0x97, 0x7d, 0x98, 0x94, 0x8b, 0x8b, 0x4f, 
+  0x4f, 0x8c, 0xb7, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9c, 0xa3, 0xb5, 0x9e, 0xa9, 0xa5, 0xab, 0xac, 0xa6, 0xad, 0xad, 0xad, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xb0, 0xad, 0xae, 0xae, 0xad, 0xac, 0xac, 0xa6, 0xa6, 0xa5, 0xab, 0xa9, 0x9f, 0x9f, 0x9e, 
+  0xa2, 0xa2, 0xa3, 0xa3, 0x9c, 0x9c, 0xa4, 0xa4, 0x97, 0x97, 0x97, 0x98, 0x8b, 0x8b, 0x8b, 0x4f, 
+  0x4f, 0x4f, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa3, 0xa3, 0xa3, 0xa2, 0x9f, 0x9f, 0xa5, 0xa5, 0xa6, 0xac, 0xac, 0xad, 0xad, 0xad, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xad, 0xad, 0xac, 0xad, 0xa6, 0xac, 0xa6, 0xab, 0xa5, 0xa5, 0xa9, 0x9f, 0xa2, 
+  0xa2, 0xb5, 0xa3, 0x9c, 0x9c, 0x9d, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x98, 0x8b, 0x95, 0x90, 
+  0x4f, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa3, 0xa3, 0xa3, 0xa2, 0x9f, 0x9f, 0xa5, 0xa5, 0xa6, 0xac, 0xac, 0xad, 0xad, 0xad, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xad, 0xad, 0xac, 0xad, 0xa6, 0xac, 0xa6, 0xab, 0xa5, 0xa5, 0xa9, 0x9f, 0xa2, 
+  0xa2, 0xb5, 0xa3, 0x9c, 0x9c, 0x9d, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x98, 0x8b, 0x95, 0x90, 
+  0x4f, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x97, 0xa3, 0xb5, 0xa2, 0x9f, 0x9f, 0xa5, 0xab, 0xab, 0xa6, 0xac, 0xac, 0xac, 0xad, 0xad, 0xad, 
+  0xad, 0xad, 0xad, 0xad, 0xad, 0xac, 0xac, 0xa6, 0xac, 0xab, 0xa5, 0xa9, 0xa9, 0x9f, 0x9f, 0x9e, 
+  0xa3, 0xa3, 0xa3, 0x9c, 0x9c, 0x9d, 0x9b, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x98, 0x94, 0x95, 0x4f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x95, 0x9c, 0xa3, 0xa2, 0xa2, 0xa9, 0xa9, 0xa5, 0xa5, 0xab, 0xa6, 0xa6, 0xac, 0xac, 0xac, 0xad, 
+  0xb2, 0xad, 0xad, 0xac, 0xac, 0xac, 0xa6, 0xa6, 0xab, 0xa5, 0xa5, 0xa5, 0x9f, 0xa9, 0x9e, 0xa2, 
+  0xa2, 0xa3, 0xa3, 0x9c, 0x9d, 0xb8, 0x9d, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x94, 0x8b, 0x47, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3c, 0x9c, 0xa3, 0xb5, 0xa2, 0x9e, 0x9f, 0xa5, 0xa5, 0xab, 0xa6, 0xa6, 0xa6, 0xac, 0xac, 0xa6, 
+  0xac, 0xac, 0xac, 0xa6, 0xa6, 0xac, 0xac, 0xa6, 0xab, 0xab, 0xa5, 0xa9, 0x9f, 0x9e, 0xa2, 0xa2, 
+  0xa2, 0xa3, 0x9c, 0x9c, 0x9d, 0x9d, 0x9b, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x8c, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3c, 0x9c, 0xa3, 0xb5, 0xa2, 0x9e, 0x9f, 0xa5, 0xa5, 0xab, 0xa6, 0xa6, 0xa6, 0xac, 0xac, 0xa6, 
+  0xac, 0xac, 0xac, 0xa6, 0xa6, 0xac, 0xac, 0xa6, 0xab, 0xab, 0xa5, 0xa9, 0x9f, 0x9e, 0xa2, 0xa2, 
+  0xa2, 0xa3, 0x9c, 0x9c, 0x9d, 0x9d, 0x9b, 0xa4, 0x97, 0x97, 0x7d, 0x7d, 0x8c, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9c, 0x9c, 0xa3, 0xa2, 0xa2, 0x9f, 0x9f, 0xa5, 0xa5, 0xab, 0xa6, 0xac, 0xab, 0xac, 0xac, 
+  0xac, 0xac, 0xac, 0xac, 0xac, 0xa6, 0xa6, 0xa5, 0xab, 0xa5, 0xa5, 0x9f, 0x9f, 0xa2, 0x9e, 0xa2, 
+  0xa2, 0xa3, 0xa3, 0x9c, 0x9c, 0x9d, 0x9d, 0xa4, 0x97, 0x97, 0x8c, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x97, 0x9c, 0x9c, 0xa2, 0xa2, 0x9e, 0xa9, 0xa9, 0xa9, 0xab, 0xa5, 0xa6, 0xab, 0xa6, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xab, 0xa6, 0xa5, 0xab, 0xa5, 0xa5, 0xa9, 0xa9, 0x9e, 0x9e, 0xb5, 
+  0xa2, 0xa3, 0xa3, 0x9c, 0x9d, 0x9d, 0x9b, 0x7d, 0x4f, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3c, 0x8b, 0xa3, 0xa2, 0xa2, 0x9f, 0x9f, 0xa9, 0xa5, 0xa5, 0xab, 0xa5, 0xab, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xab, 0xa6, 0xa5, 0xab, 0xab, 0xa5, 0xa5, 0xa9, 0x9f, 0x9f, 0xa2, 0xa2, 0xa2, 
+  0xa3, 0xa3, 0x9c, 0x9c, 0x9c, 0x90, 0xb7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3c, 0x8b, 0xa3, 0xa2, 0xa2, 0x9f, 0x9f, 0xa9, 0xa5, 0xa5, 0xab, 0xa5, 0xab, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xab, 0xa6, 0xa5, 0xab, 0xab, 0xa5, 0xa5, 0xa9, 0x9f, 0x9f, 0xa2, 0xa2, 0xa2, 
+  0xa3, 0xa3, 0x9c, 0x9c, 0x9c, 0x90, 0xb7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x94, 0xa4, 0x9e, 0x9f, 0x9f, 0xa9, 0xa5, 0xab, 0xab, 0xab, 0xab, 
+  0xa6, 0xab, 0xa6, 0xab, 0xab, 0xa5, 0xa5, 0xa5, 0xa9, 0xa9, 0x9f, 0x9f, 0x9f, 0x9e, 0xa2, 0xb5, 
+  0xa3, 0x97, 0x8b, 0xb7, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0x98, 0x9c, 0xa9, 0xa9, 0xa5, 0xa5, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa5, 0xa5, 0xa5, 0x9f, 0x9f, 0x9f, 0x9e, 0x8b, 0x94, 0x3c, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x98, 0x7d, 
+  0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x98, 0x7d, 0x98, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x98, 0x7d, 
+  0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x98, 0x7d, 0x98, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x26, 0x21, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x28, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x24, 0x27, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x28, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x28, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x2a, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x25, 0x28, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x27, 0x2c, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x27, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x27, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x27, 0x2f, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x28, 0x2b, 0x28, 0x25, 0x25, 0x28, 
+  0x28, 0x28, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 
+  0x31, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x32, 0x2e, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x33, 0x23, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x32, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x34, 0x34, 0x34, 0x33, 0x22, 0x25, 0x22, 0x22, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x33, 0x23, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x32, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x34, 0x34, 0x34, 0x33, 0x22, 0x25, 0x22, 0x22, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x26, 0x23, 0x23, 
+  0x31, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2b, 0x28, 0x2b, 0x28, 0x2b, 0x28, 0x28, 
+  0x28, 0x28, 0x34, 0x35, 0x36, 0x36, 0x37, 0x38, 0x39, 0x39, 0x37, 0x39, 0x36, 0x38, 0x34, 0x23, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x26, 0x23, 0x23, 
+  0x31, 0x31, 0x31, 0x30, 0x2e, 0x2e, 0x32, 0x2e, 0x32, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x29, 
+  0x33, 0x36, 0x38, 0x27, 0x27, 0x35, 0x27, 0x3a, 0x27, 0x36, 0x39, 0x39, 0x39, 0x36, 0x36, 0x36, 
+  0x35, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x26, 0x23, 0x23, 0x23, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x34, 0x36, 
+  0x27, 0x35, 0x35, 0x35, 0x3b, 0x35, 0x3b, 0x35, 0x24, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x39, 0x36, 
+  0x36, 0x38, 0x36, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x26, 0x23, 0x23, 0x23, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x34, 0x36, 
+  0x27, 0x35, 0x35, 0x35, 0x3b, 0x35, 0x3b, 0x35, 0x24, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x39, 0x36, 
+  0x36, 0x38, 0x36, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x29, 0x29, 0x26, 0x23, 0x23, 
+  0x23, 0x31, 0x31, 0x31, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x29, 0x38, 0x27, 0x3a, 
+  0x41, 0x3b, 0x3b, 0x41, 0x3b, 0x41, 0x3b, 0x41, 0x3b, 0x3b, 0x35, 0x42, 0x3d, 0x3e, 0x43, 0x40, 
+  0x39, 0x37, 0x39, 0x38, 0x3a, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x44, 0x2c, 0x2c, 0x26, 0x23, 0x26, 0x23, 
+  0x23, 0x31, 0x31, 0x31, 0x30, 0x30, 0x2e, 0x32, 0x2e, 0x2e, 0x2b, 0x29, 0x27, 0x35, 0x3b, 0x21, 
+  0x3b, 0x41, 0x41, 0x45, 0x41, 0x46, 0x3b, 0x47, 0x3b, 0x41, 0x3b, 0x3b, 0x48, 0x3c, 0x3d, 0x3e, 
+  0x3f, 0x39, 0x36, 0x36, 0x36, 0x35, 0x25, 0x25, 0x25, 0x28, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2f, 0x44, 0x2c, 0x2c, 0x29, 0x29, 0x23, 0x23, 
+  0x23, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x3a, 0x27, 0x48, 0x3b, 0x21, 0x41, 
+  0x49, 0x49, 0x49, 0x49, 0x4a, 0x41, 0x49, 0x4b, 0x46, 0x45, 0x4c, 0x3b, 0x2f, 0x3b, 0x4d, 0x42, 
+  0x4e, 0x3e, 0x40, 0x36, 0x39, 0x36, 0x39, 0x23, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2f, 0x44, 0x2c, 0x2c, 0x29, 0x29, 0x23, 0x23, 
+  0x23, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x3a, 0x27, 0x48, 0x3b, 0x21, 0x41, 
+  0x49, 0x49, 0x49, 0x49, 0x4a, 0x41, 0x49, 0x4b, 0x46, 0x45, 0x4c, 0x3b, 0x2f, 0x3b, 0x4d, 0x42, 
+  0x4e, 0x3e, 0x40, 0x36, 0x39, 0x36, 0x39, 0x23, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2f, 0x2d, 0x2c, 0x29, 0x29, 0x29, 0x26, 0x23, 
+  0x23, 0x23, 0x31, 0x31, 0x31, 0x30, 0x30, 0x2e, 0x2e, 0x29, 0x3e, 0x4d, 0x3b, 0x3b, 0x4f, 0x45, 
+  0x49, 0x45, 0x49, 0x49, 0x44, 0x45, 0x49, 0x45, 0x50, 0x51, 0x47, 0x46, 0x45, 0x3b, 0x51, 0x52, 
+  0x52, 0x3d, 0x3e, 0x40, 0x39, 0x37, 0x38, 0x37, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x29, 0x29, 0x29, 0x26, 
+  0x23, 0x23, 0x23, 0x31, 0x31, 0x30, 0x31, 0x30, 0x2c, 0x3e, 0x52, 0x53, 0x51, 0x2c, 0x46, 0x49, 
+  0x2d, 0x45, 0x49, 0x49, 0x49, 0x54, 0x55, 0x2c, 0x29, 0x54, 0x50, 0x56, 0x45, 0x4a, 0x21, 0x51, 
+  0x52, 0x52, 0x42, 0x43, 0x57, 0x39, 0x36, 0x36, 0x35, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2f, 0x44, 0x2c, 0x29, 0x29, 0x26, 0x26, 
+  0x23, 0x23, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x3f, 0x58, 0x51, 0x2f, 0x45, 0x49, 0x49, 0x59, 
+  0x49, 0x2c, 0x59, 0x55, 0x55, 0x28, 0x2e, 0x49, 0x4a, 0x55, 0x49, 0x5a, 0x50, 0x2d, 0x50, 0x56, 
+  0x51, 0x5b, 0x52, 0x42, 0x3d, 0x57, 0x39, 0x36, 0x36, 0x34, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2f, 0x44, 0x2c, 0x29, 0x29, 0x26, 0x26, 
+  0x23, 0x23, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x3f, 0x58, 0x51, 0x2f, 0x45, 0x49, 0x49, 0x59, 
+  0x49, 0x2c, 0x59, 0x55, 0x55, 0x28, 0x2e, 0x49, 0x4a, 0x55, 0x49, 0x5a, 0x50, 0x2d, 0x50, 0x56, 
+  0x51, 0x5b, 0x52, 0x42, 0x3d, 0x57, 0x39, 0x36, 0x36, 0x34, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x21, 0x33, 0x2f, 0x2f, 0x2d, 0x2d, 0x2c, 0x29, 0x26, 0x29, 
+  0x23, 0x23, 0x23, 0x31, 0x31, 0x31, 0x30, 0x3c, 0x42, 0x51, 0x50, 0x5a, 0x49, 0x55, 0x55, 0x55, 
+  0x5c, 0x5d, 0x5d, 0x5c, 0x5c, 0x5c, 0x5c, 0x5d, 0x5e, 0x4a, 0x55, 0x2c, 0x5f, 0x5a, 0x50, 0x60, 
+  0x56, 0x51, 0x61, 0x62, 0x4e, 0x3e, 0x39, 0x37, 0x39, 0x36, 0x29, 0x28, 0x28, 0x28, 0x2b, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x21, 0x33, 0x2f, 0x44, 0x44, 0x2c, 0x29, 0x29, 0x26, 
+  0x26, 0x26, 0x23, 0x23, 0x31, 0x30, 0x2c, 0x4e, 0x51, 0x50, 0x5a, 0x5a, 0x55, 0x59, 0x5c, 0x63, 
+  0x63, 0x5d, 0x63, 0x63, 0x63, 0x63, 0x63, 0x64, 0x5e, 0x28, 0x64, 0x65, 0x29, 0x5f, 0x5a, 0x5a, 
+  0x50, 0x60, 0x5b, 0x52, 0x42, 0x4e, 0x3f, 0x39, 0x37, 0x36, 0x35, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 
+  0x2e, 0x32, 0x20, 0x20, 0x20, 0x7a, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x21, 0x34, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x29, 0x29, 0x26, 
+  0x26, 0x26, 0x23, 0x23, 0x31, 0x31, 0x4d, 0x53, 0x60, 0x5a, 0x66, 0x66, 0x67, 0x65, 0x2b, 0x5d, 
+  0x63, 0x68, 0x68, 0x69, 0x63, 0x68, 0x59, 0x65, 0x65, 0x6a, 0x5c, 0x55, 0x5c, 0x29, 0x54, 0x5a, 
+  0x5a, 0x50, 0x56, 0x51, 0x52, 0x42, 0x3e, 0x40, 0x39, 0x37, 0x36, 0x3a, 0x24, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x21, 0x34, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x29, 0x29, 0x26, 
+  0x26, 0x26, 0x23, 0x23, 0x31, 0x31, 0x4d, 0x53, 0x60, 0x5a, 0x66, 0x66, 0x67, 0x65, 0x2b, 0x5d, 
+  0x63, 0x68, 0x68, 0x69, 0x63, 0x68, 0x59, 0x65, 0x65, 0x6a, 0x5c, 0x55, 0x5c, 0x29, 0x54, 0x5a, 
+  0x5a, 0x50, 0x56, 0x51, 0x52, 0x42, 0x3e, 0x40, 0x39, 0x37, 0x36, 0x3a, 0x24, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x24, 0x21, 0x34, 0x33, 0x2f, 0x2d, 0x2d, 0x2c, 0x2c, 0x29, 
+  0x26, 0x23, 0x23, 0x23, 0x23, 0x31, 0x42, 0x5b, 0x5a, 0x5f, 0x66, 0x67, 0x5e, 0x65, 0x30, 0x63, 
+  0x68, 0x69, 0x68, 0x68, 0x68, 0x68, 0x6b, 0x6c, 0x65, 0x65, 0x5d, 0x63, 0x5c, 0x5c, 0x55, 0x49, 
+  0x50, 0x50, 0x60, 0x51, 0x51, 0x52, 0x3d, 0x3e, 0x39, 0x39, 0x36, 0x37, 0x20, 0x20, 0x27, 0x24, 
+  0x2b, 0x2b, 0x24, 0x20, 0xb0, 0xb0, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x21, 0x34, 0x2f, 0x2f, 0x44, 0x2c, 0x2c, 0x29, 0x29, 
+  0x29, 0x26, 0x23, 0x23, 0x23, 0x4f, 0x5b, 0x60, 0x5f, 0x67, 0x66, 0x5e, 0x65, 0x6d, 0x6e, 0x68, 
+  0x68, 0x68, 0x6f, 0x68, 0x70, 0x6f, 0x70, 0x68, 0x68, 0x6b, 0x63, 0x63, 0x63, 0x28, 0x30, 0x49, 
+  0x29, 0x5f, 0x50, 0x51, 0x51, 0x52, 0x42, 0x3d, 0x40, 0x37, 0x36, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x24, 0x2a, 0xb0, 0x57, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x34, 0x34, 0x33, 0x2d, 0x2d, 0x2d, 0x2c, 0x29, 
+  0x29, 0x23, 0x26, 0x23, 0x23, 0x4d, 0x51, 0x5a, 0x5f, 0x67, 0x5e, 0x65, 0x65, 0x71, 0x64, 0x68, 
+  0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x70, 0x68, 0x68, 0x68, 0x63, 0x63, 0x5c, 0x64, 0x65, 
+  0x66, 0x5a, 0x50, 0x50, 0x51, 0x5b, 0x61, 0x4e, 0x3f, 0x39, 0x39, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb0, 0xb0, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x34, 0x34, 0x33, 0x2d, 0x2d, 0x2d, 0x2c, 0x29, 
+  0x29, 0x23, 0x26, 0x23, 0x23, 0x4d, 0x51, 0x5a, 0x5f, 0x67, 0x5e, 0x65, 0x65, 0x71, 0x64, 0x68, 
+  0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x70, 0x68, 0x68, 0x68, 0x63, 0x63, 0x5c, 0x64, 0x65, 
+  0x66, 0x5a, 0x50, 0x50, 0x51, 0x5b, 0x61, 0x4e, 0x3f, 0x39, 0x39, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb0, 0xb0, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x34, 0x33, 0x2f, 0x2f, 0x44, 0x2c, 0x2c, 0x29, 
+  0x29, 0x26, 0x26, 0x26, 0x23, 0x42, 0x56, 0x5f, 0x66, 0x5e, 0x65, 0x6d, 0x6d, 0x6d, 0x72, 0x68, 
+  0x6f, 0x73, 0x73, 0x73, 0x6f, 0x6f, 0x6f, 0x6f, 0x6f, 0x68, 0x70, 0x68, 0x63, 0x63, 0x74, 0x66, 
+  0x66, 0x5f, 0x5a, 0x50, 0x60, 0x75, 0x52, 0x42, 0x3e, 0x39, 0x39, 0x38, 0x37, 0x20, 0x20, 0x20, 
+  0x20, 0xb0, 0x57, 0x57, 0xb0, 0x57, 0xb0, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x24, 0x21, 0x34, 0x33, 0x33, 0x2d, 0x2d, 0x2c, 0x2c, 
+  0x29, 0x29, 0x26, 0x23, 0x2f, 0x62, 0x60, 0x5f, 0x67, 0x5e, 0x65, 0x6d, 0x72, 0x72, 0x71, 0x76, 
+  0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x77, 0x6f, 0x6f, 0x68, 0x68, 0x68, 0x6b, 0x5e, 0x65, 
+  0x67, 0x66, 0x5f, 0x50, 0x56, 0x60, 0x52, 0x42, 0x4e, 0x39, 0x37, 0x39, 0x36, 0x20, 0x20, 0x20, 
+  0x37, 0x57, 0xb1, 0xb0, 0x57, 0x57, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x34, 0x34, 0x2f, 0x2f, 0x2d, 0x2c, 0x2c, 
+  0x29, 0x29, 0x29, 0x23, 0x3c, 0x51, 0x50, 0x78, 0x5e, 0x5e, 0x6d, 0x6d, 0x72, 0x72, 0x72, 0x73, 
+  0x73, 0x73, 0x73, 0x79, 0x79, 0x79, 0x73, 0x73, 0x77, 0x6f, 0x6f, 0x68, 0x68, 0x64, 0x5e, 0x5e, 
+  0x67, 0x5f, 0x5f, 0x5a, 0x60, 0x51, 0x5b, 0x5b, 0x4e, 0x3f, 0x39, 0x37, 0x37, 0x20, 0x7a, 0x7b, 
+  0x3f, 0x40, 0x57, 0x57, 0xb0, 0xb1, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x34, 0x34, 0x2f, 0x2f, 0x2d, 0x2c, 0x2c, 
+  0x29, 0x29, 0x29, 0x23, 0x3c, 0x51, 0x50, 0x78, 0x5e, 0x5e, 0x6d, 0x6d, 0x72, 0x72, 0x72, 0x73, 
+  0x73, 0x73, 0x73, 0x79, 0x79, 0x79, 0x73, 0x73, 0x77, 0x6f, 0x6f, 0x68, 0x68, 0x64, 0x5e, 0x5e, 
+  0x67, 0x5f, 0x5f, 0x5a, 0x60, 0x51, 0x5b, 0x5b, 0x4e, 0x3f, 0x39, 0x37, 0x37, 0x20, 0x7a, 0x7b, 
+  0x3f, 0x40, 0x57, 0x57, 0xb0, 0xb1, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x33, 0x33, 0x2f, 0x44, 0x2d, 0x29, 
+  0x29, 0x29, 0x33, 0x36, 0x57, 0x5b, 0x50, 0x67, 0x5e, 0x65, 0x71, 0x72, 0x71, 0x7c, 0x7d, 0x73, 
+  0x73, 0x79, 0x79, 0x7e, 0x7e, 0x7f, 0x80, 0x7e, 0x73, 0x77, 0x6f, 0x6f, 0x68, 0x6d, 0x65, 0x5e, 
+  0x67, 0x67, 0x5f, 0x5a, 0x5a, 0x56, 0x51, 0x52, 0x4e, 0x3f, 0x37, 0x39, 0x39, 0x7b, 0x3e, 0x7b, 
+  0xb1, 0xb0, 0x57, 0x57, 0x57, 0x40, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x21, 0x33, 0x33, 0x2f, 0x44, 0x2d, 0x2c, 
+  0x2c, 0x21, 0x20, 0x20, 0x3f, 0x51, 0x50, 0x66, 0x5e, 0x65, 0x81, 0x72, 0x71, 0x7c, 0x64, 0x79, 
+  0x73, 0x79, 0x7e, 0x7f, 0x82, 0x82, 0x82, 0x83, 0x7e, 0x6f, 0x6f, 0x70, 0x68, 0x84, 0x65, 0x65, 
+  0x67, 0x67, 0x66, 0x5a, 0x50, 0x60, 0x51, 0x52, 0x4e, 0x3f, 0x37, 0x57, 0x58, 0x85, 0x3e, 0x3e, 
+  0x3f, 0x57, 0xb0, 0xb1, 0xb0, 0xb0, 0x57, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x2a, 0x21, 0x34, 0x2f, 0x2f, 0x2f, 0x44, 0x44, 
+  0x36, 0x20, 0x20, 0x20, 0x57, 0x51, 0x5a, 0x67, 0x5e, 0x6d, 0x6d, 0x72, 0x7c, 0x7c, 0x7c, 0x73, 
+  0x79, 0x7e, 0x7e, 0x83, 0x82, 0x86, 0x86, 0x82, 0x7f, 0x79, 0x77, 0x77, 0x6b, 0x71, 0x6d, 0x65, 
+  0x5e, 0x67, 0x66, 0x5f, 0x50, 0x60, 0x5b, 0x53, 0x42, 0x42, 0x58, 0x62, 0x58, 0x87, 0x3e, 0x7b, 
+  0x7b, 0xb0, 0x57, 0x57, 0x57, 0x57, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x2a, 0x21, 0x34, 0x2f, 0x2f, 0x2f, 0x44, 0x44, 
+  0x36, 0x20, 0x20, 0x20, 0x57, 0x51, 0x5a, 0x67, 0x5e, 0x6d, 0x6d, 0x72, 0x7c, 0x7c, 0x7c, 0x73, 
+  0x79, 0x7e, 0x7e, 0x83, 0x82, 0x86, 0x86, 0x82, 0x7f, 0x79, 0x77, 0x77, 0x6b, 0x71, 0x6d, 0x65, 
+  0x5e, 0x67, 0x66, 0x5f, 0x50, 0x60, 0x5b, 0x53, 0x42, 0x42, 0x58, 0x62, 0x58, 0x87, 0x3e, 0x7b, 
+  0x7b, 0xb0, 0x57, 0x57, 0x57, 0x57, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x21, 0x33, 0x33, 0x2f, 0x2d, 0x36, 
+  0x20, 0x20, 0x20, 0x20, 0x57, 0x51, 0x5a, 0x67, 0x65, 0x6d, 0x6d, 0x72, 0x7c, 0x7c, 0x88, 0x7d, 
+  0x73, 0x79, 0x80, 0x82, 0x86, 0x86, 0x86, 0x86, 0x83, 0x79, 0x73, 0x6f, 0x81, 0x81, 0x6d, 0x65, 
+  0x5e, 0x67, 0x5f, 0x5f, 0x5a, 0x50, 0x51, 0x51, 0x75, 0x89, 0x8a, 0x62, 0x58, 0x87, 0x3e, 0x7b, 
+  0x7b, 0x57, 0xb0, 0x57, 0x57, 0xb0, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2a, 0x24, 0x34, 0x34, 0x33, 0x2f, 0x38, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x57, 0x51, 0x5a, 0x67, 0x5e, 0x6d, 0x71, 0x8b, 0x72, 0x7c, 0x8c, 0x8c, 
+  0x76, 0x79, 0x7e, 0x83, 0x86, 0x86, 0x8d, 0x82, 0x83, 0x6f, 0x76, 0x6f, 0x8b, 0x6d, 0x65, 0x65, 
+  0x5e, 0x67, 0x66, 0x5f, 0x50, 0x8e, 0x8f, 0x90, 0x8e, 0x75, 0x75, 0x58, 0x58, 0x85, 0x91, 0x3e, 
+  0x3f, 0xb1, 0x57, 0x57, 0x57, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2a, 0x34, 0x34, 0x2f, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x51, 0x5a, 0x66, 0x5e, 0x65, 0x6d, 0x71, 0x7c, 0x7c, 0x7c, 0x8c, 
+  0x92, 0x79, 0x7e, 0x83, 0x82, 0x82, 0x82, 0x82, 0x93, 0x8c, 0x7c, 0x84, 0x84, 0x72, 0x6d, 0x65, 
+  0x5e, 0x67, 0x5e, 0x94, 0x95, 0x96, 0x96, 0x89, 0x89, 0x97, 0x75, 0x8a, 0x62, 0x85, 0x3e, 0x3e, 
+  0xb1, 0xb1, 0xb0, 0xb0, 0xb1, 0x57, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2a, 0x34, 0x34, 0x2f, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x51, 0x5a, 0x66, 0x5e, 0x65, 0x6d, 0x71, 0x7c, 0x7c, 0x7c, 0x8c, 
+  0x92, 0x79, 0x7e, 0x83, 0x82, 0x82, 0x82, 0x82, 0x93, 0x8c, 0x7c, 0x84, 0x84, 0x72, 0x6d, 0x65, 
+  0x5e, 0x67, 0x5e, 0x94, 0x95, 0x96, 0x96, 0x89, 0x89, 0x97, 0x75, 0x8a, 0x62, 0x85, 0x3e, 0x3e, 
+  0xb1, 0xb1, 0xb0, 0xb0, 0xb1, 0x57, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x24, 0x21, 0x34, 0x2a, 0x98, 0x99, 0x96, 
+  0x7b, 0x20, 0x20, 0x20, 0x20, 0x52, 0x50, 0x66, 0x5e, 0x65, 0x71, 0x8b, 0x9a, 0x9b, 0x8c, 0x9c, 
+  0x8c, 0x76, 0x77, 0x79, 0x80, 0x83, 0x83, 0x9c, 0x7c, 0x8c, 0x7c, 0x7c, 0x72, 0x71, 0x65, 0x6d, 
+  0x98, 0x98, 0x9d, 0x9d, 0x94, 0x94, 0x90, 0x90, 0x89, 0x97, 0x75, 0x58, 0x58, 0x85, 0x87, 0x7b, 
+  0x3e, 0xb1, 0xb1, 0x57, 0x57, 0xb0, 0x57, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x48, 0x24, 0x34, 0x20, 0x90, 0x99, 0x9e, 
+  0x9f, 0xa0, 0x9d, 0x89, 0x3e, 0x91, 0x50, 0x5a, 0x5e, 0x65, 0x6d, 0x72, 0x8b, 0x7c, 0x7c, 0x8c, 
+  0x7c, 0x8c, 0xa1, 0x79, 0x79, 0x79, 0x79, 0x88, 0x8c, 0x9c, 0x7c, 0x8c, 0x9e, 0xa2, 0x9f, 0x99, 
+  0x99, 0x98, 0xa3, 0x94, 0x94, 0x94, 0x96, 0x90, 0x89, 0x97, 0x75, 0x8a, 0x58, 0x85, 0x87, 0x7b, 
+  0x3f, 0x3f, 0x57, 0xb0, 0x57, 0xb0, 0xb1, 0x40, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2a, 0x24, 0x40, 0x20, 0x58, 0x98, 0x99, 
+  0xa2, 0xa0, 0xa4, 0xa5, 0xa6, 0xa7, 0xa7, 0xa2, 0x9e, 0x8c, 0xa0, 0x72, 0x72, 0x72, 0x7c, 0x7c, 
+  0x8c, 0x8c, 0x8c, 0xa8, 0x93, 0x7d, 0x7d, 0xa8, 0xa9, 0xa6, 0xa5, 0xa0, 0xa0, 0xa2, 0x9f, 0x99, 
+  0x98, 0x98, 0x9d, 0x9d, 0x94, 0x96, 0x96, 0x90, 0x90, 0x97, 0x75, 0x8a, 0x58, 0x85, 0x87, 0x3e, 
+  0x3e, 0xb1, 0x57, 0x57, 0x57, 0x57, 0x57, 0xb0, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2a, 0x24, 0x40, 0x20, 0x58, 0x98, 0x99, 
+  0xa2, 0xa0, 0xa4, 0xa5, 0xa6, 0xa7, 0xa7, 0xa2, 0x9e, 0x8c, 0xa0, 0x72, 0x72, 0x72, 0x7c, 0x7c, 
+  0x8c, 0x8c, 0x8c, 0xa8, 0x93, 0x7d, 0x7d, 0xa8, 0xa9, 0xa6, 0xa5, 0xa0, 0xa0, 0xa2, 0x9f, 0x99, 
+  0x98, 0x98, 0x9d, 0x9d, 0x94, 0x96, 0x96, 0x90, 0x90, 0x97, 0x75, 0x8a, 0x58, 0x85, 0x87, 0x3e, 
+  0x3e, 0xb1, 0x57, 0x57, 0x57, 0x57, 0x57, 0xb0, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x3c, 0x20, 0x20, 0x8a, 0x98, 0x99, 
+  0x9e, 0x9f, 0xa4, 0xa5, 0xa5, 0xa9, 0xa9, 0xaa, 0xa8, 0xab, 0xab, 0xab, 0xac, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa7, 0xa6, 0xa6, 0xad, 0xa4, 0xa0, 0xa2, 0x9f, 0x9e, 
+  0x99, 0x98, 0xa3, 0x94, 0x94, 0x96, 0x8f, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x58, 0x85, 0x87, 0x7b, 
+  0x3e, 0x57, 0x57, 0x57, 0x57, 0xb0, 0x57, 0x57, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x36, 0x20, 0x20, 0x20, 0x98, 0xae, 
+  0x9e, 0xa2, 0xa0, 0xa5, 0xa6, 0xa6, 0xa7, 0xa8, 0xaa, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xac, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xa8, 0xa7, 0xa7, 0xa6, 0xad, 0xa4, 0xa0, 0xa2, 0x9f, 0x9e, 0x99, 
+  0x98, 0x98, 0x9d, 0x9d, 0x94, 0xaf, 0x96, 0x90, 0x8e, 0x97, 0x75, 0x8a, 0x8a, 0x85, 0x87, 0x3e, 
+  0x7b, 0x7b, 0x57, 0xb0, 0x57, 0x57, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x20, 0x20, 0x20, 0x20, 0x9d, 0x98, 
+  0x99, 0x9f, 0xa2, 0xa0, 0xa5, 0xa5, 0xa9, 0xa9, 0xa8, 0xa8, 0xa8, 0xab, 0xab, 0xac, 0xab, 0xab, 
+  0xab, 0xab, 0xa8, 0xab, 0xa8, 0xa8, 0xa9, 0xa7, 0xa6, 0xa5, 0xa5, 0xa0, 0xa0, 0x9f, 0x9f, 0x9e, 
+  0xae, 0x98, 0xa3, 0x9d, 0x94, 0x96, 0x90, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x62, 0x58, 0x87, 0x3e, 
+  0x7b, 0xb1, 0x57, 0xb0, 0xb1, 0x57, 0xb0, 0xb0, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x20, 0x20, 0x20, 0x20, 0x9d, 0x98, 
+  0x99, 0x9f, 0xa2, 0xa0, 0xa5, 0xa5, 0xa9, 0xa9, 0xa8, 0xa8, 0xa8, 0xab, 0xab, 0xac, 0xab, 0xab, 
+  0xab, 0xab, 0xa8, 0xab, 0xa8, 0xa8, 0xa9, 0xa7, 0xa6, 0xa5, 0xa5, 0xa0, 0xa0, 0x9f, 0x9f, 0x9e, 
+  0xae, 0x98, 0xa3, 0x9d, 0x94, 0x96, 0x90, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x62, 0x58, 0x87, 0x3e, 
+  0x7b, 0xb1, 0x57, 0xb0, 0xb1, 0x57, 0xb0, 0xb0, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x98, 
+  0xae, 0x9f, 0x9f, 0xa4, 0xa4, 0xa6, 0xa6, 0xa7, 0xa8, 0xa8, 0xab, 0xa8, 0xab, 0xa8, 0xab, 0xab, 
+  0xab, 0xab, 0xaa, 0xa8, 0xaa, 0xa7, 0xa7, 0xad, 0xa6, 0xa5, 0xa4, 0xa4, 0xa2, 0x9f, 0x99, 0x99, 
+  0x98, 0x98, 0x9d, 0x95, 0x94, 0xaf, 0x96, 0x90, 0x8e, 0x97, 0x89, 0x8a, 0x58, 0x58, 0x87, 0x91, 
+  0x3e, 0x7b, 0x57, 0x57, 0x57, 0xb0, 0x57, 0x57, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x9d, 
+  0xae, 0x9e, 0x9e, 0xa0, 0xa0, 0xa4, 0xa5, 0xa6, 0xa7, 0xa9, 0xa8, 0xa8, 0xab, 0xa8, 0xab, 0xa8, 
+  0xab, 0xa8, 0xa8, 0xa8, 0xa7, 0xa7, 0xa9, 0xa6, 0xa6, 0xa4, 0xa0, 0xa0, 0xa2, 0xa2, 0x9e, 0x99, 
+  0xae, 0x98, 0x9d, 0x94, 0x94, 0xaf, 0x96, 0x90, 0x8e, 0x97, 0x75, 0x8a, 0x62, 0x58, 0x87, 0x3e, 
+  0x7b, 0x3f, 0xb1, 0xb0, 0x57, 0x57, 0xb1, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0xa3, 
+  0x98, 0x99, 0x99, 0xa2, 0xa4, 0xa5, 0xa6, 0xa5, 0xa9, 0xa9, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xaa, 
+  0xa8, 0xa8, 0xa7, 0xa7, 0xa9, 0xa9, 0xa6, 0xa6, 0xad, 0xa4, 0xa4, 0xa2, 0xa2, 0x9e, 0x99, 0xae, 
+  0x98, 0xa3, 0x9d, 0x9d, 0x94, 0x96, 0x90, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x58, 0x58, 0x85, 0x3e, 
+  0x3e, 0xb1, 0xb1, 0x57, 0x57, 0x57, 0x40, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0xa3, 
+  0x98, 0x99, 0x99, 0xa2, 0xa4, 0xa5, 0xa6, 0xa5, 0xa9, 0xa9, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xaa, 
+  0xa8, 0xa8, 0xa7, 0xa7, 0xa9, 0xa9, 0xa6, 0xa6, 0xad, 0xa4, 0xa4, 0xa2, 0xa2, 0x9e, 0x99, 0xae, 
+  0x98, 0xa3, 0x9d, 0x9d, 0x94, 0x96, 0x90, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x58, 0x58, 0x85, 0x3e, 
+  0x3e, 0xb1, 0xb1, 0x57, 0x57, 0x57, 0x40, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9d, 
+  0x98, 0xae, 0x99, 0x9f, 0xa2, 0xa0, 0xa4, 0xa5, 0xa9, 0xa6, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8, 0xa7, 
+  0xa8, 0xa8, 0xa7, 0xa8, 0xa7, 0xa7, 0xad, 0xa5, 0xa5, 0xa4, 0xa0, 0xa0, 0x9f, 0x9f, 0x9e, 0x99, 
+  0x98, 0x98, 0x9d, 0x94, 0x94, 0x94, 0x96, 0x90, 0x89, 0x89, 0x75, 0x8a, 0x62, 0x58, 0x58, 0x87, 
+  0x3e, 0x3f, 0x3f, 0x57, 0xb0, 0xb0, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9d, 
+  0x9d, 0x98, 0x99, 0x9e, 0x9f, 0xa0, 0xa4, 0xa5, 0xa6, 0xa5, 0xa6, 0xa9, 0xa9, 0xa7, 0xa9, 0xa8, 
+  0xa7, 0xa7, 0xa9, 0xa7, 0xa6, 0xa6, 0xa6, 0xa6, 0xa5, 0xa0, 0xa4, 0xa2, 0x9f, 0x9e, 0x99, 0xae, 
+  0x98, 0xa3, 0x9d, 0x9d, 0x94, 0x96, 0x90, 0x90, 0x8e, 0x89, 0x89, 0x75, 0x58, 0x58, 0x87, 0x3e, 
+  0x3e, 0x3e, 0xb1, 0xb0, 0x57, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 
+  0x9d, 0x98, 0x99, 0x99, 0xa2, 0xa2, 0xa0, 0xa4, 0xad, 0xa5, 0xa9, 0xa6, 0xa9, 0xa7, 0xa9, 0xa7, 
+  0xa7, 0xa7, 0xa6, 0xa6, 0xa6, 0xa6, 0xa5, 0xad, 0xa4, 0xa0, 0xa0, 0xa2, 0x9f, 0x9e, 0x99, 0xae, 
+  0x98, 0x9d, 0x9d, 0x9d, 0x94, 0xaf, 0x96, 0x90, 0x89, 0x97, 0x75, 0x75, 0x58, 0x58, 0x58, 0x3e, 
+  0x7b, 0x7b, 0x3f, 0xb1, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 
+  0x9d, 0x98, 0x99, 0x99, 0xa2, 0xa2, 0xa0, 0xa4, 0xad, 0xa5, 0xa9, 0xa6, 0xa9, 0xa7, 0xa9, 0xa7, 
+  0xa7, 0xa7, 0xa6, 0xa6, 0xa6, 0xa6, 0xa5, 0xad, 0xa4, 0xa0, 0xa0, 0xa2, 0x9f, 0x9e, 0x99, 0xae, 
+  0x98, 0x9d, 0x9d, 0x9d, 0x94, 0xaf, 0x96, 0x90, 0x89, 0x97, 0x75, 0x75, 0x58, 0x58, 0x58, 0x3e, 
+  0x7b, 0x7b, 0x3f, 0xb1, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 
+  0x95, 0x98, 0x98, 0x99, 0x99, 0x9f, 0xa2, 0xa0, 0xa0, 0xa5, 0xad, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 
+  0xa9, 0xa6, 0xa9, 0xa6, 0xad, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0xa2, 0xa2, 0x9f, 0x9e, 0x99, 0x99, 
+  0x98, 0x98, 0x9d, 0x94, 0x94, 0x96, 0x8f, 0x90, 0x8e, 0x89, 0x97, 0x8a, 0x8a, 0x58, 0x85, 0x85, 
+  0x3e, 0x3e, 0x3f, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x95, 0xa3, 0x98, 0x99, 0x9e, 0x9f, 0xa0, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 0xa6, 0xa6, 0xa6, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xa6, 0xad, 0xa6, 0xa4, 0xa0, 0xa0, 0xa0, 0xa2, 0x9f, 0x9f, 0x9e, 0xae, 0xae, 
+  0x98, 0x9d, 0x9d, 0x95, 0x94, 0x96, 0x8f, 0x90, 0x89, 0x89, 0x75, 0x75, 0x58, 0x58, 0x85, 0x87, 
+  0x3e, 0x7b, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x94, 0x9d, 0xa3, 0xae, 0x99, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0xa4, 0xad, 0xa5, 0xa6, 0xa5, 0xa6, 
+  0xa5, 0xa6, 0xa6, 0xa5, 0xa5, 0xa5, 0xa0, 0xa4, 0xa0, 0xa0, 0x9f, 0xa2, 0x99, 0x99, 0xae, 0x98, 
+  0x98, 0xa3, 0x9d, 0x94, 0x96, 0xaf, 0x90, 0x90, 0x8e, 0x97, 0x89, 0x8a, 0x8a, 0x58, 0x58, 0x87, 
+  0x7b, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x94, 0x9d, 0xa3, 0xae, 0x99, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0xa4, 0xad, 0xa5, 0xa6, 0xa5, 0xa6, 
+  0xa5, 0xa6, 0xa6, 0xa5, 0xa5, 0xa5, 0xa0, 0xa4, 0xa0, 0xa0, 0x9f, 0xa2, 0x99, 0x99, 0xae, 0x98, 
+  0x98, 0xa3, 0x9d, 0x94, 0x96, 0xaf, 0x90, 0x90, 0x8e, 0x97, 0x89, 0x8a, 0x8a, 0x58, 0x58, 0x87, 
+  0x7b, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x97, 0x94, 0x9d, 0x98, 0x99, 0x99, 0x9f, 0xa2, 0xa0, 0xa0, 0xa0, 0xa4, 0xa4, 0xa5, 0xa5, 0xa6, 
+  0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa4, 0xa4, 0xa0, 0xa2, 0x9f, 0x9f, 0x9e, 0x99, 0xae, 0x98, 
+  0xa3, 0x9d, 0x9d, 0x9d, 0x96, 0x96, 0x90, 0x90, 0x8e, 0x89, 0x75, 0x8a, 0x58, 0x62, 0x58, 0x3e, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x85, 0x94, 0xa3, 0x98, 0x98, 0x9e, 0x9e, 0x9e, 0xa2, 0xa0, 0xa0, 0xa0, 0xa0, 0xa4, 0xa4, 0xa4, 
+  0xad, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0xa0, 0xa0, 0xa2, 0xa2, 0x9f, 0x9f, 0x99, 0x99, 0xae, 0xae, 
+  0x9d, 0x9d, 0x95, 0x94, 0x94, 0x96, 0x96, 0x90, 0x89, 0x89, 0x89, 0x75, 0x8a, 0x58, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3f, 0x94, 0x9d, 0xa3, 0xa3, 0xae, 0x99, 0x9e, 0x9f, 0xa2, 0xa0, 0xa4, 0xa4, 0xa4, 0xa4, 0xa0, 
+  0xa4, 0xa5, 0xa4, 0xa0, 0xa4, 0xa4, 0xa0, 0xa0, 0xa2, 0xa2, 0xa2, 0x9e, 0x9e, 0xae, 0x98, 0xae, 
+  0x98, 0x9d, 0x9d, 0x94, 0x94, 0x96, 0x90, 0x90, 0x89, 0x97, 0x97, 0x75, 0x3f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3f, 0x94, 0x9d, 0xa3, 0xa3, 0xae, 0x99, 0x9e, 0x9f, 0xa2, 0xa0, 0xa4, 0xa4, 0xa4, 0xa4, 0xa0, 
+  0xa4, 0xa5, 0xa4, 0xa0, 0xa4, 0xa4, 0xa0, 0xa0, 0xa2, 0xa2, 0xa2, 0x9e, 0x9e, 0xae, 0x98, 0xae, 
+  0x98, 0x9d, 0x9d, 0x94, 0x94, 0x96, 0x90, 0x90, 0x89, 0x97, 0x97, 0x75, 0x3f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x96, 0x95, 0x9d, 0x98, 0xae, 0x99, 0x99, 0x9f, 0x9f, 0xa2, 0xa2, 0xa0, 0xa0, 0xa0, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa4, 0xa0, 0xa0, 0xa0, 0xa2, 0x9f, 0x9f, 0x9e, 0x9e, 0x99, 0x99, 0xae, 0x98, 
+  0x9d, 0x9d, 0x94, 0x94, 0x96, 0x96, 0x96, 0x90, 0x8e, 0x89, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x97, 0x94, 0x94, 0x9d, 0x98, 0x98, 0x9e, 0x9e, 0x9f, 0x9f, 0xa2, 0xa0, 0xa0, 0xa0, 0xa0, 
+  0xa4, 0xa0, 0xa0, 0xa0, 0xa2, 0xa0, 0xa2, 0xa2, 0xa2, 0x9f, 0x99, 0x99, 0x99, 0x98, 0x98, 0x98, 
+  0x98, 0x9d, 0x94, 0x94, 0x94, 0x96, 0x8f, 0x8a, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb1, 0x58, 0x9d, 0x98, 0xae, 0xae, 0x9e, 0x9e, 0x9f, 0x9f, 0xa2, 0xa2, 0xa2, 0xa0, 
+  0xa2, 0xa0, 0xa0, 0xa0, 0xa0, 0xa2, 0x9f, 0xa2, 0x9f, 0x9f, 0x9f, 0x99, 0x99, 0x99, 0x98, 0x98, 
+  0x9d, 0x9d, 0x9d, 0x94, 0x96, 0x85, 0xb1, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb1, 0x58, 0x9d, 0x98, 0xae, 0xae, 0x9e, 0x9e, 0x9f, 0x9f, 0xa2, 0xa2, 0xa2, 0xa0, 
+  0xa2, 0xa0, 0xa0, 0xa0, 0xa0, 0xa2, 0x9f, 0xa2, 0x9f, 0x9f, 0x9f, 0x99, 0x99, 0x99, 0x98, 0x98, 
+  0x9d, 0x9d, 0x9d, 0x94, 0x96, 0x85, 0xb1, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x90, 0x98, 0x99, 0x9e, 0x9e, 0x9e, 0x9f, 0xa2, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0x99, 0xae, 0xae, 0x98, 0x98, 
+  0xa3, 0x89, 0x58, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x8a, 0x96, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0x9f, 0xa2, 0x9f, 0x9f, 0x9e, 0x99, 0x99, 0xae, 0xae, 0x8a, 0x62, 0x3f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x75, 0x75, 
+  0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x8a, 0x75, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x75, 0x75, 
+  0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x75, 0x8a, 0x75, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 0x25, 0x25, 0x27, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x29, 0x2c, 0x2b, 0x2b, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x29, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 0x27, 0x25, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x29, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 0x27, 0x25, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x29, 0x2f, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 
+  0x31, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x32, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x34, 
+  0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x2b, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x34, 
+  0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x2b, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x23, 0x34, 0x34, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2b, 0x27, 0x2b, 0x27, 0x2b, 0x27, 0x27, 
+  0x27, 0x25, 0x35, 0x36, 0x37, 0x38, 0x38, 0x39, 0x38, 0x39, 0x39, 0x39, 0x38, 0x38, 0x35, 0x34, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x34, 0x34, 0x34, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2b, 0x2e, 0x32, 0x2b, 0x2b, 0x27, 0x27, 0x27, 0x23, 
+  0x21, 0x37, 0x37, 0x29, 0x3a, 0x26, 0x3a, 0x26, 0x3a, 0x39, 0x38, 0x38, 0x39, 0x37, 0x37, 0x37, 
+  0x36, 0x33, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2b, 0x27, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x28, 0x23, 0x34, 0x31, 
+  0x31, 0x31, 0x31, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x35, 0x38, 
+  0x26, 0x3a, 0x36, 0x3b, 0x3c, 0x3b, 0x3c, 0x3b, 0x3b, 0x3d, 0x3e, 0x3f, 0x37, 0x26, 0x37, 0x37, 
+  0x37, 0x37, 0x37, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2b, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x28, 0x23, 0x34, 0x31, 
+  0x31, 0x31, 0x31, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x27, 0x35, 0x38, 
+  0x26, 0x3a, 0x36, 0x3b, 0x3c, 0x3b, 0x3c, 0x3b, 0x3b, 0x3d, 0x3e, 0x3f, 0x37, 0x26, 0x37, 0x37, 
+  0x37, 0x37, 0x37, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2b, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2c, 0x28, 0x28, 0x23, 0x23, 0x31, 
+  0x34, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x28, 0x37, 0x26, 0x36, 
+  0x3b, 0x3b, 0x40, 0x41, 0x40, 0x40, 0x42, 0x40, 0x3b, 0x3b, 0x43, 0x43, 0x44, 0x3e, 0x45, 0x29, 
+  0x39, 0x38, 0x37, 0x38, 0x3a, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2d, 0x28, 0x2c, 0x23, 0x34, 0x23, 0x34, 
+  0x34, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x28, 0x38, 0x3b, 0x3d, 0x3b, 
+  0x46, 0x40, 0x46, 0x46, 0x40, 0x40, 0x40, 0x40, 0x46, 0x40, 0x47, 0x43, 0x43, 0x48, 0x48, 0x3e, 
+  0x3a, 0x26, 0x37, 0x37, 0x37, 0x36, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x28, 0x2c, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x34, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x3d, 0x3e, 0x49, 0x24, 0x41, 0x40, 
+  0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x2d, 0x33, 0x4b, 0x4c, 0x43, 0x48, 
+  0x3e, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x23, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2b, 0x2b, 0x27, 
+  0x2b, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x28, 0x2c, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x34, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x3d, 0x3e, 0x49, 0x24, 0x41, 0x40, 
+  0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x40, 0x4a, 0x2d, 0x33, 0x4b, 0x4c, 0x43, 0x48, 
+  0x3e, 0x37, 0x37, 0x37, 0x38, 0x37, 0x37, 0x23, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2b, 0x2b, 0x27, 
+  0x2b, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2f, 0x4d, 0x2d, 0x28, 0x28, 0x28, 0x23, 0x34, 
+  0x34, 0x34, 0x31, 0x31, 0x31, 0x30, 0x30, 0x2e, 0x2e, 0x28, 0x3e, 0x3d, 0x42, 0x40, 0x4e, 0x4f, 
+  0x50, 0x23, 0x4e, 0x51, 0x4a, 0x51, 0x52, 0x2c, 0x4a, 0x53, 0x4a, 0x4a, 0x35, 0x4b, 0x4b, 0x43, 
+  0x48, 0x36, 0x3f, 0x26, 0x37, 0x37, 0x54, 0x38, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x28, 0x28, 0x28, 0x23, 
+  0x34, 0x34, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2c, 0x3f, 0x4b, 0x21, 0x40, 0x4a, 0x55, 0x28, 
+  0x34, 0x51, 0x56, 0x51, 0x51, 0x23, 0x57, 0x58, 0x2c, 0x59, 0x23, 0x4a, 0x5a, 0x5b, 0x5b, 0x5c, 
+  0x4b, 0x43, 0x3b, 0x3a, 0x29, 0x37, 0x37, 0x54, 0x3d, 0x25, 0x27, 0x27, 0x27, 0x2b, 0x27, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2f, 0x2d, 0x28, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x31, 0x34, 0x31, 0x31, 0x31, 0x31, 0x30, 0x3f, 0x48, 0x5c, 0x4a, 0x4a, 0x59, 0x51, 0x51, 
+  0x56, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x5d, 0x57, 0x59, 0x51, 0x51, 0x5a, 0x5a, 0x5b, 0x5b, 
+  0x5c, 0x43, 0x47, 0x5e, 0x3a, 0x26, 0x54, 0x39, 0x39, 0x21, 0x27, 0x27, 0x27, 0x27, 0x2b, 0x27, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2f, 0x2d, 0x28, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x31, 0x34, 0x31, 0x31, 0x31, 0x31, 0x30, 0x3f, 0x48, 0x5c, 0x4a, 0x4a, 0x59, 0x51, 0x51, 
+  0x56, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x5d, 0x57, 0x59, 0x51, 0x51, 0x5a, 0x5a, 0x5b, 0x5b, 
+  0x5c, 0x43, 0x47, 0x5e, 0x3a, 0x26, 0x54, 0x39, 0x39, 0x21, 0x27, 0x27, 0x27, 0x27, 0x2b, 0x27, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x35, 0x2f, 0x2f, 0x2d, 0x2d, 0x2c, 0x28, 0x28, 0x23, 
+  0x23, 0x34, 0x34, 0x31, 0x31, 0x30, 0x30, 0x3d, 0x43, 0x5c, 0x5a, 0x5a, 0x31, 0x51, 0x51, 0x51, 
+  0x51, 0x5f, 0x5f, 0x5f, 0x5f, 0x30, 0x5f, 0x27, 0x30, 0x60, 0x4d, 0x51, 0x5a, 0x61, 0x5a, 0x62, 
+  0x5b, 0x4b, 0x4b, 0x48, 0x49, 0x45, 0x29, 0x54, 0x39, 0x38, 0x23, 0x2b, 0x27, 0x27, 0x2b, 0x2b, 
+  0x2e, 0x32, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x21, 0x35, 0x33, 0x2f, 0x4d, 0x2d, 0x28, 0x28, 0x28, 0x28, 
+  0x34, 0x23, 0x31, 0x31, 0x31, 0x31, 0x2d, 0x5e, 0x4b, 0x5a, 0x5a, 0x58, 0x51, 0x51, 0x5f, 0x5f, 
+  0x63, 0x63, 0x63, 0x63, 0x64, 0x5d, 0x32, 0x63, 0x5d, 0x60, 0x65, 0x5d, 0x5d, 0x58, 0x58, 0x66, 
+  0x5a, 0x5b, 0x5c, 0x4c, 0x48, 0x3d, 0x3a, 0x39, 0x37, 0x37, 0x3a, 0x27, 0x2b, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x7b, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x28, 0x28, 0x28, 
+  0x34, 0x23, 0x34, 0x31, 0x31, 0x31, 0x4c, 0x4c, 0x5b, 0x66, 0x58, 0x67, 0x51, 0x5f, 0x63, 0x68, 
+  0x64, 0x68, 0x64, 0x69, 0x6a, 0x6b, 0x64, 0x30, 0x6c, 0x60, 0x65, 0x65, 0x60, 0x58, 0x58, 0x66, 
+  0x66, 0x5b, 0x5b, 0x5c, 0x43, 0x48, 0x3a, 0x39, 0x37, 0x37, 0x37, 0x3a, 0x24, 0x2b, 0x27, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0xab, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3a, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x28, 0x28, 0x28, 
+  0x34, 0x23, 0x34, 0x31, 0x31, 0x31, 0x4c, 0x4c, 0x5b, 0x66, 0x58, 0x67, 0x51, 0x5f, 0x63, 0x68, 
+  0x64, 0x68, 0x64, 0x69, 0x6a, 0x6b, 0x64, 0x30, 0x6c, 0x60, 0x65, 0x65, 0x60, 0x58, 0x58, 0x66, 
+  0x66, 0x5b, 0x5b, 0x5c, 0x43, 0x48, 0x3a, 0x39, 0x37, 0x37, 0x37, 0x3a, 0x24, 0x2b, 0x27, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0xab, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2c, 0x2c, 0x28, 0x23, 
+  0x28, 0x23, 0x34, 0x34, 0x34, 0x31, 0x48, 0x5c, 0x66, 0x58, 0x60, 0x67, 0x5f, 0x63, 0x68, 0x64, 
+  0x64, 0x64, 0x64, 0x6a, 0x6d, 0x69, 0x64, 0x64, 0x68, 0x30, 0x6e, 0x65, 0x60, 0x60, 0x57, 0x58, 
+  0x66, 0x66, 0x5b, 0x5c, 0x4b, 0x43, 0x3e, 0x3e, 0x37, 0x37, 0x37, 0x20, 0x20, 0x20, 0x29, 0x24, 
+  0x2e, 0x32, 0x24, 0x20, 0xab, 0x7e, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2c, 0x2d, 0x2c, 0x23, 
+  0x28, 0x23, 0x34, 0x34, 0x34, 0x33, 0x6f, 0x5b, 0x58, 0x57, 0x60, 0x32, 0x63, 0x64, 0x64, 0x70, 
+  0x70, 0x70, 0x70, 0x71, 0x72, 0x6b, 0x73, 0x70, 0x64, 0x64, 0x64, 0x65, 0x65, 0x65, 0x60, 0x57, 
+  0x58, 0x66, 0x5a, 0x5b, 0x4b, 0x6f, 0x48, 0x3f, 0x26, 0x38, 0x37, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x24, 0x2a, 0x39, 0x7e, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x28, 0x28, 
+  0x23, 0x23, 0x23, 0x34, 0x34, 0x5c, 0x4b, 0x66, 0x61, 0x60, 0x6e, 0x30, 0x64, 0x64, 0x70, 0x70, 
+  0x70, 0x71, 0x71, 0x71, 0x71, 0x74, 0x71, 0x70, 0x70, 0x64, 0x74, 0x73, 0x5d, 0x65, 0x60, 0x57, 
+  0x57, 0x58, 0x5a, 0x5a, 0x62, 0x4b, 0x43, 0x3e, 0x26, 0x37, 0x38, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xab, 0xab, 0x7e, 0x7e, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2c, 0x28, 0x28, 
+  0x23, 0x23, 0x23, 0x34, 0x34, 0x5c, 0x4b, 0x66, 0x61, 0x60, 0x6e, 0x30, 0x64, 0x64, 0x70, 0x70, 
+  0x70, 0x71, 0x71, 0x71, 0x71, 0x74, 0x71, 0x70, 0x70, 0x64, 0x74, 0x73, 0x5d, 0x65, 0x60, 0x57, 
+  0x57, 0x58, 0x5a, 0x5a, 0x62, 0x4b, 0x43, 0x3e, 0x26, 0x37, 0x38, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xab, 0xab, 0x7e, 0x7e, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x35, 0x33, 0x33, 0x2f, 0x2d, 0x2d, 0x2c, 0x2c, 
+  0x28, 0x23, 0x23, 0x34, 0x34, 0x3d, 0x62, 0x58, 0x57, 0x65, 0x65, 0x25, 0x64, 0x64, 0x71, 0x70, 
+  0x71, 0x75, 0x75, 0x75, 0x71, 0x71, 0x71, 0x71, 0x71, 0x72, 0x6e, 0x76, 0x6e, 0x65, 0x65, 0x60, 
+  0x57, 0x58, 0x77, 0x5a, 0x5a, 0x5c, 0x43, 0x43, 0x29, 0x26, 0x37, 0x38, 0x39, 0x20, 0x20, 0x20, 
+  0x20, 0x39, 0x7e, 0xab, 0xab, 0x7e, 0xab, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x2f, 0x2f, 0x2f, 0x2c, 0x28, 0x28, 
+  0x28, 0x28, 0x23, 0x23, 0x2f, 0x6f, 0x5a, 0x58, 0x60, 0x65, 0x6e, 0x64, 0x70, 0x71, 0x71, 0x78, 
+  0x78, 0x75, 0x78, 0x78, 0x78, 0x75, 0x78, 0x75, 0x71, 0x73, 0x73, 0x6a, 0x6a, 0x6a, 0x6e, 0x60, 
+  0x60, 0x57, 0x58, 0x5a, 0x5b, 0x4b, 0x4b, 0x48, 0x3a, 0x29, 0x37, 0x37, 0x38, 0x20, 0x20, 0x20, 
+  0xab, 0xab, 0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2d, 0x28, 
+  0x2c, 0x28, 0x23, 0x23, 0x3e, 0x4b, 0x5a, 0x57, 0x60, 0x6e, 0x22, 0x64, 0x70, 0x71, 0x75, 0x75, 
+  0x78, 0x78, 0x79, 0x78, 0x79, 0x79, 0x79, 0x71, 0x74, 0x6c, 0x7a, 0x6a, 0x6a, 0x6e, 0x6e, 0x60, 
+  0x60, 0x57, 0x58, 0x66, 0x5a, 0x62, 0x4b, 0x43, 0x47, 0x29, 0x37, 0x37, 0x38, 0x20, 0x7b, 0x44, 
+  0x85, 0x7e, 0x7e, 0x7e, 0xab, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2f, 0x2d, 0x2d, 0x28, 
+  0x2c, 0x28, 0x23, 0x23, 0x3e, 0x4b, 0x5a, 0x57, 0x60, 0x6e, 0x22, 0x64, 0x70, 0x71, 0x75, 0x75, 
+  0x78, 0x78, 0x79, 0x78, 0x79, 0x79, 0x79, 0x71, 0x74, 0x6c, 0x7a, 0x6a, 0x6a, 0x6e, 0x6e, 0x60, 
+  0x60, 0x57, 0x58, 0x66, 0x5a, 0x62, 0x4b, 0x43, 0x47, 0x29, 0x37, 0x37, 0x38, 0x20, 0x7b, 0x44, 
+  0x85, 0x7e, 0x7e, 0x7e, 0xab, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2d, 0x2c, 
+  0x28, 0x28, 0x35, 0x29, 0x45, 0x5c, 0x66, 0x57, 0x65, 0x65, 0x72, 0x70, 0x71, 0x78, 0x78, 0x78, 
+  0x78, 0x78, 0x79, 0x79, 0x7c, 0x79, 0x7c, 0x79, 0x6c, 0x7a, 0x7d, 0x7a, 0x7d, 0x6a, 0x6e, 0x65, 
+  0x65, 0x60, 0x58, 0x66, 0x5a, 0x5c, 0x5c, 0x43, 0x3e, 0x3a, 0x37, 0x37, 0x39, 0x44, 0x3f, 0x3f, 
+  0xac, 0xab, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2f, 0x2d, 0x2c, 
+  0x2c, 0x35, 0x20, 0x20, 0x7e, 0x5c, 0x5a, 0x57, 0x65, 0x6a, 0x7f, 0x63, 0x75, 0x75, 0x78, 0x79, 
+  0x79, 0x79, 0x79, 0x7c, 0x7c, 0x80, 0x80, 0x7c, 0x81, 0x82, 0x82, 0x7d, 0x7d, 0x6a, 0x6e, 0x65, 
+  0x60, 0x60, 0x57, 0x66, 0x66, 0x5b, 0x4b, 0x43, 0x49, 0x26, 0x37, 0x38, 0x83, 0x84, 0x3f, 0x44, 
+  0x85, 0xab, 0xab, 0xac, 0xab, 0xab, 0x7e, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2d, 0x2c, 
+  0x29, 0x20, 0x20, 0x20, 0x85, 0x5c, 0x66, 0x60, 0x65, 0x6e, 0x6a, 0x74, 0x70, 0x78, 0x78, 0x79, 
+  0x79, 0x79, 0x79, 0x7c, 0x86, 0x86, 0x86, 0x80, 0x87, 0x82, 0x7a, 0x7a, 0x7d, 0x7d, 0x6a, 0x6e, 
+  0x65, 0x60, 0x57, 0x66, 0x5a, 0x5a, 0x5c, 0x43, 0x48, 0x48, 0x4b, 0x83, 0x83, 0x88, 0x3f, 0x44, 
+  0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x21, 0x35, 0x33, 0x2f, 0x2d, 0x2d, 0x2c, 
+  0x29, 0x20, 0x20, 0x20, 0x85, 0x5c, 0x66, 0x60, 0x65, 0x6e, 0x6a, 0x74, 0x70, 0x78, 0x78, 0x79, 
+  0x79, 0x79, 0x79, 0x7c, 0x86, 0x86, 0x86, 0x80, 0x87, 0x82, 0x7a, 0x7a, 0x7d, 0x7d, 0x6a, 0x6e, 
+  0x65, 0x60, 0x57, 0x66, 0x5a, 0x5a, 0x5c, 0x43, 0x48, 0x48, 0x4b, 0x83, 0x83, 0x88, 0x3f, 0x44, 
+  0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x21, 0x33, 0x33, 0x2f, 0x2d, 0x38, 
+  0x20, 0x20, 0x20, 0x20, 0x45, 0x5c, 0x58, 0x60, 0x6e, 0x6a, 0x6b, 0x76, 0x70, 0x78, 0x78, 0x79, 
+  0x79, 0x79, 0x7c, 0x80, 0x86, 0x86, 0x86, 0x86, 0x87, 0x81, 0x69, 0x82, 0x6a, 0x6a, 0x6a, 0x65, 
+  0x60, 0x60, 0x57, 0x58, 0x89, 0x5a, 0x4b, 0x5b, 0x8a, 0x8b, 0x8a, 0x8c, 0x83, 0x88, 0x49, 0x3f, 
+  0x44, 0x7e, 0xab, 0x7e, 0x7e, 0xab, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2a, 0x24, 0x35, 0x35, 0x33, 0x2d, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x38, 0x5c, 0x5a, 0x60, 0x65, 0x6e, 0x6a, 0x76, 0x70, 0x75, 0x79, 0x79, 
+  0x79, 0x79, 0x79, 0x7c, 0x86, 0x86, 0x86, 0x86, 0x87, 0x8d, 0x82, 0x7a, 0x7a, 0x7d, 0x6a, 0x6e, 
+  0x65, 0x60, 0x57, 0x66, 0x66, 0x8b, 0x8e, 0x89, 0x8b, 0x8a, 0x8a, 0x8f, 0x83, 0x88, 0x3f, 0x3f, 
+  0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0xab, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2a, 0x21, 0x35, 0x4d, 0x8b, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x66, 0x57, 0x65, 0x6a, 0x6b, 0x7d, 0x70, 0x78, 0x78, 0x79, 
+  0x79, 0x90, 0x87, 0x87, 0x80, 0x80, 0x80, 0x80, 0x81, 0x82, 0x82, 0x7a, 0x7d, 0x6b, 0x6a, 0x6e, 
+  0x65, 0x60, 0x91, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8a, 0x8f, 0x8c, 0x83, 0x88, 0x3f, 0x3f, 
+  0xac, 0xac, 0xab, 0xab, 0xac, 0x7e, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2a, 0x21, 0x35, 0x4d, 0x8b, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x66, 0x57, 0x65, 0x6a, 0x6b, 0x7d, 0x70, 0x78, 0x78, 0x79, 
+  0x79, 0x90, 0x87, 0x87, 0x80, 0x80, 0x80, 0x80, 0x81, 0x82, 0x82, 0x7a, 0x7d, 0x6b, 0x6a, 0x6e, 
+  0x65, 0x60, 0x91, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8a, 0x8f, 0x8c, 0x83, 0x88, 0x3f, 0x3f, 
+  0xac, 0xac, 0xab, 0xab, 0xac, 0x7e, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x2a, 0x35, 0x21, 0x2a, 0x93, 0x94, 0x8e, 
+  0x44, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x5a, 0x57, 0x65, 0x6e, 0x6a, 0x69, 0x7f, 0x64, 0x78, 0x79, 
+  0x76, 0x8d, 0x69, 0x81, 0x87, 0x87, 0x87, 0x87, 0x82, 0x82, 0x7a, 0x82, 0x7a, 0x6a, 0x6a, 0x93, 
+  0x93, 0x95, 0x96, 0x96, 0x91, 0x91, 0x92, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x88, 0x84, 0x3f, 
+  0x44, 0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x21, 0x35, 0x20, 0x92, 0x94, 0x97, 
+  0x98, 0x99, 0x9a, 0x8b, 0x49, 0x5e, 0x5a, 0x58, 0x65, 0x6e, 0x6a, 0x7a, 0x69, 0x9b, 0x78, 0x79, 
+  0x76, 0x9c, 0x82, 0x9c, 0x9c, 0x81, 0x9d, 0x9e, 0x7a, 0x82, 0x9d, 0x7a, 0x9f, 0xa0, 0x98, 0x97, 
+  0x95, 0x96, 0x96, 0xa1, 0x91, 0x91, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x8c, 0x88, 0x3f, 0x3f, 
+  0x44, 0xac, 0x7e, 0xab, 0x7e, 0xab, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2a, 0x24, 0x39, 0x20, 0x8c, 0x93, 0x94, 
+  0xa0, 0xa0, 0xa2, 0xa2, 0x9d, 0xa3, 0xa4, 0x95, 0x9f, 0x98, 0x99, 0x9f, 0x9f, 0x8d, 0x64, 0x79, 
+  0x79, 0x69, 0x82, 0x9e, 0xa5, 0x82, 0x9c, 0x9c, 0x81, 0xa5, 0x9c, 0xa6, 0x99, 0x98, 0xa0, 0x94, 
+  0x93, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x92, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x84, 0x3f, 
+  0x44, 0x85, 0x7e, 0xac, 0xab, 0x7e, 0x7e, 0xab, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2a, 0x24, 0x39, 0x20, 0x8c, 0x93, 0x94, 
+  0xa0, 0xa0, 0xa2, 0xa2, 0x9d, 0xa3, 0xa4, 0x95, 0x9f, 0x98, 0x99, 0x9f, 0x9f, 0x8d, 0x64, 0x79, 
+  0x79, 0x69, 0x82, 0x9e, 0xa5, 0x82, 0x9c, 0x9c, 0x81, 0xa5, 0x9c, 0xa6, 0x99, 0x98, 0xa0, 0x94, 
+  0x93, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x92, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x84, 0x3f, 
+  0x44, 0x85, 0x7e, 0xac, 0xab, 0x7e, 0x7e, 0xab, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x36, 0x20, 0x20, 0x8c, 0x93, 0x94, 
+  0x98, 0x98, 0xa6, 0xa2, 0x9d, 0xa3, 0x9c, 0xa4, 0xa7, 0xa7, 0xa7, 0xa5, 0xa5, 0xa7, 0xa7, 0xa7, 
+  0x81, 0xa7, 0xa5, 0x81, 0xa5, 0xa8, 0x81, 0x81, 0x9e, 0xa6, 0xa6, 0xa6, 0x99, 0x98, 0x97, 0x97, 
+  0x95, 0x93, 0x9a, 0xa1, 0x91, 0xa9, 0x8e, 0x92, 0x8b, 0xaa, 0x8a, 0x8f, 0x83, 0x88, 0x88, 0x3f, 
+  0x44, 0xac, 0x7e, 0x7e, 0x7e, 0xab, 0xac, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x39, 0x20, 0x20, 0x20, 0x93, 0x94, 
+  0x94, 0xa0, 0x99, 0xa6, 0x9d, 0xa3, 0xa3, 0x9c, 0xa4, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xa5, 0x81, 0x81, 0xa5, 0x9d, 0x9d, 0xa2, 0x99, 0x99, 0x99, 0x98, 0x97, 0x94, 
+  0x95, 0x93, 0x9a, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x3f, 0x3f, 
+  0x44, 0x85, 0x7e, 0x7e, 0x7e, 0x7e, 0xad, 0xad, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x93, 
+  0x94, 0x98, 0x99, 0x99, 0x9e, 0x9d, 0xa3, 0x9c, 0x9c, 0xa4, 0xa4, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xa7, 0x81, 0x9c, 0x9d, 0x9d, 0x9d, 0x9d, 0xa2, 0x99, 0x99, 0x98, 0x97, 0x94, 
+  0x95, 0x93, 0x93, 0x9a, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x83, 0x83, 0x88, 0x3f, 
+  0x44, 0xac, 0x7e, 0xab, 0x7e, 0x7e, 0xab, 0xab, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x93, 
+  0x94, 0x98, 0x99, 0x99, 0x9e, 0x9d, 0xa3, 0x9c, 0x9c, 0xa4, 0xa4, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xa7, 0x81, 0x9c, 0x9d, 0x9d, 0x9d, 0x9d, 0xa2, 0x99, 0x99, 0x98, 0x97, 0x94, 
+  0x95, 0x93, 0x93, 0x9a, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x83, 0x83, 0x88, 0x3f, 
+  0x44, 0xac, 0x7e, 0xab, 0x7e, 0x7e, 0xab, 0xab, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0x93, 
+  0x95, 0x97, 0x98, 0x99, 0xa6, 0xa2, 0x9d, 0x9c, 0xa3, 0xa4, 0xa5, 0xa7, 0xa5, 0xa7, 0xa7, 0xa7, 
+  0xa5, 0xa7, 0xa5, 0xa4, 0x9c, 0xa3, 0xa3, 0xa3, 0x9c, 0x99, 0xa6, 0xa6, 0xa0, 0xa0, 0x97, 0x94, 
+  0x93, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x8e, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x8c, 0x83, 0x84, 0x49, 
+  0x3f, 0x44, 0xab, 0x7e, 0xac, 0xab, 0x7e, 0x7e, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x9a, 
+  0x93, 0x98, 0x98, 0xa0, 0xa6, 0xa2, 0xa2, 0xa3, 0x9c, 0xa3, 0x9c, 0xa5, 0xa4, 0xa5, 0xa7, 0xa7, 
+  0xa5, 0xa4, 0xa5, 0xa4, 0x9c, 0x9c, 0x9d, 0xa2, 0x9d, 0xa2, 0x99, 0x99, 0x98, 0xa0, 0x97, 0x94, 
+  0x95, 0x93, 0x9a, 0x9a, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8f, 0x8c, 0x83, 0x88, 0x3f, 
+  0x44, 0x44, 0xac, 0xab, 0x7e, 0xac, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x93, 
+  0x93, 0x95, 0x97, 0x98, 0x99, 0xa6, 0x9d, 0x9d, 0x9d, 0x9c, 0x9c, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa3, 0xa3, 0x9d, 0xa2, 0xa6, 0xa6, 0xa0, 0xa0, 0x97, 0x97, 0x94, 
+  0x93, 0x9a, 0x9a, 0xa1, 0x91, 0x8e, 0x8e, 0x92, 0x8b, 0x8b, 0xaa, 0x8f, 0x83, 0x83, 0x88, 0x49, 
+  0x3f, 0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x93, 
+  0x93, 0x95, 0x97, 0x98, 0x99, 0xa6, 0x9d, 0x9d, 0x9d, 0x9c, 0x9c, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa3, 0xa3, 0x9d, 0xa2, 0xa6, 0xa6, 0xa0, 0xa0, 0x97, 0x97, 0x94, 
+  0x93, 0x9a, 0x9a, 0xa1, 0x91, 0x8e, 0x8e, 0x92, 0x8b, 0x8b, 0xaa, 0x8f, 0x83, 0x83, 0x88, 0x49, 
+  0x3f, 0xac, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x93, 0x93, 0x97, 0x98, 0x98, 0x99, 0xa6, 0xa2, 0x9d, 0xa3, 0xa3, 0x9c, 0x9c, 0x9c, 0xa4, 0xa4, 
+  0xa4, 0x9c, 0x9c, 0xa4, 0xa3, 0x9d, 0xa2, 0xa2, 0xa2, 0x99, 0x99, 0x98, 0x98, 0x97, 0x97, 0x94, 
+  0x95, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x77, 0x92, 0x89, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x88, 0x49, 
+  0x3f, 0x44, 0xac, 0x7e, 0xab, 0xab, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa1, 
+  0x9a, 0x93, 0x94, 0x98, 0xa0, 0x99, 0x99, 0xa2, 0xa2, 0x9d, 0x9d, 0xa3, 0xa3, 0xa3, 0x9c, 0x9c, 
+  0x9c, 0xa3, 0xa3, 0xa3, 0x9d, 0xa3, 0x9e, 0x9c, 0xa2, 0xa6, 0x99, 0x99, 0x98, 0x97, 0x94, 0x95, 
+  0x93, 0x93, 0x9a, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0xaa, 0x8b, 0x8a, 0x8f, 0x83, 0x88, 0x3f, 
+  0x3f, 0x85, 0x44, 0xab, 0x7e, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x96, 0x93, 0x95, 0x94, 0xa0, 0xa0, 0x99, 0xa6, 0xa2, 0xa2, 0x9d, 0x9d, 0x9c, 0xa3, 0xa3, 0xa3, 
+  0x9c, 0x9c, 0x9d, 0xa3, 0x9c, 0x9d, 0xa2, 0x99, 0x99, 0xa6, 0xa0, 0xa0, 0xa0, 0x97, 0x94, 0x93, 
+  0x93, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0xaa, 0x8a, 0x8f, 0x83, 0x83, 0x83, 0x3f, 
+  0x3f, 0x44, 0x85, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x96, 0x93, 0x95, 0x94, 0xa0, 0xa0, 0x99, 0xa6, 0xa2, 0xa2, 0x9d, 0x9d, 0x9c, 0xa3, 0xa3, 0xa3, 
+  0x9c, 0x9c, 0x9d, 0xa3, 0x9c, 0x9d, 0xa2, 0x99, 0x99, 0xa6, 0xa0, 0xa0, 0xa0, 0x97, 0x94, 0x93, 
+  0x93, 0x93, 0x9a, 0xa1, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0xaa, 0x8a, 0x8f, 0x83, 0x83, 0x83, 0x3f, 
+  0x3f, 0x44, 0x85, 0x7e, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x91, 0x93, 0x93, 0x94, 0x94, 0xa0, 0x99, 0x99, 0xa6, 0x9e, 0xa2, 0x9d, 0x9d, 0x9d, 0x9d, 0x9c, 
+  0xa3, 0xa3, 0x9d, 0x9d, 0x9d, 0xa2, 0x9d, 0xa2, 0xa6, 0x99, 0x99, 0xa0, 0x97, 0xa0, 0x94, 0x95, 
+  0x93, 0x96, 0x9a, 0x91, 0x91, 0x8e, 0x8e, 0x92, 0x89, 0x8b, 0xaa, 0x8a, 0x8f, 0x83, 0x88, 0x84, 
+  0x3f, 0x44, 0xac, 0xab, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x91, 0x93, 0x93, 0x94, 0x94, 0x98, 0xa0, 0x99, 0x99, 0xa6, 0xa2, 0xa2, 0x9d, 0x9d, 0x9d, 0x9d, 
+  0x9d, 0x9d, 0x9d, 0x9e, 0xa2, 0x9e, 0xa6, 0xa6, 0x99, 0x99, 0xa0, 0x98, 0x97, 0x97, 0x94, 0x93, 
+  0x93, 0x96, 0x9a, 0xa1, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x83, 0x83, 0x88, 0x3f, 
+  0x3f, 0x44, 0xad, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa1, 0x9a, 0x93, 0x95, 0x94, 0x94, 0x98, 0xa0, 0x99, 0xa6, 0xa6, 0xa2, 0xa2, 0x9d, 0xa2, 0x9d, 
+  0x9d, 0x9d, 0x9e, 0xa6, 0x9c, 0x99, 0xa2, 0x99, 0xa6, 0x99, 0x98, 0x98, 0x97, 0x94, 0x95, 0x95, 
+  0x93, 0x9a, 0x9a, 0x91, 0x91, 0x8e, 0x92, 0x92, 0x8b, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x88, 
+  0x3f, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa1, 0x9a, 0x93, 0x95, 0x94, 0x94, 0x98, 0xa0, 0x99, 0xa6, 0xa6, 0xa2, 0xa2, 0x9d, 0xa2, 0x9d, 
+  0x9d, 0x9d, 0x9e, 0xa6, 0x9c, 0x99, 0xa2, 0x99, 0xa6, 0x99, 0x98, 0x98, 0x97, 0x94, 0x95, 0x95, 
+  0x93, 0x9a, 0x9a, 0x91, 0x91, 0x8e, 0x92, 0x92, 0x8b, 0x8b, 0x8b, 0x8a, 0x8f, 0x83, 0x83, 0x88, 
+  0x3f, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8b, 0x91, 0x96, 0x93, 0x94, 0x97, 0x98, 0x98, 0x99, 0x99, 0xa6, 0xa6, 0x99, 0xa2, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0x9e, 0xa6, 0xa6, 0x99, 0xa2, 0x99, 0xa6, 0xa0, 0xa0, 0x97, 0x97, 0x94, 0x93, 0x93, 
+  0x93, 0x9a, 0x9a, 0x91, 0x91, 0x8e, 0x8e, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x8f, 0x83, 0x83, 0x3f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x88, 0xa1, 0x9a, 0x93, 0x95, 0x94, 0x94, 0x98, 0xa0, 0x99, 0x99, 0x99, 0xa6, 0xa2, 0xa6, 0xa6, 
+  0x9e, 0xa2, 0x99, 0xa2, 0xa6, 0xa6, 0x99, 0x99, 0xa0, 0xa0, 0x98, 0x98, 0x94, 0x97, 0x94, 0x93, 
+  0x9a, 0x96, 0x9a, 0x91, 0x8e, 0x8e, 0x8e, 0x92, 0x8b, 0x8b, 0xaa, 0x8a, 0x8f, 0x8c, 0x54, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xac, 0x91, 0x9a, 0x9a, 0x93, 0x94, 0x97, 0x94, 0xa0, 0xa0, 0x99, 0x99, 0xa6, 0x99, 0xa6, 0x99, 
+  0xa2, 0xa2, 0x99, 0xa2, 0xa6, 0xa6, 0xa6, 0xa0, 0xa0, 0xa0, 0x97, 0xa0, 0x94, 0x95, 0x95, 0x93, 
+  0x9a, 0x9a, 0x9a, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x44, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xac, 0x91, 0x9a, 0x9a, 0x93, 0x94, 0x97, 0x94, 0xa0, 0xa0, 0x99, 0x99, 0xa6, 0x99, 0xa6, 0x99, 
+  0xa2, 0xa2, 0x99, 0xa2, 0xa6, 0xa6, 0xa6, 0xa0, 0xa0, 0xa0, 0x97, 0xa0, 0x94, 0x95, 0x95, 0x93, 
+  0x9a, 0x9a, 0x9a, 0x91, 0x91, 0x8e, 0x77, 0x92, 0x8b, 0x8b, 0x8a, 0x8a, 0x44, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8e, 0xa1, 0x9a, 0x93, 0x95, 0x95, 0x97, 0x97, 0x98, 0xa0, 0x99, 0x99, 0xa6, 0x99, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0x99, 0x99, 0xa0, 0x99, 0x98, 0x98, 0x98, 0x98, 0x94, 0x94, 0x94, 0x93, 0x93, 
+  0x93, 0x9a, 0x9a, 0x91, 0x8e, 0x8e, 0x92, 0x92, 0x8b, 0x8b, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0xaa, 0x91, 0xa1, 0x9a, 0x93, 0x95, 0x94, 0x94, 0x98, 0xa0, 0xa0, 0xa0, 0x99, 0x99, 0x99, 
+  0x99, 0x99, 0x99, 0x99, 0x99, 0xa0, 0x99, 0x99, 0x98, 0x98, 0x97, 0x97, 0x94, 0x94, 0x95, 0x93, 
+  0x96, 0x9a, 0xa1, 0x91, 0x8e, 0x8e, 0x8e, 0x8a, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x85, 0x83, 0x9a, 0x93, 0x93, 0x94, 0x97, 0x97, 0x97, 0x98, 0x98, 0xa0, 0x99, 0x99, 
+  0x99, 0xa6, 0x99, 0x99, 0x99, 0x98, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x94, 0x95, 0x95, 0x93, 0x96, 
+  0x9a, 0x9a, 0x91, 0x91, 0x91, 0x88, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x85, 0x83, 0x9a, 0x93, 0x93, 0x94, 0x97, 0x97, 0x97, 0x98, 0x98, 0xa0, 0x99, 0x99, 
+  0x99, 0xa6, 0x99, 0x99, 0x99, 0x98, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x94, 0x95, 0x95, 0x93, 0x96, 
+  0x9a, 0x9a, 0x91, 0x91, 0x91, 0x88, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x92, 0x95, 0x95, 0x94, 0x98, 0x98, 0x98, 0xa0, 0xa0, 0xa0, 
+  0x98, 0x99, 0xa0, 0xa0, 0xa0, 0xa0, 0x98, 0x98, 0x97, 0x94, 0x97, 0x97, 0x95, 0x93, 0x93, 0x93, 
+  0x9a, 0x89, 0x83, 0xac, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x8a, 0x8e, 0x97, 0x98, 0x97, 0x98, 0xa0, 
+  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x98, 0x98, 0x97, 0x94, 0x97, 0x94, 0x95, 0x95, 0x8f, 0x8f, 0x85, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x8f, 0x8a, 
+  0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x8f, 0x8a, 
+  0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2f, 0x30, 0x30, 0x2e, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 
+  0x32, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x33, 0x34, 
+  0x30, 0x32, 0x30, 0x30, 0x2e, 0x30, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x33, 0x34, 
+  0x30, 0x32, 0x30, 0x30, 0x2e, 0x30, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x23, 0x34, 0x34, 
+  0x32, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x35, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x36, 0x38, 0x38, 0x38, 0x33, 0x34, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x23, 0x34, 0x34, 0x34, 
+  0x34, 0x32, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x23, 
+  0x35, 0x38, 0x36, 0x39, 0x3a, 0x39, 0x39, 0x39, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x38, 0x36, 0x36, 
+  0x37, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x35, 0x36, 
+  0x36, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3d, 0x3e, 0x3f, 0x3b, 0x36, 0x36, 
+  0x36, 0x36, 0x36, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x35, 0x36, 
+  0x36, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3d, 0x3e, 0x3f, 0x3b, 0x36, 0x36, 
+  0x36, 0x36, 0x36, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x34, 
+  0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x2e, 0x2e, 0x2d, 0x2a, 0x2e, 0x2a, 0x23, 0x3b, 0x3f, 0x39, 
+  0x3c, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x40, 0x40, 0x31, 0x42, 0x42, 0x42, 0x43, 0x39, 0x26, 
+  0x36, 0x38, 0x36, 0x38, 0x39, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2a, 0x2b, 0x26, 0x39, 0x31, 0x41, 
+  0x41, 0x44, 0x44, 0x44, 0x45, 0x45, 0x45, 0x44, 0x24, 0x46, 0x46, 0x47, 0x48, 0x3d, 0x3c, 0x39, 
+  0x3a, 0x3a, 0x38, 0x36, 0x36, 0x37, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x27, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x2f, 0x2c, 0x2b, 0x2b, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2d, 0x49, 0x26, 0x3c, 0x41, 0x24, 0x21, 
+  0x4a, 0x4b, 0x4b, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4d, 0x4e, 0x4e, 0x4e, 0x46, 0x49, 0x3c, 
+  0x3c, 0x39, 0x3a, 0x36, 0x38, 0x36, 0x36, 0x34, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x2f, 0x2c, 0x2b, 0x2b, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2d, 0x49, 0x26, 0x3c, 0x41, 0x24, 0x21, 
+  0x4a, 0x4b, 0x4b, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4d, 0x4e, 0x4e, 0x4e, 0x46, 0x49, 0x3c, 
+  0x3c, 0x39, 0x3a, 0x36, 0x38, 0x36, 0x36, 0x34, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2c, 0x4f, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x28, 0x3a, 0x24, 0x40, 0x4c, 0x44, 0x2c, 
+  0x50, 0x35, 0x51, 0x52, 0x4f, 0x52, 0x52, 0x52, 0x51, 0x4c, 0x53, 0x53, 0x54, 0x4d, 0x46, 0x24, 
+  0x3c, 0x3c, 0x39, 0x26, 0x36, 0x38, 0x36, 0x36, 0x27, 0x27, 0x27, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x33, 0x4f, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2b, 0x3e, 0x42, 0x24, 0x44, 0x4c, 0x51, 0x51, 
+  0x55, 0x56, 0x57, 0x51, 0x58, 0x59, 0x34, 0x56, 0x52, 0x52, 0x4f, 0x53, 0x54, 0x53, 0x4e, 0x4e, 
+  0x31, 0x40, 0x5a, 0x39, 0x3a, 0x38, 0x38, 0x36, 0x37, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x2f, 0x2f, 0x2b, 0x2b, 0x2b, 0x23, 0x23, 0x23, 
+  0x23, 0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x30, 0x5b, 0x49, 0x4d, 0x4c, 0x51, 0x56, 0x57, 0x57, 
+  0x57, 0x5c, 0x5c, 0x5c, 0x30, 0x5d, 0x28, 0x57, 0x5c, 0x51, 0x59, 0x50, 0x5e, 0x53, 0x53, 0x5f, 
+  0x46, 0x47, 0x3c, 0x3c, 0x39, 0x3a, 0x36, 0x36, 0x38, 0x35, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x2f, 0x2f, 0x2b, 0x2b, 0x2b, 0x23, 0x23, 0x23, 
+  0x23, 0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x30, 0x5b, 0x49, 0x4d, 0x4c, 0x51, 0x56, 0x57, 0x57, 
+  0x57, 0x5c, 0x5c, 0x5c, 0x30, 0x5d, 0x28, 0x57, 0x5c, 0x51, 0x59, 0x50, 0x5e, 0x53, 0x53, 0x5f, 
+  0x46, 0x47, 0x3c, 0x3c, 0x39, 0x3a, 0x36, 0x36, 0x38, 0x35, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x35, 0x33, 0x2f, 0x2c, 0x2b, 0x2c, 0x28, 0x28, 0x23, 
+  0x34, 0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x49, 0x42, 0x54, 0x2f, 0x4c, 0x52, 0x57, 0x5c, 0x5c, 
+  0x60, 0x60, 0x27, 0x60, 0x2a, 0x58, 0x61, 0x60, 0x5c, 0x58, 0x58, 0x58, 0x59, 0x62, 0x63, 0x53, 
+  0x44, 0x21, 0x41, 0x41, 0x43, 0x26, 0x26, 0x36, 0x64, 0x38, 0x23, 0x2a, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x21, 0x33, 0x2f, 0x4f, 0x2c, 0x2b, 0x2b, 0x23, 0x28, 
+  0x23, 0x34, 0x34, 0x34, 0x32, 0x32, 0x2c, 0x65, 0x4e, 0x54, 0x4c, 0x57, 0x5c, 0x60, 0x60, 0x60, 
+  0x66, 0x2a, 0x67, 0x66, 0x60, 0x67, 0x68, 0x27, 0x60, 0x61, 0x5d, 0x58, 0x5d, 0x59, 0x59, 0x53, 
+  0x4c, 0x4c, 0x45, 0x40, 0x40, 0x3c, 0x39, 0x64, 0x3b, 0x36, 0x37, 0x27, 0x2a, 0x2a, 0x27, 0x2a, 
+  0x2e, 0x2d, 0x20, 0x20, 0x20, 0x82, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2c, 0x2b, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x34, 0x34, 0x32, 0x30, 0x31, 0x69, 0x54, 0x4f, 0x56, 0x5c, 0x6a, 0x60, 0x6b, 0x66, 
+  0x5d, 0x68, 0x27, 0x66, 0x67, 0x5d, 0x6c, 0x68, 0x2a, 0x61, 0x61, 0x5d, 0x50, 0x58, 0x59, 0x62, 
+  0x50, 0x4d, 0x5f, 0x6d, 0x31, 0x3a, 0x49, 0x3b, 0x3b, 0x36, 0x36, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x29, 0x20, 0x20, 0xbb, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2c, 0x2b, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x34, 0x34, 0x32, 0x30, 0x31, 0x69, 0x54, 0x4f, 0x56, 0x5c, 0x6a, 0x60, 0x6b, 0x66, 
+  0x5d, 0x68, 0x27, 0x66, 0x67, 0x5d, 0x6c, 0x68, 0x2a, 0x61, 0x61, 0x5d, 0x50, 0x58, 0x59, 0x62, 
+  0x50, 0x4d, 0x5f, 0x6d, 0x31, 0x3a, 0x49, 0x3b, 0x3b, 0x36, 0x36, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x29, 0x20, 0x20, 0xbb, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2c, 0x2b, 0x28, 0x28, 0x23, 
+  0x28, 0x23, 0x34, 0x34, 0x34, 0x34, 0x3e, 0x6e, 0x62, 0x6f, 0x57, 0x60, 0x60, 0x6b, 0x70, 0x66, 
+  0x6c, 0x6c, 0x70, 0x6b, 0x66, 0x67, 0x6c, 0x6c, 0x6c, 0x6c, 0x61, 0x61, 0x5d, 0x5d, 0x58, 0x59, 
+  0x53, 0x5f, 0x53, 0x24, 0x4a, 0x42, 0x3d, 0x5b, 0x3b, 0x36, 0x36, 0x64, 0x20, 0x20, 0x3a, 0x24, 
+  0x2e, 0x2a, 0x24, 0x20, 0x97, 0x97, 0x89, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x21, 0x35, 0x33, 0x2f, 0x2c, 0x2c, 0x2b, 0x2b, 0x28, 
+  0x23, 0x23, 0x34, 0x34, 0x32, 0x24, 0x46, 0x54, 0x50, 0x57, 0x60, 0x60, 0x70, 0x70, 0x71, 0x71, 
+  0x66, 0x67, 0x72, 0x71, 0x73, 0x66, 0x74, 0x75, 0x6c, 0x6c, 0x68, 0x76, 0x61, 0x61, 0x5d, 0x58, 
+  0x59, 0x53, 0x5f, 0x4c, 0x45, 0x46, 0x31, 0x39, 0x26, 0x38, 0x36, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x24, 0x29, 0x97, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x28, 0x23, 
+  0x28, 0x23, 0x23, 0x34, 0x34, 0x31, 0x4e, 0x59, 0x51, 0x6a, 0x60, 0x6b, 0x71, 0x71, 0x71, 0x73, 
+  0x73, 0x66, 0x71, 0x73, 0x73, 0x73, 0x77, 0x78, 0x75, 0x6c, 0x6c, 0x6c, 0x68, 0x61, 0x5d, 0x5d, 
+  0x58, 0x59, 0x62, 0x2c, 0x44, 0x46, 0x31, 0x3c, 0x39, 0x36, 0x38, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x97, 0x97, 0x89, 0x89, 0x89, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x28, 0x23, 
+  0x28, 0x23, 0x23, 0x34, 0x34, 0x31, 0x4e, 0x59, 0x51, 0x6a, 0x60, 0x6b, 0x71, 0x71, 0x71, 0x73, 
+  0x73, 0x66, 0x71, 0x73, 0x73, 0x73, 0x77, 0x78, 0x75, 0x6c, 0x6c, 0x6c, 0x68, 0x61, 0x5d, 0x5d, 
+  0x58, 0x59, 0x62, 0x2c, 0x44, 0x46, 0x31, 0x3c, 0x39, 0x36, 0x38, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x97, 0x97, 0x89, 0x89, 0x89, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x35, 0x33, 0x2f, 0x2c, 0x2c, 0x2b, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x34, 0x42, 0x54, 0x35, 0x57, 0x60, 0x70, 0x70, 0x71, 0x71, 0x73, 0x73, 
+  0x73, 0x79, 0x79, 0x79, 0x73, 0x73, 0x71, 0x67, 0x7a, 0x78, 0x6c, 0x6c, 0x6c, 0x61, 0x5d, 0x5d, 
+  0x5d, 0x59, 0x62, 0x5f, 0x5f, 0x35, 0x40, 0x3c, 0x39, 0x36, 0x36, 0x38, 0x38, 0x20, 0x20, 0x20, 
+  0x20, 0x97, 0x89, 0x89, 0x97, 0x89, 0x97, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2c, 0x2c, 0x2b, 0x2b, 
+  0x28, 0x28, 0x28, 0x34, 0x33, 0x46, 0x7b, 0x28, 0x5c, 0x60, 0x6b, 0x71, 0x71, 0x73, 0x73, 0x7c, 
+  0x79, 0x7c, 0x79, 0x7c, 0x73, 0x7d, 0x7e, 0x66, 0x7a, 0x74, 0x78, 0x6c, 0x68, 0x6c, 0x68, 0x5d, 
+  0x58, 0x58, 0x59, 0x62, 0x53, 0x2f, 0x41, 0x3c, 0x43, 0x3a, 0x36, 0x36, 0x38, 0x20, 0x20, 0x20, 
+  0x97, 0x89, 0x90, 0x97, 0x89, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2c, 0x2c, 0x2b, 0x2b, 
+  0x28, 0x23, 0x23, 0x23, 0x47, 0x4e, 0x62, 0x28, 0x5c, 0x70, 0x70, 0x77, 0x77, 0x73, 0x79, 0x7c, 
+  0x79, 0x79, 0x7f, 0x79, 0x7f, 0x73, 0x80, 0x80, 0x80, 0x74, 0x81, 0x78, 0x6c, 0x68, 0x68, 0x61, 
+  0x5d, 0x5d, 0x59, 0x53, 0x53, 0x44, 0x45, 0x40, 0x3c, 0x3a, 0x36, 0x38, 0x38, 0x20, 0x82, 0x83, 
+  0x89, 0x89, 0x89, 0x89, 0x97, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2c, 0x2c, 0x2b, 0x2b, 
+  0x28, 0x23, 0x23, 0x23, 0x47, 0x4e, 0x62, 0x28, 0x5c, 0x70, 0x70, 0x77, 0x77, 0x73, 0x79, 0x7c, 
+  0x79, 0x79, 0x7f, 0x79, 0x7f, 0x73, 0x80, 0x80, 0x80, 0x74, 0x81, 0x78, 0x6c, 0x68, 0x68, 0x61, 
+  0x5d, 0x5d, 0x59, 0x53, 0x53, 0x44, 0x45, 0x40, 0x3c, 0x3a, 0x36, 0x38, 0x38, 0x20, 0x82, 0x83, 
+  0x89, 0x89, 0x89, 0x89, 0x97, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x2f, 0x2f, 0x4f, 0x2c, 0x2b, 
+  0x28, 0x2b, 0x35, 0x26, 0x38, 0x46, 0x53, 0x23, 0x60, 0x6b, 0x71, 0x77, 0x73, 0x73, 0x79, 0x79, 
+  0x79, 0x7f, 0x79, 0x84, 0x85, 0x86, 0x86, 0x87, 0x88, 0x81, 0x74, 0x74, 0x74, 0x6c, 0x68, 0x61, 
+  0x5d, 0x58, 0x59, 0x59, 0x53, 0x4c, 0x41, 0x41, 0x3c, 0x39, 0x36, 0x36, 0x36, 0x83, 0x3e, 0x83, 
+  0x90, 0x97, 0x89, 0x89, 0x89, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x2f, 0x33, 0x2c, 0x2c, 0x4f, 
+  0x28, 0x35, 0x20, 0x20, 0x89, 0x4e, 0x62, 0x23, 0x60, 0x70, 0x71, 0x77, 0x73, 0x79, 0x7c, 0x7f, 
+  0x79, 0x79, 0x7e, 0x86, 0x8a, 0x8b, 0x8b, 0x8a, 0x7d, 0x8c, 0x81, 0x78, 0x74, 0x75, 0x6c, 0x61, 
+  0x61, 0x5d, 0x58, 0x62, 0x8d, 0x4c, 0x44, 0x40, 0x3c, 0x3a, 0x36, 0x26, 0x8e, 0x8f, 0x3e, 0x3e, 
+  0x5b, 0x89, 0x97, 0x90, 0x97, 0x97, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x33, 0x33, 0x2f, 0x2f, 0x4f, 0x2b, 
+  0x26, 0x20, 0x20, 0x20, 0x90, 0x54, 0x59, 0x28, 0x60, 0x6b, 0x71, 0x73, 0x73, 0x79, 0x79, 0x79, 
+  0x7f, 0x91, 0x92, 0x8a, 0x93, 0x94, 0x93, 0x8b, 0x86, 0x87, 0x81, 0x74, 0x78, 0x6c, 0x6c, 0x68, 
+  0x61, 0x58, 0x58, 0x59, 0x5f, 0x4c, 0x44, 0x40, 0x3c, 0x37, 0x8e, 0x95, 0x8e, 0x96, 0x3e, 0x83, 
+  0x90, 0x97, 0x89, 0x89, 0x89, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x33, 0x33, 0x2f, 0x2f, 0x4f, 0x2b, 
+  0x26, 0x20, 0x20, 0x20, 0x90, 0x54, 0x59, 0x28, 0x60, 0x6b, 0x71, 0x73, 0x73, 0x79, 0x79, 0x79, 
+  0x7f, 0x91, 0x92, 0x8a, 0x93, 0x94, 0x93, 0x8b, 0x86, 0x87, 0x81, 0x74, 0x78, 0x6c, 0x6c, 0x68, 
+  0x61, 0x58, 0x58, 0x59, 0x5f, 0x4c, 0x44, 0x40, 0x3c, 0x37, 0x8e, 0x95, 0x8e, 0x96, 0x3e, 0x83, 
+  0x90, 0x97, 0x89, 0x89, 0x89, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x35, 0x33, 0x2f, 0x2f, 0x2c, 0x36, 
+  0x20, 0x20, 0x20, 0x20, 0x97, 0x4e, 0x62, 0x5d, 0x66, 0x6b, 0x71, 0x73, 0x79, 0x79, 0x7f, 0x79, 
+  0x77, 0x98, 0x86, 0x8b, 0x93, 0x93, 0x93, 0x93, 0x8a, 0x99, 0x80, 0x9a, 0x81, 0x6c, 0x6c, 0x61, 
+  0x61, 0x58, 0x58, 0x59, 0x50, 0x4c, 0x44, 0x24, 0x4d, 0x9b, 0x6e, 0x8e, 0x8e, 0x8f, 0x9c, 0x3e, 
+  0x5b, 0x90, 0x97, 0x89, 0x89, 0x97, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x29, 0x24, 0x21, 0x33, 0x33, 0x2f, 0x36, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x89, 0x54, 0x59, 0x9d, 0x60, 0x70, 0x71, 0x9e, 0x98, 0x22, 0x77, 0x73, 
+  0x8c, 0x87, 0x7d, 0x8a, 0x93, 0x93, 0x94, 0x8b, 0x8a, 0x87, 0x78, 0x78, 0x74, 0x75, 0x6c, 0x6c, 
+  0x61, 0x5d, 0x58, 0x62, 0x53, 0x35, 0x9f, 0x7b, 0x9b, 0x6e, 0x6e, 0xa0, 0x8e, 0x8f, 0x3e, 0x3e, 
+  0x83, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x24, 0x21, 0x21, 0x50, 0x62, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4e, 0x63, 0x5d, 0x61, 0x6b, 0x77, 0x74, 0x7a, 0x80, 0x87, 0x72, 
+  0x87, 0x99, 0x8c, 0x86, 0x8b, 0x8b, 0x93, 0x8a, 0x85, 0x8c, 0x81, 0x7a, 0x78, 0x6c, 0x6c, 0x68, 
+  0x61, 0x61, 0x68, 0xa1, 0xa1, 0xa1, 0xa2, 0x7b, 0x9b, 0x6e, 0x6e, 0x95, 0x95, 0x8f, 0x3e, 0x3e, 
+  0x83, 0x90, 0x97, 0x97, 0x90, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x24, 0x21, 0x21, 0x50, 0x62, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4e, 0x63, 0x5d, 0x61, 0x6b, 0x77, 0x74, 0x7a, 0x80, 0x87, 0x72, 
+  0x87, 0x99, 0x8c, 0x86, 0x8b, 0x8b, 0x93, 0x8a, 0x85, 0x8c, 0x81, 0x7a, 0x78, 0x6c, 0x6c, 0x68, 
+  0x61, 0x61, 0x68, 0xa1, 0xa1, 0xa1, 0xa2, 0x7b, 0x9b, 0x6e, 0x6e, 0x95, 0x95, 0x8f, 0x3e, 0x3e, 
+  0x83, 0x90, 0x97, 0x97, 0x90, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x21, 0x35, 0x31, 0xa3, 0xa4, 0xa2, 
+  0x83, 0x20, 0x20, 0x20, 0x20, 0x69, 0x5f, 0x58, 0x61, 0x70, 0x71, 0x78, 0x78, 0x88, 0x7d, 0x7e, 
+  0x87, 0x87, 0x8c, 0x8c, 0x86, 0x8a, 0x92, 0x92, 0x8c, 0x80, 0x81, 0x74, 0x9a, 0x6c, 0x68, 0x6c, 
+  0xa5, 0xa5, 0xa6, 0xa6, 0xa7, 0xa2, 0x9f, 0x9f, 0x9b, 0xa8, 0x6e, 0xa0, 0x8e, 0x8e, 0x96, 0x83, 
+  0x5b, 0x90, 0x90, 0x89, 0x89, 0x97, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x20, 0x9f, 0xa9, 0xaa, 
+  0xaa, 0xab, 0xa6, 0xa8, 0x9c, 0x3e, 0x53, 0x62, 0x5d, 0x67, 0x70, 0x67, 0x88, 0x7a, 0x80, 0x81, 
+  0x7d, 0x87, 0x87, 0x87, 0x8c, 0xac, 0x87, 0x87, 0x88, 0xad, 0xae, 0xad, 0x88, 0xad, 0xaa, 0xa4, 
+  0xa3, 0xa3, 0xa6, 0xa1, 0xa1, 0xa1, 0xa2, 0x9f, 0x9b, 0xa8, 0xa0, 0x95, 0x8e, 0x8f, 0x96, 0x3e, 
+  0x83, 0x89, 0x89, 0x97, 0x89, 0x97, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x24, 0x38, 0x20, 0x95, 0xa3, 0xaf, 
+  0xad, 0xab, 0xb0, 0xb1, 0xb2, 0xb3, 0xb3, 0xaf, 0x9a, 0xaa, 0x8c, 0x22, 0x67, 0x22, 0x88, 0x80, 
+  0x88, 0xae, 0x8c, 0xb3, 0xb3, 0x80, 0xac, 0xb1, 0xac, 0xb3, 0xac, 0xab, 0xab, 0xaa, 0xaa, 0xa4, 
+  0xa4, 0xa3, 0xa6, 0xa6, 0xa1, 0xa2, 0x9f, 0x9f, 0x7b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8e, 0x96, 0x3e, 
+  0x5b, 0x5b, 0x89, 0x90, 0x89, 0x89, 0x89, 0x97, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x24, 0x38, 0x20, 0x95, 0xa3, 0xaf, 
+  0xad, 0xab, 0xb0, 0xb1, 0xb2, 0xb3, 0xb3, 0xaf, 0x9a, 0xaa, 0x8c, 0x22, 0x67, 0x22, 0x88, 0x80, 
+  0x88, 0xae, 0x8c, 0xb3, 0xb3, 0x80, 0xac, 0xb1, 0xac, 0xb3, 0xac, 0xab, 0xab, 0xaa, 0xaa, 0xa4, 
+  0xa4, 0xa3, 0xa6, 0xa6, 0xa1, 0xa2, 0x9f, 0x9f, 0x7b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8e, 0x96, 0x3e, 
+  0x5b, 0x5b, 0x89, 0x90, 0x89, 0x89, 0x89, 0x97, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x37, 0x20, 0x20, 0x8e, 0xa3, 0xa9, 
+  0xaf, 0xaa, 0xab, 0xb4, 0xb1, 0xb2, 0xb3, 0xb3, 0xb5, 0xb6, 0xb7, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 
+  0xb5, 0xb5, 0xb5, 0xb8, 0xb7, 0xb5, 0xb6, 0xb1, 0xb1, 0xb4, 0xb0, 0xb0, 0xab, 0xaa, 0xaa, 0xa4, 
+  0xa9, 0xa3, 0xa6, 0xa7, 0xa1, 0xa1, 0xb9, 0x9f, 0x9b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8f, 0x8f, 0x3e, 
+  0x83, 0x90, 0xbb, 0x89, 0x89, 0x97, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x20, 0x20, 0x20, 0xa5, 0xa4, 
+  0xaf, 0xad, 0xab, 0xb0, 0xb4, 0xb3, 0xb2, 0xb6, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb7, 0xb5, 0xb7, 
+  0xb7, 0xb7, 0xb5, 0xb8, 0xb8, 0xb6, 0xb3, 0xb2, 0xb2, 0xb4, 0xb4, 0xab, 0xad, 0xad, 0xaa, 0xaf, 
+  0xa9, 0xa3, 0xa3, 0xa1, 0xa1, 0xa2, 0x9f, 0x9f, 0x9b, 0x9b, 0x6e, 0x6e, 0x8e, 0x8e, 0x3e, 0x3e, 
+  0x83, 0x5b, 0x89, 0x97, 0x89, 0x89, 0x89, 0x89, 0x89, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xa6, 0xa3, 
+  0xa4, 0xad, 0xad, 0xb0, 0xb0, 0xb1, 0xb2, 0xb2, 0xb8, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb6, 
+  0xb6, 0xb6, 0xb5, 0xb5, 0xb6, 0xb2, 0xb3, 0xb2, 0xb1, 0xb4, 0xb0, 0xab, 0xab, 0xaa, 0xa4, 0xa4, 
+  0xa9, 0xa5, 0xa5, 0xa7, 0xa1, 0xa1, 0x9f, 0x9f, 0x9b, 0xa8, 0x6e, 0x6e, 0x8e, 0x8e, 0x8f, 0x3e, 
+  0x83, 0x90, 0x89, 0x97, 0x90, 0x89, 0x97, 0x97, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xa6, 0xa3, 
+  0xa4, 0xad, 0xad, 0xb0, 0xb0, 0xb1, 0xb2, 0xb2, 0xb8, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb6, 
+  0xb6, 0xb6, 0xb5, 0xb5, 0xb6, 0xb2, 0xb3, 0xb2, 0xb1, 0xb4, 0xb0, 0xab, 0xab, 0xaa, 0xa4, 0xa4, 
+  0xa9, 0xa5, 0xa5, 0xa7, 0xa1, 0xa1, 0x9f, 0x9f, 0x9b, 0xa8, 0x6e, 0x6e, 0x8e, 0x8e, 0x8f, 0x3e, 
+  0x83, 0x90, 0x89, 0x97, 0x90, 0x89, 0x97, 0x97, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 0xa3, 
+  0xa4, 0xa4, 0xaa, 0xab, 0xb4, 0xb4, 0xb1, 0xb3, 0xb2, 0xb6, 0xb8, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 
+  0xb5, 0xb5, 0xb8, 0xb6, 0xb6, 0xb3, 0xb2, 0xb1, 0xb1, 0xb4, 0xb4, 0xb0, 0xaa, 0xaa, 0xaf, 0xa4, 
+  0xa9, 0xa3, 0xa6, 0xa1, 0xa7, 0xa2, 0xa2, 0x9f, 0x9b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8e, 0x8f, 0x9c, 
+  0x3e, 0x83, 0x89, 0x89, 0x89, 0x97, 0x89, 0x89, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 0xa5, 
+  0xa9, 0xaf, 0xaa, 0xad, 0xb0, 0xb0, 0xb1, 0xb1, 0xb3, 0xb3, 0xb6, 0xb8, 0xb8, 0xb5, 0xb5, 0xb5, 
+  0xb8, 0xb6, 0xb6, 0xb6, 0xb3, 0xb3, 0xb2, 0xb1, 0xb1, 0xb0, 0xab, 0xb0, 0xad, 0xaa, 0xaf, 0xa9, 
+  0xa3, 0xa3, 0xa6, 0xa1, 0xa6, 0xa2, 0xa2, 0x9f, 0x9b, 0xa8, 0x6e, 0x6e, 0x95, 0x8e, 0x8f, 0x3e, 
+  0x3e, 0x83, 0x89, 0x97, 0x89, 0x89, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0xa6, 
+  0xa3, 0xa4, 0xaf, 0xaa, 0xab, 0xb0, 0xb4, 0xb1, 0xb1, 0xb3, 0xb3, 0xb6, 0xb8, 0xb6, 0xb6, 0xb6, 
+  0xb6, 0xb6, 0xb6, 0xb2, 0xb2, 0xb2, 0xb1, 0xb4, 0xb4, 0xb0, 0xb0, 0xad, 0xad, 0xaa, 0xa4, 0xa4, 
+  0xa9, 0xa3, 0xa6, 0xa6, 0xa1, 0xba, 0x9f, 0x9f, 0x7b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8e, 0x8f, 0x9c, 
+  0x3e, 0x5b, 0x90, 0x89, 0x89, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0xa6, 
+  0xa3, 0xa4, 0xaf, 0xaa, 0xab, 0xb0, 0xb4, 0xb1, 0xb1, 0xb3, 0xb3, 0xb6, 0xb8, 0xb6, 0xb6, 0xb6, 
+  0xb6, 0xb6, 0xb6, 0xb2, 0xb2, 0xb2, 0xb1, 0xb4, 0xb4, 0xb0, 0xb0, 0xad, 0xad, 0xaa, 0xa4, 0xa4, 
+  0xa9, 0xa3, 0xa6, 0xa6, 0xa1, 0xba, 0x9f, 0x9f, 0x7b, 0x9b, 0x6e, 0xa0, 0x8e, 0x8e, 0x8f, 0x9c, 
+  0x3e, 0x5b, 0x90, 0x89, 0x89, 0x89, 0x89, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa6, 
+  0xa5, 0xa3, 0xaf, 0xaa, 0xad, 0xab, 0xb0, 0xb4, 0xb4, 0xb1, 0xb2, 0xb2, 0xb2, 0xb6, 0xb6, 0xb6, 
+  0xb6, 0xb6, 0xb3, 0xb6, 0xb3, 0xb2, 0xb1, 0xb4, 0xb4, 0xab, 0xab, 0xab, 0xad, 0xaa, 0xaf, 0xa9, 
+  0xa3, 0xa3, 0xa6, 0xa1, 0xa1, 0xba, 0xa2, 0x9f, 0x9b, 0x9b, 0xa8, 0x6e, 0x8e, 0x8e, 0x96, 0x3e, 
+  0x3e, 0x83, 0x90, 0x89, 0x97, 0x97, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa6, 
+  0xa6, 0xa3, 0xa4, 0xaa, 0xaa, 0xb0, 0xb0, 0xb4, 0xb1, 0xb1, 0xb3, 0xb2, 0xb3, 0xb3, 0xb2, 0xb3, 
+  0xb3, 0xb2, 0xb3, 0xb2, 0xb2, 0xb1, 0xb1, 0xb1, 0xb0, 0xb0, 0xab, 0xaa, 0xaa, 0xaf, 0xa4, 0xa3, 
+  0xa9, 0xa5, 0xa6, 0xa6, 0xa1, 0xa2, 0x9f, 0x9f, 0x7b, 0x9b, 0x6e, 0xa0, 0xa0, 0x8f, 0x8f, 0x96, 
+  0x3e, 0x83, 0x5b, 0x97, 0x90, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0xa6, 0xa3, 0xa9, 0xa4, 0xaa, 0xaa, 0xb0, 0xb0, 0xb4, 0xb4, 0xb1, 0xb1, 0xb1, 0xb3, 0xb3, 0xb3, 
+  0xb3, 0xb2, 0xb1, 0xb1, 0xb1, 0xb1, 0xb4, 0xb4, 0xb0, 0xb0, 0xab, 0xad, 0xaa, 0xaf, 0xaf, 0xa3, 
+  0xa3, 0xa6, 0xa6, 0xa1, 0xa1, 0xa1, 0x9f, 0x9f, 0x9b, 0x9b, 0x6e, 0xa0, 0xa0, 0x8e, 0x8f, 0x3e, 
+  0x3e, 0x83, 0x5b, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0xa6, 0xa3, 0xa9, 0xa4, 0xaa, 0xaa, 0xb0, 0xb0, 0xb4, 0xb4, 0xb1, 0xb1, 0xb1, 0xb3, 0xb3, 0xb3, 
+  0xb3, 0xb2, 0xb1, 0xb1, 0xb1, 0xb1, 0xb4, 0xb4, 0xb0, 0xb0, 0xab, 0xad, 0xaa, 0xaf, 0xaf, 0xa3, 
+  0xa3, 0xa6, 0xa6, 0xa1, 0xa1, 0xa1, 0x9f, 0x9f, 0x9b, 0x9b, 0x6e, 0xa0, 0xa0, 0x8e, 0x8f, 0x3e, 
+  0x3e, 0x83, 0x5b, 0x89, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0xa6, 0xa3, 0xa9, 0xaf, 0xaf, 0xad, 0xaa, 0xab, 0xb0, 0xb4, 0xac, 0xb1, 0xb1, 0xb1, 0xb2, 0xb2, 
+  0xb2, 0xb2, 0xb2, 0xb1, 0xb1, 0xb4, 0xb4, 0xb4, 0xab, 0xab, 0xad, 0xaa, 0xaa, 0xa4, 0xa4, 0xa9, 
+  0xa3, 0xa3, 0xa6, 0xa6, 0xa1, 0xa2, 0xa2, 0x9f, 0x7b, 0x9b, 0x6e, 0x6e, 0x95, 0x8e, 0x8f, 0x96, 
+  0x3e, 0x83, 0x90, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa1, 0xa6, 0xa5, 0xa4, 0xa4, 0xad, 0xad, 0xab, 0xb0, 0xb0, 0xb4, 0xb1, 0xb4, 0xb1, 0xb1, 0xb1, 
+  0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xac, 0xb0, 0xb0, 0xb0, 0xb0, 0xad, 0xad, 0xaa, 0xa4, 0xa4, 0xa9, 
+  0xa3, 0xa6, 0xa1, 0xa6, 0xa1, 0xa2, 0x9f, 0x9f, 0x9b, 0x9b, 0xa8, 0x6e, 0x8e, 0x8e, 0x8e, 0x3e, 
+  0x3e, 0x3e, 0x97, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa7, 0xa6, 0xa6, 0xa3, 0xaf, 0xa4, 0xaa, 0xad, 0xab, 0xab, 0xb0, 0xb0, 0xb1, 0xb4, 0xb4, 0xac, 
+  0xb1, 0xb1, 0xb4, 0xb4, 0xb4, 0xb0, 0xb0, 0xb0, 0xab, 0xad, 0xad, 0xaa, 0xaf, 0xaf, 0xa4, 0xa3, 
+  0xa3, 0xa3, 0xa6, 0xa1, 0xa1, 0xa2, 0xa2, 0x9f, 0x7b, 0x9b, 0xa8, 0xa0, 0xa0, 0x95, 0x8f, 0x8f, 
+  0x3e, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa7, 0xa6, 0xa6, 0xa3, 0xaf, 0xa4, 0xaa, 0xad, 0xab, 0xab, 0xb0, 0xb0, 0xb1, 0xb4, 0xb4, 0xac, 
+  0xb1, 0xb1, 0xb4, 0xb4, 0xb4, 0xb0, 0xb0, 0xb0, 0xab, 0xad, 0xad, 0xaa, 0xaf, 0xaf, 0xa4, 0xa3, 
+  0xa3, 0xa3, 0xa6, 0xa1, 0xa1, 0xa2, 0xa2, 0x9f, 0x7b, 0x9b, 0xa8, 0xa0, 0xa0, 0x95, 0x8f, 0x8f, 
+  0x3e, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0xa6, 0xa5, 0xa3, 0xa4, 0xa4, 0xaa, 0xaa, 0xab, 0xab, 0xab, 0xab, 0xb4, 0xac, 0xb4, 0xac, 
+  0xac, 0xb1, 0xb4, 0xb4, 0xb4, 0xb0, 0xab, 0xab, 0xab, 0xaa, 0xad, 0xaa, 0xaf, 0xaf, 0xa9, 0xa3, 
+  0xa5, 0xa5, 0xa6, 0xa1, 0xa1, 0xb9, 0x9f, 0x9f, 0x9b, 0x9b, 0x9b, 0x6e, 0x8e, 0x8e, 0x8e, 0x3e, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8f, 0xa1, 0xa6, 0xa3, 0xa3, 0xaf, 0xa4, 0xaa, 0xad, 0xab, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb4, 
+  0xb4, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xab, 0xad, 0xaa, 0xaf, 0xa4, 0xa9, 0xa9, 0xa9, 
+  0xa5, 0xa6, 0xa1, 0xa7, 0xa2, 0xa2, 0xa2, 0x9f, 0x7b, 0x9b, 0x6e, 0x6e, 0xa0, 0x95, 0x97, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x5b, 0xa1, 0xa6, 0xa5, 0xa3, 0xa4, 0xaf, 0xa4, 0xaa, 0xaa, 0xad, 0xab, 0xab, 0xb0, 0xb0, 0xb0, 
+  0xb4, 0xb0, 0xb0, 0xab, 0xab, 0xab, 0xab, 0xab, 0xad, 0xaa, 0xaa, 0xaa, 0xaf, 0xa9, 0xa3, 0xa3, 
+  0xa6, 0xa6, 0xa1, 0xa6, 0xba, 0xa2, 0x9f, 0x9f, 0x9b, 0x9b, 0x6e, 0x6e, 0x5b, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x5b, 0xa1, 0xa6, 0xa5, 0xa3, 0xa4, 0xaf, 0xa4, 0xaa, 0xaa, 0xad, 0xab, 0xab, 0xb0, 0xb0, 0xb0, 
+  0xb4, 0xb0, 0xb0, 0xab, 0xab, 0xab, 0xab, 0xab, 0xad, 0xaa, 0xaa, 0xaa, 0xaf, 0xa9, 0xa3, 0xa3, 
+  0xa6, 0xa6, 0xa1, 0xa6, 0xba, 0xa2, 0x9f, 0x9f, 0x9b, 0x9b, 0x6e, 0x6e, 0x5b, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0xa1, 0xa1, 0xa6, 0xa5, 0xa9, 0xa9, 0xaf, 0xaa, 0xad, 0xad, 0xad, 0xab, 0xab, 0xab, 0xab, 
+  0xb0, 0xb4, 0xab, 0xb0, 0xb0, 0xb0, 0xad, 0xad, 0xaa, 0xad, 0xaa, 0xaf, 0xa4, 0xa4, 0xa9, 0xa3, 
+  0xa3, 0xa6, 0xa6, 0xa1, 0xa2, 0xa2, 0xa2, 0x9f, 0x9f, 0xa8, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9b, 0xa1, 0xa6, 0xa5, 0xa3, 0xa3, 0xa4, 0xa4, 0xaa, 0xad, 0xad, 0xad, 0xab, 0xab, 0xab, 
+  0xb0, 0xb0, 0xab, 0xab, 0xad, 0xab, 0xaa, 0xab, 0xaa, 0xad, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa3, 
+  0xa5, 0xa6, 0xa1, 0xa1, 0xa2, 0xa2, 0x9f, 0xa0, 0x96, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x5b, 0x8f, 0xa6, 0xa3, 0xa9, 0xa4, 0xaf, 0xa4, 0xaa, 0xaa, 0xad, 0xad, 0xad, 0xad, 
+  0xab, 0xad, 0xab, 0xad, 0xab, 0xad, 0xad, 0xad, 0xaa, 0xaf, 0xaf, 0xaf, 0xa4, 0xa4, 0xa3, 0xa5, 
+  0xa3, 0xa1, 0xa6, 0xa1, 0xba, 0x96, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x5b, 0x8f, 0xa6, 0xa3, 0xa9, 0xa4, 0xaf, 0xa4, 0xaa, 0xaa, 0xad, 0xad, 0xad, 0xad, 
+  0xab, 0xad, 0xab, 0xad, 0xab, 0xad, 0xad, 0xad, 0xaa, 0xaf, 0xaf, 0xaf, 0xa4, 0xa4, 0xa3, 0xa5, 
+  0xa3, 0xa1, 0xa6, 0xa1, 0xba, 0x96, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 0xb9, 0xa9, 0xa4, 0xa4, 0xaa, 0xaa, 0xaa, 0xad, 0xad, 0xad, 
+  0xab, 0xab, 0xab, 0xad, 0xaa, 0xad, 0xaa, 0xad, 0xaf, 0xaa, 0xa4, 0xa9, 0xa9, 0xa9, 0xa3, 0xa6, 
+  0xa5, 0x9b, 0x8e, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x6e, 0xa2, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 
+  0xaa, 0xad, 0xad, 0xaa, 0xad, 0xaa, 0xaa, 0xaa, 0xa4, 0xa4, 0xa4, 0xaf, 0xa9, 0x95, 0x95, 0x83, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x6e, 0x6e, 
+  0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0xa0, 0x6e, 0x6e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x6e, 0x6e, 
+  0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0xa0, 0x6e, 0x6e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x21, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x2a, 0x27, 0x25, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x33, 0x34, 
+  0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x30, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x33, 0x34, 
+  0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x30, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x34, 0x33, 0x35, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x34, 0x34, 
+  0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x35, 0x36, 0x37, 0x37, 0x32, 0x37, 0x32, 0x37, 0x32, 0x37, 0x37, 0x37, 0x33, 0x34, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x28, 0x34, 0x34, 0x34, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x30, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x28, 
+  0x35, 0x37, 0x32, 0x38, 0x38, 0x39, 0x38, 0x38, 0x38, 0x3a, 0x37, 0x3a, 0x32, 0x37, 0x37, 0x32, 
+  0x38, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x23, 0x23, 0x34, 0x34, 
+  0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x35, 0x32, 
+  0x39, 0x38, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x38, 0x3c, 0x3d, 0x37, 0x39, 0x32, 0x32, 
+  0x32, 0x32, 0x32, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x23, 0x23, 0x34, 0x34, 
+  0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x35, 0x32, 
+  0x39, 0x38, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x38, 0x3c, 0x3d, 0x37, 0x39, 0x32, 0x32, 
+  0x32, 0x32, 0x32, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x28, 0x23, 0x23, 0x34, 0x34, 
+  0x34, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x30, 0x2a, 0x2d, 0x2a, 0x23, 0x37, 0x38, 0x3e, 
+  0x3f, 0x3f, 0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x24, 0x42, 0x43, 0x44, 0x3e, 0x39, 0x39, 
+  0x32, 0x37, 0x32, 0x37, 0x45, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2b, 0x2b, 0x2b, 0x28, 0x23, 0x23, 0x34, 
+  0x34, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2b, 0x26, 0x45, 0x39, 0x46, 
+  0x24, 0x40, 0x47, 0x48, 0x48, 0x49, 0x4a, 0x4a, 0x40, 0x4b, 0x4c, 0x4b, 0x4b, 0x26, 0x3b, 0x38, 
+  0x39, 0x39, 0x32, 0x32, 0x37, 0x36, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x25, 0x2a, 0x27, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x2e, 0x4d, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x34, 
+  0x34, 0x34, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x30, 0x3c, 0x26, 0x3b, 0x41, 0x35, 0x35, 
+  0x49, 0x4e, 0x49, 0x4e, 0x4e, 0x4e, 0x4f, 0x50, 0x50, 0x51, 0x50, 0x4b, 0x29, 0x41, 0x40, 0x3b, 
+  0x3b, 0x38, 0x26, 0x32, 0x32, 0x32, 0x37, 0x34, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x2e, 0x4d, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x34, 
+  0x34, 0x34, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x30, 0x3c, 0x26, 0x3b, 0x41, 0x35, 0x35, 
+  0x49, 0x4e, 0x49, 0x4e, 0x4e, 0x4e, 0x4f, 0x50, 0x50, 0x51, 0x50, 0x4b, 0x29, 0x41, 0x40, 0x3b, 
+  0x3b, 0x38, 0x26, 0x32, 0x32, 0x32, 0x37, 0x34, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2e, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x31, 0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x28, 0x26, 0x46, 0x4a, 0x49, 0x49, 0x49, 
+  0x4f, 0x4e, 0x23, 0x2b, 0x52, 0x52, 0x52, 0x4e, 0x53, 0x51, 0x51, 0x50, 0x51, 0x48, 0x40, 0x41, 
+  0x3b, 0x3b, 0x45, 0x39, 0x32, 0x32, 0x32, 0x32, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x2e, 0x2c, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x34, 
+  0x23, 0x34, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x28, 0x43, 0x24, 0x4a, 0x4e, 0x4f, 0x4f, 0x52, 
+  0x54, 0x54, 0x55, 0x55, 0x54, 0x54, 0x54, 0x54, 0x55, 0x56, 0x57, 0x51, 0x56, 0x2e, 0x48, 0x4a, 
+  0x41, 0x40, 0x3b, 0x38, 0x26, 0x32, 0x58, 0x32, 0x36, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x35, 0x33, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x59, 0x46, 0x4a, 0x4e, 0x4e, 0x52, 0x54, 0x54, 
+  0x5a, 0x5b, 0x5c, 0x5c, 0x31, 0x5b, 0x5b, 0x5b, 0x5c, 0x55, 0x5d, 0x55, 0x55, 0x2e, 0x49, 0x49, 
+  0x40, 0x40, 0x3f, 0x3b, 0x45, 0x26, 0x32, 0x32, 0x32, 0x33, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x35, 0x33, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x59, 0x46, 0x4a, 0x4e, 0x4e, 0x52, 0x54, 0x54, 
+  0x5a, 0x5b, 0x5c, 0x5c, 0x31, 0x5b, 0x5b, 0x5b, 0x5c, 0x55, 0x5d, 0x55, 0x55, 0x2e, 0x49, 0x49, 
+  0x40, 0x40, 0x3f, 0x3b, 0x45, 0x26, 0x32, 0x32, 0x32, 0x33, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x2b, 0x28, 0x28, 0x28, 
+  0x34, 0x34, 0x34, 0x34, 0x31, 0x31, 0x2f, 0x3c, 0x3c, 0x4a, 0x49, 0x5e, 0x54, 0x5e, 0x5b, 0x4d, 
+  0x25, 0x5f, 0x5c, 0x60, 0x5f, 0x61, 0x54, 0x62, 0x63, 0x5a, 0x5d, 0x55, 0x5d, 0x56, 0x28, 0x2e, 
+  0x49, 0x48, 0x41, 0x40, 0x3b, 0x38, 0x26, 0x32, 0x32, 0x32, 0x23, 0x2a, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x23, 0x23, 
+  0x23, 0x23, 0x34, 0x31, 0x2f, 0x31, 0x2b, 0x64, 0x40, 0x4e, 0x52, 0x54, 0x5b, 0x63, 0x5d, 0x65, 
+  0x25, 0x61, 0x60, 0x60, 0x61, 0x66, 0x60, 0x62, 0x62, 0x62, 0x63, 0x63, 0x55, 0x55, 0x5c, 0x50, 
+  0x49, 0x49, 0x4a, 0x40, 0x3b, 0x45, 0x38, 0x37, 0x37, 0x3a, 0x3c, 0x27, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2d, 0x30, 0x20, 0x20, 0x20, 0x7d, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x45, 0x24, 0x35, 0x35, 0x2e, 0x2e, 0x2c, 0x2b, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x34, 0x34, 0x31, 0x31, 0x3c, 0x24, 0x49, 0x52, 0x54, 0x5b, 0x5b, 0x63, 0x67, 0x5f, 
+  0x54, 0x67, 0x68, 0x68, 0x25, 0x65, 0x60, 0x60, 0x62, 0x62, 0x62, 0x63, 0x63, 0x31, 0x5a, 0x23, 
+  0x4f, 0x4e, 0x49, 0x4a, 0x41, 0x3b, 0x45, 0x37, 0x37, 0x32, 0x32, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x45, 0x24, 0x35, 0x35, 0x2e, 0x2e, 0x2c, 0x2b, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x34, 0x34, 0x31, 0x31, 0x3c, 0x24, 0x49, 0x52, 0x54, 0x5b, 0x5b, 0x63, 0x67, 0x5f, 
+  0x54, 0x67, 0x68, 0x68, 0x25, 0x65, 0x60, 0x60, 0x62, 0x62, 0x62, 0x63, 0x63, 0x31, 0x5a, 0x23, 
+  0x4f, 0x4e, 0x49, 0x4a, 0x41, 0x3b, 0x45, 0x37, 0x37, 0x32, 0x32, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x29, 0x21, 0x33, 0x2e, 0x2e, 0x2e, 0x2c, 0x2b, 0x28, 0x23, 
+  0x23, 0x34, 0x23, 0x34, 0x34, 0x2f, 0x3c, 0x48, 0x52, 0x54, 0x54, 0x5f, 0x66, 0x2f, 0x65, 0x69, 
+  0x6a, 0x27, 0x68, 0x68, 0x68, 0x6b, 0x6b, 0x68, 0x68, 0x60, 0x60, 0x62, 0x67, 0x5b, 0x54, 0x5a, 
+  0x52, 0x4e, 0x49, 0x40, 0x3f, 0x40, 0x45, 0x26, 0x3a, 0x32, 0x32, 0x37, 0x20, 0x20, 0x26, 0x24, 
+  0x2d, 0x2a, 0x29, 0x20, 0x7d, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x4d, 0x2b, 0x2c, 0x28, 0x28, 
+  0x28, 0x23, 0x23, 0x34, 0x34, 0x21, 0x21, 0x6c, 0x54, 0x5b, 0x5f, 0x5f, 0x61, 0x6d, 0x69, 0x69, 
+  0x6e, 0x6f, 0x70, 0x71, 0x72, 0x6b, 0x6b, 0x68, 0x6b, 0x68, 0x60, 0x60, 0x62, 0x73, 0x63, 0x54, 
+  0x54, 0x52, 0x4f, 0x6c, 0x4a, 0x46, 0x42, 0x64, 0x32, 0x37, 0x37, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0xb5, 0x59, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x2b, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x34, 0x74, 0x4a, 0x52, 0x54, 0x5f, 0x61, 0x61, 0x6a, 0x69, 0x6a, 0x75, 
+  0x75, 0x75, 0x65, 0x70, 0x70, 0x70, 0x70, 0x72, 0x72, 0x68, 0x68, 0x68, 0x60, 0x60, 0x63, 0x5c, 
+  0x5e, 0x52, 0x51, 0x4a, 0x4b, 0x4b, 0x74, 0x3c, 0x38, 0x32, 0x3a, 0x32, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7d, 0x59, 0x59, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x2b, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x34, 0x74, 0x4a, 0x52, 0x54, 0x5f, 0x61, 0x61, 0x6a, 0x69, 0x6a, 0x75, 
+  0x75, 0x75, 0x65, 0x70, 0x70, 0x70, 0x70, 0x72, 0x72, 0x68, 0x68, 0x68, 0x60, 0x60, 0x63, 0x5c, 
+  0x5e, 0x52, 0x51, 0x4a, 0x4b, 0x4b, 0x74, 0x3c, 0x38, 0x32, 0x3a, 0x32, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7d, 0x59, 0x59, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x2b, 0x2b, 0x2b, 
+  0x23, 0x23, 0x23, 0x34, 0x34, 0x64, 0x49, 0x54, 0x54, 0x5f, 0x61, 0x69, 0x76, 0x76, 0x75, 0x75, 
+  0x75, 0x6f, 0x75, 0x77, 0x78, 0x78, 0x71, 0x70, 0x71, 0x71, 0x68, 0x68, 0x60, 0x60, 0x2f, 0x65, 
+  0x54, 0x5e, 0x55, 0x51, 0x56, 0x4b, 0x4b, 0x3b, 0x38, 0x26, 0x32, 0x58, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0xb4, 0xb4, 0xb4, 0xb4, 0xb3, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x21, 0x2e, 0x2e, 0x2e, 0x2c, 0x2b, 0x28, 
+  0x28, 0x28, 0x23, 0x23, 0x2e, 0x29, 0x49, 0x54, 0x5f, 0x61, 0x66, 0x76, 0x6a, 0x75, 0x75, 0x75, 
+  0x79, 0x7a, 0x76, 0x78, 0x78, 0x7b, 0x7b, 0x70, 0x70, 0x70, 0x72, 0x68, 0x68, 0x60, 0x62, 0x5b, 
+  0x5b, 0x7c, 0x51, 0x5c, 0x4a, 0x21, 0x24, 0x3b, 0x45, 0x39, 0x32, 0x32, 0x7d, 0x20, 0x20, 0x20, 
+  0xb4, 0x59, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x4d, 0x2c, 0x2b, 
+  0x28, 0x28, 0x23, 0x34, 0x26, 0x7e, 0x4e, 0x54, 0x5f, 0x61, 0x6a, 0x76, 0x76, 0x75, 0x6f, 0x7f, 
+  0x80, 0x81, 0x77, 0x77, 0x82, 0x81, 0x77, 0x7b, 0x70, 0x70, 0x70, 0x72, 0x68, 0x68, 0x60, 0x25, 
+  0x5b, 0x5c, 0x2f, 0x52, 0x49, 0x49, 0x41, 0x40, 0x3b, 0x26, 0x32, 0x32, 0x37, 0x20, 0x7d, 0x83, 
+  0xb3, 0x59, 0x59, 0x59, 0xb4, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x4d, 0x2c, 0x2b, 
+  0x28, 0x28, 0x23, 0x34, 0x26, 0x7e, 0x4e, 0x54, 0x5f, 0x61, 0x6a, 0x76, 0x76, 0x75, 0x6f, 0x7f, 
+  0x80, 0x81, 0x77, 0x77, 0x82, 0x81, 0x77, 0x7b, 0x70, 0x70, 0x70, 0x72, 0x68, 0x68, 0x60, 0x25, 
+  0x5b, 0x5c, 0x2f, 0x52, 0x49, 0x49, 0x41, 0x40, 0x3b, 0x26, 0x32, 0x32, 0x37, 0x20, 0x7d, 0x83, 
+  0xb3, 0x59, 0x59, 0x59, 0xb4, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x2e, 0x2e, 0x2c, 0x2b, 0x2b, 
+  0x28, 0x28, 0x35, 0x32, 0x37, 0x4b, 0x4f, 0x5b, 0x61, 0x5f, 0x6a, 0x75, 0x75, 0x6f, 0x79, 0x77, 
+  0x77, 0x77, 0x84, 0x85, 0x86, 0x87, 0x86, 0x86, 0x7b, 0x78, 0x70, 0x72, 0x72, 0x68, 0x68, 0x62, 
+  0x5c, 0x5f, 0x54, 0x4f, 0x4f, 0x49, 0x4a, 0x3f, 0x3b, 0x38, 0x37, 0x32, 0x32, 0x83, 0x43, 0x83, 
+  0xb3, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x2e, 0x2e, 0x2e, 0x2c, 0x2b, 
+  0x2b, 0x35, 0x20, 0x20, 0x88, 0x4c, 0x52, 0x5b, 0x66, 0x69, 0x6a, 0x6a, 0x6f, 0x77, 0x89, 0x77, 
+  0x82, 0x77, 0x81, 0x8a, 0x8a, 0x8b, 0x8b, 0x8a, 0x82, 0x81, 0x70, 0x70, 0x72, 0x68, 0x68, 0x60, 
+  0x67, 0x5f, 0x54, 0x52, 0x4f, 0x49, 0x4a, 0x40, 0x3b, 0x38, 0x37, 0x37, 0x8c, 0x8d, 0x43, 0x43, 
+  0x59, 0xb4, 0xb4, 0x59, 0xb4, 0xb4, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2c, 0x2e, 0x2b, 
+  0x32, 0x20, 0x20, 0x20, 0x59, 0x56, 0x52, 0x5a, 0x65, 0x8e, 0x6a, 0x6f, 0x79, 0x77, 0x7b, 0x77, 
+  0x77, 0x81, 0x86, 0x8f, 0x90, 0x90, 0x90, 0x8b, 0x8a, 0x81, 0x70, 0x70, 0x72, 0x68, 0x60, 0x62, 
+  0x2a, 0x5f, 0x54, 0x54, 0x4f, 0x6c, 0x4a, 0x40, 0x3b, 0x38, 0x91, 0x91, 0x8c, 0x92, 0x42, 0x83, 
+  0x83, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2c, 0x2e, 0x2b, 
+  0x32, 0x20, 0x20, 0x20, 0x59, 0x56, 0x52, 0x5a, 0x65, 0x8e, 0x6a, 0x6f, 0x79, 0x77, 0x7b, 0x77, 
+  0x77, 0x81, 0x86, 0x8f, 0x90, 0x90, 0x90, 0x8b, 0x8a, 0x81, 0x70, 0x70, 0x72, 0x68, 0x60, 0x62, 
+  0x2a, 0x5f, 0x54, 0x54, 0x4f, 0x6c, 0x4a, 0x40, 0x3b, 0x38, 0x91, 0x91, 0x8c, 0x92, 0x42, 0x83, 
+  0x83, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x32, 
+  0x20, 0x20, 0x20, 0x20, 0x88, 0x74, 0x52, 0x73, 0x62, 0x60, 0x6f, 0x78, 0x70, 0x78, 0x77, 0x77, 
+  0x77, 0x81, 0x85, 0x8b, 0x90, 0x90, 0x90, 0x90, 0x8a, 0x77, 0x70, 0x70, 0x72, 0x6b, 0x68, 0x60, 
+  0x5f, 0x5b, 0x54, 0x54, 0x4f, 0x49, 0x4a, 0x40, 0x50, 0x93, 0x94, 0x8c, 0x8c, 0x92, 0x43, 0x83, 
+  0xb3, 0x59, 0xb4, 0xb3, 0x59, 0xb4, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x32, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x3a, 0x51, 0x95, 0x63, 0x62, 0x68, 0x65, 0x70, 0x7b, 0x89, 0x7b, 0x77, 
+  0x81, 0x96, 0x86, 0x8a, 0x90, 0x90, 0x90, 0x8b, 0x8a, 0x81, 0x78, 0x70, 0x6b, 0x72, 0x68, 0x30, 
+  0x5f, 0x5f, 0x54, 0x52, 0x4f, 0x5c, 0x97, 0x57, 0x57, 0x94, 0x94, 0x91, 0x8c, 0x8d, 0x42, 0x43, 
+  0x83, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x5c, 0x51, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x2b, 0x63, 0x62, 0x60, 0x68, 0x70, 0x70, 0x77, 0x7b, 0x77, 
+  0x77, 0x81, 0x81, 0x8a, 0x8b, 0x8b, 0x8b, 0x8a, 0x86, 0x81, 0x98, 0x70, 0x70, 0x6b, 0x60, 0x99, 
+  0x61, 0x5f, 0x2f, 0x63, 0x97, 0x97, 0x97, 0x57, 0x93, 0x9a, 0x94, 0x9b, 0x8c, 0x8d, 0x43, 0x43, 
+  0xb3, 0x59, 0xb4, 0xb4, 0x59, 0xb4, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x5c, 0x51, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x2b, 0x63, 0x62, 0x60, 0x68, 0x70, 0x70, 0x77, 0x7b, 0x77, 
+  0x77, 0x81, 0x81, 0x8a, 0x8b, 0x8b, 0x8b, 0x8a, 0x86, 0x81, 0x98, 0x70, 0x70, 0x6b, 0x60, 0x99, 
+  0x61, 0x5f, 0x2f, 0x63, 0x97, 0x97, 0x97, 0x57, 0x93, 0x9a, 0x94, 0x9b, 0x8c, 0x8d, 0x43, 0x43, 
+  0xb3, 0x59, 0xb4, 0xb4, 0x59, 0xb4, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x35, 0x21, 0x29, 0x9c, 0x9d, 0x9e, 
+  0x83, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x53, 0x2f, 0x30, 0x60, 0x6b, 0x70, 0x78, 0x7b, 0x77, 0x7b, 
+  0x77, 0x81, 0x81, 0x9f, 0x85, 0x8a, 0x8a, 0x85, 0x81, 0x77, 0x78, 0x70, 0x72, 0x68, 0x68, 0x71, 
+  0x68, 0x9c, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa4, 0x93, 0x94, 0x94, 0x91, 0x8c, 0x8d, 0x42, 0x43, 
+  0x83, 0xb3, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x46, 0x21, 0x35, 0x20, 0xa4, 0x9d, 0xa5, 
+  0xa6, 0xa7, 0xa1, 0x9a, 0x42, 0x43, 0x50, 0x55, 0x2f, 0x71, 0x60, 0x72, 0x71, 0x7b, 0x77, 0x7b, 
+  0x77, 0x77, 0x81, 0x81, 0x82, 0x96, 0x81, 0x81, 0x81, 0x78, 0x98, 0xa8, 0x72, 0xa8, 0xa5, 0xa9, 
+  0xa9, 0xa0, 0xa1, 0xaa, 0xa2, 0xa3, 0xa4, 0xa4, 0x93, 0x9a, 0x9a, 0x8c, 0x8c, 0x8d, 0x43, 0x43, 
+  0x83, 0xb3, 0x59, 0xb4, 0xb3, 0xb4, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x8c, 0x9c, 0x9d, 
+  0xa8, 0xa8, 0xab, 0xac, 0xac, 0xad, 0xae, 0x72, 0x70, 0x7b, 0xa8, 0x98, 0x72, 0x70, 0x70, 0x77, 
+  0x77, 0x7b, 0x81, 0xac, 0x96, 0x77, 0xac, 0xac, 0xaf, 0xb0, 0xb0, 0xa7, 0xab, 0xa8, 0xa5, 0xa5, 
+  0x9c, 0x9c, 0xa1, 0xa1, 0xa2, 0x9e, 0x9e, 0xa4, 0xa4, 0x9a, 0x9b, 0x9b, 0x8c, 0x8c, 0x92, 0x43, 
+  0x83, 0x3d, 0x59, 0x59, 0x59, 0x59, 0x59, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x8c, 0x9c, 0x9d, 
+  0xa8, 0xa8, 0xab, 0xac, 0xac, 0xad, 0xae, 0x72, 0x70, 0x7b, 0xa8, 0x98, 0x72, 0x70, 0x70, 0x77, 
+  0x77, 0x7b, 0x81, 0xac, 0x96, 0x77, 0xac, 0xac, 0xaf, 0xb0, 0xb0, 0xa7, 0xab, 0xa8, 0xa5, 0xa5, 
+  0x9c, 0x9c, 0xa1, 0xa1, 0xa2, 0x9e, 0x9e, 0xa4, 0xa4, 0x9a, 0x9b, 0x9b, 0x8c, 0x8c, 0x92, 0x43, 
+  0x83, 0x3d, 0x59, 0x59, 0x59, 0x59, 0x59, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x45, 0x20, 0x20, 0x91, 0x9c, 0x9d, 
+  0xa6, 0xa6, 0xa7, 0xb1, 0xb1, 0xaf, 0xae, 0x9f, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0x96, 0xb2, 0xb2, 
+  0x96, 0xb2, 0xb2, 0xae, 0x9f, 0x9f, 0x9f, 0xad, 0xb1, 0xb1, 0xb1, 0xa7, 0xa7, 0xa8, 0xa5, 0xa5, 
+  0xa9, 0x9c, 0xa1, 0xa1, 0xa2, 0xa3, 0x9e, 0xa4, 0x93, 0x93, 0x9a, 0x9b, 0x8c, 0x8c, 0x8d, 0x43, 
+  0x83, 0xb3, 0x59, 0xb4, 0x59, 0xb4, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x37, 0x20, 0x20, 0x20, 0x9c, 0x9d, 
+  0xa5, 0xa8, 0xa7, 0xab, 0xac, 0xaf, 0xaf, 0xad, 0xae, 0xae, 0xb2, 0xb2, 0x96, 0xb2, 0xb2, 0xb2, 
+  0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xaf, 0xad, 0xaf, 0xac, 0xac, 0xb1, 0xab, 0xa8, 0xa6, 0xa5, 0x9d, 
+  0xa9, 0x9c, 0xa1, 0xa2, 0xa2, 0x9e, 0x97, 0xa4, 0x57, 0x9a, 0x94, 0x9b, 0x8c, 0x8d, 0x92, 0x43, 
+  0x83, 0x83, 0x59, 0x59, 0x59, 0x59, 0x59, 0x59, 0xb5, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x20, 0x20, 0x20, 0xa1, 0x9c, 
+  0x9d, 0xa8, 0xa8, 0xa7, 0xb0, 0xac, 0xaf, 0xad, 0xae, 0xb2, 0x9f, 0xae, 0xb2, 0xb2, 0xb2, 0xb2, 
+  0xb2, 0xb2, 0xae, 0xae, 0x9f, 0xad, 0xad, 0xaf, 0xb1, 0xb1, 0xa7, 0xa7, 0xa7, 0xa6, 0xa5, 0x9d, 
+  0xa9, 0x9c, 0x9c, 0xa1, 0xa2, 0x9e, 0xa4, 0xa4, 0x93, 0x9a, 0x9a, 0x9b, 0x91, 0x8c, 0x42, 0x43, 
+  0x83, 0xb3, 0x59, 0xb4, 0x59, 0x59, 0xb4, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x20, 0x20, 0x20, 0xa1, 0x9c, 
+  0x9d, 0xa8, 0xa8, 0xa7, 0xb0, 0xac, 0xaf, 0xad, 0xae, 0xb2, 0x9f, 0xae, 0xb2, 0xb2, 0xb2, 0xb2, 
+  0xb2, 0xb2, 0xae, 0xae, 0x9f, 0xad, 0xad, 0xaf, 0xb1, 0xb1, 0xa7, 0xa7, 0xa7, 0xa6, 0xa5, 0x9d, 
+  0xa9, 0x9c, 0x9c, 0xa1, 0xa2, 0x9e, 0xa4, 0xa4, 0x93, 0x9a, 0x9a, 0x9b, 0x91, 0x8c, 0x42, 0x43, 
+  0x83, 0xb3, 0x59, 0xb4, 0x59, 0x59, 0xb4, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0x9c, 
+  0x9d, 0x9d, 0xa6, 0xa7, 0xab, 0xb1, 0xac, 0xaf, 0xad, 0xae, 0xae, 0xb2, 0xae, 0xb2, 0xb2, 0xae, 
+  0xae, 0xae, 0xb2, 0xae, 0xad, 0xae, 0xaf, 0xac, 0xac, 0xb1, 0xb1, 0xa7, 0xa8, 0xa6, 0xa5, 0x9d, 
+  0x9c, 0x9c, 0xa1, 0xaa, 0xa2, 0xa2, 0x9e, 0xa4, 0x57, 0x93, 0x94, 0x9b, 0x8c, 0x8c, 0x8d, 0x43, 
+  0x43, 0x83, 0x59, 0x59, 0xb3, 0xb4, 0xb3, 0x59, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0xa1, 
+  0x9d, 0xa5, 0xa6, 0xa7, 0xab, 0xab, 0xac, 0xaf, 0xaf, 0xae, 0xae, 0xb2, 0xae, 0xae, 0xb2, 0xb2, 
+  0xb2, 0xae, 0x9f, 0xae, 0xaf, 0xad, 0xaf, 0xb1, 0xac, 0xab, 0xab, 0xa7, 0xa8, 0xa6, 0xa5, 0x9d, 
+  0xa9, 0x9c, 0xa1, 0xa1, 0xa2, 0xa3, 0x9e, 0xa4, 0x93, 0x93, 0x94, 0x9b, 0x91, 0x8c, 0x8d, 0x43, 
+  0x83, 0xb3, 0x59, 0xb4, 0x59, 0x59, 0x59, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3, 0xa0, 
+  0x9c, 0x9d, 0xa6, 0xa6, 0xa7, 0xab, 0xb1, 0xac, 0xad, 0xad, 0xaf, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0x9f, 0xad, 0xad, 0xad, 0xaf, 0xad, 0xac, 0xb1, 0xab, 0xab, 0xa7, 0xa6, 0xa6, 0x9d, 0x9d, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0x9e, 0xa4, 0xa4, 0x57, 0x9a, 0x93, 0x94, 0x8c, 0x8c, 0x92, 0x92, 
+  0x43, 0x83, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3, 0xa0, 
+  0x9c, 0x9d, 0xa6, 0xa6, 0xa7, 0xab, 0xb1, 0xac, 0xad, 0xad, 0xaf, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0x9f, 0xad, 0xad, 0xad, 0xaf, 0xad, 0xac, 0xb1, 0xab, 0xab, 0xa7, 0xa6, 0xa6, 0x9d, 0x9d, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0x9e, 0xa4, 0xa4, 0x57, 0x9a, 0x93, 0x94, 0x8c, 0x8c, 0x92, 0x92, 
+  0x43, 0x83, 0xb3, 0x59, 0x59, 0x59, 0x59, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa1, 
+  0x9c, 0x9c, 0xa5, 0xa6, 0xa6, 0xab, 0xab, 0xb1, 0xb1, 0xaf, 0xaf, 0xae, 0xae, 0xae, 0xae, 0xad, 
+  0xad, 0xae, 0xae, 0xaf, 0xad, 0xac, 0xb1, 0xac, 0xb1, 0xa7, 0xa7, 0xa7, 0xa6, 0xa6, 0xa5, 0x9d, 
+  0x9c, 0x9c, 0xa1, 0xa2, 0xa2, 0xa2, 0x9e, 0xa4, 0x93, 0x9a, 0x93, 0x91, 0x8c, 0x8c, 0x92, 0x43, 
+  0x43, 0x83, 0xb3, 0x59, 0xb4, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xaa, 
+  0xa1, 0xa9, 0x9d, 0xa5, 0xa8, 0xa7, 0xa7, 0xab, 0xac, 0xac, 0xad, 0xac, 0xad, 0xad, 0xad, 0xae, 
+  0xaf, 0xaf, 0xaf, 0xad, 0xac, 0xaf, 0xac, 0xb1, 0xab, 0xab, 0xab, 0xa8, 0xa8, 0xa6, 0x9d, 0xa9, 
+  0x9c, 0xa0, 0xa1, 0xa1, 0xa2, 0x9e, 0xa4, 0xa4, 0x57, 0x93, 0x94, 0x94, 0x9b, 0x8c, 0x8d, 0x92, 
+  0x43, 0x3d, 0x83, 0xb4, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 
+  0xa1, 0x9c, 0x9d, 0x9d, 0xa6, 0xa8, 0xa7, 0xa7, 0xb1, 0xb1, 0xac, 0xac, 0xaf, 0xaf, 0xaf, 0xad, 
+  0xad, 0xad, 0xaf, 0xad, 0xac, 0xb1, 0xb1, 0xb1, 0xab, 0xa7, 0xa8, 0xa6, 0xa8, 0xa5, 0x9d, 0x9d, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0xa3, 0xa4, 0xa4, 0x93, 0x9a, 0x94, 0x94, 0x9b, 0x8c, 0x92, 0x43, 
+  0x43, 0x83, 0x3d, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 
+  0xa1, 0x9c, 0x9d, 0x9d, 0xa6, 0xa8, 0xa7, 0xa7, 0xb1, 0xb1, 0xac, 0xac, 0xaf, 0xaf, 0xaf, 0xad, 
+  0xad, 0xad, 0xaf, 0xad, 0xac, 0xb1, 0xb1, 0xb1, 0xab, 0xa7, 0xa8, 0xa6, 0xa8, 0xa5, 0x9d, 0x9d, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0xa3, 0xa4, 0xa4, 0x93, 0x9a, 0x94, 0x94, 0x9b, 0x8c, 0x92, 0x43, 
+  0x43, 0x83, 0x3d, 0x59, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 
+  0xaa, 0xa0, 0xa9, 0x9d, 0xa6, 0xa8, 0xa7, 0xab, 0xab, 0xb1, 0xb1, 0xb1, 0xac, 0xac, 0xad, 0xaf, 
+  0xaf, 0xac, 0xac, 0xac, 0xb1, 0xac, 0xb0, 0xb1, 0xa7, 0xab, 0xa8, 0xa8, 0xa6, 0x9d, 0x9d, 0xa9, 
+  0x9c, 0xa0, 0xa1, 0xa2, 0xa2, 0x9e, 0x9e, 0xa4, 0x57, 0x93, 0x94, 0x94, 0x91, 0x8c, 0x8c, 0x92, 
+  0x43, 0x83, 0xb3, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa2, 0xa1, 0x9c, 0xa9, 0x9d, 0xa6, 0xa8, 0xa7, 0xab, 0xab, 0xac, 0xb0, 0xac, 0xb1, 0xac, 0xac, 
+  0xac, 0xac, 0xb1, 0xac, 0xb1, 0xb1, 0xab, 0xab, 0xa7, 0xa7, 0xa8, 0xa6, 0xa6, 0xa5, 0x9d, 0xa9, 
+  0x9c, 0xa1, 0xa1, 0xa2, 0xa2, 0xa3, 0x9e, 0xa4, 0x93, 0x93, 0x94, 0x9b, 0x8c, 0x8c, 0x8c, 0x43, 
+  0x43, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa2, 0xa1, 0xa0, 0xa9, 0x9d, 0x9d, 0xa6, 0xa8, 0xa8, 0xab, 0xa7, 0xb1, 0xab, 0xac, 0xac, 0xac, 
+  0xac, 0xac, 0xac, 0xac, 0xb0, 0xb1, 0xab, 0xab, 0xa7, 0xa7, 0xa6, 0xa6, 0xa5, 0x9d, 0xa9, 0x9c, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0x9e, 0xa4, 0xa4, 0x57, 0x93, 0x94, 0x93, 0x9b, 0x8c, 0x8d, 0x8d, 
+  0x43, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa2, 0xa1, 0xa0, 0xa9, 0x9d, 0x9d, 0xa6, 0xa8, 0xa8, 0xab, 0xa7, 0xb1, 0xab, 0xac, 0xac, 0xac, 
+  0xac, 0xac, 0xac, 0xac, 0xb0, 0xb1, 0xab, 0xab, 0xa7, 0xa7, 0xa6, 0xa6, 0xa5, 0x9d, 0xa9, 0x9c, 
+  0x9c, 0xa0, 0xa1, 0xaa, 0xa2, 0x9e, 0xa4, 0xa4, 0x57, 0x93, 0x94, 0x93, 0x9b, 0x8c, 0x8d, 0x8d, 
+  0x43, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x93, 0xa2, 0xa1, 0xa9, 0x9d, 0x9d, 0xa5, 0xa6, 0xa7, 0xab, 0xa7, 0xab, 0xab, 0xab, 0xb1, 0xac, 
+  0xb0, 0xb1, 0xb1, 0xb1, 0xab, 0xb1, 0xa7, 0xab, 0xab, 0xa8, 0xa8, 0xa6, 0xa5, 0x9d, 0x9d, 0x9c, 
+  0xa1, 0xa1, 0xa1, 0xa2, 0xa2, 0x9e, 0x9e, 0xa4, 0x93, 0x93, 0x94, 0x94, 0x8c, 0x8c, 0x8c, 0x43, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8d, 0xaa, 0xa1, 0x9c, 0xa9, 0x9d, 0xa6, 0xa6, 0xa6, 0xa8, 0xab, 0xa7, 0xa7, 0xb1, 0xab, 0xab, 
+  0xb1, 0xb1, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa7, 0xa8, 0xa8, 0xa6, 0xa6, 0xa5, 0x9d, 0xa9, 0x9c, 
+  0x9c, 0xa0, 0xa2, 0xa2, 0xa2, 0x9e, 0x97, 0xa4, 0x57, 0x93, 0x9a, 0x94, 0x9b, 0x91, 0x7d, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb3, 0xa2, 0xa1, 0xa1, 0x9c, 0xa9, 0xa5, 0xa6, 0xa6, 0xa6, 0xa7, 0xab, 0xa7, 0xab, 0xa7, 0xab, 
+  0xab, 0xab, 0xab, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa6, 0xa8, 0xa6, 0x9d, 0xa5, 0x9d, 0xa9, 0x9c, 
+  0xa1, 0xa0, 0xa1, 0xa2, 0xa2, 0x9e, 0xa4, 0xa4, 0x93, 0x93, 0x9a, 0x94, 0x83, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb3, 0xa2, 0xa1, 0xa1, 0x9c, 0xa9, 0xa5, 0xa6, 0xa6, 0xa6, 0xa7, 0xab, 0xa7, 0xab, 0xa7, 0xab, 
+  0xab, 0xab, 0xab, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa6, 0xa8, 0xa6, 0x9d, 0xa5, 0x9d, 0xa9, 0x9c, 
+  0xa1, 0xa0, 0xa1, 0xa2, 0xa2, 0x9e, 0xa4, 0xa4, 0x93, 0x93, 0x9a, 0x94, 0x83, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0xa2, 0xa2, 0xa1, 0x9c, 0x9c, 0xa9, 0xa5, 0xa6, 0xa8, 0xa8, 0xa8, 0xab, 0xa7, 0xab, 0xa7, 
+  0xab, 0xb1, 0xa7, 0xab, 0xab, 0xab, 0xa7, 0xa6, 0xa8, 0xa6, 0xa5, 0xa5, 0x9d, 0x9d, 0x9c, 0x9c, 
+  0x9c, 0xa1, 0xaa, 0xa2, 0xa2, 0x9e, 0x9e, 0xa4, 0xa4, 0x9a, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x93, 0xa2, 0xa1, 0xa1, 0x9c, 0x9c, 0x9d, 0x9d, 0xa6, 0xa6, 0xa6, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa7, 0xab, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8, 0xa8, 0xa6, 0xa8, 0xa6, 0xa5, 0x9d, 0x9d, 0xa9, 0x9c, 
+  0xa1, 0xa1, 0xa2, 0xa2, 0x9e, 0x9e, 0xa4, 0x94, 0x42, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3d, 0x8c, 0xa0, 0x9c, 0x9c, 0x9d, 0xa5, 0xa5, 0xa6, 0xa6, 0xa8, 0xa8, 0xa7, 0xa7, 
+  0xa7, 0xa8, 0xa7, 0xa8, 0xa7, 0xa8, 0xa8, 0xa6, 0xa8, 0xa5, 0xa5, 0x9d, 0xa9, 0x9c, 0x9c, 0x9c, 
+  0xa0, 0xa1, 0xa1, 0xa2, 0xa2, 0x8d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3d, 0x8c, 0xa0, 0x9c, 0x9c, 0x9d, 0xa5, 0xa5, 0xa6, 0xa6, 0xa8, 0xa8, 0xa7, 0xa7, 
+  0xa7, 0xa8, 0xa7, 0xa8, 0xa7, 0xa8, 0xa8, 0xa6, 0xa8, 0xa5, 0xa5, 0x9d, 0xa9, 0x9c, 0x9c, 0x9c, 
+  0xa0, 0xa1, 0xa1, 0xa2, 0xa2, 0x8d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x91, 0xa4, 0x9c, 0x9d, 0xa5, 0xa6, 0xa5, 0xa6, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa7, 0xa7, 0xa8, 0xa8, 0xa6, 0xa8, 0xa6, 0xa6, 0xa5, 0x9d, 0x9d, 0x9d, 0x9c, 0x9c, 0xa1, 
+  0xa1, 0x93, 0x8c, 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x9b, 0xa3, 0xa5, 0xa5, 0xa6, 0xa6, 0xa6, 
+  0xa6, 0xa8, 0xa8, 0xa6, 0xa6, 0xa8, 0xa6, 0xa5, 0xa5, 0x9d, 0xa5, 0x9d, 0xa9, 0x9b, 0x91, 0x83, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x94, 0x94, 
+  0x94, 0x94, 0x94, 0x9a, 0x94, 0x94, 0x94, 0x9b, 0x94, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x94, 0x94, 
+  0x94, 0x94, 0x94, 0x9a, 0x94, 0x94, 0x94, 0x9b, 0x94, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x28, 0x25, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x28, 0x25, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x28, 0x2a, 0x28, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x28, 0x25, 0x25, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x2a, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x2a, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x25, 0x28, 0x28, 
+  0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 
+  0x30, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x2a, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x31, 0x32, 
+  0x30, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x2a, 0x2a, 0x28, 0x28, 
+  0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x32, 0x31, 0x33, 0x33, 0x31, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x25, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x31, 0x32, 
+  0x30, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x2a, 0x2a, 0x28, 0x28, 
+  0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x32, 0x31, 0x33, 0x33, 0x31, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x25, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x23, 0x32, 0x30, 
+  0x30, 0x30, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x28, 0x2a, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x33, 0x35, 0x34, 0x34, 0x36, 0x34, 0x34, 0x37, 0x36, 0x37, 0x37, 0x37, 0x31, 0x32, 
+  0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x23, 0x23, 0x23, 0x32, 
+  0x30, 0x30, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x38, 0x2a, 0x2d, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x23, 
+  0x33, 0x34, 0x37, 0x39, 0x3a, 0x39, 0x3a, 0x39, 0x39, 0x36, 0x3b, 0x26, 0x37, 0x37, 0x34, 0x34, 
+  0x35, 0x31, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x27, 0x32, 0x32, 0x30, 
+  0x32, 0x30, 0x30, 0x30, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x21, 0x26, 
+  0x26, 0x39, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x39, 0x3d, 0x3e, 0x26, 0x3a, 0x34, 0x37, 
+  0x37, 0x34, 0x34, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x27, 0x32, 0x32, 0x30, 
+  0x32, 0x30, 0x30, 0x30, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x21, 0x26, 
+  0x26, 0x39, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x39, 0x3d, 0x3e, 0x26, 0x3a, 0x34, 0x37, 
+  0x37, 0x34, 0x34, 0x23, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x3f, 0x27, 0x27, 0x23, 0x23, 0x32, 
+  0x30, 0x30, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x23, 0x26, 0x26, 0x3c, 
+  0x3c, 0x3c, 0x40, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x24, 0x42, 0x43, 0x44, 0x3d, 0x39, 0x3a, 
+  0x37, 0x37, 0x34, 0x34, 0x35, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2b, 0x3f, 0x27, 0x23, 0x23, 0x32, 0x32, 
+  0x32, 0x30, 0x30, 0x30, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x45, 0x26, 0x39, 0x40, 0x46, 
+  0x47, 0x48, 0x48, 0x48, 0x48, 0x49, 0x48, 0x48, 0x24, 0x29, 0x4a, 0x4b, 0x4c, 0x3a, 0x35, 0x35, 
+  0x39, 0x26, 0x34, 0x37, 0x34, 0x35, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x2a, 0x28, 0x28, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2e, 0x2b, 0x3f, 0x3f, 0x27, 0x27, 0x32, 0x32, 
+  0x32, 0x32, 0x30, 0x30, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x4d, 0x39, 0x3c, 0x41, 0x21, 0x4e, 
+  0x48, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x2c, 0x4a, 0x4b, 0x4b, 0x4a, 0x4a, 0x4b, 0x51, 0x24, 0x3c, 
+  0x35, 0x39, 0x3a, 0x37, 0x37, 0x37, 0x34, 0x32, 0x25, 0x28, 0x25, 0x28, 0x28, 0x2a, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2e, 0x2b, 0x3f, 0x3f, 0x27, 0x27, 0x32, 0x32, 
+  0x32, 0x32, 0x30, 0x30, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x4d, 0x39, 0x3c, 0x41, 0x21, 0x4e, 
+  0x48, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x2c, 0x4a, 0x4b, 0x4b, 0x4a, 0x4a, 0x4b, 0x51, 0x24, 0x3c, 
+  0x35, 0x39, 0x3a, 0x37, 0x37, 0x37, 0x34, 0x32, 0x25, 0x28, 0x25, 0x28, 0x28, 0x2a, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x2e, 0x2c, 0x3f, 0x3f, 0x27, 0x27, 0x23, 0x23, 
+  0x23, 0x30, 0x30, 0x30, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x27, 0x39, 0x40, 0x48, 0x48, 0x52, 0x50, 
+  0x2c, 0x53, 0x4f, 0x54, 0x55, 0x55, 0x56, 0x57, 0x56, 0x57, 0x53, 0x51, 0x58, 0x47, 0x47, 0x41, 
+  0x59, 0x59, 0x35, 0x3a, 0x34, 0x34, 0x34, 0x37, 0x28, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x31, 0x2e, 0x2e, 0x2c, 0x3f, 0x27, 0x27, 0x23, 0x32, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2f, 0x2f, 0x2f, 0x3f, 0x35, 0x41, 0x48, 0x50, 0x50, 0x5a, 0x55, 
+  0x3f, 0x56, 0x55, 0x5b, 0x5c, 0x5d, 0x56, 0x57, 0x57, 0x57, 0x5e, 0x54, 0x50, 0x50, 0x48, 0x47, 
+  0x41, 0x59, 0x3c, 0x35, 0x3a, 0x37, 0x34, 0x34, 0x39, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x33, 0x2e, 0x2e, 0x3f, 0x3f, 0x3f, 0x27, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x32, 0x30, 0x30, 0x2f, 0x2f, 0x39, 0x59, 0x48, 0x58, 0x57, 0x27, 0x55, 0x2f, 
+  0x5f, 0x60, 0x5b, 0x5b, 0x5b, 0x61, 0x5f, 0x5f, 0x5f, 0x5f, 0x56, 0x5d, 0x5d, 0x50, 0x50, 0x48, 
+  0x47, 0x41, 0x59, 0x3c, 0x39, 0x3a, 0x34, 0x34, 0x34, 0x33, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x33, 0x2e, 0x2e, 0x3f, 0x3f, 0x3f, 0x27, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x32, 0x30, 0x30, 0x2f, 0x2f, 0x39, 0x59, 0x48, 0x58, 0x57, 0x27, 0x55, 0x2f, 
+  0x5f, 0x60, 0x5b, 0x5b, 0x5b, 0x61, 0x5f, 0x5f, 0x5f, 0x5f, 0x56, 0x5d, 0x5d, 0x50, 0x50, 0x48, 
+  0x47, 0x41, 0x59, 0x3c, 0x39, 0x3a, 0x34, 0x34, 0x34, 0x33, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x33, 0x31, 0x2e, 0x2c, 0x3f, 0x3f, 0x27, 0x27, 0x23, 
+  0x32, 0x32, 0x30, 0x32, 0x30, 0x30, 0x2f, 0x35, 0x59, 0x48, 0x50, 0x62, 0x57, 0x30, 0x5b, 0x30, 
+  0x5f, 0x2a, 0x63, 0x63, 0x64, 0x5f, 0x65, 0x5f, 0x5f, 0x5f, 0x66, 0x5b, 0x5c, 0x5d, 0x54, 0x50, 
+  0x50, 0x58, 0x41, 0x59, 0x3c, 0x39, 0x26, 0x34, 0x34, 0x34, 0x23, 0x2a, 0x28, 0x28, 0x2a, 0x2a, 
+  0x2d, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x33, 0x31, 0x2e, 0x2c, 0x2c, 0x3f, 0x27, 0x23, 0x27, 
+  0x23, 0x23, 0x32, 0x30, 0x30, 0x30, 0x2c, 0x3c, 0x47, 0x50, 0x55, 0x5e, 0x23, 0x55, 0x64, 0x67, 
+  0x67, 0x68, 0x69, 0x67, 0x67, 0x65, 0x65, 0x67, 0x5f, 0x5f, 0x65, 0x5b, 0x5b, 0x5c, 0x5d, 0x50, 
+  0x50, 0x48, 0x47, 0x40, 0x59, 0x26, 0x26, 0x34, 0x34, 0x37, 0x35, 0x28, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x24, 0x33, 0x33, 0x31, 0x2c, 0x2c, 0x3f, 0x27, 0x27, 0x23, 
+  0x23, 0x23, 0x32, 0x30, 0x30, 0x30, 0x46, 0x40, 0x50, 0x54, 0x5c, 0x54, 0x68, 0x68, 0x64, 0x67, 
+  0x6a, 0x69, 0x6b, 0x6b, 0x6a, 0x65, 0x6b, 0x6b, 0x67, 0x6b, 0x67, 0x23, 0x61, 0x5b, 0x5c, 0x5d, 
+  0x54, 0x50, 0x48, 0x47, 0x40, 0x59, 0x35, 0x26, 0x34, 0x34, 0x34, 0x39, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x76, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x24, 0x33, 0x33, 0x31, 0x2c, 0x2c, 0x3f, 0x27, 0x27, 0x23, 
+  0x23, 0x23, 0x32, 0x30, 0x30, 0x30, 0x46, 0x40, 0x50, 0x54, 0x5c, 0x54, 0x68, 0x68, 0x64, 0x67, 
+  0x6a, 0x69, 0x6b, 0x6b, 0x6a, 0x65, 0x6b, 0x6b, 0x67, 0x6b, 0x67, 0x23, 0x61, 0x5b, 0x5c, 0x5d, 
+  0x54, 0x50, 0x48, 0x47, 0x40, 0x59, 0x35, 0x26, 0x34, 0x34, 0x34, 0x39, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x76, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x33, 0x31, 0x2e, 0x2e, 0x2b, 0x2c, 0x3f, 0x27, 0x27, 
+  0x23, 0x32, 0x23, 0x23, 0x32, 0x30, 0x3c, 0x47, 0x50, 0x5c, 0x5b, 0x5b, 0x68, 0x6c, 0x6d, 0x65, 
+  0x6a, 0x6a, 0x6e, 0x6f, 0x6a, 0x6a, 0x6e, 0x6a, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x5b, 0x5b, 0x5c, 
+  0x55, 0x54, 0x50, 0x48, 0x41, 0x59, 0x3c, 0x39, 0x34, 0x37, 0x71, 0x20, 0x20, 0x20, 0x26, 0x24, 
+  0x2a, 0x2a, 0x24, 0x20, 0x76, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x21, 0x33, 0x31, 0x2e, 0x2c, 0x2b, 0x3f, 0x27, 0x27, 
+  0x27, 0x32, 0x32, 0x32, 0x32, 0x41, 0x40, 0x50, 0x5d, 0x5b, 0x68, 0x63, 0x6c, 0x6c, 0x69, 0x6b, 
+  0x6a, 0x72, 0x6e, 0x73, 0x6f, 0x6a, 0x6a, 0x6f, 0x6d, 0x69, 0x6c, 0x64, 0x63, 0x68, 0x5b, 0x5b, 
+  0x5c, 0x5d, 0x50, 0x50, 0x47, 0x41, 0x3c, 0x35, 0x3a, 0x34, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x76, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x33, 0x33, 0x31, 0x2e, 0x3f, 0x3f, 0x27, 0x27, 
+  0x27, 0x23, 0x23, 0x32, 0x32, 0x59, 0x47, 0x5d, 0x5c, 0x68, 0x68, 0x6c, 0x69, 0x74, 0x6d, 0x6f, 
+  0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x72, 0x72, 0x6d, 0x68, 0x75, 0x6c, 0x68, 0x68, 0x5c, 
+  0x5b, 0x55, 0x50, 0x50, 0x48, 0x41, 0x41, 0x39, 0x39, 0x71, 0x34, 0x76, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x76, 0x76, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x33, 0x33, 0x31, 0x2e, 0x3f, 0x3f, 0x27, 0x27, 
+  0x27, 0x23, 0x23, 0x32, 0x32, 0x59, 0x47, 0x5d, 0x5c, 0x68, 0x68, 0x6c, 0x69, 0x74, 0x6d, 0x6f, 
+  0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x72, 0x72, 0x6d, 0x68, 0x75, 0x6c, 0x68, 0x68, 0x5c, 
+  0x5b, 0x55, 0x50, 0x50, 0x48, 0x41, 0x41, 0x39, 0x39, 0x71, 0x34, 0x76, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x76, 0x76, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x33, 0x31, 0x2e, 0x2e, 0x2e, 0x3f, 0x3f, 0x27, 
+  0x27, 0x23, 0x23, 0x32, 0x23, 0x24, 0x48, 0x5d, 0x5b, 0x63, 0x6c, 0x75, 0x77, 0x69, 0x78, 0x72, 
+  0x73, 0x73, 0x79, 0x79, 0x79, 0x79, 0x73, 0x72, 0x72, 0x6a, 0x6d, 0x75, 0x6c, 0x6c, 0x63, 0x5b, 
+  0x50, 0x5c, 0x5d, 0x52, 0x52, 0x4b, 0x24, 0x59, 0x39, 0x26, 0x37, 0x71, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x76, 0x90, 0x76, 0x76, 0x90, 0x76, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x33, 0x33, 0x31, 0x31, 0x2c, 0x2c, 0x3f, 0x3f, 
+  0x27, 0x27, 0x27, 0x23, 0x58, 0x41, 0x50, 0x5c, 0x5b, 0x5b, 0x64, 0x64, 0x72, 0x73, 0x72, 0x79, 
+  0x79, 0x79, 0x79, 0x7a, 0x7a, 0x79, 0x79, 0x79, 0x7a, 0x73, 0x79, 0x2f, 0x77, 0x25, 0x32, 0x68, 
+  0x68, 0x60, 0x3f, 0x62, 0x4b, 0x4a, 0x24, 0x59, 0x35, 0x26, 0x34, 0x76, 0x7b, 0x20, 0x20, 0x20, 
+  0x71, 0x90, 0x90, 0xb0, 0x90, 0x90, 0x90, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x33, 0x31, 0x31, 0x2c, 0x2c, 0x3f, 0x3f, 
+  0x27, 0x27, 0x23, 0x32, 0x35, 0x21, 0x50, 0x5b, 0x5b, 0x67, 0x6a, 0x6e, 0x72, 0x73, 0x73, 0x73, 
+  0x79, 0x79, 0x7c, 0x7c, 0x7d, 0x7e, 0x79, 0x79, 0x79, 0x72, 0x75, 0x75, 0x77, 0x65, 0x6b, 0x70, 
+  0x64, 0x60, 0x57, 0x62, 0x62, 0x40, 0x41, 0x46, 0x35, 0x39, 0x34, 0x71, 0x76, 0x20, 0x7b, 0x7f, 
+  0xb0, 0x90, 0x90, 0x90, 0x76, 0x90, 0x76, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x33, 0x31, 0x31, 0x2c, 0x2c, 0x3f, 0x3f, 
+  0x27, 0x27, 0x23, 0x32, 0x35, 0x21, 0x50, 0x5b, 0x5b, 0x67, 0x6a, 0x6e, 0x72, 0x73, 0x73, 0x73, 
+  0x79, 0x79, 0x7c, 0x7c, 0x7d, 0x7e, 0x79, 0x79, 0x79, 0x72, 0x75, 0x75, 0x77, 0x65, 0x6b, 0x70, 
+  0x64, 0x60, 0x57, 0x62, 0x62, 0x40, 0x41, 0x46, 0x35, 0x39, 0x34, 0x71, 0x76, 0x20, 0x7b, 0x7f, 
+  0xb0, 0x90, 0x90, 0x90, 0x76, 0x90, 0x76, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x31, 0x2e, 0x2e, 0x2c, 0x3f, 0x3f, 
+  0x27, 0x27, 0x33, 0x26, 0x34, 0x4b, 0x62, 0x61, 0x65, 0x6b, 0x6f, 0x6e, 0x73, 0x79, 0x79, 0x7c, 
+  0x80, 0x7c, 0x7e, 0x81, 0x82, 0x83, 0x83, 0x7e, 0x7c, 0x79, 0x84, 0x84, 0x75, 0x6e, 0x6b, 0x70, 
+  0x60, 0x5f, 0x5f, 0x3f, 0x50, 0x48, 0x47, 0x40, 0x3a, 0x3a, 0x37, 0x36, 0x71, 0x7f, 0x44, 0x7f, 
+  0x7f, 0x76, 0x90, 0x90, 0x90, 0x90, 0x90, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x31, 0x2e, 0x2e, 0x3f, 0x3f, 
+  0x27, 0x21, 0x20, 0x20, 0x26, 0x4b, 0x53, 0x60, 0x5f, 0x6b, 0x6a, 0x73, 0x73, 0x79, 0x79, 0x7c, 
+  0x7c, 0x7d, 0x7e, 0x83, 0x85, 0x85, 0x85, 0x86, 0x7e, 0x7d, 0x75, 0x78, 0x87, 0x6d, 0x69, 0x6c, 
+  0x28, 0x2a, 0x55, 0x55, 0x50, 0x50, 0x47, 0x40, 0x3c, 0x88, 0x37, 0x88, 0x89, 0x4c, 0x44, 0x88, 
+  0x88, 0x76, 0x76, 0xb0, 0x76, 0x90, 0x76, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x33, 0x33, 0x31, 0x2e, 0x2e, 0x2c, 0x3f, 
+  0x26, 0x20, 0x20, 0x20, 0x34, 0x4b, 0x62, 0x67, 0x67, 0x6a, 0x6f, 0x72, 0x7a, 0x79, 0x7c, 0x7c, 
+  0x7c, 0x7d, 0x83, 0x86, 0x85, 0x8a, 0x8a, 0x85, 0x86, 0x81, 0x79, 0x69, 0x8b, 0x8b, 0x6c, 0x6c, 
+  0x68, 0x68, 0x5b, 0x5d, 0x54, 0x50, 0x47, 0x59, 0x46, 0x43, 0x89, 0x89, 0x89, 0x8c, 0x44, 0x7f, 
+  0x7f, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x33, 0x33, 0x31, 0x2e, 0x2e, 0x2c, 0x3f, 
+  0x26, 0x20, 0x20, 0x20, 0x34, 0x4b, 0x62, 0x67, 0x67, 0x6a, 0x6f, 0x72, 0x7a, 0x79, 0x7c, 0x7c, 
+  0x7c, 0x7d, 0x83, 0x86, 0x85, 0x8a, 0x8a, 0x85, 0x86, 0x81, 0x79, 0x69, 0x8b, 0x8b, 0x6c, 0x6c, 
+  0x68, 0x68, 0x5b, 0x5d, 0x54, 0x50, 0x47, 0x59, 0x46, 0x43, 0x89, 0x89, 0x89, 0x8c, 0x44, 0x7f, 
+  0x7f, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x33, 0x31, 0x31, 0x2e, 0x2c, 0x34, 
+  0x20, 0x20, 0x20, 0x20, 0x3b, 0x4b, 0x57, 0x5f, 0x67, 0x6a, 0x6a, 0x8d, 0x72, 0x79, 0x79, 0x7c, 
+  0x7d, 0x80, 0x83, 0x85, 0x8a, 0x8a, 0x8a, 0x85, 0x86, 0x7d, 0x78, 0x68, 0x84, 0x77, 0x75, 0x6c, 
+  0x68, 0x68, 0x5b, 0x5d, 0x50, 0x50, 0x47, 0x40, 0x53, 0x8e, 0x8e, 0x8f, 0x89, 0x4c, 0x44, 0x44, 
+  0x88, 0x90, 0x76, 0x90, 0x76, 0xb0, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x29, 0x24, 0x21, 0x33, 0x31, 0x2e, 0x26, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x90, 0x51, 0x53, 0x5f, 0x67, 0x6b, 0x6e, 0x73, 0x73, 0x79, 0x7c, 0x7c, 
+  0x7c, 0x7e, 0x81, 0x86, 0x8a, 0x8a, 0x8a, 0x85, 0x86, 0x81, 0x78, 0x84, 0x84, 0x77, 0x8b, 0x6c, 
+  0x63, 0x5b, 0x5b, 0x5c, 0x54, 0x62, 0x91, 0x92, 0x93, 0x92, 0x8e, 0x89, 0x89, 0x4c, 0x44, 0x7f, 
+  0x88, 0xb0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x24, 0x33, 0x5e, 0x53, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x53, 0x5f, 0x67, 0x6a, 0x6f, 0x73, 0x73, 0x79, 0x7c, 0x7d, 
+  0x7c, 0x7e, 0x81, 0x86, 0x85, 0x85, 0x85, 0x85, 0x7e, 0x80, 0x75, 0x84, 0x84, 0x75, 0x6c, 0x6c, 
+  0x63, 0x5b, 0x23, 0x5f, 0x94, 0x91, 0x91, 0x95, 0x92, 0x93, 0x8e, 0x8f, 0x89, 0x4c, 0x4c, 0x7f, 
+  0x7f, 0x90, 0x76, 0xb0, 0x76, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x24, 0x33, 0x5e, 0x53, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x53, 0x5f, 0x67, 0x6a, 0x6f, 0x73, 0x73, 0x79, 0x7c, 0x7d, 
+  0x7c, 0x7e, 0x81, 0x86, 0x85, 0x85, 0x85, 0x85, 0x7e, 0x80, 0x75, 0x84, 0x84, 0x75, 0x6c, 0x6c, 
+  0x63, 0x5b, 0x23, 0x5f, 0x94, 0x91, 0x91, 0x95, 0x92, 0x93, 0x8e, 0x8f, 0x89, 0x4c, 0x4c, 0x7f, 
+  0x7f, 0x90, 0x76, 0xb0, 0x76, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x33, 0x40, 0x24, 0x96, 0x97, 0x98, 
+  0x7f, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x99, 0x57, 0x67, 0x6b, 0x6e, 0x8d, 0x72, 0x7a, 0x79, 0x7c, 
+  0x7c, 0x7d, 0x7e, 0x9a, 0x9b, 0x86, 0x86, 0x9b, 0x7e, 0x78, 0x84, 0x84, 0x8b, 0x77, 0x8b, 0x38, 
+  0x6a, 0x9c, 0x9d, 0x9e, 0x9f, 0x94, 0x98, 0x95, 0x92, 0x8e, 0x8e, 0xa0, 0x8f, 0x89, 0x8c, 0x44, 
+  0x7f, 0xb0, 0x90, 0x90, 0x90, 0x76, 0x90, 0x90, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x20, 0x95, 0x9c, 0xa1, 
+  0xa1, 0xa2, 0x9e, 0x93, 0x44, 0xa3, 0x57, 0x56, 0x67, 0x67, 0x6e, 0x6e, 0x73, 0x79, 0x79, 0x7c, 
+  0x7c, 0x7c, 0x7c, 0x81, 0x7e, 0xa4, 0xa5, 0x81, 0x7c, 0x84, 0x74, 0xa6, 0x78, 0xa7, 0xa1, 0xa1, 
+  0x97, 0x96, 0x9e, 0x9f, 0x9f, 0x94, 0x91, 0x95, 0x95, 0x93, 0x8e, 0xa0, 0x89, 0x8c, 0x42, 0x7f, 
+  0x7f, 0xb0, 0x76, 0x90, 0x90, 0x76, 0x90, 0x90, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x8f, 0x96, 0x97, 
+  0xa7, 0xa7, 0xa5, 0xa4, 0xa4, 0x9a, 0x9a, 0x72, 0xa8, 0x7d, 0xa2, 0x79, 0x6f, 0x7a, 0x79, 0x73, 
+  0x7c, 0x7c, 0x7e, 0xa4, 0xa4, 0xa4, 0x81, 0xa9, 0xa4, 0x9a, 0x9a, 0xaa, 0xa5, 0xa1, 0xa8, 0x97, 
+  0x96, 0x96, 0x9d, 0x9e, 0x9f, 0x98, 0x95, 0x95, 0x92, 0x93, 0x8e, 0xa0, 0x89, 0x4c, 0x8c, 0x44, 
+  0x7f, 0x88, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x8f, 0x96, 0x97, 
+  0xa7, 0xa7, 0xa5, 0xa4, 0xa4, 0x9a, 0x9a, 0x72, 0xa8, 0x7d, 0xa2, 0x79, 0x6f, 0x7a, 0x79, 0x73, 
+  0x7c, 0x7c, 0x7e, 0xa4, 0xa4, 0xa4, 0x81, 0xa9, 0xa4, 0x9a, 0x9a, 0xaa, 0xa5, 0xa1, 0xa8, 0x97, 
+  0x96, 0x96, 0x9d, 0x9e, 0x9f, 0x98, 0x95, 0x95, 0x92, 0x93, 0x8e, 0xa0, 0x89, 0x4c, 0x8c, 0x44, 
+  0x7f, 0x88, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x35, 0x20, 0x20, 0x8f, 0x96, 0x97, 
+  0xa1, 0xa7, 0xa2, 0xa4, 0xa4, 0xa4, 0xab, 0xac, 0xad, 0xad, 0xad, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0x9a, 0xae, 0xab, 0xa4, 0xa9, 0xa5, 0xa5, 0xa7, 0xa1, 0xa1, 0xa8, 
+  0x9c, 0x96, 0x9e, 0x9e, 0x9f, 0x9f, 0x98, 0x95, 0x92, 0x93, 0xa0, 0xa0, 0x8f, 0x4c, 0x8c, 0x44, 
+  0x7f, 0x88, 0x76, 0xb0, 0x90, 0x76, 0x76, 0x76, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x37, 0x20, 0x20, 0x20, 0x9d, 0x9c, 
+  0x97, 0xa1, 0xa2, 0xa2, 0xa9, 0x9a, 0x9a, 0xac, 0xac, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xad, 0xac, 0xac, 0xab, 0x9a, 0xa4, 0xa4, 0xa9, 0xa2, 0xa2, 0xa7, 0xa8, 0x97, 
+  0x96, 0x9d, 0x9d, 0x9f, 0x9f, 0x98, 0x98, 0x95, 0x95, 0x92, 0x8e, 0xa0, 0x89, 0x89, 0x4c, 0x44, 
+  0x7f, 0xb0, 0x90, 0x76, 0x90, 0xb0, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9e, 0x9c, 
+  0x97, 0xa7, 0xa2, 0xa5, 0xa5, 0xa4, 0xab, 0x9a, 0xac, 0xac, 0xad, 0xae, 0xad, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xac, 0xac, 0x9a, 0x9a, 0x9a, 0xa9, 0xa9, 0xa9, 0xa5, 0xa7, 0xa1, 0xa8, 0xa8, 
+  0x96, 0x96, 0x9d, 0xaf, 0x9f, 0x98, 0x91, 0x95, 0x92, 0x92, 0x8e, 0xa0, 0x89, 0x89, 0x8c, 0x44, 
+  0x44, 0x88, 0x90, 0x76, 0x90, 0x90, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9e, 0x9c, 
+  0x97, 0xa7, 0xa2, 0xa5, 0xa5, 0xa4, 0xab, 0x9a, 0xac, 0xac, 0xad, 0xae, 0xad, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xac, 0xac, 0x9a, 0x9a, 0x9a, 0xa9, 0xa9, 0xa9, 0xa5, 0xa7, 0xa1, 0xa8, 0xa8, 
+  0x96, 0x96, 0x9d, 0xaf, 0x9f, 0x98, 0x91, 0x95, 0x92, 0x92, 0x8e, 0xa0, 0x89, 0x89, 0x8c, 0x44, 
+  0x44, 0x88, 0x90, 0x76, 0x90, 0x90, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8f, 0x9d, 
+  0x97, 0x97, 0xa7, 0xa2, 0xa9, 0xa9, 0xa4, 0xab, 0x9a, 0xac, 0xac, 0xac, 0xae, 0xae, 0xad, 0xae, 
+  0xae, 0xae, 0xac, 0xae, 0xac, 0x9a, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 0xa2, 0xa1, 0xa1, 0x97, 0x97, 
+  0x9c, 0x96, 0x9e, 0x9f, 0x9f, 0x94, 0x98, 0x95, 0x92, 0x93, 0x8e, 0x8e, 0x8f, 0x89, 0x4c, 0x44, 
+  0x7f, 0x7f, 0x90, 0x90, 0x90, 0x90, 0x90, 0x76, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 0x9d, 
+  0x97, 0x97, 0xa8, 0xa7, 0xa5, 0xa5, 0xa4, 0xa4, 0x9a, 0xac, 0xac, 0xac, 0xad, 0xac, 0xae, 0xad, 
+  0xac, 0xac, 0x9a, 0xac, 0x9a, 0xab, 0xab, 0xa4, 0xa4, 0xa5, 0xa5, 0xa5, 0xa7, 0xa7, 0xa8, 0x97, 
+  0x96, 0x96, 0x9d, 0x9e, 0x9f, 0x98, 0x98, 0x95, 0x92, 0x92, 0xa0, 0xa0, 0x89, 0x89, 0x4c, 0x44, 
+  0x7f, 0x88, 0xb0, 0x76, 0x76, 0x76, 0xb0, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 0x9e, 
+  0x96, 0x97, 0xa1, 0xa1, 0xa2, 0xa5, 0xa9, 0xa9, 0xa4, 0xab, 0x9a, 0xac, 0xac, 0xac, 0xac, 0xac, 
+  0xac, 0xac, 0xac, 0x9a, 0x9a, 0x9a, 0xa4, 0xa9, 0xa9, 0xa9, 0xa2, 0xa2, 0xa1, 0xa1, 0x97, 0x9c, 
+  0x9c, 0x9d, 0x9e, 0x9f, 0x9f, 0x94, 0x95, 0x95, 0x92, 0x93, 0x92, 0xa0, 0x8f, 0x89, 0x8c, 0x8c, 
+  0x44, 0x88, 0xb0, 0xb0, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 0x9e, 
+  0x96, 0x97, 0xa1, 0xa1, 0xa2, 0xa5, 0xa9, 0xa9, 0xa4, 0xab, 0x9a, 0xac, 0xac, 0xac, 0xac, 0xac, 
+  0xac, 0xac, 0xac, 0x9a, 0x9a, 0x9a, 0xa4, 0xa9, 0xa9, 0xa9, 0xa2, 0xa2, 0xa1, 0xa1, 0x97, 0x9c, 
+  0x9c, 0x9d, 0x9e, 0x9f, 0x9f, 0x94, 0x95, 0x95, 0x92, 0x93, 0x92, 0xa0, 0x8f, 0x89, 0x8c, 0x8c, 
+  0x44, 0x88, 0xb0, 0xb0, 0x90, 0x90, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9e, 
+  0x9d, 0x96, 0xa8, 0xa1, 0xa7, 0xa5, 0xa9, 0xa9, 0xa4, 0xa4, 0x9a, 0xab, 0xac, 0xac, 0xac, 0xac, 
+  0xac, 0xac, 0x9a, 0xab, 0xab, 0xab, 0xa4, 0xa4, 0xa5, 0xa5, 0xa2, 0xa2, 0xa1, 0xa1, 0x97, 0x97, 
+  0x96, 0x9d, 0x9d, 0x9f, 0x9f, 0x94, 0x98, 0x95, 0x92, 0x93, 0x93, 0xa0, 0x8f, 0x89, 0x4c, 0x8c, 
+  0x44, 0x7f, 0xb0, 0x90, 0x90, 0x90, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9e, 
+  0x9d, 0x9c, 0x97, 0xa1, 0xa1, 0xa2, 0xa5, 0xa9, 0xaa, 0xa4, 0xa4, 0x9a, 0x9a, 0x9a, 0xac, 0x9a, 
+  0x9a, 0x9a, 0xab, 0xab, 0xab, 0xa4, 0xa4, 0xa5, 0xa9, 0xa2, 0xa2, 0xa7, 0xa1, 0xa8, 0xa8, 0x9c, 
+  0x96, 0x96, 0x9e, 0x9e, 0x9f, 0x98, 0x95, 0x95, 0x99, 0x92, 0x8e, 0x8e, 0x89, 0x89, 0x4c, 0x42, 
+  0x7f, 0x88, 0x88, 0x90, 0x90, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0x9e, 0x9d, 0x9c, 0x97, 0xa1, 0xa7, 0xa2, 0xa2, 0xa9, 0xa9, 0xa9, 0xa4, 0xa4, 0xab, 0x9a, 0x9a, 
+  0xab, 0x9a, 0x9a, 0x9a, 0xa4, 0xa9, 0xa9, 0xaa, 0xa5, 0xa5, 0xa2, 0xa7, 0xa1, 0x97, 0x97, 0x9c, 
+  0x96, 0x9d, 0x9e, 0x9f, 0x9f, 0x9f, 0x98, 0x95, 0x92, 0x92, 0x8e, 0x8e, 0x8f, 0x89, 0x4c, 0x8c, 
+  0x44, 0x7f, 0xb0, 0x76, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0x9e, 0x9d, 0x9c, 0x97, 0xa1, 0xa7, 0xa2, 0xa2, 0xa9, 0xa9, 0xa9, 0xa4, 0xa4, 0xab, 0x9a, 0x9a, 
+  0xab, 0x9a, 0x9a, 0x9a, 0xa4, 0xa9, 0xa9, 0xaa, 0xa5, 0xa5, 0xa2, 0xa7, 0xa1, 0x97, 0x97, 0x9c, 
+  0x96, 0x9d, 0x9e, 0x9f, 0x9f, 0x9f, 0x98, 0x95, 0x92, 0x92, 0x8e, 0x8e, 0x8f, 0x89, 0x4c, 0x8c, 
+  0x44, 0x7f, 0xb0, 0x76, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0x9f, 0x96, 0x9c, 0x97, 0xa1, 0xa1, 0xa7, 0xa5, 0xa5, 0xa4, 0xa4, 0xa9, 0xa4, 0xa4, 0xa4, 0xab, 
+  0xab, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xaa, 0xa9, 0xa5, 0xa2, 0xa7, 0xa7, 0xa1, 0xa8, 0x97, 0x9c, 
+  0x96, 0x9e, 0x9e, 0x9e, 0x9f, 0x98, 0x98, 0x95, 0x92, 0x92, 0x8e, 0xa0, 0xa0, 0x89, 0x4c, 0x42, 
+  0x44, 0x7f, 0x88, 0x36, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9f, 0x9e, 0x96, 0x9c, 0xa8, 0xa1, 0xa7, 0xa2, 0xa2, 0xa5, 0xaa, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa9, 0xa4, 0xa9, 0xa9, 0xa5, 0xa5, 0xa2, 0xa2, 0xa1, 0xa7, 0xa1, 0xa8, 0x97, 0x9c, 
+  0x96, 0x9e, 0x9f, 0x9e, 0x9f, 0x98, 0x95, 0x95, 0x92, 0x92, 0x92, 0xa0, 0x8f, 0x89, 0x4c, 0x8c, 
+  0x44, 0x7f, 0x76, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xaf, 0x9e, 0x9d, 0x9c, 0x97, 0xa8, 0xa1, 0xa7, 0xa2, 0xa2, 0xa2, 0xa5, 0xa9, 0xa9, 0xa9, 0xa4, 
+  0xa4, 0xa9, 0xa4, 0xa9, 0xaa, 0xa9, 0xa2, 0xa2, 0xa5, 0xa2, 0xa7, 0xa1, 0xa8, 0x97, 0x9c, 0x96, 
+  0x96, 0x96, 0x9e, 0x9f, 0x98, 0x98, 0x98, 0x95, 0x92, 0x92, 0x8e, 0x8e, 0xa0, 0x8f, 0x89, 0x44, 
+  0x44, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xaf, 0x9e, 0x9d, 0x9c, 0x97, 0xa8, 0xa1, 0xa7, 0xa2, 0xa2, 0xa2, 0xa5, 0xa9, 0xa9, 0xa9, 0xa4, 
+  0xa4, 0xa9, 0xa4, 0xa9, 0xaa, 0xa9, 0xa2, 0xa2, 0xa5, 0xa2, 0xa7, 0xa1, 0xa8, 0x97, 0x9c, 0x96, 
+  0x96, 0x96, 0x9e, 0x9f, 0x98, 0x98, 0x98, 0x95, 0x92, 0x92, 0x8e, 0x8e, 0xa0, 0x8f, 0x89, 0x44, 
+  0x44, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0xaf, 0x9e, 0x96, 0x97, 0x97, 0xa1, 0xa1, 0xa2, 0xa5, 0xa2, 0xa5, 0xa9, 0xaa, 0xa9, 0xa9, 
+  0xa4, 0xa9, 0xaa, 0xa9, 0xa9, 0xa9, 0xa5, 0xa2, 0xa5, 0xa7, 0xa1, 0xa1, 0xa8, 0x97, 0x97, 0x9c, 
+  0x9d, 0x9d, 0x9e, 0xaf, 0x9f, 0x98, 0x91, 0x95, 0x92, 0x92, 0x8e, 0x8e, 0x89, 0x89, 0x89, 0x7f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x4c, 0x9f, 0x9e, 0x96, 0x96, 0x97, 0xa8, 0xa1, 0xa7, 0xa7, 0xa5, 0xa2, 0xa5, 0xa5, 0xa5, 0xa9, 
+  0xa5, 0xaa, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa2, 0xa7, 0xa1, 0xa7, 0xa8, 0x97, 0x97, 0x9c, 0x96, 
+  0x9e, 0x9e, 0x9f, 0x9f, 0x9f, 0x98, 0x98, 0x95, 0x92, 0x93, 0x8e, 0xa0, 0xa0, 0x89, 0x76, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb0, 0x9f, 0x9e, 0x9d, 0x96, 0x97, 0xa8, 0xa8, 0xa1, 0xa1, 0xa2, 0xa2, 0xa2, 0xa5, 0xa5, 0xa5, 
+  0xa5, 0xa9, 0xa5, 0xa2, 0xa5, 0xa2, 0xa5, 0xa2, 0xa7, 0xa1, 0xa1, 0xa1, 0xa8, 0x9c, 0x96, 0x9c, 
+  0x96, 0x9d, 0x9f, 0x9f, 0x94, 0x98, 0x91, 0x95, 0x92, 0x92, 0x92, 0x8e, 0x7f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb0, 0x9f, 0x9e, 0x9d, 0x96, 0x97, 0xa8, 0xa8, 0xa1, 0xa1, 0xa2, 0xa2, 0xa2, 0xa5, 0xa5, 0xa5, 
+  0xa5, 0xa9, 0xa5, 0xa2, 0xa5, 0xa2, 0xa5, 0xa2, 0xa7, 0xa1, 0xa1, 0xa1, 0xa8, 0x9c, 0x96, 0x9c, 
+  0x96, 0x9d, 0x9f, 0x9f, 0x94, 0x98, 0x91, 0x95, 0x92, 0x92, 0x92, 0x8e, 0x7f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9f, 0xaf, 0x9e, 0x96, 0x96, 0x97, 0x97, 0xa1, 0xa7, 0xa7, 0xa2, 0xa2, 0xa2, 0xa5, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa5, 0xa2, 0xa2, 0xa2, 0xa1, 0xa7, 0xa1, 0xa8, 0xa8, 0x97, 0x97, 0x9c, 0x96, 
+  0x9e, 0x9e, 0x9e, 0x9f, 0x9f, 0x98, 0x95, 0x95, 0x99, 0x92, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x93, 0x9f, 0x9e, 0x9d, 0x96, 0x9c, 0x97, 0x97, 0xa1, 0xa7, 0xa7, 0xa2, 0xa2, 0xa5, 0xa2, 
+  0xa5, 0xa5, 0xa2, 0xa2, 0xa5, 0xa7, 0xa7, 0xa1, 0xa7, 0xa1, 0xa8, 0xa8, 0x97, 0x9c, 0x96, 0x96, 
+  0x9e, 0x9e, 0x9f, 0x9f, 0x9f, 0x98, 0x98, 0xa0, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x90, 0x89, 0x9e, 0x9d, 0x96, 0x97, 0xa8, 0xa8, 0xa1, 0xa1, 0xa7, 0xa1, 0xa7, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa7, 0xa2, 0xa1, 0xa7, 0xa7, 0xa1, 0xa1, 0x97, 0x97, 0x97, 0x96, 0x96, 0x96, 
+  0x9d, 0x9e, 0x9e, 0x9f, 0x98, 0x89, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x90, 0x89, 0x9e, 0x9d, 0x96, 0x97, 0xa8, 0xa8, 0xa1, 0xa1, 0xa7, 0xa1, 0xa7, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa7, 0xa2, 0xa1, 0xa7, 0xa7, 0xa1, 0xa1, 0x97, 0x97, 0x97, 0x96, 0x96, 0x96, 
+  0x9d, 0x9e, 0x9e, 0x9f, 0x98, 0x89, 0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 0x91, 0x96, 0x97, 0x97, 0xa8, 0xa8, 0xa7, 0xa1, 0xa7, 0xa7, 
+  0xa7, 0xa7, 0xa2, 0xa1, 0xa2, 0xa1, 0xa1, 0xa1, 0xa1, 0xa8, 0x97, 0x97, 0x97, 0x9c, 0x9c, 0x9d, 
+  0x9e, 0x92, 0x89, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 0x8e, 0x98, 0xa8, 0xa1, 0xa1, 0xa7, 0xa1, 
+  0xa1, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa1, 0xa8, 0xa8, 0xa8, 0x9c, 0x9c, 0xa0, 0x89, 0x7f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7f, 0x8e, 0x8e, 
+  0x8e, 0x8e, 0x8e, 0xa0, 0x8e, 0xa0, 0x8e, 0x8e, 0xa0, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7f, 0x8e, 0x8e, 
+  0x8e, 0x8e, 0x8e, 0xa0, 0x8e, 0xa0, 0x8e, 0x8e, 0xa0, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x21, 0x21, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x23, 0x21, 0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x27, 0x24, 
+  0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x21, 0x25, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x28, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x27, 0x27, 0x27, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x28, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x27, 0x27, 0x27, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x29, 0x29, 0x29, 0x27, 0x24, 0x27, 0x24, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x24, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 
+  0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x25, 0x2a, 0x2b, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x24, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x25, 0x2c, 0x2d, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x25, 0x2c, 0x2d, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x29, 0x27, 0x27, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x25, 0x2e, 0x2f, 0x2f, 0x2d, 0x29, 0x2d, 0x2d, 0x29, 0x29, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x27, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x24, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2d, 0x2f, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x24, 0x24, 0x24, 0x22, 0x33, 0x32, 0x34, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2d, 0x2f, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x24, 0x24, 0x24, 0x22, 0x33, 0x32, 0x34, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x23, 0x33, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2b, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x27, 0x29, 0x27, 0x27, 
+  0x24, 0x24, 0x34, 0x35, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x32, 0x33, 
+  0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x33, 0x33, 0x31, 
+  0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2b, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x27, 0x27, 0x27, 0x28, 
+  0x34, 0x37, 0x37, 0x38, 0x35, 0x35, 0x35, 0x35, 0x35, 0x25, 0x25, 0x37, 0x36, 0x36, 0x37, 0x37, 
+  0x35, 0x32, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x33, 0x33, 
+  0x33, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2b, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x29, 0x21, 0x37, 
+  0x25, 0x35, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3a, 0x35, 0x35, 0x38, 0x37, 0x36, 
+  0x25, 0x37, 0x36, 0x33, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x33, 0x33, 
+  0x33, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2b, 0x2d, 0x29, 0x29, 0x29, 0x29, 0x29, 0x21, 0x37, 
+  0x25, 0x35, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3a, 0x35, 0x35, 0x38, 0x37, 0x36, 
+  0x25, 0x37, 0x36, 0x33, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x2f, 0x31, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x2d, 0x29, 0x29, 0x29, 0x23, 0x37, 0x35, 0x3a, 
+  0x3a, 0x30, 0x3b, 0x3b, 0x3c, 0x3c, 0x3c, 0x3c, 0x3b, 0x3c, 0x25, 0x25, 0x35, 0x3a, 0x35, 0x25, 
+  0x36, 0x37, 0x37, 0x37, 0x3a, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x24, 0x27, 0x27, 0x27, 0x29, 
+  0x29, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x3d, 0x3d, 0x3d, 0x23, 0x33, 0x23, 0x33, 
+  0x33, 0x33, 0x2f, 0x2f, 0x31, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x29, 0x28, 0x25, 0x3a, 0x3b, 0x26, 
+  0x3c, 0x3e, 0x3f, 0x40, 0x41, 0x41, 0x41, 0x3e, 0x21, 0x42, 0x43, 0x44, 0x3a, 0x45, 0x39, 0x3a, 
+  0x35, 0x25, 0x37, 0x37, 0x37, 0x35, 0x24, 0x24, 0x24, 0x27, 0x24, 0x27, 0x27, 0x29, 0x27, 0x27, 
+  0x29, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2e, 0x2a, 0x3d, 0x3d, 0x28, 0x23, 0x33, 0x33, 
+  0x33, 0x33, 0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x35, 0x35, 0x39, 0x3b, 0x40, 0x3b, 
+  0x43, 0x46, 0x47, 0x48, 0x46, 0x21, 0x2c, 0x49, 0x43, 0x4a, 0x43, 0x43, 0x4b, 0x3b, 0x3b, 0x39, 
+  0x39, 0x38, 0x38, 0x37, 0x37, 0x36, 0x36, 0x33, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 
+  0x29, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2e, 0x2a, 0x3d, 0x3d, 0x28, 0x23, 0x33, 0x33, 
+  0x33, 0x33, 0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x35, 0x35, 0x39, 0x3b, 0x40, 0x3b, 
+  0x43, 0x46, 0x47, 0x48, 0x46, 0x21, 0x2c, 0x49, 0x43, 0x4a, 0x43, 0x43, 0x4b, 0x3b, 0x3b, 0x39, 
+  0x39, 0x38, 0x38, 0x37, 0x37, 0x36, 0x36, 0x33, 0x24, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 0x27, 
+  0x29, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x2e, 0x2c, 0x2c, 0x3d, 0x28, 0x28, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x28, 0x35, 0x30, 0x3c, 0x3c, 0x46, 0x49, 
+  0x4c, 0x4d, 0x4e, 0x4f, 0x4c, 0x49, 0x4a, 0x50, 0x4a, 0x51, 0x4a, 0x43, 0x26, 0x40, 0x3c, 0x3c, 
+  0x45, 0x39, 0x35, 0x25, 0x37, 0x37, 0x37, 0x36, 0x27, 0x24, 0x24, 0x27, 0x27, 0x29, 0x27, 0x29, 
+  0x29, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x2e, 0x2a, 0x2c, 0x3d, 0x28, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x28, 0x35, 0x26, 0x43, 0x4b, 0x4d, 0x4c, 0x4c, 
+  0x4e, 0x52, 0x53, 0x31, 0x50, 0x54, 0x50, 0x50, 0x50, 0x28, 0x2a, 0x2a, 0x46, 0x46, 0x41, 0x3c, 
+  0x3c, 0x45, 0x45, 0x35, 0x38, 0x37, 0x37, 0x37, 0x35, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x29, 
+  0x29, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x34, 0x32, 0x2e, 0x3d, 0x3d, 0x3d, 0x28, 0x23, 0x23, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x35, 0x3b, 0x4b, 0x40, 0x46, 0x23, 0x4a, 0x31, 
+  0x55, 0x55, 0x55, 0x56, 0x54, 0x57, 0x54, 0x54, 0x56, 0x52, 0x4f, 0x52, 0x4e, 0x4d, 0x4d, 0x46, 
+  0x3e, 0x3b, 0x45, 0x45, 0x35, 0x38, 0x37, 0x37, 0x37, 0x34, 0x27, 0x27, 0x27, 0x29, 0x29, 0x27, 
+  0x29, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x34, 0x32, 0x2e, 0x3d, 0x3d, 0x3d, 0x28, 0x23, 0x23, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x35, 0x3b, 0x4b, 0x40, 0x46, 0x23, 0x4a, 0x31, 
+  0x55, 0x55, 0x55, 0x56, 0x54, 0x57, 0x54, 0x54, 0x56, 0x52, 0x4f, 0x52, 0x4e, 0x4d, 0x4d, 0x46, 
+  0x3e, 0x3b, 0x45, 0x45, 0x35, 0x38, 0x37, 0x37, 0x37, 0x34, 0x27, 0x27, 0x27, 0x29, 0x29, 0x27, 
+  0x29, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x3d, 0x3d, 0x28, 0x23, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x2f, 0x2f, 0x31, 0x30, 0x39, 0x3b, 0x40, 0x59, 0x4c, 0x50, 0x56, 0x55, 
+  0x2a, 0x5a, 0x5b, 0x57, 0x57, 0x57, 0x57, 0x57, 0x2b, 0x55, 0x55, 0x53, 0x53, 0x4e, 0x48, 0x4d, 
+  0x46, 0x40, 0x3b, 0x45, 0x3a, 0x35, 0x37, 0x5c, 0x37, 0x37, 0x23, 0x27, 0x27, 0x27, 0x29, 0x29, 
+  0x2d, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x23, 
+  0x33, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2c, 0x39, 0x3c, 0x48, 0x48, 0x53, 0x50, 0x57, 0x28, 0x5a, 
+  0x57, 0x57, 0x57, 0x5d, 0x5d, 0x57, 0x57, 0x5e, 0x5f, 0x5f, 0x5f, 0x55, 0x55, 0x53, 0x4e, 0x48, 
+  0x41, 0x46, 0x3e, 0x3b, 0x45, 0x39, 0x35, 0x37, 0x37, 0x37, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 
+  0x29, 0x29, 0x20, 0x20, 0x20, 0x20, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x26, 0x34, 0x34, 0x2e, 0x2e, 0x2c, 0x3d, 0x28, 0x28, 0x28, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x2f, 0x30, 0x3c, 0x46, 0x4f, 0x53, 0x55, 0x5b, 0x57, 0x57, 0x5d, 
+  0x5d, 0x60, 0x5d, 0x5d, 0x60, 0x60, 0x60, 0x24, 0x61, 0x62, 0x55, 0x5f, 0x55, 0x55, 0x53, 0x52, 
+  0x4d, 0x4d, 0x41, 0x3c, 0x3b, 0x39, 0x35, 0x38, 0x37, 0x37, 0x37, 0x35, 0x26, 0x29, 0x29, 0x29, 
+  0x29, 0x2d, 0x3f, 0x20, 0x20, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x26, 0x34, 0x34, 0x2e, 0x2e, 0x2c, 0x3d, 0x28, 0x28, 0x28, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x2f, 0x30, 0x3c, 0x46, 0x4f, 0x53, 0x55, 0x5b, 0x57, 0x57, 0x5d, 
+  0x5d, 0x60, 0x5d, 0x5d, 0x60, 0x60, 0x60, 0x24, 0x61, 0x62, 0x55, 0x5f, 0x55, 0x55, 0x53, 0x52, 
+  0x4d, 0x4d, 0x41, 0x3c, 0x3b, 0x39, 0x35, 0x38, 0x37, 0x37, 0x37, 0x35, 0x26, 0x29, 0x29, 0x29, 
+  0x29, 0x2d, 0x3f, 0x20, 0x20, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x34, 0x32, 0x32, 0x2e, 0x2c, 0x3d, 0x3d, 0x63, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x33, 0x33, 0x39, 0x3e, 0x48, 0x53, 0x53, 0x27, 0x57, 0x5d, 0x60, 0x60, 
+  0x60, 0x64, 0x65, 0x65, 0x60, 0x5e, 0x60, 0x5a, 0x2b, 0x66, 0x53, 0x62, 0x5f, 0x55, 0x55, 0x53, 
+  0x52, 0x48, 0x40, 0x3e, 0x3c, 0x3b, 0x39, 0x35, 0x37, 0x37, 0x37, 0x67, 0x20, 0x20, 0x25, 0x3f, 
+  0x2d, 0x29, 0x3f, 0x20, 0x74, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3f, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x2c, 0x2a, 0x28, 0x28, 
+  0x28, 0x23, 0x33, 0x33, 0x33, 0x3b, 0x3c, 0x47, 0x46, 0x23, 0x24, 0x68, 0x5d, 0x5d, 0x60, 0x65, 
+  0x64, 0x65, 0x64, 0x65, 0x65, 0x69, 0x64, 0x64, 0x6a, 0x61, 0x6b, 0x61, 0x61, 0x5f, 0x55, 0x55, 
+  0x4e, 0x4e, 0x48, 0x44, 0x3b, 0x3b, 0x39, 0x3a, 0x38, 0x37, 0x36, 0x67, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x3f, 0x3f, 0x7a, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x3d, 0x3d, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x31, 0x26, 0x6c, 0x4c, 0x50, 0x56, 0x5a, 0x5d, 0x60, 0x60, 0x65, 0x64, 
+  0x6d, 0x6d, 0x6d, 0x6e, 0x69, 0x66, 0x6f, 0x6a, 0x70, 0x6b, 0x66, 0x6b, 0x61, 0x5f, 0x5f, 0x55, 
+  0x55, 0x52, 0x48, 0x4d, 0x42, 0x6c, 0x45, 0x39, 0x35, 0x36, 0x37, 0x67, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7a, 0x79, 0x7a, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x3d, 0x3d, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x31, 0x26, 0x6c, 0x4c, 0x50, 0x56, 0x5a, 0x5d, 0x60, 0x60, 0x65, 0x64, 
+  0x6d, 0x6d, 0x6d, 0x6e, 0x69, 0x66, 0x6f, 0x6a, 0x70, 0x6b, 0x66, 0x6b, 0x61, 0x5f, 0x5f, 0x55, 
+  0x55, 0x52, 0x48, 0x4d, 0x42, 0x6c, 0x45, 0x39, 0x35, 0x36, 0x37, 0x67, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7a, 0x79, 0x7a, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x3d, 0x3d, 0x28, 
+  0x23, 0x23, 0x23, 0x23, 0x33, 0x42, 0x49, 0x50, 0x54, 0x5d, 0x57, 0x5d, 0x64, 0x65, 0x6d, 0x6d, 
+  0x6d, 0x6d, 0x6e, 0x6d, 0x6e, 0x71, 0x6f, 0x6f, 0x70, 0x6b, 0x66, 0x6b, 0x61, 0x61, 0x5f, 0x5f, 
+  0x55, 0x53, 0x4e, 0x46, 0x47, 0x3e, 0x3b, 0x39, 0x35, 0x37, 0x37, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x74, 0x79, 0x79, 0x7a, 0x85, 0x7a, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x26, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x2c, 0x3d, 0x3d, 
+  0x28, 0x28, 0x23, 0x33, 0x2a, 0x42, 0x4a, 0x50, 0x5b, 0x57, 0x5d, 0x60, 0x65, 0x6d, 0x6d, 0x72, 
+  0x72, 0x6e, 0x6e, 0x6e, 0x6e, 0x6d, 0x73, 0x6f, 0x70, 0x70, 0x66, 0x66, 0x6b, 0x61, 0x61, 0x55, 
+  0x55, 0x53, 0x52, 0x4d, 0x46, 0x3e, 0x3b, 0x45, 0x3a, 0x5c, 0x67, 0x37, 0x74, 0x20, 0x20, 0x20, 
+  0x7a, 0x85, 0x7a, 0x79, 0x79, 0x79, 0x79, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x3f, 0x21, 0x34, 0x32, 0x32, 0x2e, 0x2c, 0x3d, 0x3d, 
+  0x28, 0x28, 0x28, 0x23, 0x75, 0x4b, 0x4a, 0x54, 0x57, 0x5d, 0x60, 0x60, 0x6d, 0x6d, 0x6e, 0x6e, 
+  0x6e, 0x76, 0x76, 0x76, 0x76, 0x76, 0x77, 0x70, 0x70, 0x70, 0x70, 0x66, 0x6b, 0x66, 0x61, 0x62, 
+  0x5f, 0x31, 0x53, 0x48, 0x4d, 0x40, 0x3b, 0x30, 0x78, 0x79, 0x5c, 0x7a, 0x67, 0x20, 0x74, 0x7b, 
+  0x79, 0x79, 0x85, 0x79, 0x7a, 0x79, 0x7a, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x3f, 0x21, 0x34, 0x32, 0x32, 0x2e, 0x2c, 0x3d, 0x3d, 
+  0x28, 0x28, 0x28, 0x23, 0x75, 0x4b, 0x4a, 0x54, 0x57, 0x5d, 0x60, 0x60, 0x6d, 0x6d, 0x6e, 0x6e, 
+  0x6e, 0x76, 0x76, 0x76, 0x76, 0x76, 0x77, 0x70, 0x70, 0x70, 0x70, 0x66, 0x6b, 0x66, 0x61, 0x62, 
+  0x5f, 0x31, 0x53, 0x48, 0x4d, 0x40, 0x3b, 0x30, 0x78, 0x79, 0x5c, 0x7a, 0x67, 0x20, 0x74, 0x7b, 
+  0x79, 0x79, 0x85, 0x79, 0x7a, 0x79, 0x7a, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x34, 0x34, 0x2e, 0x2e, 0x2c, 0x2c, 0x3d, 
+  0x28, 0x28, 0x32, 0x25, 0x7c, 0x43, 0x51, 0x54, 0x57, 0x5d, 0x60, 0x65, 0x6d, 0x6e, 0x6d, 0x6e, 
+  0x76, 0x76, 0x7d, 0x76, 0x7e, 0x7f, 0x7e, 0x7e, 0x80, 0x81, 0x69, 0x70, 0x33, 0x69, 0x53, 0x5e, 
+  0x57, 0x54, 0x23, 0x52, 0x4d, 0x41, 0x3b, 0x3b, 0x30, 0x82, 0x5c, 0x5c, 0x7a, 0x7b, 0x83, 0x7b, 
+  0x82, 0x79, 0x7a, 0x79, 0x79, 0x79, 0x79, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x21, 0x34, 0x2e, 0x2e, 0x2e, 0x2c, 0x3d, 
+  0x3d, 0x21, 0x20, 0x20, 0x79, 0x43, 0x4a, 0x54, 0x57, 0x60, 0x64, 0x65, 0x6d, 0x6e, 0x6e, 0x76, 
+  0x76, 0x76, 0x76, 0x7f, 0x7f, 0x84, 0x84, 0x7f, 0x76, 0x7d, 0x6a, 0x77, 0x65, 0x60, 0x60, 0x57, 
+  0x57, 0x54, 0x53, 0x4f, 0x48, 0x41, 0x40, 0x3b, 0x39, 0x79, 0x5c, 0x85, 0x86, 0x87, 0x83, 0x7b, 
+  0x85, 0x79, 0x7a, 0x85, 0x7a, 0x79, 0x7a, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x32, 0x32, 0x2e, 0x2e, 0x2c, 0x2c, 
+  0x25, 0x20, 0x20, 0x20, 0x79, 0x43, 0x51, 0x5b, 0x5d, 0x5d, 0x65, 0x81, 0x6d, 0x72, 0x76, 0x76, 
+  0x76, 0x76, 0x88, 0x7f, 0x84, 0x84, 0x84, 0x84, 0x7f, 0x80, 0x77, 0x6d, 0x65, 0x81, 0x2b, 0x29, 
+  0x55, 0x5f, 0x23, 0x52, 0x48, 0x46, 0x40, 0x45, 0x30, 0x89, 0x86, 0x8a, 0x86, 0x89, 0x83, 0x7b, 
+  0x7b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x32, 0x32, 0x2e, 0x2e, 0x2c, 0x2c, 
+  0x25, 0x20, 0x20, 0x20, 0x79, 0x43, 0x51, 0x5b, 0x5d, 0x5d, 0x65, 0x81, 0x6d, 0x72, 0x76, 0x76, 
+  0x76, 0x76, 0x88, 0x7f, 0x84, 0x84, 0x84, 0x84, 0x7f, 0x80, 0x77, 0x6d, 0x65, 0x81, 0x2b, 0x29, 
+  0x55, 0x5f, 0x23, 0x52, 0x48, 0x46, 0x40, 0x45, 0x30, 0x89, 0x86, 0x8a, 0x86, 0x89, 0x83, 0x7b, 
+  0x7b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x21, 0x34, 0x2e, 0x2e, 0x2c, 0x37, 
+  0x20, 0x20, 0x20, 0x20, 0x7a, 0x43, 0x50, 0x54, 0x5d, 0x5d, 0x60, 0x6d, 0x6d, 0x6e, 0x6e, 0x76, 
+  0x7d, 0x7d, 0x7d, 0x84, 0x84, 0x84, 0x84, 0x84, 0x7f, 0x7e, 0x70, 0x69, 0x69, 0x77, 0x6b, 0x61, 
+  0x5f, 0x5f, 0x55, 0x2a, 0x48, 0x41, 0x3e, 0x21, 0x8b, 0x43, 0x8b, 0x8a, 0x86, 0x87, 0x83, 0x83, 
+  0x85, 0x79, 0x7a, 0x79, 0x7a, 0x85, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3f, 0x26, 0x21, 0x32, 0x32, 0x32, 0x25, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x25, 0x43, 0x4a, 0x54, 0x57, 0x60, 0x65, 0x6d, 0x72, 0x6e, 0x76, 0x76, 
+  0x76, 0x76, 0x8c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x7f, 0x7e, 0x70, 0x70, 0x70, 0x6b, 0x66, 0x61, 
+  0x62, 0x8d, 0x55, 0x52, 0x4c, 0x4c, 0x8e, 0x8f, 0x8b, 0x90, 0x90, 0x8a, 0x86, 0x87, 0x83, 0x83, 
+  0x7b, 0x79, 0x79, 0x79, 0x79, 0x7c, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x21, 0x21, 0x4c, 0x4a, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x4a, 0x57, 0x57, 0x60, 0x65, 0x6d, 0x81, 0x6e, 0x76, 0x91, 
+  0x7d, 0x76, 0x76, 0x7f, 0x84, 0x84, 0x84, 0x7f, 0x7e, 0x7e, 0x70, 0x70, 0x70, 0x6b, 0x6b, 0x61, 
+  0x62, 0x5f, 0x56, 0x5b, 0x92, 0x93, 0x8e, 0x94, 0x8b, 0x95, 0x96, 0x8a, 0x86, 0x87, 0x83, 0x83, 
+  0x85, 0x79, 0x7a, 0x79, 0x7a, 0x7a, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x21, 0x21, 0x4c, 0x4a, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x4a, 0x57, 0x57, 0x60, 0x65, 0x6d, 0x81, 0x6e, 0x76, 0x91, 
+  0x7d, 0x76, 0x76, 0x7f, 0x84, 0x84, 0x84, 0x7f, 0x7e, 0x7e, 0x70, 0x70, 0x70, 0x6b, 0x6b, 0x61, 
+  0x62, 0x5f, 0x56, 0x5b, 0x92, 0x93, 0x8e, 0x94, 0x8b, 0x95, 0x96, 0x8a, 0x86, 0x87, 0x83, 0x83, 
+  0x85, 0x79, 0x7a, 0x79, 0x7a, 0x7a, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x26, 0x21, 0x34, 0x30, 0x97, 0x98, 0x99, 
+  0x7b, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x8f, 0x54, 0x57, 0x5d, 0x64, 0x65, 0x6d, 0x6e, 0x76, 0x7d, 
+  0x76, 0x76, 0x7d, 0x71, 0x7e, 0x7f, 0x7f, 0x7f, 0x7e, 0x70, 0x6f, 0x70, 0x70, 0x66, 0x66, 0x5e, 
+  0x81, 0x97, 0x97, 0x9a, 0x9b, 0x99, 0x8e, 0x94, 0x8f, 0x90, 0x90, 0x96, 0x8a, 0x87, 0x89, 0x83, 
+  0x7b, 0x85, 0x79, 0x85, 0x79, 0x79, 0x79, 0x79, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x3f, 0x21, 0x9c, 0x20, 0x94, 0x98, 0x9d, 
+  0x9e, 0x9f, 0x9a, 0x95, 0x83, 0x39, 0x2e, 0x50, 0x5b, 0x5d, 0x60, 0x65, 0x6d, 0x72, 0x72, 0x76, 
+  0x76, 0xa0, 0xa1, 0x7e, 0x7e, 0x70, 0x70, 0x70, 0x70, 0x70, 0xa2, 0xa3, 0x77, 0x9e, 0x9e, 0x98, 
+  0xa4, 0x97, 0xa5, 0x92, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x95, 0x90, 0x8a, 0x8a, 0x89, 0x89, 0x83, 
+  0x7b, 0x85, 0x7a, 0x79, 0x79, 0x7a, 0x79, 0x79, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3f, 0x26, 0x36, 0x20, 0x8a, 0xa4, 0x98, 
+  0xa6, 0x9f, 0xa7, 0xa8, 0xa9, 0xa9, 0xaa, 0xab, 0x9e, 0x76, 0x9f, 0x72, 0x65, 0x6d, 0x72, 0xac, 
+  0x76, 0x76, 0x71, 0x71, 0xad, 0xa2, 0x71, 0x80, 0xae, 0x8c, 0xa8, 0xa8, 0x9f, 0xa6, 0x9e, 0x9d, 
+  0x97, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x8f, 0x8b, 0x96, 0x96, 0x86, 0x86, 0x83, 0x83, 
+  0x7b, 0x82, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3f, 0x26, 0x36, 0x20, 0x8a, 0xa4, 0x98, 
+  0xa6, 0x9f, 0xa7, 0xa8, 0xa9, 0xa9, 0xaa, 0xab, 0x9e, 0x76, 0x9f, 0x72, 0x65, 0x6d, 0x72, 0xac, 
+  0x76, 0x76, 0x71, 0x71, 0xad, 0xa2, 0x71, 0x80, 0xae, 0x8c, 0xa8, 0xa8, 0x9f, 0xa6, 0x9e, 0x9d, 
+  0x97, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x8f, 0x8b, 0x96, 0x96, 0x86, 0x86, 0x83, 0x83, 
+  0x7b, 0x82, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x3a, 0x20, 0x20, 0x86, 0x97, 0x98, 
+  0x9d, 0x9e, 0x9f, 0xa7, 0xa8, 0xaa, 0xa9, 0xaf, 0xaf, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
+  0x88, 0x88, 0xb0, 0x88, 0x88, 0xb0, 0x88, 0xaf, 0x8c, 0x8c, 0xb1, 0xb1, 0x9f, 0xa6, 0x98, 0x9d, 
+  0x97, 0x97, 0x97, 0x92, 0x9b, 0x99, 0x94, 0x94, 0x8b, 0x8b, 0x90, 0x96, 0x86, 0x86, 0x89, 0x83, 
+  0x7b, 0x82, 0x7a, 0x7a, 0x85, 0x7a, 0x7a, 0x7a, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x36, 0x20, 0x20, 0x20, 0x97, 0xa4, 
+  0x9d, 0xa6, 0x9f, 0xb1, 0xb2, 0xa8, 0xaa, 0xaf, 0xaf, 0x88, 0x88, 0xb0, 0xb0, 0x88, 0x88, 0xb0, 
+  0x88, 0xb0, 0x88, 0x88, 0x88, 0x88, 0xaf, 0x8c, 0xa8, 0xb1, 0xb1, 0xb1, 0x9f, 0x9e, 0x9e, 0x98, 
+  0x98, 0x97, 0x9a, 0x9a, 0x9b, 0x99, 0x99, 0x94, 0x8b, 0x8b, 0x96, 0x96, 0x8a, 0x86, 0x83, 0x83, 
+  0x7b, 0x85, 0x85, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0xa6, 0xa6, 0x9f, 0xa7, 0xa8, 0xaa, 0xaa, 0xaf, 0xaf, 0xaf, 0xaf, 0x88, 0x88, 0x88, 0x88, 
+  0x88, 0x88, 0x88, 0x88, 0xaf, 0xae, 0xaa, 0xaa, 0xa8, 0xa7, 0xb1, 0xb1, 0xa6, 0x9e, 0x9d, 0x98, 
+  0xa4, 0x97, 0x9a, 0x9a, 0x9b, 0x99, 0x94, 0x94, 0x8b, 0x8b, 0x90, 0x96, 0x86, 0x86, 0x87, 0x83, 
+  0x83, 0x82, 0x79, 0x7a, 0x79, 0x79, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0xa6, 0xa6, 0x9f, 0xa7, 0xa8, 0xaa, 0xaa, 0xaf, 0xaf, 0xaf, 0xaf, 0x88, 0x88, 0x88, 0x88, 
+  0x88, 0x88, 0x88, 0x88, 0xaf, 0xae, 0xaa, 0xaa, 0xa8, 0xa7, 0xb1, 0xb1, 0xa6, 0x9e, 0x9d, 0x98, 
+  0xa4, 0x97, 0x9a, 0x9a, 0x9b, 0x99, 0x94, 0x94, 0x8b, 0x8b, 0x90, 0x96, 0x86, 0x86, 0x87, 0x83, 
+  0x83, 0x82, 0x79, 0x7a, 0x79, 0x79, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8a, 0x97, 
+  0x98, 0x98, 0x9e, 0x9f, 0xb1, 0xa7, 0xa8, 0xaa, 0xaf, 0xaf, 0xaf, 0x88, 0x88, 0x88, 0xaf, 0x88, 
+  0xaf, 0x88, 0xaf, 0xaf, 0xaf, 0xaa, 0xaa, 0xa8, 0xa8, 0xa7, 0xb1, 0x9f, 0xa6, 0xa6, 0x98, 0x9d, 
+  0x97, 0x97, 0xa5, 0x9a, 0x9b, 0x9b, 0x93, 0x94, 0x8b, 0x95, 0x90, 0x96, 0x8a, 0x86, 0x87, 0x83, 
+  0x7b, 0x85, 0x79, 0x79, 0x79, 0x79, 0x79, 0x7a, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x9a, 
+  0x98, 0x9d, 0x9e, 0x9f, 0x9f, 0xb1, 0xa7, 0xa8, 0xaa, 0xaf, 0xaf, 0xaf, 0xaf, 0x88, 0xaf, 0x88, 
+  0xaf, 0x88, 0xaf, 0xaf, 0xaf, 0xa9, 0xa9, 0xa8, 0xa8, 0xb1, 0xb1, 0x9f, 0x9e, 0xa6, 0x98, 0x98, 
+  0xa4, 0xa5, 0x9a, 0x9a, 0x9b, 0x99, 0x99, 0x94, 0x8f, 0x8b, 0x8b, 0x96, 0x8a, 0x86, 0x87, 0x83, 
+  0x83, 0x85, 0x85, 0x7a, 0x7a, 0x7a, 0x85, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x82, 0xa5, 
+  0x97, 0xa4, 0x9d, 0xa6, 0xb1, 0x9f, 0xa8, 0xa7, 0xa9, 0xaa, 0xaf, 0xaf, 0x88, 0xaf, 0x88, 0xaf, 
+  0xaf, 0xaf, 0xaf, 0xaf, 0xa9, 0xaa, 0xaa, 0xa7, 0xa7, 0xa7, 0x9f, 0x9f, 0xa6, 0x9d, 0x9d, 0xa4, 
+  0x97, 0x9a, 0x9a, 0x92, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x8b, 0x90, 0x96, 0x86, 0x86, 0x87, 0x87, 
+  0x83, 0x82, 0x85, 0x85, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x82, 0xa5, 
+  0x97, 0xa4, 0x9d, 0xa6, 0xb1, 0x9f, 0xa8, 0xa7, 0xa9, 0xaa, 0xaf, 0xaf, 0x88, 0xaf, 0x88, 0xaf, 
+  0xaf, 0xaf, 0xaf, 0xaf, 0xa9, 0xaa, 0xaa, 0xa7, 0xa7, 0xa7, 0x9f, 0x9f, 0xa6, 0x9d, 0x9d, 0xa4, 
+  0x97, 0x9a, 0x9a, 0x92, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x8b, 0x90, 0x96, 0x86, 0x86, 0x87, 0x87, 
+  0x83, 0x82, 0x85, 0x85, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x97, 0xa4, 0x98, 0x9e, 0xa6, 0x9f, 0xa7, 0xa7, 0xa7, 0xa8, 0xaa, 0xa9, 0xaf, 0xaa, 0xaf, 0xaf, 
+  0xaf, 0xaa, 0xaa, 0xaa, 0xa9, 0xa8, 0xa8, 0xa7, 0xa7, 0xb1, 0x9f, 0xa6, 0x9e, 0x9e, 0x9d, 0x98, 
+  0xa4, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x8b, 0x8b, 0x90, 0x8a, 0x86, 0x89, 0x89, 
+  0x83, 0x82, 0x85, 0x79, 0x79, 0x79, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x9a, 0x97, 0x98, 0x9d, 0xa6, 0x9f, 0xb1, 0xa7, 0xa8, 0xa7, 0xa8, 0xaa, 0xa9, 0xa9, 0xaa, 0xaf, 
+  0xaa, 0xaf, 0xaa, 0xa8, 0xa8, 0xa8, 0xa8, 0xb2, 0xb1, 0x9f, 0xb1, 0x9f, 0x9e, 0x9d, 0x98, 0xa4, 
+  0x97, 0xa5, 0x9a, 0x9a, 0x9b, 0x9b, 0x8e, 0x94, 0x8f, 0x95, 0x90, 0x96, 0x86, 0x86, 0x87, 0x83, 
+  0x83, 0x7b, 0x82, 0x79, 0x79, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 
+  0x9a, 0x97, 0x98, 0x98, 0xa6, 0xa6, 0xa6, 0x9f, 0xa8, 0xa7, 0xa7, 0xa9, 0xaa, 0xa9, 0xaa, 0xa9, 
+  0xa9, 0xa9, 0xa9, 0xaa, 0xa8, 0xa8, 0xa7, 0xa7, 0xb1, 0x9f, 0xa6, 0xa6, 0x9e, 0x9d, 0x98, 0xa4, 
+  0x97, 0x9a, 0x9a, 0x92, 0x9b, 0x99, 0x8e, 0x94, 0x8f, 0x8b, 0x90, 0x90, 0x8a, 0x86, 0x87, 0x83, 
+  0x83, 0x7b, 0x85, 0x7a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 
+  0x9a, 0x97, 0x98, 0x98, 0xa6, 0xa6, 0xa6, 0x9f, 0xa8, 0xa7, 0xa7, 0xa9, 0xaa, 0xa9, 0xaa, 0xa9, 
+  0xa9, 0xa9, 0xa9, 0xaa, 0xa8, 0xa8, 0xa7, 0xa7, 0xb1, 0x9f, 0xa6, 0xa6, 0x9e, 0x9d, 0x98, 0xa4, 
+  0x97, 0x9a, 0x9a, 0x92, 0x9b, 0x99, 0x8e, 0x94, 0x8f, 0x8b, 0x90, 0x90, 0x8a, 0x86, 0x87, 0x83, 
+  0x83, 0x7b, 0x85, 0x7a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 
+  0x9a, 0xa5, 0x97, 0x98, 0x98, 0x9e, 0x9f, 0xb1, 0x9f, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xaa, 
+  0xaa, 0xa9, 0xa8, 0xa8, 0xa8, 0xa7, 0xa7, 0xa7, 0xb1, 0xb1, 0x9f, 0xa6, 0x9e, 0x9d, 0x9d, 0x97, 
+  0x97, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x95, 0x95, 0x96, 0x96, 0x86, 0x87, 0x87, 
+  0x83, 0x7b, 0x82, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0xa5, 0x97, 0x98, 0x9e, 0x9e, 0xa6, 0xb1, 0x9f, 0xb1, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa7, 0xa7, 0xa7, 0xa7, 0xb1, 0xb1, 0x9f, 0x9f, 0x9e, 0x9e, 0x9d, 0x98, 0x98, 0xa4, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x94, 0x94, 0x94, 0x8b, 0x90, 0x96, 0x96, 0x8a, 0x86, 0x83, 
+  0x83, 0x7b, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9b, 0xa5, 0xa4, 0x98, 0x9d, 0x9e, 0x9e, 0x9f, 0x9f, 0xb1, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa7, 0xa7, 0xa7, 0x9f, 0x9f, 0xa6, 0xa6, 0xa6, 0x98, 0x9d, 0x98, 0x97, 
+  0x97, 0xa5, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x8b, 0x8b, 0x8b, 0x90, 0x8a, 0x86, 0x86, 0x87, 
+  0x83, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9b, 0xa5, 0xa4, 0x98, 0x9d, 0x9e, 0x9e, 0x9f, 0x9f, 0xb1, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa7, 0xa7, 0xa7, 0x9f, 0x9f, 0xa6, 0xa6, 0xa6, 0x98, 0x9d, 0x98, 0x97, 
+  0x97, 0xa5, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x8b, 0x8b, 0x8b, 0x90, 0x8a, 0x86, 0x86, 0x87, 
+  0x83, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8b, 0x9b, 0x9a, 0x97, 0xa4, 0x98, 0x9e, 0xa6, 0x9f, 0x9f, 0xb1, 0xb1, 0xa7, 0xa7, 0xb2, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xb2, 0xb1, 0xb1, 0xb1, 0xb1, 0x9f, 0xa6, 0x9e, 0x9e, 0x98, 0x9d, 0xa4, 0x97, 
+  0x9a, 0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x8e, 0x94, 0x8b, 0x95, 0x90, 0x90, 0x8a, 0x86, 0x86, 0x7b, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x86, 0x9b, 0xa5, 0x97, 0x97, 0x98, 0x9d, 0x9d, 0xa6, 0xa6, 0x9f, 0x9f, 0xb1, 0xa7, 0xb1, 0xa7, 
+  0xb2, 0xa7, 0xb1, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0x9d, 0x9d, 0x98, 0xa4, 0xa4, 
+  0x97, 0xa5, 0x9a, 0x9b, 0x93, 0x93, 0x8e, 0x94, 0x8f, 0x8b, 0x95, 0x96, 0x96, 0x86, 0x7a, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x82, 0x9b, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x98, 0xa6, 0xa6, 0x9f, 0x9f, 0xb1, 0x9f, 0xb1, 0x9f, 
+  0xa7, 0xb1, 0x9f, 0xa7, 0x9f, 0xb1, 0x9f, 0x9f, 0xa6, 0xa6, 0xa6, 0x9d, 0x98, 0x98, 0x97, 0x97, 
+  0x9a, 0x9a, 0x9a, 0x9b, 0x99, 0x99, 0x8e, 0x94, 0x8b, 0x8b, 0x8b, 0x96, 0x7b, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x82, 0x9b, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x98, 0xa6, 0xa6, 0x9f, 0x9f, 0xb1, 0x9f, 0xb1, 0x9f, 
+  0xa7, 0xb1, 0x9f, 0xa7, 0x9f, 0xb1, 0x9f, 0x9f, 0xa6, 0xa6, 0xa6, 0x9d, 0x98, 0x98, 0x97, 0x97, 
+  0x9a, 0x9a, 0x9a, 0x9b, 0x99, 0x99, 0x8e, 0x94, 0x8b, 0x8b, 0x8b, 0x96, 0x7b, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x99, 0x92, 0x9a, 0x97, 0xa4, 0x98, 0x9d, 0x9d, 0x9e, 0xa6, 0xa6, 0x9f, 0xb1, 0x9f, 0xb1, 
+  0xb1, 0xa7, 0xb1, 0x9f, 0xb1, 0x9f, 0x9f, 0xa6, 0xa6, 0x9e, 0x9d, 0x98, 0x9d, 0x98, 0xa4, 0x97, 
+  0x97, 0x9a, 0x9b, 0x9b, 0x9b, 0x99, 0x94, 0x94, 0x8f, 0x8b, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x95, 0x9b, 0x9a, 0x9a, 0x97, 0x97, 0x98, 0x9d, 0x9d, 0x9e, 0xa6, 0xa6, 0x9f, 0x9f, 0x9f, 
+  0x9f, 0x9f, 0xb1, 0xa6, 0x9f, 0xa6, 0xa6, 0x9e, 0xa6, 0x9e, 0x9e, 0x98, 0x98, 0x97, 0xa4, 0x97, 
+  0x9a, 0x9a, 0x9b, 0x9b, 0x9b, 0x99, 0x94, 0x96, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x85, 0x86, 0xa5, 0x97, 0xa4, 0x98, 0x98, 0x9d, 0xa6, 0x9e, 0x9e, 0xa6, 0xa6, 0x9f, 
+  0xa6, 0xb1, 0xa6, 0x9f, 0xa6, 0x9f, 0x9e, 0xa6, 0x9e, 0x9e, 0x9d, 0x98, 0xa4, 0x98, 0x97, 0x97, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x93, 0x89, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x85, 0x86, 0xa5, 0x97, 0xa4, 0x98, 0x98, 0x9d, 0xa6, 0x9e, 0x9e, 0xa6, 0xa6, 0x9f, 
+  0xa6, 0xb1, 0xa6, 0x9f, 0xa6, 0x9f, 0x9e, 0xa6, 0x9e, 0x9e, 0x9d, 0x98, 0xa4, 0x98, 0x97, 0x97, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x93, 0x89, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x94, 0xa4, 0x98, 0x98, 0x9d, 0x9e, 0x9e, 0xa6, 0xa6, 0xa6, 
+  0x9e, 0x9f, 0xa6, 0x9f, 0xa6, 0xa6, 0x9e, 0x9e, 0x9e, 0x9d, 0x9d, 0x98, 0xa4, 0xa4, 0x97, 0xa5, 
+  0xa5, 0x8b, 0x86, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x96, 0x99, 0x9d, 0x9e, 0x9e, 0x9e, 0x9e, 
+  0xa6, 0x9e, 0xa6, 0xa6, 0x9e, 0x9e, 0xa6, 0x9e, 0x9d, 0x98, 0x98, 0x98, 0xa4, 0x96, 0x8a, 0x7b, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x90, 0x90, 
+  0x90, 0x90, 0x90, 0x8b, 0x90, 0x96, 0x90, 0x96, 0x90, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x90, 0x90, 
+  0x90, 0x90, 0x90, 0x8b, 0x90, 0x96, 0x90, 0x96, 0x90, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 0x27, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2f, 0x30, 0x30, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x27, 0x27, 0x2a, 0x27, 0x25, 0x27, 0x27, 
+  0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 
+  0x31, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x2e, 0x2e, 0x2d, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2f, 0x32, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x25, 0x27, 0x25, 0x25, 0x22, 0x32, 0x33, 0x33, 0x34, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2f, 0x32, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x25, 0x27, 0x25, 0x25, 0x22, 0x32, 0x33, 0x33, 0x34, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x23, 0x23, 0x31, 
+  0x31, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x27, 0x34, 0x36, 0x35, 0x37, 0x37, 0x35, 0x35, 0x37, 0x37, 0x38, 0x38, 0x37, 0x33, 0x32, 
+  0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x23, 0x23, 0x23, 0x31, 
+  0x32, 0x31, 0x30, 0x31, 0x30, 0x2e, 0x2d, 0x2a, 0x2d, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x23, 
+  0x34, 0x35, 0x38, 0x36, 0x36, 0x36, 0x36, 0x36, 0x39, 0x26, 0x26, 0x35, 0x35, 0x38, 0x38, 0x37, 
+  0x36, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x23, 0x32, 0x32, 
+  0x31, 0x31, 0x30, 0x30, 0x2d, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x33, 0x35, 
+  0x26, 0x26, 0x36, 0x3a, 0x3a, 0x3b, 0x3a, 0x3b, 0x3a, 0x3a, 0x3c, 0x36, 0x26, 0x39, 0x35, 0x37, 
+  0x35, 0x37, 0x37, 0x32, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x23, 0x32, 0x32, 
+  0x31, 0x31, 0x30, 0x30, 0x2d, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x33, 0x35, 
+  0x26, 0x26, 0x36, 0x3a, 0x3a, 0x3b, 0x3a, 0x3b, 0x3a, 0x3a, 0x3c, 0x36, 0x26, 0x39, 0x35, 0x37, 
+  0x35, 0x37, 0x37, 0x32, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2b, 0x28, 0x23, 0x23, 0x23, 0x32, 
+  0x31, 0x31, 0x31, 0x31, 0x2d, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2a, 0x2a, 0x23, 0x35, 0x26, 0x3a, 
+  0x3a, 0x24, 0x3d, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3b, 0x39, 0x36, 0x3a, 0x3c, 0x36, 0x39, 
+  0x35, 0x35, 0x37, 0x37, 0x36, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x32, 
+  0x32, 0x32, 0x30, 0x30, 0x31, 0x30, 0x2d, 0x2e, 0x2d, 0x2d, 0x2d, 0x28, 0x37, 0x3c, 0x3f, 0x40, 
+  0x41, 0x21, 0x42, 0x43, 0x43, 0x42, 0x42, 0x42, 0x3f, 0x41, 0x44, 0x41, 0x3b, 0x3b, 0x3a, 0x36, 
+  0x36, 0x26, 0x35, 0x37, 0x35, 0x36, 0x25, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2f, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x32, 
+  0x32, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2a, 0x36, 0x45, 0x3d, 0x24, 0x41, 0x41, 
+  0x46, 0x47, 0x48, 0x49, 0x34, 0x49, 0x34, 0x4a, 0x4b, 0x44, 0x41, 0x4c, 0x3e, 0x3e, 0x3b, 0x3b, 
+  0x3a, 0x36, 0x26, 0x35, 0x38, 0x35, 0x37, 0x23, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2f, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x32, 
+  0x32, 0x32, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2a, 0x36, 0x45, 0x3d, 0x24, 0x41, 0x41, 
+  0x46, 0x47, 0x48, 0x49, 0x34, 0x49, 0x34, 0x4a, 0x4b, 0x44, 0x41, 0x4c, 0x3e, 0x3e, 0x3b, 0x3b, 
+  0x3a, 0x36, 0x26, 0x35, 0x38, 0x35, 0x37, 0x23, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x2c, 0x2b, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x32, 0x31, 0x32, 0x31, 0x31, 0x30, 0x2d, 0x30, 0x2d, 0x28, 0x36, 0x3a, 0x3b, 0x41, 0x49, 0x47, 
+  0x4d, 0x4d, 0x48, 0x4e, 0x4b, 0x4e, 0x4b, 0x4e, 0x4b, 0x4b, 0x4b, 0x4f, 0x43, 0x42, 0x3f, 0x3e, 
+  0x3b, 0x3a, 0x36, 0x26, 0x35, 0x35, 0x37, 0x37, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x27, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x33, 0x2f, 0x2c, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x31, 0x31, 0x30, 0x31, 0x31, 0x30, 0x30, 0x2b, 0x36, 0x3e, 0x21, 0x4b, 0x4a, 0x48, 0x50, 
+  0x50, 0x23, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x51, 0x52, 0x28, 0x48, 0x48, 0x42, 0x42, 
+  0x3e, 0x3b, 0x3a, 0x53, 0x37, 0x35, 0x35, 0x35, 0x36, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x2f, 0x2f, 0x2c, 0x28, 0x28, 0x28, 0x23, 0x23, 
+  0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x30, 0x30, 0x36, 0x3b, 0x3f, 0x4b, 0x54, 0x4d, 0x23, 0x28, 
+  0x28, 0x55, 0x56, 0x55, 0x56, 0x57, 0x23, 0x31, 0x23, 0x31, 0x50, 0x50, 0x4d, 0x48, 0x48, 0x42, 
+  0x42, 0x3f, 0x3b, 0x3b, 0x36, 0x39, 0x37, 0x35, 0x35, 0x33, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x2f, 0x2f, 0x2c, 0x28, 0x28, 0x28, 0x23, 0x23, 
+  0x32, 0x32, 0x32, 0x32, 0x31, 0x30, 0x30, 0x30, 0x36, 0x3b, 0x3f, 0x4b, 0x54, 0x4d, 0x23, 0x28, 
+  0x28, 0x55, 0x56, 0x55, 0x56, 0x57, 0x23, 0x31, 0x23, 0x31, 0x50, 0x50, 0x4d, 0x48, 0x48, 0x42, 
+  0x42, 0x3f, 0x3b, 0x3b, 0x36, 0x39, 0x37, 0x35, 0x35, 0x33, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x33, 0x34, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x23, 
+  0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x30, 0x3a, 0x3b, 0x42, 0x58, 0x4b, 0x56, 0x55, 0x56, 0x55, 
+  0x30, 0x57, 0x55, 0x57, 0x57, 0x30, 0x59, 0x5a, 0x5b, 0x5a, 0x5a, 0x5c, 0x5c, 0x50, 0x4d, 0x48, 
+  0x43, 0x42, 0x3e, 0x3b, 0x3a, 0x36, 0x35, 0x35, 0x35, 0x37, 0x23, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2e, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x33, 0x34, 0x34, 0x2c, 0x2b, 0x2b, 0x28, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x32, 0x31, 0x30, 0x2c, 0x3c, 0x24, 0x34, 0x4b, 0x4e, 0x56, 0x56, 0x55, 0x55, 
+  0x5d, 0x57, 0x5e, 0x57, 0x5d, 0x5b, 0x5f, 0x59, 0x5b, 0x5b, 0x5b, 0x5a, 0x5a, 0x50, 0x50, 0x4d, 
+  0x48, 0x42, 0x42, 0x3e, 0x3b, 0x3a, 0x36, 0x35, 0x35, 0x35, 0x36, 0x27, 0x2a, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x7d, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x28, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x32, 0x31, 0x32, 0x31, 0x24, 0x29, 0x46, 0x33, 0x4e, 0x55, 0x55, 0x57, 0x57, 0x5e, 
+  0x5e, 0x5e, 0x60, 0x5d, 0x61, 0x61, 0x61, 0x5f, 0x59, 0x5b, 0x59, 0x5a, 0x5a, 0x5a, 0x50, 0x50, 
+  0x4d, 0x48, 0x42, 0x3e, 0x3e, 0x3b, 0x36, 0x26, 0x35, 0x35, 0x37, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x28, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x32, 0x31, 0x32, 0x31, 0x24, 0x29, 0x46, 0x33, 0x4e, 0x55, 0x55, 0x57, 0x57, 0x5e, 
+  0x5e, 0x5e, 0x60, 0x5d, 0x61, 0x61, 0x61, 0x5f, 0x59, 0x5b, 0x59, 0x5a, 0x5a, 0x5a, 0x50, 0x50, 
+  0x4d, 0x48, 0x42, 0x3e, 0x3e, 0x3b, 0x36, 0x26, 0x35, 0x35, 0x37, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x24, 0x21, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x2b, 0x28, 0x23, 
+  0x23, 0x23, 0x32, 0x23, 0x31, 0x32, 0x62, 0x41, 0x63, 0x4e, 0x56, 0x55, 0x57, 0x5e, 0x60, 0x5e, 
+  0x60, 0x5d, 0x64, 0x60, 0x65, 0x66, 0x5f, 0x61, 0x61, 0x61, 0x5f, 0x59, 0x5b, 0x5b, 0x5a, 0x50, 
+  0x50, 0x48, 0x48, 0x43, 0x3f, 0x3b, 0x3a, 0x36, 0x35, 0x35, 0x35, 0x67, 0x20, 0x20, 0x26, 0x24, 
+  0x2d, 0x2d, 0x24, 0x20, 0xb4, 0xb4, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x21, 0x21, 0x34, 0x2f, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 
+  0x28, 0x23, 0x32, 0x32, 0x31, 0x3e, 0x68, 0x4b, 0x51, 0x55, 0x55, 0x57, 0x5e, 0x5e, 0x69, 0x64, 
+  0x5d, 0x6a, 0x5d, 0x6b, 0x65, 0x66, 0x6c, 0x66, 0x66, 0x66, 0x61, 0x61, 0x5b, 0x5a, 0x5b, 0x5c, 
+  0x5c, 0x6d, 0x48, 0x43, 0x42, 0x3f, 0x3b, 0x3c, 0x39, 0x35, 0x35, 0x35, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0xb4, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x2c, 0x28, 0x28, 
+  0x23, 0x23, 0x23, 0x23, 0x32, 0x41, 0x44, 0x51, 0x4e, 0x56, 0x57, 0x5e, 0x5e, 0x6b, 0x69, 0x69, 
+  0x6c, 0x6e, 0x6f, 0x6f, 0x6c, 0x6e, 0x6e, 0x6c, 0x66, 0x66, 0x61, 0x61, 0x61, 0x59, 0x50, 0x5a, 
+  0x70, 0x50, 0x4d, 0x48, 0x42, 0x3f, 0x3b, 0x3c, 0x36, 0x35, 0x37, 0x35, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb4, 0xb4, 0x83, 0x83, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x2c, 0x28, 0x28, 
+  0x23, 0x23, 0x23, 0x23, 0x32, 0x41, 0x44, 0x51, 0x4e, 0x56, 0x57, 0x5e, 0x5e, 0x6b, 0x69, 0x69, 
+  0x6c, 0x6e, 0x6f, 0x6f, 0x6c, 0x6e, 0x6e, 0x6c, 0x66, 0x66, 0x61, 0x61, 0x61, 0x59, 0x50, 0x5a, 
+  0x70, 0x50, 0x4d, 0x48, 0x42, 0x3f, 0x3b, 0x3c, 0x36, 0x35, 0x37, 0x35, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb4, 0xb4, 0x83, 0x83, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x2c, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x32, 0x40, 0x44, 0x4e, 0x55, 0x57, 0x5e, 0x60, 0x60, 0x69, 0x69, 0x69, 
+  0x71, 0x6a, 0x6c, 0x6e, 0x72, 0x6e, 0x6e, 0x6e, 0x6e, 0x66, 0x66, 0x66, 0x5f, 0x5b, 0x27, 0x23, 
+  0x5c, 0x5c, 0x50, 0x48, 0x43, 0x42, 0x3e, 0x3b, 0x36, 0x35, 0x35, 0x37, 0x38, 0x20, 0x20, 0x20, 
+  0x20, 0xb4, 0x83, 0x83, 0xb4, 0x83, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x33, 0x34, 0x2f, 0x2c, 0x2b, 0x70, 0x2b, 
+  0x28, 0x23, 0x23, 0x23, 0x2f, 0x73, 0x4b, 0x4e, 0x56, 0x57, 0x5e, 0x60, 0x69, 0x69, 0x74, 0x74, 
+  0x74, 0x75, 0x72, 0x76, 0x76, 0x76, 0x72, 0x72, 0x6c, 0x6e, 0x66, 0x66, 0x66, 0x61, 0x5b, 0x77, 
+  0x52, 0x5c, 0x50, 0x4d, 0x47, 0x43, 0x3e, 0x3b, 0x36, 0x39, 0x38, 0x67, 0x67, 0x20, 0x20, 0x20, 
+  0x67, 0x83, 0x45, 0xb4, 0x83, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x21, 0x34, 0x34, 0x2f, 0x78, 0x2b, 0x2b, 
+  0x28, 0x28, 0x23, 0x23, 0x79, 0x44, 0x4b, 0x55, 0x55, 0x57, 0x60, 0x69, 0x74, 0x71, 0x74, 0x7a, 
+  0x7b, 0x6f, 0x76, 0x76, 0x7c, 0x6e, 0x7c, 0x72, 0x72, 0x6c, 0x6c, 0x6c, 0x66, 0x61, 0x61, 0x5c, 
+  0x2a, 0x5a, 0x50, 0x50, 0x48, 0x42, 0x3f, 0x3b, 0x3a, 0x26, 0x38, 0x67, 0x37, 0x20, 0x7d, 0x7e, 
+  0x45, 0xb5, 0x83, 0x83, 0xb4, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x21, 0x34, 0x34, 0x2f, 0x78, 0x2b, 0x2b, 
+  0x28, 0x28, 0x23, 0x23, 0x79, 0x44, 0x4b, 0x55, 0x55, 0x57, 0x60, 0x69, 0x74, 0x71, 0x74, 0x7a, 
+  0x7b, 0x6f, 0x76, 0x76, 0x7c, 0x6e, 0x7c, 0x72, 0x72, 0x6c, 0x6c, 0x6c, 0x66, 0x61, 0x61, 0x5c, 
+  0x2a, 0x5a, 0x50, 0x50, 0x48, 0x42, 0x3f, 0x3b, 0x3a, 0x26, 0x38, 0x67, 0x37, 0x20, 0x7d, 0x7e, 
+  0x45, 0xb5, 0x83, 0x83, 0xb4, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x33, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x2b, 
+  0x28, 0x28, 0x33, 0x26, 0x35, 0x73, 0x4b, 0x56, 0x57, 0x5e, 0x60, 0x74, 0x74, 0x74, 0x7b, 0x6f, 
+  0x76, 0x7c, 0x6a, 0x7f, 0x80, 0x81, 0x82, 0x81, 0x76, 0x72, 0x6e, 0x66, 0x66, 0x61, 0x61, 0x59, 
+  0x59, 0x5a, 0x50, 0x50, 0x48, 0x43, 0x42, 0x3b, 0x3c, 0x36, 0x67, 0x38, 0x67, 0x7e, 0x53, 0x7e, 
+  0x45, 0xb4, 0x83, 0x83, 0x83, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x34, 0x2f, 0x2f, 0x2c, 0x2b, 
+  0x28, 0x33, 0x20, 0x20, 0x83, 0x44, 0x51, 0x56, 0x57, 0x5e, 0x60, 0x69, 0x74, 0x74, 0x84, 0x72, 
+  0x7c, 0x85, 0x7b, 0x80, 0x80, 0x86, 0x86, 0x80, 0x81, 0x66, 0x76, 0x6e, 0x6c, 0x66, 0x5f, 0x5f, 
+  0x59, 0x5c, 0x5c, 0x50, 0x4d, 0x46, 0x3b, 0x3f, 0x3a, 0x39, 0x38, 0x87, 0x88, 0x89, 0x53, 0x7e, 
+  0xb6, 0x83, 0xb4, 0x45, 0xb4, 0xb4, 0x83, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x34, 0x2f, 0x2c, 0x2b, 0x2c, 
+  0x26, 0x20, 0x20, 0x20, 0x45, 0x41, 0x51, 0x55, 0x5e, 0x60, 0x64, 0x69, 0x74, 0x7b, 0x7b, 0x8a, 
+  0x6f, 0x8a, 0x8b, 0x80, 0x8c, 0x8c, 0x8c, 0x86, 0x80, 0x71, 0x74, 0x74, 0x6b, 0x59, 0x66, 0x5b, 
+  0x5b, 0x2d, 0x5c, 0x70, 0x34, 0x4b, 0x44, 0x44, 0x26, 0x24, 0x88, 0x88, 0x88, 0x68, 0x53, 0x53, 
+  0x45, 0xb4, 0x83, 0x83, 0x83, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x34, 0x2f, 0x2c, 0x2b, 0x2c, 
+  0x26, 0x20, 0x20, 0x20, 0x45, 0x41, 0x51, 0x55, 0x5e, 0x60, 0x64, 0x69, 0x74, 0x7b, 0x7b, 0x8a, 
+  0x6f, 0x8a, 0x8b, 0x80, 0x8c, 0x8c, 0x8c, 0x86, 0x80, 0x71, 0x74, 0x74, 0x6b, 0x59, 0x66, 0x5b, 
+  0x5b, 0x2d, 0x5c, 0x70, 0x34, 0x4b, 0x44, 0x44, 0x26, 0x24, 0x88, 0x88, 0x88, 0x68, 0x53, 0x53, 
+  0x45, 0xb4, 0x83, 0x83, 0x83, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x33, 0x34, 0x34, 0x2f, 0x2b, 0x35, 
+  0x20, 0x20, 0x20, 0x20, 0x83, 0x41, 0x4e, 0x56, 0x57, 0x5e, 0x69, 0x74, 0x74, 0x84, 0x84, 0x7f, 
+  0x8d, 0x72, 0x80, 0x86, 0x8c, 0x8c, 0x8c, 0x8c, 0x80, 0x8e, 0x8f, 0x74, 0x5d, 0x66, 0x66, 0x61, 
+  0x5b, 0x5b, 0x52, 0x90, 0x4d, 0x4b, 0x44, 0x41, 0x91, 0x91, 0x91, 0x88, 0x88, 0x68, 0x53, 0x53, 
+  0x7e, 0x45, 0xb4, 0x83, 0x83, 0xb4, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x21, 0x21, 0x33, 0x34, 0x2f, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x37, 0x44, 0x51, 0x55, 0x5e, 0x5e, 0x64, 0x74, 0x74, 0x7b, 0x8a, 0x7c, 
+  0x7c, 0x7c, 0x8d, 0x86, 0x8c, 0x8c, 0x8c, 0x86, 0x80, 0x8d, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x5f, 
+  0x59, 0x5b, 0x5a, 0x5c, 0x2b, 0x92, 0x93, 0x94, 0x92, 0x92, 0x91, 0x95, 0x88, 0x68, 0x53, 0x53, 
+  0x45, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x21, 0x4a, 0x4e, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x51, 0x56, 0x57, 0x5e, 0x60, 0x69, 0x74, 0x8a, 0x72, 0x7c, 
+  0x7c, 0x7c, 0x7c, 0x80, 0x86, 0x86, 0x86, 0x86, 0x81, 0x72, 0x72, 0x6e, 0x66, 0x96, 0x66, 0x5f, 
+  0x5b, 0x5b, 0x78, 0x5e, 0x97, 0x97, 0x98, 0x94, 0x92, 0x91, 0x99, 0x99, 0x88, 0x68, 0x53, 0x53, 
+  0x7e, 0x83, 0xb4, 0xb4, 0x45, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x21, 0x4a, 0x4e, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x51, 0x56, 0x57, 0x5e, 0x60, 0x69, 0x74, 0x8a, 0x72, 0x7c, 
+  0x7c, 0x7c, 0x7c, 0x80, 0x86, 0x86, 0x86, 0x86, 0x81, 0x72, 0x72, 0x6e, 0x66, 0x96, 0x66, 0x5f, 
+  0x5b, 0x5b, 0x78, 0x5e, 0x97, 0x97, 0x98, 0x94, 0x92, 0x91, 0x99, 0x99, 0x88, 0x68, 0x53, 0x53, 
+  0x7e, 0x83, 0xb4, 0xb4, 0x45, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x21, 0x34, 0x24, 0x9a, 0x9b, 0x98, 
+  0x7e, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4b, 0x55, 0x57, 0x5e, 0x64, 0x74, 0x7a, 0x6e, 0x76, 0x76, 
+  0x7c, 0x7c, 0x7c, 0x8d, 0x81, 0x80, 0x80, 0x81, 0x8d, 0x76, 0x72, 0x6e, 0x6e, 0x66, 0x5d, 0x96, 
+  0x6b, 0x9a, 0x9a, 0x9c, 0x9d, 0x98, 0x9e, 0x93, 0x92, 0x9f, 0x91, 0x99, 0x95, 0x68, 0x53, 0x53, 
+  0x7e, 0x45, 0x83, 0x83, 0x83, 0xb4, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x20, 0x93, 0x9b, 0xa0, 
+  0xa1, 0xa2, 0x9c, 0x92, 0x53, 0x40, 0x4b, 0x51, 0x57, 0x5e, 0x60, 0xa3, 0xa4, 0x72, 0x76, 0x7c, 
+  0x7c, 0x7c, 0x7c, 0x7c, 0x8d, 0x81, 0x8d, 0x7c, 0x7c, 0x72, 0x75, 0x8a, 0x7f, 0xa1, 0xa1, 0x9b, 
+  0xa5, 0x9a, 0x9c, 0x9c, 0x9d, 0x98, 0x98, 0x93, 0x92, 0x92, 0x91, 0x99, 0x88, 0x88, 0x68, 0x7e, 
+  0x7e, 0x45, 0x83, 0xb4, 0x45, 0xb4, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x24, 0x37, 0x20, 0x95, 0x9a, 0xa0, 
+  0xa6, 0xa6, 0xa7, 0xa8, 0xa9, 0x8e, 0x8b, 0x69, 0xa1, 0xa0, 0x8e, 0xa1, 0xaa, 0x6e, 0x76, 0x76, 
+  0x76, 0x7c, 0x81, 0xa4, 0x8a, 0x7f, 0xa4, 0x8f, 0xab, 0xa8, 0xa9, 0xa2, 0xa2, 0xa6, 0xa1, 0x9b, 
+  0x9a, 0x9a, 0xac, 0xad, 0x9d, 0x9d, 0x93, 0x93, 0x92, 0x9f, 0x91, 0x99, 0x95, 0x68, 0x53, 0x53, 
+  0x7e, 0xb6, 0x83, 0x83, 0x83, 0x83, 0x83, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x24, 0x37, 0x20, 0x95, 0x9a, 0xa0, 
+  0xa6, 0xa6, 0xa7, 0xa8, 0xa9, 0x8e, 0x8b, 0x69, 0xa1, 0xa0, 0x8e, 0xa1, 0xaa, 0x6e, 0x76, 0x76, 
+  0x76, 0x7c, 0x81, 0xa4, 0x8a, 0x7f, 0xa4, 0x8f, 0xab, 0xa8, 0xa9, 0xa2, 0xa2, 0xa6, 0xa1, 0x9b, 
+  0x9a, 0x9a, 0xac, 0xad, 0x9d, 0x9d, 0x93, 0x93, 0x92, 0x9f, 0x91, 0x99, 0x95, 0x68, 0x53, 0x53, 
+  0x7e, 0xb6, 0x83, 0x83, 0x83, 0x83, 0x83, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x4c, 0x20, 0x20, 0x95, 0x9a, 0x9b, 
+  0xa1, 0xa6, 0xa7, 0xa8, 0xa9, 0xab, 0x8b, 0x8b, 0xae, 0x8b, 0xaf, 0xae, 0xae, 0xae, 0xae, 0xb0, 
+  0xb0, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0x8b, 0x8b, 0xa8, 0xa8, 0xa2, 0xa2, 0xa1, 0xa1, 0xa0, 
+  0xa5, 0x9a, 0x9c, 0x9c, 0x9d, 0xb1, 0x98, 0x93, 0x92, 0x9f, 0x99, 0x99, 0x95, 0x88, 0x68, 0x53, 
+  0x7e, 0x45, 0x83, 0x83, 0x83, 0xb4, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x37, 0x20, 0x20, 0x20, 0x9c, 0x9b, 
+  0x9b, 0xa1, 0xa2, 0xa7, 0xa8, 0xab, 0xab, 0x8b, 0x8b, 0xae, 0xae, 0xae, 0xb0, 0xae, 0xb0, 0xae, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0x8b, 0x8b, 0x8e, 0xa9, 0xa9, 0xa8, 0xa7, 0xa2, 0xa6, 0xa0, 0x9b, 
+  0xa5, 0x9a, 0xac, 0xad, 0x9d, 0x98, 0x9e, 0x93, 0x92, 0x92, 0x91, 0x99, 0x88, 0x68, 0x89, 0x53, 
+  0x7e, 0x45, 0x83, 0xb4, 0x83, 0x83, 0x83, 0x83, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9c, 0xa5, 
+  0x9b, 0xa1, 0xa2, 0xa7, 0xb2, 0xa9, 0x8e, 0x8e, 0x8e, 0x8b, 0x8b, 0x8b, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0x8b, 0x8b, 0x8b, 0xab, 0x8e, 0xa9, 0xb2, 0xa7, 0xa2, 0xa6, 0xa1, 0xa0, 0x9b, 
+  0x9a, 0x9a, 0x9c, 0x9d, 0x9d, 0x98, 0x98, 0x93, 0x92, 0x92, 0x91, 0x91, 0x95, 0x88, 0x89, 0x53, 
+  0x53, 0x45, 0x83, 0xb4, 0x45, 0x83, 0xb4, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9c, 0xa5, 
+  0x9b, 0xa1, 0xa2, 0xa7, 0xb2, 0xa9, 0x8e, 0x8e, 0x8e, 0x8b, 0x8b, 0x8b, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0x8b, 0x8b, 0x8b, 0xab, 0x8e, 0xa9, 0xb2, 0xa7, 0xa2, 0xa6, 0xa1, 0xa0, 0x9b, 
+  0x9a, 0x9a, 0x9c, 0x9d, 0x9d, 0x98, 0x98, 0x93, 0x92, 0x92, 0x91, 0x91, 0x95, 0x88, 0x89, 0x53, 
+  0x53, 0x45, 0x83, 0xb4, 0x45, 0x83, 0xb4, 0xb4, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x95, 0x9c, 
+  0x9b, 0xa0, 0xa1, 0xa2, 0xa7, 0xa8, 0xa9, 0xab, 0x8b, 0x8b, 0xae, 0xae, 0xae, 0x8b, 0xae, 0xae, 
+  0xae, 0x8b, 0xae, 0x8b, 0xaf, 0x8e, 0x8e, 0x8e, 0xa9, 0xa8, 0xa7, 0xa7, 0xa2, 0xa1, 0x9b, 0x9b, 
+  0xa5, 0x9a, 0xac, 0x9c, 0x9d, 0x9d, 0x9e, 0x93, 0x92, 0x92, 0x91, 0x99, 0x95, 0x88, 0x68, 0x53, 
+  0x7e, 0x7e, 0x83, 0x83, 0x83, 0xb4, 0x83, 0x83, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x95, 0xac, 
+  0xa5, 0xa0, 0xa0, 0xa6, 0xa7, 0xa7, 0xa9, 0xa9, 0x8e, 0xab, 0x8b, 0x8b, 0xae, 0x8b, 0x8b, 0x8b, 
+  0xae, 0x8b, 0xae, 0x8b, 0x8e, 0x8e, 0xa9, 0xb2, 0xb2, 0xa7, 0xa2, 0xa2, 0xa6, 0xa6, 0xa0, 0x9b, 
+  0x9a, 0x9a, 0xac, 0xad, 0x9d, 0x98, 0x98, 0x93, 0x92, 0x92, 0x91, 0x99, 0x88, 0x88, 0x68, 0x53, 
+  0x7e, 0x45, 0x45, 0xb4, 0x83, 0x83, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x45, 0x9c, 
+  0x9a, 0x9b, 0xa1, 0xa1, 0xa2, 0xa2, 0xa8, 0xa8, 0xab, 0x8e, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 
+  0x8b, 0x8b, 0x8b, 0x8e, 0xab, 0xab, 0xab, 0xa8, 0xa8, 0xa8, 0xa7, 0xa6, 0xa6, 0xa0, 0x9b, 0x9b, 
+  0x9a, 0x9c, 0x9c, 0x9d, 0x9d, 0xb1, 0x9e, 0x93, 0x94, 0x9f, 0x9f, 0x99, 0x95, 0x88, 0x68, 0x68, 
+  0x53, 0x7e, 0x45, 0x83, 0x83, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x45, 0x9c, 
+  0x9a, 0x9b, 0xa1, 0xa1, 0xa2, 0xa2, 0xa8, 0xa8, 0xab, 0x8e, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 
+  0x8b, 0x8b, 0x8b, 0x8e, 0xab, 0xab, 0xab, 0xa8, 0xa8, 0xa8, 0xa7, 0xa6, 0xa6, 0xa0, 0x9b, 0x9b, 
+  0x9a, 0x9c, 0x9c, 0x9d, 0x9d, 0xb1, 0x9e, 0x93, 0x94, 0x9f, 0x9f, 0x99, 0x95, 0x88, 0x68, 0x68, 
+  0x53, 0x7e, 0x45, 0x83, 0x83, 0x83, 0x83, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9c, 
+  0x9a, 0xa5, 0xa0, 0xa1, 0xa2, 0xa7, 0xa8, 0xa8, 0xa9, 0xa9, 0xab, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 
+  0x8b, 0x8b, 0xab, 0x8b, 0x8e, 0x8e, 0xa9, 0xa9, 0xa7, 0xa7, 0xa2, 0xa6, 0xa1, 0xa1, 0x9b, 0x9b, 
+  0xa5, 0x9c, 0x9c, 0x9d, 0x9d, 0x98, 0x98, 0x93, 0x93, 0x9f, 0x92, 0x91, 0x88, 0x88, 0x89, 0x53, 
+  0x53, 0x7e, 0x83, 0x83, 0xb4, 0xb4, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xad, 
+  0x9c, 0x9a, 0x9b, 0xa1, 0xa1, 0xa2, 0xa7, 0xa8, 0xa8, 0xa8, 0x8e, 0xa9, 0x8e, 0x8b, 0x8e, 0x8b, 
+  0x8e, 0x8e, 0x8e, 0x8e, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0xa2, 0xa2, 0xa1, 0xa1, 0xa1, 0xa0, 0x9b, 
+  0x9a, 0x9a, 0x9c, 0x9c, 0x9d, 0x98, 0x9e, 0x93, 0x92, 0x92, 0x91, 0x91, 0x99, 0x88, 0x68, 0x89, 
+  0x53, 0x7e, 0x45, 0xb4, 0x83, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 
+  0x9c, 0x9a, 0xa5, 0xa0, 0xa1, 0xa6, 0xa2, 0xa7, 0xa9, 0xa8, 0xa9, 0xa9, 0xa9, 0xab, 0xab, 0xab, 
+  0xab, 0x8e, 0xab, 0xab, 0xa9, 0xa9, 0xa8, 0xa8, 0xa7, 0xa7, 0xa2, 0xa2, 0xa1, 0x9b, 0x9b, 0x9b, 
+  0x9a, 0x9a, 0x9c, 0x9d, 0x9d, 0x98, 0x93, 0x93, 0x92, 0x92, 0x91, 0x91, 0x95, 0x88, 0x88, 0xb3, 
+  0x53, 0x7e, 0xb6, 0x45, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 
+  0x9c, 0x9a, 0xa5, 0xa0, 0xa1, 0xa6, 0xa2, 0xa7, 0xa9, 0xa8, 0xa9, 0xa9, 0xa9, 0xab, 0xab, 0xab, 
+  0xab, 0x8e, 0xab, 0xab, 0xa9, 0xa9, 0xa8, 0xa8, 0xa7, 0xa7, 0xa2, 0xa2, 0xa1, 0x9b, 0x9b, 0x9b, 
+  0x9a, 0x9a, 0x9c, 0x9d, 0x9d, 0x98, 0x93, 0x93, 0x92, 0x92, 0x91, 0x91, 0x95, 0x88, 0x88, 0xb3, 
+  0x53, 0x7e, 0xb6, 0x45, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 
+  0x9c, 0x9a, 0x9a, 0xa5, 0xa1, 0xa1, 0xa6, 0xa7, 0xa2, 0xa8, 0xa8, 0xa8, 0xa9, 0xa9, 0xa9, 0x8e, 
+  0xab, 0xab, 0xa9, 0xa9, 0xa8, 0xa8, 0xb2, 0xa7, 0xa7, 0xa2, 0xa2, 0xa6, 0xa1, 0xa0, 0x9b, 0x9a, 
+  0x9a, 0xac, 0xad, 0x9c, 0x9d, 0x98, 0x98, 0x93, 0x94, 0x9f, 0x91, 0x91, 0x95, 0x88, 0x68, 0x53, 
+  0x53, 0x53, 0x45, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9d, 0xac, 0x9a, 0xa5, 0xa0, 0xa1, 0xa1, 0xa7, 0xa2, 0xa8, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 
+  0xa9, 0xa9, 0xa9, 0xa9, 0xb2, 0xa8, 0xa7, 0xa2, 0xa7, 0xa7, 0xa6, 0xa6, 0xa1, 0xa0, 0x9b, 0xa5, 
+  0x9a, 0x9c, 0x9c, 0xad, 0x9d, 0x98, 0x98, 0x93, 0x93, 0x92, 0x91, 0x99, 0x99, 0x88, 0x88, 0x53, 
+  0x7e, 0x7e, 0xb4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xad, 0x9c, 0x9a, 0x9a, 0x9b, 0xa0, 0xa6, 0xa1, 0xa2, 0xa7, 0xa2, 0xa7, 0xa8, 0xb2, 0xa8, 0xb2, 
+  0xa9, 0xa9, 0xa8, 0xb2, 0xa8, 0xa7, 0xa8, 0xa7, 0xa2, 0xa6, 0xa1, 0xa1, 0xa0, 0x9b, 0x9b, 0x9a, 
+  0x9a, 0xac, 0x9c, 0x9d, 0x9d, 0x98, 0x9e, 0x93, 0x92, 0x92, 0x91, 0x91, 0x99, 0x88, 0x68, 0x68, 
+  0x53, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xad, 0x9c, 0x9a, 0x9a, 0x9b, 0xa0, 0xa6, 0xa1, 0xa2, 0xa7, 0xa2, 0xa7, 0xa8, 0xb2, 0xa8, 0xb2, 
+  0xa9, 0xa9, 0xa8, 0xb2, 0xa8, 0xa7, 0xa8, 0xa7, 0xa2, 0xa6, 0xa1, 0xa1, 0xa0, 0x9b, 0x9b, 0x9a, 
+  0x9a, 0xac, 0x9c, 0x9d, 0x9d, 0x98, 0x9e, 0x93, 0x92, 0x92, 0x91, 0x91, 0x99, 0x88, 0x68, 0x68, 
+  0x53, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9f, 0x9d, 0x9a, 0x9a, 0x9a, 0x9b, 0xa1, 0xa6, 0xa6, 0xa7, 0xa7, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa9, 0xa8, 0xa8, 0xa8, 0xa7, 0xa7, 0xa7, 0xa2, 0xa6, 0xa6, 0xa0, 0xa0, 0xa0, 0xa5, 0x9a, 
+  0x9c, 0x9c, 0x9c, 0x9d, 0x9d, 0x98, 0x98, 0x93, 0x92, 0x92, 0x91, 0x91, 0x95, 0x95, 0x88, 0x53, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x88, 0x9c, 0x9c, 0x9a, 0xa5, 0x9b, 0xa0, 0xa1, 0xa6, 0xa6, 0xa2, 0xa2, 0xa2, 0xa8, 0xa7, 0xa7, 
+  0xb2, 0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa2, 0xa2, 0xa6, 0xa6, 0xa1, 0xa1, 0xa0, 0x9b, 0x9a, 0x9a, 
+  0x9a, 0x9c, 0x9c, 0x9d, 0xb1, 0x98, 0x9e, 0x93, 0x94, 0x92, 0x92, 0x91, 0x99, 0x88, 0x67, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x83, 0x9d, 0x9c, 0x9c, 0x9a, 0x9b, 0x9b, 0x9b, 0xa1, 0xa6, 0xa2, 0xa7, 0xa7, 0xa7, 0xa7, 0xa2, 
+  0xa8, 0xa7, 0xa7, 0xa2, 0xa2, 0xa7, 0xa2, 0xa2, 0xa6, 0xa1, 0xa1, 0x9b, 0x9b, 0x9b, 0x9b, 0x9a, 
+  0x9a, 0x9c, 0xad, 0x9d, 0x98, 0x98, 0x9e, 0x93, 0x92, 0x9f, 0x91, 0x91, 0x7e, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x83, 0x9d, 0x9c, 0x9c, 0x9a, 0x9b, 0x9b, 0x9b, 0xa1, 0xa6, 0xa2, 0xa7, 0xa7, 0xa7, 0xa7, 0xa2, 
+  0xa8, 0xa7, 0xa7, 0xa2, 0xa2, 0xa7, 0xa2, 0xa2, 0xa6, 0xa1, 0xa1, 0x9b, 0x9b, 0x9b, 0x9b, 0x9a, 
+  0x9a, 0x9c, 0xad, 0x9d, 0x98, 0x98, 0x9e, 0x93, 0x92, 0x9f, 0x91, 0x91, 0x7e, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x98, 0xad, 0x9c, 0x9a, 0x9a, 0x9b, 0xa0, 0xa1, 0xa1, 0xa6, 0xa6, 0xa2, 0xa2, 0xa7, 0xa7, 
+  0xa7, 0xa8, 0xa2, 0xa7, 0xa7, 0xa2, 0xa6, 0xa6, 0xa1, 0xa6, 0xa0, 0xa1, 0xa0, 0x9b, 0x9a, 0x9a, 
+  0xac, 0x9c, 0x9c, 0x9d, 0x9d, 0x9e, 0x9e, 0x93, 0x94, 0x92, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9f, 0x9d, 0x9c, 0xac, 0x9a, 0x9a, 0x9b, 0xa1, 0xa0, 0xa1, 0xa6, 0xa2, 0xa6, 0xa2, 0xa2, 
+  0xa2, 0xa7, 0xa2, 0xa2, 0xa7, 0xa6, 0xa1, 0xa2, 0xa1, 0xa1, 0xa0, 0x9b, 0x9b, 0x9b, 0x9a, 0x9a, 
+  0xac, 0x9c, 0x9d, 0x9d, 0x98, 0x98, 0x93, 0x99, 0x53, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb6, 0x88, 0x9c, 0x9a, 0xa5, 0x9b, 0x9b, 0xa1, 0xa1, 0xa1, 0xa6, 0xa1, 0xa6, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa6, 0xa6, 0xa2, 0xa6, 0xa6, 0xa1, 0xa1, 0xa0, 0x9b, 0xa5, 0xa5, 0xa5, 0x9a, 
+  0x9c, 0x9c, 0xad, 0x9d, 0x9d, 0x68, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb6, 0x88, 0x9c, 0x9a, 0xa5, 0x9b, 0x9b, 0xa1, 0xa1, 0xa1, 0xa6, 0xa1, 0xa6, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa6, 0xa6, 0xa2, 0xa6, 0xa6, 0xa1, 0xa1, 0xa0, 0x9b, 0xa5, 0xa5, 0xa5, 0x9a, 
+  0x9c, 0x9c, 0xad, 0x9d, 0x9d, 0x68, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 0x9e, 0xa5, 0xa5, 0xa0, 0xa0, 0xa1, 0xa6, 0xa6, 0xa6, 0xa6, 
+  0xa6, 0xa6, 0xa2, 0xa1, 0xa6, 0xa6, 0xa1, 0xa6, 0xa0, 0x9b, 0xa0, 0xa0, 0xa5, 0x9a, 0x9a, 0xac, 
+  0x9c, 0x92, 0x88, 0xb6, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7e, 0x99, 0x9d, 0xa0, 0xa0, 0xa1, 0xa1, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xa6, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa0, 0x9b, 0x9b, 0x9a, 0x99, 0x88, 0xb6, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7e, 0x99, 0x91, 
+  0x91, 0x91, 0x9f, 0x91, 0x91, 0x91, 0x99, 0x91, 0x91, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7e, 0x99, 0x91, 
+  0x91, 0x91, 0x9f, 0x91, 0x91, 0x91, 0x99, 0x91, 0x91, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x25, 0x28, 0x28, 0x25, 
+  0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x25, 0x28, 0x28, 0x25, 
+  0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x25, 0x25, 0x28, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2a, 0x2d, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2a, 0x2d, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2c, 0x2e, 0x2f, 0x2f, 0x2f, 0x2a, 0x2f, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x25, 0x25, 0x28, 
+  0x28, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x31, 0x2e, 0x2e, 0x2f, 0x2d, 0x2f, 0x2a, 0x2d, 0x2a, 0x28, 0x2a, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x2a, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x2e, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2a, 0x2a, 0x2f, 0x28, 0x2a, 0x2a, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x33, 0x34, 0x35, 0x35, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x2e, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2a, 0x2a, 0x2f, 0x28, 0x2a, 0x2a, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x33, 0x34, 0x35, 0x35, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x23, 0x23, 0x33, 
+  0x31, 0x31, 0x2e, 0x2e, 0x2e, 0x2f, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x2a, 0x28, 0x28, 
+  0x28, 0x28, 0x34, 0x36, 0x37, 0x38, 0x38, 0x39, 0x37, 0x39, 0x38, 0x38, 0x38, 0x38, 0x35, 0x33, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x33, 0x31, 0x33, 
+  0x31, 0x31, 0x2e, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 0x2a, 0x2a, 0x2f, 0x2a, 0x28, 0x28, 0x28, 0x23, 
+  0x35, 0x39, 0x37, 0x26, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3b, 0x26, 0x37, 0x37, 0x37, 0x39, 0x37, 
+  0x3c, 0x34, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x27, 0x23, 0x23, 0x33, 
+  0x31, 0x31, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x35, 0x37, 
+  0x26, 0x3d, 0x3a, 0x3d, 0x3e, 0x36, 0x3e, 0x3d, 0x36, 0x36, 0x3a, 0x3a, 0x3b, 0x3b, 0x39, 0x38, 
+  0x37, 0x3f, 0x38, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x27, 0x23, 0x23, 0x33, 
+  0x31, 0x31, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x35, 0x37, 
+  0x26, 0x3d, 0x3a, 0x3d, 0x3e, 0x36, 0x3e, 0x3d, 0x36, 0x36, 0x3a, 0x3a, 0x3b, 0x3b, 0x39, 0x38, 
+  0x37, 0x3f, 0x38, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2b, 0x27, 0x27, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2e, 0x2e, 0x2f, 0x2f, 0x2a, 0x2a, 0x2a, 0x2a, 0x23, 0x38, 0x3b, 0x26, 
+  0x40, 0x30, 0x41, 0x42, 0x41, 0x42, 0x41, 0x41, 0x42, 0x42, 0x42, 0x3d, 0x36, 0x3a, 0x26, 0x26, 
+  0x39, 0x39, 0x38, 0x38, 0x3c, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2b, 0x2b, 0x2b, 0x23, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x2e, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x27, 0x26, 0x3a, 0x43, 0x24, 
+  0x41, 0x44, 0x45, 0x45, 0x46, 0x46, 0x45, 0x46, 0x45, 0x24, 0x24, 0x24, 0x41, 0x42, 0x3d, 0x3a, 
+  0x3a, 0x3b, 0x38, 0x37, 0x3f, 0x3c, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 0x28, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x32, 0x47, 0x2b, 0x2b, 0x23, 0x23, 0x23, 0x33, 
+  0x23, 0x33, 0x31, 0x31, 0x2e, 0x2f, 0x2e, 0x2f, 0x2f, 0x2a, 0x3d, 0x26, 0x40, 0x48, 0x42, 0x49, 
+  0x4a, 0x4b, 0x4c, 0x4d, 0x32, 0x4b, 0x32, 0x4b, 0x4e, 0x4f, 0x4f, 0x49, 0x49, 0x42, 0x41, 0x3d, 
+  0x36, 0x3a, 0x3b, 0x39, 0x39, 0x37, 0x38, 0x23, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x32, 0x47, 0x2b, 0x2b, 0x23, 0x23, 0x23, 0x33, 
+  0x23, 0x33, 0x31, 0x31, 0x2e, 0x2f, 0x2e, 0x2f, 0x2f, 0x2a, 0x3d, 0x26, 0x40, 0x48, 0x42, 0x49, 
+  0x4a, 0x4b, 0x4c, 0x4d, 0x32, 0x4b, 0x32, 0x4b, 0x4e, 0x4f, 0x4f, 0x49, 0x49, 0x42, 0x41, 0x3d, 
+  0x36, 0x3a, 0x3b, 0x39, 0x39, 0x37, 0x38, 0x23, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x2c, 0x2c, 0x2b, 0x2b, 0x2b, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2e, 0x31, 0x2f, 0x2e, 0x2f, 0x27, 0x26, 0x50, 0x24, 0x45, 0x51, 0x51, 
+  0x32, 0x52, 0x52, 0x53, 0x52, 0x52, 0x54, 0x52, 0x52, 0x4d, 0x4c, 0x4a, 0x45, 0x49, 0x42, 0x42, 
+  0x41, 0x3d, 0x3a, 0x3b, 0x39, 0x39, 0x3f, 0x38, 0x25, 0x28, 0x28, 0x25, 0x28, 0x2a, 0x28, 0x2a, 
+  0x28, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x35, 0x32, 0x32, 0x2b, 0x2b, 0x2b, 0x23, 0x27, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x2e, 0x31, 0x2e, 0x2e, 0x2b, 0x3a, 0x40, 0x4e, 0x32, 0x4c, 0x4d, 0x55, 
+  0x52, 0x53, 0x53, 0x56, 0x53, 0x56, 0x53, 0x53, 0x56, 0x52, 0x51, 0x57, 0x57, 0x4a, 0x46, 0x49, 
+  0x42, 0x3e, 0x36, 0x40, 0x3b, 0x37, 0x39, 0x3f, 0x3c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x2d, 0x2d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x32, 0x2c, 0x2c, 0x2b, 0x2b, 0x27, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x2e, 0x2e, 0x2e, 0x3b, 0x50, 0x4f, 0x4e, 0x58, 0x52, 0x23, 0x53, 
+  0x59, 0x56, 0x56, 0x5a, 0x5b, 0x59, 0x56, 0x55, 0x5b, 0x5c, 0x5d, 0x5d, 0x57, 0x51, 0x51, 0x45, 
+  0x49, 0x41, 0x41, 0x36, 0x3a, 0x26, 0x37, 0x38, 0x39, 0x35, 0x28, 0x28, 0x28, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x32, 0x2c, 0x2c, 0x2b, 0x2b, 0x27, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x2e, 0x2e, 0x2e, 0x3b, 0x50, 0x4f, 0x4e, 0x58, 0x52, 0x23, 0x53, 
+  0x59, 0x56, 0x56, 0x5a, 0x5b, 0x59, 0x56, 0x55, 0x5b, 0x5c, 0x5d, 0x5d, 0x57, 0x51, 0x51, 0x45, 
+  0x49, 0x41, 0x41, 0x36, 0x3a, 0x26, 0x37, 0x38, 0x39, 0x35, 0x28, 0x28, 0x28, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x24, 0x4c, 0x34, 0x32, 0x47, 0x2b, 0x2b, 0x27, 0x23, 0x23, 
+  0x33, 0x23, 0x33, 0x31, 0x31, 0x31, 0x2e, 0x48, 0x48, 0x4f, 0x58, 0x52, 0x53, 0x56, 0x55, 0x56, 
+  0x5e, 0x5e, 0x5b, 0x5f, 0x60, 0x61, 0x62, 0x5d, 0x61, 0x63, 0x5d, 0x5d, 0x5d, 0x5d, 0x57, 0x51, 
+  0x45, 0x41, 0x42, 0x42, 0x3d, 0x3a, 0x26, 0x37, 0x3f, 0x38, 0x23, 0x28, 0x28, 0x28, 0x2a, 0x2a, 
+  0x2a, 0x2f, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x35, 0x34, 0x32, 0x2c, 0x2c, 0x2b, 0x2b, 0x27, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2b, 0x64, 0x4e, 0x58, 0x52, 0x53, 0x56, 0x59, 0x5e, 0x5e, 
+  0x5e, 0x65, 0x5f, 0x60, 0x5f, 0x5f, 0x60, 0x60, 0x60, 0x61, 0x61, 0x63, 0x5d, 0x66, 0x5d, 0x57, 
+  0x51, 0x46, 0x44, 0x41, 0x3e, 0x3d, 0x3a, 0x39, 0x37, 0x3f, 0x3c, 0x2a, 0x2a, 0x2a, 0x28, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x6d, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x24, 0x35, 0x35, 0x32, 0x32, 0x2c, 0x2b, 0x27, 0x27, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x31, 0x48, 0x67, 0x4f, 0x52, 0x53, 0x59, 0x59, 0x59, 0x68, 0x5e, 
+  0x28, 0x60, 0x5f, 0x5f, 0x69, 0x5f, 0x69, 0x5f, 0x5f, 0x60, 0x5f, 0x61, 0x63, 0x5d, 0x5d, 0x5d, 
+  0x57, 0x51, 0x45, 0x44, 0x41, 0x36, 0x3a, 0x3a, 0x39, 0x37, 0x38, 0x3b, 0x24, 0x2a, 0x2a, 0x2f, 
+  0x2a, 0x2f, 0x29, 0x20, 0x20, 0xaf, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x24, 0x35, 0x35, 0x32, 0x32, 0x2c, 0x2b, 0x27, 0x27, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x31, 0x48, 0x67, 0x4f, 0x52, 0x53, 0x59, 0x59, 0x59, 0x68, 0x5e, 
+  0x28, 0x60, 0x5f, 0x5f, 0x69, 0x5f, 0x69, 0x5f, 0x5f, 0x60, 0x5f, 0x61, 0x63, 0x5d, 0x5d, 0x5d, 
+  0x57, 0x51, 0x45, 0x44, 0x41, 0x36, 0x3a, 0x3a, 0x39, 0x37, 0x38, 0x3b, 0x24, 0x2a, 0x2a, 0x2f, 
+  0x2a, 0x2f, 0x29, 0x20, 0x20, 0xaf, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x32, 0x32, 0x47, 0x2b, 0x2b, 0x2b, 0x27, 
+  0x23, 0x33, 0x23, 0x33, 0x33, 0x31, 0x43, 0x4f, 0x52, 0x53, 0x56, 0x59, 0x6a, 0x5b, 0x65, 0x6a, 
+  0x6b, 0x22, 0x5f, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x5f, 0x5f, 0x5f, 0x60, 0x61, 0x63, 0x5d, 0x5d, 
+  0x51, 0x57, 0x4a, 0x45, 0x42, 0x41, 0x3d, 0x3b, 0x26, 0x37, 0x3f, 0x6d, 0x20, 0x20, 0x3b, 0x24, 
+  0x2a, 0x2a, 0x24, 0x20, 0x7b, 0x7b, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x24, 0x24, 0x35, 0x34, 0x32, 0x2c, 0x2b, 0x2b, 0x27, 0x23, 
+  0x27, 0x33, 0x33, 0x33, 0x33, 0x35, 0x6e, 0x4f, 0x53, 0x59, 0x56, 0x5e, 0x68, 0x5f, 0x62, 0x6a, 
+  0x6f, 0x5f, 0x70, 0x6c, 0x71, 0x6c, 0x6c, 0x6c, 0x6c, 0x69, 0x69, 0x5f, 0x5f, 0x61, 0x63, 0x63, 
+  0x5d, 0x5d, 0x51, 0x46, 0x49, 0x42, 0x3d, 0x3a, 0x26, 0x37, 0x38, 0x3f, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x7b, 0x86, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x34, 0x32, 0x32, 0x2c, 0x2b, 0x2b, 0x27, 
+  0x23, 0x23, 0x23, 0x33, 0x31, 0x48, 0x4e, 0x52, 0x56, 0x56, 0x5e, 0x6a, 0x6a, 0x62, 0x65, 0x6c, 
+  0x71, 0x72, 0x73, 0x72, 0x73, 0x72, 0x72, 0x71, 0x71, 0x6c, 0x6c, 0x5f, 0x5f, 0x60, 0x61, 0x63, 
+  0x66, 0x66, 0x57, 0x51, 0x45, 0x42, 0x41, 0x36, 0x3a, 0x37, 0x39, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7b, 0x7b, 0x86, 0x86, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x34, 0x32, 0x32, 0x2c, 0x2b, 0x2b, 0x27, 
+  0x23, 0x23, 0x23, 0x33, 0x31, 0x48, 0x4e, 0x52, 0x56, 0x56, 0x5e, 0x6a, 0x6a, 0x62, 0x65, 0x6c, 
+  0x71, 0x72, 0x73, 0x72, 0x73, 0x72, 0x72, 0x71, 0x71, 0x6c, 0x6c, 0x5f, 0x5f, 0x60, 0x61, 0x63, 
+  0x66, 0x66, 0x57, 0x51, 0x45, 0x42, 0x41, 0x36, 0x3a, 0x37, 0x39, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x7b, 0x7b, 0x86, 0x86, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x32, 0x32, 0x2c, 0x2b, 0x2b, 0x2b, 
+  0x27, 0x23, 0x23, 0x33, 0x33, 0x43, 0x4f, 0x53, 0x59, 0x5e, 0x6a, 0x6a, 0x6a, 0x70, 0x72, 0x73, 
+  0x73, 0x73, 0x74, 0x72, 0x74, 0x73, 0x73, 0x72, 0x71, 0x71, 0x6c, 0x6c, 0x5f, 0x5f, 0x61, 0x61, 
+  0x63, 0x66, 0x57, 0x51, 0x46, 0x49, 0x42, 0x36, 0x3a, 0x26, 0x38, 0x3f, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x7b, 0x86, 0x86, 0x7b, 0x86, 0x7b, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x34, 0x32, 0x32, 0x2b, 0x2b, 0x2b, 
+  0x23, 0x23, 0x23, 0x23, 0x32, 0x67, 0x58, 0x53, 0x56, 0x5e, 0x6a, 0x75, 0x68, 0x72, 0x72, 0x73, 
+  0x73, 0x73, 0x73, 0x74, 0x73, 0x74, 0x73, 0x73, 0x72, 0x6c, 0x6c, 0x5f, 0x6c, 0x5f, 0x5f, 0x61, 
+  0x63, 0x5d, 0x51, 0x57, 0x4a, 0x49, 0x42, 0x42, 0x3a, 0x3b, 0x38, 0x3f, 0x38, 0x20, 0x20, 0x20, 
+  0x7b, 0x86, 0xb0, 0x7b, 0x86, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x35, 0x35, 0x32, 0x32, 0x2c, 0x2b, 0x2b, 
+  0x2b, 0x27, 0x23, 0x33, 0x3c, 0x76, 0x58, 0x56, 0x5e, 0x6a, 0x6a, 0x6c, 0x71, 0x73, 0x77, 0x73, 
+  0x70, 0x78, 0x74, 0x78, 0x74, 0x78, 0x74, 0x74, 0x73, 0x72, 0x6a, 0x72, 0x6c, 0x5f, 0x5f, 0x61, 
+  0x61, 0x63, 0x5d, 0x79, 0x51, 0x45, 0x3e, 0x42, 0x3a, 0x3a, 0x37, 0x38, 0x3f, 0x20, 0x6d, 0x7a, 
+  0xb0, 0x86, 0x86, 0x86, 0x7b, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x35, 0x35, 0x32, 0x32, 0x2c, 0x2b, 0x2b, 
+  0x2b, 0x27, 0x23, 0x33, 0x3c, 0x76, 0x58, 0x56, 0x5e, 0x6a, 0x6a, 0x6c, 0x71, 0x73, 0x77, 0x73, 
+  0x70, 0x78, 0x74, 0x78, 0x74, 0x78, 0x74, 0x74, 0x73, 0x72, 0x6a, 0x72, 0x6c, 0x5f, 0x5f, 0x61, 
+  0x61, 0x63, 0x5d, 0x79, 0x51, 0x45, 0x3e, 0x42, 0x3a, 0x3a, 0x37, 0x38, 0x3f, 0x20, 0x6d, 0x7a, 
+  0xb0, 0x86, 0x86, 0x86, 0x7b, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x21, 0x34, 0x34, 0x32, 0x47, 0x2c, 0x2b, 
+  0x27, 0x27, 0x35, 0x37, 0x7b, 0x4d, 0x7c, 0x59, 0x5e, 0x6a, 0x68, 0x6c, 0x72, 0x65, 0x7d, 0x70, 
+  0x74, 0x77, 0x78, 0x78, 0x7e, 0x7e, 0x7e, 0x78, 0x74, 0x74, 0x77, 0x31, 0x6c, 0x6c, 0x5f, 0x5f, 
+  0x61, 0x63, 0x66, 0x57, 0x57, 0x46, 0x49, 0x42, 0x3d, 0x3b, 0x37, 0x3f, 0x37, 0x7a, 0x64, 0x7a, 
+  0xad, 0x7b, 0x86, 0x86, 0x86, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x21, 0x34, 0x34, 0x32, 0x32, 0x2c, 0x2b, 
+  0x2b, 0x35, 0x20, 0x20, 0x7b, 0x7f, 0x54, 0x56, 0x5e, 0x6a, 0x6a, 0x6f, 0x6f, 0x7d, 0x7d, 0x6f, 
+  0x74, 0x80, 0x78, 0x7e, 0x81, 0x82, 0x82, 0x81, 0x78, 0x74, 0x70, 0x83, 0x6c, 0x6c, 0x5f, 0x60, 
+  0x61, 0x61, 0x5d, 0x5d, 0x57, 0x4a, 0x49, 0x3d, 0x40, 0x3a, 0x37, 0x26, 0x67, 0x84, 0x64, 0x7a, 
+  0xad, 0x86, 0x7b, 0xb0, 0x7b, 0x7b, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x29, 0x21, 0x35, 0x32, 0x32, 0x2c, 0x47, 0x2c, 
+  0x37, 0x20, 0x20, 0x20, 0x86, 0x4f, 0x52, 0x59, 0x6a, 0x6a, 0x87, 0x6c, 0x70, 0x70, 0x6f, 0x88, 
+  0x80, 0x75, 0x80, 0x81, 0x89, 0x89, 0x89, 0x82, 0x7e, 0x74, 0x73, 0x71, 0x71, 0x6c, 0x6c, 0x5f, 
+  0x60, 0x63, 0x5d, 0x5d, 0x51, 0x4a, 0x44, 0x29, 0x43, 0x43, 0x67, 0x67, 0x84, 0x67, 0x64, 0x7a, 
+  0xb0, 0x7b, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x29, 0x21, 0x35, 0x32, 0x32, 0x2c, 0x47, 0x2c, 
+  0x37, 0x20, 0x20, 0x20, 0x86, 0x4f, 0x52, 0x59, 0x6a, 0x6a, 0x87, 0x6c, 0x70, 0x70, 0x6f, 0x88, 
+  0x80, 0x75, 0x80, 0x81, 0x89, 0x89, 0x89, 0x82, 0x7e, 0x74, 0x73, 0x71, 0x71, 0x6c, 0x6c, 0x5f, 
+  0x60, 0x63, 0x5d, 0x5d, 0x51, 0x4a, 0x44, 0x29, 0x43, 0x43, 0x67, 0x67, 0x84, 0x67, 0x64, 0x7a, 
+  0xb0, 0x7b, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x21, 0x35, 0x34, 0x34, 0x47, 0x37, 
+  0x20, 0x20, 0x20, 0x20, 0x86, 0x4f, 0x52, 0x56, 0x5e, 0x65, 0x6c, 0x71, 0x73, 0x74, 0x74, 0x80, 
+  0x88, 0x88, 0x75, 0x82, 0x89, 0x89, 0x89, 0x89, 0x81, 0x74, 0x74, 0x72, 0x69, 0x69, 0x69, 0x5f, 
+  0x60, 0x63, 0x5d, 0x5d, 0x51, 0x4a, 0x49, 0x8a, 0x8b, 0x4f, 0x76, 0x8c, 0x84, 0x84, 0x64, 0x64, 
+  0x7a, 0x86, 0x7b, 0xb0, 0x86, 0x7b, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x29, 0x24, 0x35, 0x34, 0x34, 0x32, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x86, 0x4f, 0x52, 0x56, 0x62, 0x5f, 0x6c, 0x72, 0x72, 0x74, 0x74, 0x73, 
+  0x74, 0x75, 0x7e, 0x82, 0x89, 0x89, 0x89, 0x82, 0x81, 0x78, 0x73, 0x8d, 0x6c, 0x6c, 0x69, 0x5f, 
+  0x2a, 0x63, 0x63, 0x5d, 0x57, 0x5b, 0x8e, 0x8f, 0x8b, 0x90, 0x76, 0x91, 0x91, 0x84, 0x64, 0x64, 
+  0x7a, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x35, 0x4d, 0x52, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x52, 0x56, 0x60, 0x69, 0x6c, 0x72, 0x73, 0x74, 0x78, 0x74, 
+  0x74, 0x92, 0x74, 0x7e, 0x82, 0x82, 0x82, 0x81, 0x7e, 0x73, 0x73, 0x70, 0x6a, 0x93, 0x94, 0x6a, 
+  0x6a, 0x56, 0x55, 0x95, 0x95, 0x8e, 0x8e, 0x8f, 0x90, 0x90, 0x8c, 0x67, 0x91, 0x67, 0x64, 0x7a, 
+  0xb0, 0x86, 0x7b, 0x7b, 0xb0, 0x86, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x35, 0x4d, 0x52, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x52, 0x56, 0x60, 0x69, 0x6c, 0x72, 0x73, 0x74, 0x78, 0x74, 
+  0x74, 0x92, 0x74, 0x7e, 0x82, 0x82, 0x82, 0x81, 0x7e, 0x73, 0x73, 0x70, 0x6a, 0x93, 0x94, 0x6a, 
+  0x6a, 0x56, 0x55, 0x95, 0x95, 0x8e, 0x8e, 0x8f, 0x90, 0x90, 0x8c, 0x67, 0x91, 0x67, 0x64, 0x7a, 
+  0xb0, 0x86, 0x7b, 0x7b, 0xb0, 0x86, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x24, 0x21, 0x35, 0x24, 0x96, 0x97, 0x98, 
+  0x7a, 0x20, 0x20, 0x20, 0x20, 0x84, 0x58, 0x59, 0x61, 0x5f, 0x6c, 0x72, 0x72, 0x74, 0x74, 0x78, 
+  0x78, 0x74, 0x92, 0x78, 0x7e, 0x81, 0x81, 0x7e, 0x92, 0x71, 0x72, 0x73, 0x6c, 0x6c, 0x69, 0x6a, 
+  0x99, 0x99, 0x9a, 0x9a, 0x9b, 0x95, 0x98, 0x8f, 0x8b, 0x90, 0x76, 0x8c, 0x67, 0x84, 0x6e, 0x64, 
+  0x7a, 0xb0, 0x86, 0x86, 0x86, 0x7b, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x35, 0x20, 0x8f, 0x97, 0x9c, 
+  0x9d, 0x9e, 0x9a, 0x90, 0x64, 0x43, 0x4f, 0x53, 0x61, 0x5f, 0x6c, 0x71, 0x71, 0x73, 0x74, 0x74, 
+  0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x6f, 0x73, 0x9f, 0x87, 0x80, 0x65, 0x9d, 0x9d, 0x97, 
+  0x97, 0x99, 0x9a, 0xa0, 0x9b, 0x95, 0x8f, 0x8f, 0x8b, 0x90, 0x76, 0x8c, 0x67, 0x84, 0x6e, 0x64, 
+  0x7a, 0xb0, 0x86, 0x7b, 0x86, 0x7b, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x29, 0x24, 0x39, 0x20, 0x91, 0x99, 0x97, 
+  0xa1, 0xa1, 0xa2, 0xa3, 0xa3, 0xa4, 0xa5, 0x99, 0x7d, 0x65, 0x80, 0x8d, 0x72, 0x73, 0x74, 0x74, 
+  0x74, 0x74, 0x74, 0x80, 0x80, 0x80, 0x80, 0x88, 0xa6, 0xa6, 0xa2, 0xa2, 0x9e, 0x9d, 0x9d, 0x9c, 
+  0x96, 0x99, 0x9a, 0x9a, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x8b, 0x76, 0x8c, 0x91, 0x84, 0xa7, 0x64, 
+  0x7a, 0xad, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7b, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x29, 0x24, 0x39, 0x20, 0x91, 0x99, 0x97, 
+  0xa1, 0xa1, 0xa2, 0xa3, 0xa3, 0xa4, 0xa5, 0x99, 0x7d, 0x65, 0x80, 0x8d, 0x72, 0x73, 0x74, 0x74, 
+  0x74, 0x74, 0x74, 0x80, 0x80, 0x80, 0x80, 0x88, 0xa6, 0xa6, 0xa2, 0xa2, 0x9e, 0x9d, 0x9d, 0x9c, 
+  0x96, 0x99, 0x9a, 0x9a, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x8b, 0x76, 0x8c, 0x91, 0x84, 0xa7, 0x64, 
+  0x7a, 0xad, 0x86, 0x86, 0x86, 0x86, 0x86, 0x7b, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x3c, 0x20, 0x20, 0x91, 0x99, 0x97, 
+  0x9d, 0x9d, 0x9e, 0xa3, 0xa3, 0xa4, 0xa4, 0xa5, 0xa5, 0xa5, 0xa8, 0xa8, 0xa8, 0xa8, 0xa9, 0xa9, 
+  0xa9, 0xa8, 0xa9, 0xa8, 0xa8, 0xa8, 0xa8, 0xaa, 0xa6, 0xa3, 0xa2, 0x9e, 0x9e, 0x9d, 0x9d, 0x97, 
+  0x97, 0x99, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x8b, 0x90, 0x76, 0x8c, 0x91, 0x67, 0xa7, 0x64, 
+  0x7a, 0xb0, 0x86, 0x86, 0x86, 0x7b, 0x86, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x38, 0x20, 0x20, 0x20, 0x99, 0x97, 
+  0x97, 0xa1, 0x9e, 0x9e, 0xa3, 0xa6, 0xa6, 0xa8, 0xa5, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa5, 0xa5, 0xa4, 0xa3, 0xa6, 0xa2, 0xa2, 0xab, 0x9e, 0xa1, 0x9d, 0x9c, 
+  0x96, 0x99, 0x9a, 0x9a, 0x9b, 0x95, 0x98, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x67, 0x84, 0x6e, 0x64, 
+  0x7a, 0xad, 0x86, 0x7b, 0x86, 0x86, 0x86, 0x86, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x96, 
+  0x97, 0xa1, 0x9e, 0x9e, 0xab, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa9, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa5, 0xa5, 0xa6, 0xa4, 0xa3, 0xa2, 0xa2, 0xab, 0xa1, 0x9d, 0x9c, 0x97, 
+  0x96, 0x99, 0xac, 0x9a, 0x9b, 0x98, 0x8f, 0x8f, 0x8b, 0x8b, 0x76, 0x76, 0x91, 0x67, 0xa7, 0x64, 
+  0x7a, 0xb0, 0x86, 0x7b, 0xb0, 0x86, 0x7b, 0x7b, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x96, 
+  0x97, 0xa1, 0x9e, 0x9e, 0xab, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa9, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa5, 0xa5, 0xa6, 0xa4, 0xa3, 0xa2, 0xa2, 0xab, 0xa1, 0x9d, 0x9c, 0x97, 
+  0x96, 0x99, 0xac, 0x9a, 0x9b, 0x98, 0x8f, 0x8f, 0x8b, 0x8b, 0x76, 0x76, 0x91, 0x67, 0xa7, 0x64, 
+  0x7a, 0xb0, 0x86, 0x7b, 0xb0, 0x86, 0x7b, 0x7b, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x91, 0x9a, 
+  0x96, 0x97, 0xa1, 0x9e, 0xab, 0xa3, 0xa3, 0xa4, 0xa5, 0xa5, 0xa5, 0xa5, 0xa8, 0xa8, 0xa8, 0xa5, 
+  0xa8, 0xa8, 0xa5, 0xa5, 0xa5, 0xa6, 0xa4, 0xa3, 0xa3, 0xa2, 0x9e, 0x9e, 0x9d, 0x9d, 0x97, 0x97, 
+  0x99, 0x99, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x90, 0x76, 0x8c, 0x67, 0x67, 0x84, 0x64, 
+  0x64, 0x7a, 0xb0, 0x86, 0x86, 0x7b, 0x86, 0x86, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x91, 0x9a, 
+  0x97, 0x97, 0x9d, 0x9e, 0x9e, 0xab, 0xa2, 0xa6, 0xa4, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa8, 0xa5, 
+  0xa5, 0xa8, 0xa5, 0xa5, 0xa5, 0xa6, 0xa6, 0xa2, 0xa3, 0xa2, 0xab, 0xab, 0xa1, 0xa1, 0x9c, 0x97, 
+  0x99, 0x99, 0xac, 0x9a, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x90, 0x76, 0x76, 0x67, 0x67, 0x6e, 0x64, 
+  0x7a, 0xad, 0x86, 0x7b, 0x86, 0xb0, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xad, 0x9a, 
+  0x99, 0x97, 0x9c, 0xa1, 0x9e, 0xab, 0xa3, 0xa2, 0xa6, 0xa6, 0xa5, 0xa5, 0xa8, 0xaa, 0xa5, 0xa8, 
+  0xa5, 0xa5, 0xa5, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa2, 0xab, 0x9e, 0xa1, 0xa1, 0x9d, 0x97, 0x96, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x95, 0x8e, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x8c, 0x67, 0x84, 0x64, 
+  0x64, 0xb0, 0xb0, 0x86, 0x86, 0xaf, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xad, 0x9a, 
+  0x99, 0x97, 0x9c, 0xa1, 0x9e, 0xab, 0xa3, 0xa2, 0xa6, 0xa6, 0xa5, 0xa5, 0xa8, 0xaa, 0xa5, 0xa8, 
+  0xa5, 0xa5, 0xa5, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa2, 0xab, 0x9e, 0xa1, 0xa1, 0x9d, 0x97, 0x96, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x95, 0x8e, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x8c, 0x67, 0x84, 0x64, 
+  0x64, 0xb0, 0xb0, 0x86, 0x86, 0xaf, 0x86, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0xac, 0x96, 0x97, 0xa1, 0x9d, 0x9e, 0xab, 0xa2, 0xa3, 0xa3, 0xa4, 0xa6, 0xa6, 0xa5, 0xa5, 0xa5, 
+  0xa4, 0xa5, 0xa4, 0xa6, 0xa6, 0xa6, 0xa3, 0xa3, 0xae, 0xab, 0x9e, 0x9e, 0x9d, 0x9d, 0x9c, 0x96, 
+  0x96, 0x99, 0xac, 0x9a, 0x9b, 0x98, 0x8f, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x8c, 0x67, 0x84, 0x84, 
+  0x64, 0x7a, 0xb0, 0x86, 0x7b, 0x7b, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x9a, 0x99, 0x97, 0x9c, 0xa1, 0x9e, 0xab, 0xab, 0xae, 0xa3, 0xa3, 0xa4, 0xa4, 0xa5, 0xa6, 0xa4, 
+  0xa5, 0xa4, 0xa6, 0xa4, 0xa3, 0xa3, 0xa3, 0xa2, 0xab, 0x9e, 0x9e, 0x9d, 0x9d, 0x9c, 0x97, 0x99, 
+  0x99, 0x9a, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x90, 0x76, 0x76, 0x91, 0x67, 0x67, 0xa7, 
+  0x64, 0xad, 0x7a, 0x7b, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 
+  0x9a, 0x99, 0x97, 0x97, 0xa1, 0xa1, 0x9e, 0x9e, 0xa2, 0xa2, 0xa2, 0xa3, 0xa6, 0xa4, 0xa4, 0xa6, 
+  0xa4, 0xa4, 0xa3, 0xa4, 0xa3, 0xa2, 0xae, 0xa2, 0xab, 0xab, 0x9e, 0xa1, 0xa1, 0x9c, 0x9c, 0x97, 
+  0x99, 0xac, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x8b, 0x76, 0x8c, 0x91, 0x67, 0x84, 0xa7, 
+  0x64, 0x7a, 0xad, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 
+  0x9a, 0x99, 0x97, 0x97, 0xa1, 0xa1, 0x9e, 0x9e, 0xa2, 0xa2, 0xa2, 0xa3, 0xa6, 0xa4, 0xa4, 0xa6, 
+  0xa4, 0xa4, 0xa3, 0xa4, 0xa3, 0xa2, 0xae, 0xa2, 0xab, 0xab, 0x9e, 0xa1, 0xa1, 0x9c, 0x9c, 0x97, 
+  0x99, 0xac, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x8b, 0x76, 0x8c, 0x91, 0x67, 0x84, 0xa7, 
+  0x64, 0x7a, 0xad, 0x86, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 
+  0x9a, 0x99, 0x99, 0x97, 0x9d, 0x9d, 0xa1, 0xab, 0xa2, 0xae, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa6, 
+  0xa6, 0xa6, 0xa6, 0xa3, 0xa3, 0xa3, 0xa2, 0xa2, 0xab, 0x9e, 0x9e, 0xa1, 0x9c, 0x9c, 0x97, 0x99, 
+  0x99, 0x9a, 0x9a, 0xa0, 0x9b, 0x95, 0x8e, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x8c, 0x67, 0x84, 0x64, 
+  0x64, 0x7a, 0xb0, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9a, 0x99, 0x96, 0x9c, 0x9d, 0xa1, 0x9e, 0x9e, 0xab, 0xa2, 0xae, 0xa2, 0xa3, 0xa3, 0xa3, 
+  0xa3, 0xa3, 0xa2, 0xa3, 0xa2, 0xa2, 0xab, 0xab, 0x9e, 0xab, 0x9d, 0x9d, 0x9d, 0x97, 0x97, 0x96, 
+  0x99, 0x99, 0x9a, 0x9b, 0x98, 0x98, 0x98, 0x8f, 0x8b, 0x8b, 0x76, 0x8c, 0x67, 0x67, 0x67, 0x64, 
+  0x64, 0x64, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9a, 0x9a, 0xac, 0x99, 0x97, 0x9c, 0x9d, 0xa1, 0x9e, 0x9e, 0xab, 0xa2, 0xa3, 0xa2, 0xa3, 0xa3, 
+  0xa3, 0xa3, 0xa3, 0xa2, 0xae, 0xab, 0xa2, 0x9e, 0xab, 0x9e, 0xa1, 0x9d, 0x97, 0x9c, 0x97, 0x99, 
+  0x99, 0x9a, 0x9b, 0x9a, 0x9b, 0x98, 0x8f, 0x8e, 0x7c, 0x8b, 0x8b, 0x8c, 0x8c, 0x91, 0x67, 0x6e, 
+  0x64, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9a, 0x9a, 0xac, 0x99, 0x97, 0x9c, 0x9d, 0xa1, 0x9e, 0x9e, 0xab, 0xa2, 0xa3, 0xa2, 0xa3, 0xa3, 
+  0xa3, 0xa3, 0xa3, 0xa2, 0xae, 0xab, 0xa2, 0x9e, 0xab, 0x9e, 0xa1, 0x9d, 0x97, 0x9c, 0x97, 0x99, 
+  0x99, 0x9a, 0x9b, 0x9a, 0x9b, 0x98, 0x8f, 0x8e, 0x7c, 0x8b, 0x8b, 0x8c, 0x8c, 0x91, 0x67, 0x6e, 
+  0x64, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8b, 0xa0, 0x99, 0x99, 0x97, 0x97, 0x9d, 0x9d, 0x9e, 0x9e, 0x9e, 0x9e, 0xa2, 0xab, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xab, 0xab, 0x9e, 0x9e, 0xa1, 0xa1, 0x9d, 0x9c, 0x9c, 0x97, 0x99, 
+  0x99, 0xac, 0x9b, 0x9b, 0x9b, 0x98, 0x8f, 0x8f, 0x8b, 0x90, 0x8b, 0x76, 0x67, 0x67, 0x67, 0x7a, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x67, 0x9b, 0x9a, 0x99, 0x99, 0x97, 0x97, 0x9d, 0xa1, 0xa1, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa2, 
+  0xab, 0xae, 0xab, 0xab, 0xa2, 0x9e, 0x9e, 0x9e, 0x9e, 0x9d, 0x9d, 0x9d, 0x97, 0x97, 0x96, 0x96, 
+  0x99, 0x9a, 0x9a, 0xa0, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x8b, 0x76, 0x8c, 0x8c, 0x91, 0x7b, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb0, 0x9b, 0x9a, 0x99, 0x99, 0x97, 0x9c, 0x9c, 0x9d, 0x9d, 0xa1, 0x9e, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa1, 0xa1, 0xa1, 0xa1, 0x9c, 0x97, 0x96, 0x99, 0x99, 
+  0x99, 0x9a, 0x9b, 0x9b, 0x9b, 0x98, 0x8f, 0x8b, 0x8b, 0x8b, 0x8b, 0x76, 0x7a, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xb0, 0x9b, 0x9a, 0x99, 0x99, 0x97, 0x9c, 0x9c, 0x9d, 0x9d, 0xa1, 0x9e, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa1, 0xa1, 0xa1, 0xa1, 0x9c, 0x97, 0x96, 0x99, 0x99, 
+  0x99, 0x9a, 0x9b, 0x9b, 0x9b, 0x98, 0x8f, 0x8b, 0x8b, 0x8b, 0x8b, 0x76, 0x7a, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x95, 0xa0, 0x9a, 0x99, 0x96, 0x97, 0x97, 0x9d, 0xa1, 0xa1, 0xa1, 0x9e, 0xa1, 0xab, 0xab, 
+  0x9e, 0xab, 0x9e, 0x9e, 0x9e, 0x9e, 0xa1, 0x9e, 0x9d, 0x9d, 0x9c, 0x9c, 0x9c, 0x97, 0x96, 0x99, 
+  0x9a, 0xac, 0x9a, 0x9b, 0x9b, 0x98, 0x98, 0x8f, 0x7c, 0x90, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x90, 0x9b, 0xa0, 0xac, 0x99, 0x96, 0x97, 0x97, 0x9d, 0xa1, 0x9d, 0x9e, 0xa1, 0x9e, 0x9e, 
+  0x9e, 0xab, 0x9e, 0xab, 0x9e, 0x9e, 0x9d, 0xa1, 0x9d, 0x9d, 0x9c, 0x97, 0x97, 0x99, 0x99, 0x99, 
+  0x9a, 0x9a, 0x9b, 0x9b, 0x9b, 0x98, 0x8e, 0x8c, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb0, 0x67, 0x9a, 0xac, 0x99, 0x97, 0x9c, 0x97, 0x9d, 0xa1, 0x9d, 0x9d, 0x9e, 0x9e, 
+  0x9e, 0x9e, 0x9e, 0xa1, 0x9e, 0x9d, 0xa1, 0x9d, 0xa1, 0x9d, 0x97, 0x97, 0x97, 0x97, 0x99, 0x99, 
+  0x9a, 0x9a, 0xa0, 0x9b, 0x98, 0x84, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb0, 0x67, 0x9a, 0xac, 0x99, 0x97, 0x9c, 0x97, 0x9d, 0xa1, 0x9d, 0x9d, 0x9e, 0x9e, 
+  0x9e, 0x9e, 0x9e, 0xa1, 0x9e, 0x9d, 0xa1, 0x9d, 0xa1, 0x9d, 0x97, 0x97, 0x97, 0x97, 0x99, 0x99, 
+  0x9a, 0x9a, 0xa0, 0x9b, 0x98, 0x84, 0xb0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 0x8e, 0x99, 0x97, 0x97, 0x97, 0x9d, 0xa1, 0x9d, 0x9e, 0xa1, 
+  0xa1, 0x9e, 0x9e, 0xa1, 0xa1, 0x9d, 0xa1, 0x9d, 0x9d, 0x9c, 0x9c, 0x97, 0x96, 0x96, 0x99, 0x99, 
+  0x9a, 0x8b, 0x67, 0xad, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x76, 0x95, 0x9c, 0x9c, 0xa1, 0xa1, 0xa1, 
+  0x9d, 0xa1, 0x9d, 0xa1, 0xa1, 0xa1, 0x9d, 0x9d, 0x9c, 0x9c, 0x97, 0x97, 0x96, 0x8c, 0x91, 0x7a, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x8c, 0x76, 
+  0x76, 0x76, 0x8c, 0x8c, 0x76, 0x76, 0x76, 0x8c, 0x8c, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x8c, 0x76, 
+  0x76, 0x76, 0x8c, 0x8c, 0x76, 0x76, 0x76, 0x8c, 0x8c, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x25, 0x25, 0x27, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x32, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x2a, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x33, 0x34, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x35, 0x35, 0x35, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x33, 0x34, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x35, 0x35, 0x35, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x23, 0x23, 0x31, 
+  0x2f, 0x2f, 0x2f, 0x2f, 0x32, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x27, 
+  0x27, 0x27, 0x35, 0x30, 0x36, 0x37, 0x37, 0x36, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x35, 0x23, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x23, 0x34, 0x23, 0x34, 
+  0x31, 0x31, 0x31, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x23, 
+  0x33, 0x37, 0x37, 0x26, 0x39, 0x39, 0x3a, 0x3a, 0x39, 0x39, 0x26, 0x36, 0x38, 0x36, 0x36, 0x38, 
+  0x3a, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x34, 0x34, 
+  0x34, 0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x35, 0x38, 
+  0x36, 0x3b, 0x3a, 0x3b, 0x3b, 0x3b, 0x3c, 0x3b, 0x3b, 0x3d, 0x3b, 0x39, 0x26, 0x36, 0x37, 0x38, 
+  0x37, 0x3e, 0x3f, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x34, 0x34, 
+  0x34, 0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x35, 0x38, 
+  0x36, 0x3b, 0x3a, 0x3b, 0x3b, 0x3b, 0x3c, 0x3b, 0x3b, 0x3d, 0x3b, 0x39, 0x26, 0x36, 0x37, 0x38, 
+  0x37, 0x3e, 0x3f, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x28, 0x23, 0x23, 0x23, 0x31, 
+  0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x32, 0x2d, 0x2a, 0x2a, 0x23, 0x38, 0x36, 0x40, 
+  0x30, 0x24, 0x3c, 0x41, 0x41, 0x41, 0x41, 0x42, 0x41, 0x3c, 0x3c, 0x3b, 0x3c, 0x3d, 0x39, 0x26, 
+  0x36, 0x38, 0x37, 0x3f, 0x40, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x43, 0x43, 0x28, 0x28, 0x23, 0x23, 0x23, 
+  0x34, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x44, 0x3d, 0x3b, 0x3c, 
+  0x45, 0x42, 0x46, 0x46, 0x47, 0x47, 0x47, 0x46, 0x48, 0x45, 0x41, 0x3c, 0x24, 0x30, 0x3b, 0x3d, 
+  0x3a, 0x44, 0x38, 0x38, 0x3f, 0x40, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2e, 0x2b, 0x43, 0x43, 0x28, 0x23, 0x34, 0x34, 
+  0x23, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x3a, 0x49, 0x4a, 0x29, 0x45, 0x24, 
+  0x4b, 0x4b, 0x4b, 0x4c, 0x33, 0x33, 0x33, 0x48, 0x4b, 0x48, 0x2c, 0x48, 0x45, 0x41, 0x3c, 0x3c, 
+  0x3d, 0x39, 0x49, 0x36, 0x3f, 0x38, 0x3e, 0x34, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2e, 0x2b, 0x43, 0x43, 0x28, 0x23, 0x34, 0x34, 
+  0x23, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x3a, 0x49, 0x4a, 0x29, 0x45, 0x24, 
+  0x4b, 0x4b, 0x4b, 0x4c, 0x33, 0x33, 0x33, 0x48, 0x4b, 0x48, 0x2c, 0x48, 0x45, 0x41, 0x3c, 0x3c, 
+  0x3d, 0x39, 0x49, 0x36, 0x3f, 0x38, 0x3e, 0x34, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2e, 0x2c, 0x2b, 0x28, 0x28, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x32, 0x28, 0x4d, 0x4a, 0x4e, 0x4f, 0x4b, 0x4b, 
+  0x50, 0x51, 0x51, 0x52, 0x52, 0x52, 0x4c, 0x52, 0x53, 0x54, 0x55, 0x54, 0x47, 0x48, 0x45, 0x42, 
+  0x24, 0x40, 0x3a, 0x26, 0x36, 0x3e, 0x38, 0x3e, 0x27, 0x25, 0x27, 0x25, 0x27, 0x2a, 0x27, 0x2a, 
+  0x27, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x35, 0x2e, 0x2c, 0x2c, 0x28, 0x43, 0x28, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x43, 0x4d, 0x4f, 0x4f, 0x56, 0x52, 0x52, 0x51, 
+  0x51, 0x51, 0x51, 0x51, 0x57, 0x51, 0x51, 0x58, 0x59, 0x5a, 0x5b, 0x55, 0x5b, 0x54, 0x47, 0x48, 
+  0x42, 0x42, 0x3a, 0x3d, 0x3a, 0x38, 0x36, 0x38, 0x26, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x2e, 0x2e, 0x2b, 0x43, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2d, 0x4d, 0x5c, 0x4f, 0x4c, 0x52, 0x52, 0x51, 0x5d, 
+  0x5d, 0x34, 0x5e, 0x5d, 0x5d, 0x5d, 0x2b, 0x5f, 0x60, 0x61, 0x5a, 0x61, 0x5b, 0x5b, 0x54, 0x46, 
+  0x46, 0x41, 0x29, 0x30, 0x3a, 0x3a, 0x3e, 0x3e, 0x44, 0x21, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x33, 0x2e, 0x2e, 0x2b, 0x43, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x34, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2d, 0x4d, 0x5c, 0x4f, 0x4c, 0x52, 0x52, 0x51, 0x5d, 
+  0x5d, 0x34, 0x5e, 0x5d, 0x5d, 0x5d, 0x2b, 0x5f, 0x60, 0x61, 0x5a, 0x61, 0x5b, 0x5b, 0x54, 0x46, 
+  0x46, 0x41, 0x29, 0x30, 0x3a, 0x3a, 0x3e, 0x3e, 0x44, 0x21, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x35, 0x2e, 0x2e, 0x2c, 0x2b, 0x43, 0x28, 0x23, 0x23, 
+  0x23, 0x23, 0x34, 0x31, 0x31, 0x2f, 0x31, 0x4a, 0x62, 0x4c, 0x4c, 0x52, 0x5d, 0x57, 0x51, 0x2f, 
+  0x63, 0x63, 0x64, 0x61, 0x64, 0x64, 0x64, 0x63, 0x60, 0x63, 0x61, 0x61, 0x65, 0x65, 0x65, 0x55, 
+  0x47, 0x48, 0x45, 0x3c, 0x3b, 0x39, 0x44, 0x38, 0x38, 0x3e, 0x23, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2d, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x43, 0x43, 0x43, 0x28, 0x23, 
+  0x23, 0x34, 0x31, 0x34, 0x2f, 0x31, 0x43, 0x66, 0x4f, 0x4c, 0x52, 0x58, 0x5d, 0x2b, 0x63, 0x63, 
+  0x64, 0x67, 0x67, 0x67, 0x67, 0x63, 0x63, 0x63, 0x64, 0x63, 0x60, 0x60, 0x60, 0x5a, 0x65, 0x65, 
+  0x54, 0x54, 0x42, 0x41, 0x3c, 0x3b, 0x39, 0x44, 0x3e, 0x44, 0x3a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x29, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x43, 0x43, 0x43, 0x23, 
+  0x23, 0x23, 0x34, 0x34, 0x31, 0x31, 0x4a, 0x4e, 0x4c, 0x52, 0x59, 0x5f, 0x5d, 0x2a, 0x63, 0x67, 
+  0x67, 0x67, 0x68, 0x68, 0x69, 0x69, 0x68, 0x68, 0x67, 0x67, 0x63, 0x63, 0x63, 0x61, 0x61, 0x55, 
+  0x23, 0x54, 0x54, 0x45, 0x41, 0x3b, 0x39, 0x26, 0x37, 0x3e, 0x38, 0x39, 0x29, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x29, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x43, 0x43, 0x43, 0x23, 
+  0x23, 0x23, 0x34, 0x34, 0x31, 0x31, 0x4a, 0x4e, 0x4c, 0x52, 0x59, 0x5f, 0x5d, 0x2a, 0x63, 0x67, 
+  0x67, 0x67, 0x68, 0x68, 0x69, 0x69, 0x68, 0x68, 0x67, 0x67, 0x63, 0x63, 0x63, 0x61, 0x61, 0x55, 
+  0x23, 0x54, 0x54, 0x45, 0x41, 0x3b, 0x39, 0x26, 0x37, 0x3e, 0x38, 0x39, 0x29, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x43, 0x28, 0x28, 0x23, 
+  0x23, 0x34, 0x23, 0x34, 0x34, 0x31, 0x66, 0x4f, 0x4c, 0x51, 0x2b, 0x63, 0x6a, 0x63, 0x68, 0x68, 
+  0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x68, 0x67, 0x67, 0x67, 0x64, 0x63, 0x60, 0x61, 0x61, 
+  0x43, 0x55, 0x54, 0x46, 0x41, 0x3c, 0x3d, 0x3a, 0x37, 0x38, 0x3e, 0x3f, 0x20, 0x20, 0x26, 0x24, 
+  0x32, 0x2d, 0x24, 0x20, 0x3e, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x21, 0x35, 0x33, 0x2e, 0x2c, 0x2c, 0x2b, 0x43, 0x28, 
+  0x28, 0x23, 0x23, 0x34, 0x34, 0x24, 0x6b, 0x4c, 0x51, 0x5d, 0x25, 0x64, 0x67, 0x68, 0x69, 0x69, 
+  0x6c, 0x6c, 0x6c, 0x69, 0x6c, 0x69, 0x69, 0x6c, 0x69, 0x68, 0x67, 0x67, 0x67, 0x63, 0x60, 0x61, 
+  0x59, 0x59, 0x55, 0x55, 0x45, 0x41, 0x24, 0x3a, 0x49, 0x38, 0x3f, 0x3f, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x3e, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x33, 0x2c, 0x43, 0x43, 0x28, 0x28, 
+  0x28, 0x34, 0x23, 0x23, 0x2f, 0x6d, 0x4f, 0x52, 0x2b, 0x5d, 0x63, 0x67, 0x68, 0x69, 0x69, 0x6c, 
+  0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6c, 0x6c, 0x69, 0x69, 0x67, 0x67, 0x64, 0x63, 0x60, 
+  0x61, 0x5a, 0x65, 0x54, 0x47, 0x45, 0x24, 0x3d, 0x49, 0x3f, 0x38, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3e, 0x3e, 0x71, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x33, 0x2c, 0x43, 0x43, 0x28, 0x28, 
+  0x28, 0x34, 0x23, 0x23, 0x2f, 0x6d, 0x4f, 0x52, 0x2b, 0x5d, 0x63, 0x67, 0x68, 0x69, 0x69, 0x6c, 
+  0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6c, 0x6c, 0x69, 0x69, 0x67, 0x67, 0x64, 0x63, 0x60, 
+  0x61, 0x5a, 0x65, 0x54, 0x47, 0x45, 0x24, 0x3d, 0x49, 0x3f, 0x38, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3e, 0x3e, 0x71, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x2b, 0x43, 0x28, 
+  0x28, 0x23, 0x34, 0x23, 0x34, 0x66, 0x4b, 0x51, 0x61, 0x60, 0x67, 0x68, 0x69, 0x6c, 0x6e, 0x6e, 
+  0x6e, 0x6f, 0x6f, 0x6f, 0x70, 0x70, 0x6e, 0x6e, 0x6c, 0x6c, 0x69, 0x67, 0x67, 0x67, 0x64, 0x63, 
+  0x60, 0x5a, 0x5b, 0x5b, 0x54, 0x48, 0x41, 0x3c, 0x3a, 0x71, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x3e, 0x71, 0x3e, 0x3e, 0x71, 0x3e, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x29, 0x35, 0x35, 0x2e, 0x33, 0x2c, 0x43, 0x43, 0x43, 
+  0x28, 0x23, 0x28, 0x34, 0x2e, 0x4f, 0x4c, 0x51, 0x60, 0x2a, 0x73, 0x68, 0x6c, 0x6e, 0x6e, 0x6f, 
+  0x6f, 0x70, 0x70, 0x6f, 0x6f, 0x70, 0x6f, 0x70, 0x70, 0x6c, 0x6c, 0x69, 0x68, 0x67, 0x64, 0x63, 
+  0x60, 0x61, 0x5a, 0x55, 0x54, 0x48, 0x41, 0x30, 0x3d, 0x71, 0x38, 0x38, 0x74, 0x20, 0x20, 0x20, 
+  0x3f, 0x71, 0x71, 0x7f, 0x71, 0x71, 0x71, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x43, 0x43, 0x43, 
+  0x43, 0x28, 0x28, 0x23, 0x40, 0x4f, 0x52, 0x58, 0x2b, 0x73, 0x75, 0x67, 0x68, 0x6e, 0x70, 0x70, 
+  0x6f, 0x6f, 0x6f, 0x76, 0x6c, 0x76, 0x6c, 0x70, 0x70, 0x6e, 0x6c, 0x6c, 0x69, 0x68, 0x27, 0x64, 
+  0x63, 0x61, 0x61, 0x5b, 0x55, 0x47, 0x45, 0x3c, 0x3d, 0x49, 0x3e, 0x38, 0x3e, 0x20, 0x74, 0x4d, 
+  0x7f, 0x71, 0x71, 0x71, 0x3e, 0x71, 0x3e, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x43, 0x43, 0x43, 
+  0x43, 0x28, 0x28, 0x23, 0x40, 0x4f, 0x52, 0x58, 0x2b, 0x73, 0x75, 0x67, 0x68, 0x6e, 0x70, 0x70, 
+  0x6f, 0x6f, 0x6f, 0x76, 0x6c, 0x76, 0x6c, 0x70, 0x70, 0x6e, 0x6c, 0x6c, 0x69, 0x68, 0x27, 0x64, 
+  0x63, 0x61, 0x61, 0x5b, 0x55, 0x47, 0x45, 0x3c, 0x3d, 0x49, 0x3e, 0x38, 0x3e, 0x20, 0x74, 0x4d, 
+  0x7f, 0x71, 0x71, 0x71, 0x3e, 0x71, 0x3e, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x21, 0x35, 0x2e, 0x2e, 0x2c, 0x2c, 0x43, 
+  0x28, 0x28, 0x35, 0x26, 0x44, 0x4e, 0x58, 0x61, 0x77, 0x2a, 0x73, 0x78, 0x78, 0x6c, 0x70, 0x6f, 
+  0x6f, 0x76, 0x76, 0x76, 0x79, 0x79, 0x79, 0x6e, 0x6f, 0x6f, 0x6e, 0x6c, 0x69, 0x68, 0x22, 0x64, 
+  0x63, 0x60, 0x5a, 0x65, 0x5b, 0x47, 0x45, 0x3c, 0x30, 0x49, 0x38, 0x3e, 0x38, 0x4d, 0x5c, 0x4d, 
+  0x7f, 0x3e, 0x71, 0x71, 0x71, 0x71, 0x71, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x2c, 0x43, 
+  0x28, 0x35, 0x20, 0x20, 0x71, 0x56, 0x59, 0x60, 0x63, 0x68, 0x78, 0x7a, 0x75, 0x7b, 0x70, 0x76, 
+  0x6f, 0x76, 0x7c, 0x79, 0x7d, 0x7e, 0x7e, 0x7d, 0x7c, 0x6f, 0x6e, 0x6e, 0x69, 0x69, 0x68, 0x64, 
+  0x63, 0x63, 0x5a, 0x5a, 0x5b, 0x54, 0x45, 0x42, 0x40, 0x7f, 0x26, 0x71, 0x6b, 0x4e, 0x5c, 0x5c, 
+  0x49, 0x3e, 0x3e, 0x7f, 0x3e, 0x71, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x2c, 
+  0x36, 0x20, 0x20, 0x20, 0x71, 0x56, 0x5b, 0x77, 0x64, 0x68, 0x68, 0x75, 0x80, 0x75, 0x75, 0x81, 
+  0x6e, 0x76, 0x82, 0x7d, 0x83, 0x83, 0x83, 0x7e, 0x79, 0x6f, 0x70, 0x6e, 0x6e, 0x69, 0x68, 0x67, 
+  0x67, 0x60, 0x61, 0x5a, 0x55, 0x54, 0x48, 0x42, 0x4a, 0x62, 0x6b, 0x84, 0x4e, 0x4e, 0x66, 0x4d, 
+  0x4d, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x24, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x2c, 0x2c, 
+  0x36, 0x20, 0x20, 0x20, 0x71, 0x56, 0x5b, 0x77, 0x64, 0x68, 0x68, 0x75, 0x80, 0x75, 0x75, 0x81, 
+  0x6e, 0x76, 0x82, 0x7d, 0x83, 0x83, 0x83, 0x7e, 0x79, 0x6f, 0x70, 0x6e, 0x6e, 0x69, 0x68, 0x67, 
+  0x67, 0x60, 0x61, 0x5a, 0x55, 0x54, 0x48, 0x42, 0x4a, 0x62, 0x6b, 0x84, 0x4e, 0x4e, 0x66, 0x4d, 
+  0x4d, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x35, 0x33, 0x33, 0x2e, 0x2b, 0x72, 
+  0x20, 0x20, 0x20, 0x20, 0x71, 0x2e, 0x5b, 0x63, 0x64, 0x67, 0x69, 0x85, 0x80, 0x86, 0x75, 0x87, 
+  0x88, 0x6c, 0x82, 0x7e, 0x83, 0x83, 0x83, 0x83, 0x7d, 0x76, 0x6f, 0x6c, 0x6c, 0x69, 0x68, 0x67, 
+  0x64, 0x60, 0x60, 0x65, 0x65, 0x54, 0x48, 0x21, 0x89, 0x8a, 0x89, 0x8b, 0x6b, 0x8c, 0x5c, 0x4d, 
+  0x4d, 0x71, 0x3e, 0x71, 0x3e, 0x7f, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x24, 0x21, 0x35, 0x33, 0x33, 0x26, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x44, 0x46, 0x5b, 0x60, 0x64, 0x68, 0x6c, 0x6c, 0x6c, 0x76, 0x8d, 0x8e, 
+  0x8f, 0x82, 0x82, 0x7d, 0x83, 0x83, 0x83, 0x7e, 0x7d, 0x76, 0x6f, 0x6e, 0x6c, 0x69, 0x68, 0x67, 
+  0x64, 0x63, 0x61, 0x5a, 0x55, 0x2b, 0x90, 0x91, 0x8a, 0x89, 0x8b, 0x84, 0x6b, 0x4e, 0x5c, 0x5c, 
+  0x49, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x58, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x92, 0x60, 0x67, 0x67, 0x6c, 0x6e, 0x70, 0x6f, 0x6f, 0x76, 
+  0x8d, 0x76, 0x82, 0x7d, 0x7e, 0x7e, 0x7e, 0x7d, 0x82, 0x76, 0x6f, 0x6e, 0x6c, 0x69, 0x68, 0x67, 
+  0x64, 0x63, 0x73, 0x93, 0x94, 0x95, 0x90, 0x91, 0x8a, 0x8a, 0x8b, 0x84, 0x6b, 0x4e, 0x5c, 0x4d, 
+  0x7f, 0x7f, 0x3e, 0x71, 0x3e, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x58, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x92, 0x60, 0x67, 0x67, 0x6c, 0x6e, 0x70, 0x6f, 0x6f, 0x76, 
+  0x8d, 0x76, 0x82, 0x7d, 0x7e, 0x7e, 0x7e, 0x7d, 0x82, 0x76, 0x6f, 0x6e, 0x6c, 0x69, 0x68, 0x67, 
+  0x64, 0x63, 0x73, 0x93, 0x94, 0x95, 0x90, 0x91, 0x8a, 0x8a, 0x8b, 0x84, 0x6b, 0x4e, 0x5c, 0x4d, 
+  0x7f, 0x7f, 0x3e, 0x71, 0x3e, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x29, 0x21, 0x35, 0x30, 0x96, 0x97, 0x95, 
+  0x4d, 0x20, 0x20, 0x20, 0x20, 0x42, 0x55, 0x60, 0x63, 0x68, 0x69, 0x6c, 0x6e, 0x6f, 0x6f, 0x76, 
+  0x81, 0x76, 0x76, 0x76, 0x79, 0x7d, 0x79, 0x79, 0x98, 0x81, 0x22, 0x78, 0x6c, 0x69, 0x68, 0x99, 
+  0x73, 0x9a, 0x9a, 0x94, 0x94, 0x94, 0x91, 0x91, 0x8a, 0x9b, 0x89, 0x8b, 0x6b, 0x4e, 0x4e, 0x5c, 
+  0x4d, 0x7f, 0x71, 0x71, 0x71, 0x3e, 0x71, 0x71, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x21, 0x20, 0x91, 0x97, 0x9c, 
+  0x9c, 0x9d, 0x9a, 0x8a, 0x5c, 0x62, 0x54, 0x61, 0x63, 0x67, 0x69, 0x6c, 0x6e, 0x6f, 0x6f, 0x76, 
+  0x6f, 0x98, 0x76, 0x76, 0x76, 0x76, 0x9e, 0x6c, 0x8f, 0x9f, 0xa0, 0xa1, 0x8f, 0xa2, 0xa2, 0xa3, 
+  0xa4, 0x96, 0xa5, 0x9a, 0x94, 0x94, 0x91, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x84, 0x6b, 0x66, 0x5c, 
+  0x4d, 0x7f, 0x3e, 0x7f, 0x71, 0x3e, 0x71, 0x71, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x84, 0x96, 0x97, 
+  0xa2, 0xa2, 0xa0, 0x87, 0xa6, 0xa7, 0xa8, 0x86, 0x9e, 0x8e, 0x9e, 0x81, 0x6c, 0x70, 0x6f, 0x6f, 
+  0x76, 0x78, 0x98, 0x8e, 0x78, 0xa9, 0xa9, 0xa6, 0xaa, 0xa6, 0x87, 0xa0, 0xa0, 0xa2, 0xa4, 0x97, 
+  0x96, 0x96, 0x9a, 0xab, 0x94, 0x95, 0x95, 0x91, 0x8a, 0x9b, 0x8b, 0x8b, 0x6b, 0x4e, 0x66, 0x5c, 
+  0x5c, 0x49, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x37, 0x20, 0x84, 0x96, 0x97, 
+  0xa2, 0xa2, 0xa0, 0x87, 0xa6, 0xa7, 0xa8, 0x86, 0x9e, 0x8e, 0x9e, 0x81, 0x6c, 0x70, 0x6f, 0x6f, 
+  0x76, 0x78, 0x98, 0x8e, 0x78, 0xa9, 0xa9, 0xa6, 0xaa, 0xa6, 0x87, 0xa0, 0xa0, 0xa2, 0xa4, 0x97, 
+  0x96, 0x96, 0x9a, 0xab, 0x94, 0x95, 0x95, 0x91, 0x8a, 0x9b, 0x8b, 0x8b, 0x6b, 0x4e, 0x66, 0x5c, 
+  0x5c, 0x49, 0x71, 0x71, 0x71, 0x71, 0x71, 0x71, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x26, 0x20, 0x20, 0x84, 0x96, 0x97, 
+  0x9c, 0xa2, 0xa0, 0xac, 0xad, 0xa7, 0xa6, 0xa8, 0xa8, 0xae, 0xaf, 0xaf, 0xae, 0xae, 0xaf, 0xaf, 
+  0xaf, 0xae, 0xae, 0xae, 0xaf, 0xaf, 0xae, 0xae, 0xa7, 0xad, 0x87, 0xa0, 0xa2, 0x9c, 0xa4, 0xa4, 
+  0xa3, 0x96, 0x9a, 0x94, 0x94, 0x95, 0x90, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x6b, 0x4e, 0x8c, 0x5c, 
+  0x4d, 0x49, 0x3e, 0x71, 0x71, 0x3e, 0x3e, 0x3e, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x36, 0x20, 0x20, 0x20, 0x96, 0xa3, 
+  0x97, 0x9c, 0x9d, 0x9d, 0x87, 0xa6, 0xa8, 0xa8, 0xa8, 0xae, 0xa8, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0xa8, 0xaa, 0xa7, 0xad, 0xad, 0x87, 0x9d, 0x9d, 0x9c, 0x9c, 0x97, 
+  0xa3, 0x96, 0xa5, 0x9a, 0x94, 0x95, 0x91, 0x91, 0xb0, 0x8a, 0x8b, 0x8b, 0x84, 0x6b, 0x8c, 0x5c, 
+  0x4d, 0x7f, 0x71, 0x3e, 0x71, 0x7f, 0x71, 0x71, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0xa3, 
+  0x97, 0x9c, 0x9d, 0xa0, 0x87, 0x87, 0xa6, 0xa8, 0xa8, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaf, 0xaf, 
+  0xaf, 0xae, 0xae, 0xa8, 0xae, 0xa8, 0xa7, 0xad, 0x87, 0xac, 0x87, 0x9d, 0x9d, 0x9c, 0xa4, 0x97, 
+  0xa3, 0x96, 0xa5, 0x9a, 0x94, 0x94, 0x95, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x6b, 0x4e, 0x4e, 0x5c, 
+  0x5c, 0x49, 0x71, 0x3e, 0x7f, 0x71, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0xa3, 
+  0x97, 0x9c, 0x9d, 0xa0, 0x87, 0x87, 0xa6, 0xa8, 0xa8, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaf, 0xaf, 
+  0xaf, 0xae, 0xae, 0xa8, 0xae, 0xa8, 0xa7, 0xad, 0x87, 0xac, 0x87, 0x9d, 0x9d, 0x9c, 0xa4, 0x97, 
+  0xa3, 0x96, 0xa5, 0x9a, 0x94, 0x94, 0x95, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x6b, 0x4e, 0x4e, 0x5c, 
+  0x5c, 0x49, 0x71, 0x3e, 0x7f, 0x71, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x84, 0x9a, 
+  0x97, 0xa4, 0xa2, 0x9d, 0x87, 0xad, 0xa6, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 0xae, 0xae, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xaa, 0xa8, 0xaa, 0xa6, 0xad, 0xad, 0x87, 0xa0, 0x9d, 0xa2, 0xa2, 0x97, 0x97, 
+  0xa3, 0xa5, 0x9a, 0xab, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x89, 0x89, 0x84, 0x6b, 0x4e, 0x66, 
+  0x4d, 0x7f, 0x71, 0x71, 0x44, 0x71, 0x71, 0x3e, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x84, 0xa5, 
+  0x97, 0x97, 0x9c, 0xa2, 0x9d, 0xa0, 0xad, 0xad, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 0xae, 0xae, 0xae, 
+  0xa8, 0xae, 0xa8, 0xaa, 0xa7, 0xa6, 0xa6, 0xad, 0xad, 0xa0, 0xa0, 0x9d, 0x9c, 0xa2, 0xa4, 0xa3, 
+  0x96, 0x96, 0x9a, 0xab, 0x94, 0x95, 0x91, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x84, 0x6b, 0x4e, 0x66, 
+  0x5c, 0x4d, 0x7f, 0x3e, 0x3e, 0x3e, 0x7f, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7f, 0x9a, 
+  0x96, 0x97, 0x9c, 0x9c, 0x9d, 0xa0, 0x87, 0xad, 0xa6, 0xa6, 0xa8, 0xa8, 0xae, 0xa8, 0xa8, 0xa8, 
+  0xaa, 0xa8, 0xa8, 0xa8, 0xa6, 0xa7, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0xa2, 0xa2, 0xa4, 0x97, 0x97, 
+  0xa3, 0xa5, 0x9a, 0x9a, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x89, 0x89, 0x6b, 0x6b, 0x8c, 0x5c, 
+  0x5c, 0x7f, 0x7f, 0x7f, 0x71, 0x71, 0x44, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7f, 0x9a, 
+  0x96, 0x97, 0x9c, 0x9c, 0x9d, 0xa0, 0x87, 0xad, 0xa6, 0xa6, 0xa8, 0xa8, 0xae, 0xa8, 0xa8, 0xa8, 
+  0xaa, 0xa8, 0xa8, 0xa8, 0xa6, 0xa7, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0xa2, 0xa2, 0xa4, 0x97, 0x97, 
+  0xa3, 0xa5, 0x9a, 0x9a, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x89, 0x89, 0x6b, 0x6b, 0x8c, 0x5c, 
+  0x5c, 0x7f, 0x7f, 0x7f, 0x71, 0x71, 0x44, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x96, 0x96, 0xa4, 0xa2, 0x9c, 0xa0, 0xa0, 0xac, 0xad, 0xad, 0xa6, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa7, 0xa6, 0xa7, 0xa6, 0xa7, 0xad, 0x87, 0x87, 0x9d, 0xa0, 0xa2, 0x9c, 0x9c, 0x97, 0x97, 
+  0x96, 0xa5, 0x9a, 0x94, 0x94, 0x95, 0x91, 0x91, 0x8a, 0x8a, 0x89, 0x89, 0x8b, 0x4e, 0x4e, 0x8c, 
+  0x5c, 0x49, 0x49, 0x71, 0x71, 0x71, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x9a, 0xa3, 0x97, 0xa4, 0xa2, 0x9d, 0x9d, 0x87, 0x87, 0xad, 0xa7, 0xa7, 0xa6, 0xa7, 0xa8, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xa6, 0xad, 0xad, 0x87, 0xad, 0x87, 0xa0, 0x9d, 0x9d, 0x9c, 0x9c, 0x97, 0x96, 
+  0x96, 0x96, 0x9a, 0x9a, 0x94, 0x94, 0x95, 0x91, 0xb0, 0x8a, 0x89, 0x8b, 0x84, 0x6b, 0x4e, 0x5c, 
+  0x5c, 0x4d, 0x7f, 0x71, 0x71, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x84, 
+  0x9a, 0x96, 0x97, 0x97, 0x9c, 0xa2, 0x9d, 0x87, 0x87, 0x87, 0x87, 0xad, 0xa6, 0xad, 0xa6, 0xa6, 
+  0xa7, 0xa6, 0xa6, 0xa7, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0x9d, 0xa2, 0xa2, 0x9c, 0x9c, 0xa4, 0x97, 
+  0x96, 0xa5, 0x9a, 0xab, 0x94, 0x95, 0x91, 0x91, 0x8a, 0x8a, 0x9b, 0x8b, 0x8b, 0x6b, 0x4e, 0x8c, 
+  0x5c, 0x4d, 0x7f, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x84, 
+  0x9a, 0x96, 0x97, 0x97, 0x9c, 0xa2, 0x9d, 0x87, 0x87, 0x87, 0x87, 0xad, 0xa6, 0xad, 0xa6, 0xa6, 
+  0xa7, 0xa6, 0xa6, 0xa7, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0x9d, 0xa2, 0xa2, 0x9c, 0x9c, 0xa4, 0x97, 
+  0x96, 0xa5, 0x9a, 0xab, 0x94, 0x95, 0x91, 0x91, 0x8a, 0x8a, 0x9b, 0x8b, 0x8b, 0x6b, 0x4e, 0x8c, 
+  0x5c, 0x4d, 0x7f, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4e, 
+  0x94, 0xa5, 0x96, 0x97, 0x9c, 0xa2, 0x9c, 0xa0, 0xa0, 0x87, 0xad, 0xad, 0xad, 0xad, 0xa6, 0xa7, 
+  0xa6, 0xa7, 0xad, 0xad, 0x87, 0xad, 0x87, 0x87, 0x9d, 0xa0, 0x9d, 0xa2, 0xa4, 0xa4, 0xa3, 0xa3, 
+  0x96, 0x96, 0x9a, 0x94, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x89, 0x89, 0x84, 0x6b, 0x6b, 0x5c, 
+  0x5c, 0x5c, 0x49, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x94, 0x96, 0x96, 0xa3, 0x97, 0xa2, 0x9c, 0x9d, 0x9d, 0xa0, 0xa0, 0xad, 0xad, 0xad, 0xad, 0xad, 
+  0xad, 0xad, 0x87, 0xad, 0x87, 0xac, 0x87, 0xa0, 0x9d, 0x9d, 0x9c, 0xa2, 0xa4, 0xa4, 0xa3, 0x96, 
+  0x96, 0x9a, 0x9a, 0x94, 0x94, 0x95, 0x91, 0x91, 0x8a, 0x8a, 0x89, 0x8b, 0x8b, 0x6b, 0x6b, 0x66, 
+  0x5c, 0x4d, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x94, 0x94, 0xa5, 0xa3, 0xa4, 0x97, 0xa2, 0xa2, 0x9d, 0x9d, 0x87, 0xa0, 0x87, 0xac, 0x87, 0xad, 
+  0x87, 0xad, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0xa0, 0x9d, 0x9d, 0xa2, 0x9c, 0x9c, 0x97, 0x97, 0xa3, 
+  0x96, 0xa5, 0x9a, 0x94, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x9b, 0x89, 0x84, 0x6b, 0x4e, 0x5c, 
+  0x5c, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x94, 0x94, 0xa5, 0xa3, 0xa4, 0x97, 0xa2, 0xa2, 0x9d, 0x9d, 0x87, 0xa0, 0x87, 0xac, 0x87, 0xad, 
+  0x87, 0xad, 0xad, 0xad, 0x87, 0xa0, 0xa0, 0xa0, 0x9d, 0x9d, 0xa2, 0x9c, 0x9c, 0x97, 0x97, 0xa3, 
+  0x96, 0xa5, 0x9a, 0x94, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x9b, 0x89, 0x84, 0x6b, 0x4e, 0x5c, 
+  0x5c, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8a, 0x94, 0x9a, 0x96, 0x97, 0x97, 0x9c, 0xa2, 0x9d, 0x9d, 0xa0, 0xa0, 0xa0, 0x87, 0x87, 0xad, 
+  0xad, 0x87, 0x87, 0xac, 0x87, 0xa0, 0x9d, 0xa0, 0x9d, 0xa2, 0xa2, 0xa4, 0x9c, 0x97, 0xa3, 0x96, 
+  0x9a, 0x9a, 0x9a, 0x94, 0x94, 0x95, 0x91, 0x91, 0xb0, 0x8a, 0x89, 0x89, 0x8b, 0x84, 0x6b, 0x5c, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x6b, 0x94, 0xa5, 0x96, 0xa3, 0x97, 0x97, 0xa4, 0xa2, 0xa2, 0x9d, 0x9d, 0x9d, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0xac, 0xa0, 0x87, 0x9d, 0xa0, 0xa0, 0x9d, 0x9d, 0x9c, 0x9c, 0x9c, 0x97, 0x97, 0x96, 0x96, 
+  0x96, 0xa5, 0x9a, 0x9a, 0x95, 0x95, 0x95, 0x91, 0x8a, 0x8a, 0x9b, 0x8b, 0x84, 0x6b, 0x3e, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x49, 0x94, 0x9a, 0x9a, 0x96, 0x97, 0x97, 0x97, 0x9c, 0xa2, 0x9d, 0xa0, 0xa0, 0xa0, 0xa0, 0x9d, 
+  0x9d, 0x87, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0xa2, 0x9c, 0x9c, 0xa4, 0xa4, 0x97, 0xa3, 0x96, 
+  0x9a, 0x9a, 0x94, 0x94, 0x94, 0x91, 0x91, 0x91, 0x8a, 0x8a, 0x8a, 0x89, 0x4d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x49, 0x94, 0x9a, 0x9a, 0x96, 0x97, 0x97, 0x97, 0x9c, 0xa2, 0x9d, 0xa0, 0xa0, 0xa0, 0xa0, 0x9d, 
+  0x9d, 0x87, 0x9d, 0x87, 0x9d, 0x9d, 0x9d, 0x9d, 0xa2, 0x9c, 0x9c, 0xa4, 0xa4, 0x97, 0xa3, 0x96, 
+  0x9a, 0x9a, 0x94, 0x94, 0x94, 0x91, 0x91, 0x91, 0x8a, 0x8a, 0x8a, 0x89, 0x4d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x94, 0x94, 0x9a, 0x96, 0xa3, 0x97, 0xa4, 0x9c, 0x9c, 0xa2, 0xa2, 0x9d, 0x9d, 0x9d, 0xa0, 
+  0xa0, 0x9d, 0xa0, 0xa0, 0xa0, 0xa0, 0x9d, 0xa2, 0xa2, 0xa2, 0x9c, 0xa4, 0x97, 0x97, 0x96, 0x96, 
+  0x96, 0x9a, 0x9a, 0x94, 0x94, 0x95, 0x95, 0x91, 0xb0, 0x8a, 0x4d, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8a, 0x94, 0x9a, 0x9a, 0xa3, 0xa3, 0xa4, 0xa4, 0x9c, 0x9c, 0xa2, 0x9d, 0x9d, 0x9d, 0x9d, 
+  0xa0, 0x9d, 0x9d, 0x9d, 0x9d, 0x9d, 0xa2, 0x9c, 0x9c, 0x9c, 0x97, 0x97, 0xa4, 0xa3, 0xa3, 0x96, 
+  0xa5, 0x9a, 0x9a, 0x94, 0x94, 0x91, 0x95, 0x8b, 0x5c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x49, 0x6b, 0xa5, 0x9a, 0x96, 0x97, 0x97, 0xa4, 0x9c, 0x9c, 0xa2, 0xa2, 0x9d, 0x9d, 
+  0x9d, 0xa0, 0x9d, 0xa2, 0xa2, 0xa2, 0x9c, 0xa2, 0x9c, 0x9c, 0xa4, 0x97, 0xa3, 0xa3, 0x96, 0xa5, 
+  0x9a, 0x9a, 0x94, 0x94, 0x95, 0x4e, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x49, 0x6b, 0xa5, 0x9a, 0x96, 0x97, 0x97, 0xa4, 0x9c, 0x9c, 0xa2, 0xa2, 0x9d, 0x9d, 
+  0x9d, 0xa0, 0x9d, 0xa2, 0xa2, 0xa2, 0x9c, 0xa2, 0x9c, 0x9c, 0xa4, 0x97, 0xa3, 0xa3, 0x96, 0xa5, 
+  0x9a, 0x9a, 0x94, 0x94, 0x95, 0x4e, 0x71, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x6b, 0x91, 0x97, 0x97, 0xa4, 0x9c, 0x9c, 0x9c, 0xa2, 0xa2, 0x9c, 
+  0x9c, 0xa2, 0x9d, 0xa2, 0xa2, 0xa2, 0x9c, 0xa2, 0xa4, 0x9c, 0xa4, 0x97, 0x97, 0x96, 0x96, 0x96, 
+  0x9a, 0xb0, 0x4e, 0x49, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x8b, 0x95, 0x97, 0x9c, 0x9c, 0x9c, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0x9c, 0x9c, 0x9c, 0xa2, 0xa4, 0xa4, 0xa4, 0x97, 0x97, 0x96, 0x8b, 0x8b, 0x4d, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x89, 0x89, 
+  0x8b, 0x8b, 0x89, 0x9b, 0x89, 0x8b, 0x8b, 0x89, 0x8b, 0x4d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x89, 0x89, 
+  0x8b, 0x8b, 0x89, 0x9b, 0x89, 0x8b, 0x8b, 0x89, 0x8b, 0x4d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x26, 0x21, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x28, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x24, 0x27, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x25, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x25, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x25, 0x28, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x2a, 0x2d, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x2a, 0x30, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x25, 0x25, 0x28, 
+  0x28, 0x28, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 
+  0x33, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x35, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x34, 0x36, 0x34, 0x34, 0x22, 0x25, 0x22, 0x22, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x35, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x34, 0x36, 0x34, 0x34, 0x22, 0x25, 0x22, 0x22, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x26, 0x23, 0x33, 
+  0x33, 0x31, 0x33, 0x2f, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x21, 0x37, 0x38, 0x38, 0x39, 0x38, 0x3a, 0x39, 0x38, 0x38, 0x3a, 0x39, 0x36, 0x23, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x26, 0x26, 0x23, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x26, 
+  0x21, 0x38, 0x3a, 0x2a, 0x3b, 0x3b, 0x3b, 0x3b, 0x2a, 0x2a, 0x2a, 0x38, 0x38, 0x39, 0x3a, 0x3a, 
+  0x3c, 0x36, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x26, 0x29, 0x23, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x21, 0x38, 
+  0x2a, 0x3b, 0x3b, 0x24, 0x37, 0x37, 0x3d, 0x37, 0x3d, 0x3d, 0x37, 0x3b, 0x3b, 0x3a, 0x38, 0x38, 
+  0x3e, 0x39, 0x3e, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x26, 0x29, 0x23, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x21, 0x38, 
+  0x2a, 0x3b, 0x3b, 0x24, 0x37, 0x37, 0x3d, 0x37, 0x3d, 0x3d, 0x37, 0x3b, 0x3b, 0x3a, 0x38, 0x38, 
+  0x3e, 0x39, 0x3e, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x3f, 0x29, 0x29, 0x26, 0x23, 0x23, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2f, 0x2c, 0x2c, 0x26, 0x38, 0x2a, 0x3d, 
+  0x32, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41, 0x40, 0x40, 0x37, 0x37, 0x3b, 0x3b, 0x2a, 
+  0x38, 0x39, 0x3e, 0x3e, 0x42, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2d, 0x3f, 0x3f, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x2f, 0x31, 0x2f, 0x31, 0x2f, 0x2c, 0x2c, 0x29, 0x43, 0x44, 0x45, 0x2b, 
+  0x46, 0x47, 0x48, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x40, 0x40, 0x40, 0x42, 0x40, 0x37, 0x3b, 
+  0x3b, 0x4a, 0x39, 0x39, 0x3e, 0x45, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x30, 0x2d, 0x3f, 0x3f, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x3c, 0x43, 0x45, 0x47, 0x47, 0x47, 
+  0x4b, 0x4c, 0x4b, 0x36, 0x34, 0x4d, 0x34, 0x4e, 0x34, 0x49, 0x49, 0x49, 0x24, 0x40, 0x40, 0x32, 
+  0x3b, 0x4f, 0x2a, 0x39, 0x39, 0x39, 0x39, 0x26, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 0x2c, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x30, 0x2d, 0x3f, 0x3f, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x3c, 0x43, 0x45, 0x47, 0x47, 0x47, 
+  0x4b, 0x4c, 0x4b, 0x36, 0x34, 0x4d, 0x34, 0x4e, 0x34, 0x49, 0x49, 0x49, 0x24, 0x40, 0x40, 0x32, 
+  0x3b, 0x4f, 0x2a, 0x39, 0x39, 0x39, 0x39, 0x26, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 0x2c, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 0x29, 0x29, 0x26, 0x26, 
+  0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x31, 0x29, 0x4f, 0x46, 0x50, 0x47, 0x51, 0x51, 
+  0x52, 0x4c, 0x52, 0x52, 0x53, 0x52, 0x52, 0x54, 0x4d, 0x4d, 0x55, 0x36, 0x51, 0x56, 0x41, 0x24, 
+  0x3d, 0x3c, 0x4f, 0x43, 0x39, 0x57, 0x57, 0x39, 0x28, 0x25, 0x28, 0x28, 0x28, 0x2c, 0x28, 0x2c, 
+  0x28, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x30, 0x30, 0x2d, 0x29, 0x29, 0x26, 0x26, 0x26, 
+  0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x3f, 0x4f, 0x58, 0x47, 0x4b, 0x52, 0x54, 0x59, 
+  0x59, 0x52, 0x5a, 0x5b, 0x5a, 0x5a, 0x5c, 0x5d, 0x5e, 0x55, 0x4d, 0x55, 0x4d, 0x4e, 0x5f, 0x49, 
+  0x41, 0x46, 0x44, 0x4f, 0x38, 0x60, 0x57, 0x39, 0x42, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 0x29, 0x26, 0x23, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x61, 0x42, 0x4b, 0x4b, 0x59, 0x29, 0x62, 0x5d, 
+  0x5e, 0x5a, 0x5a, 0x63, 0x5a, 0x5e, 0x64, 0x64, 0x5e, 0x64, 0x5e, 0x65, 0x55, 0x55, 0x4d, 0x49, 
+  0x21, 0x24, 0x24, 0x37, 0x66, 0x43, 0x39, 0x3e, 0x39, 0x21, 0x28, 0x28, 0x28, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 0x29, 0x26, 0x23, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x61, 0x42, 0x4b, 0x4b, 0x59, 0x29, 0x62, 0x5d, 
+  0x5e, 0x5a, 0x5a, 0x63, 0x5a, 0x5e, 0x64, 0x64, 0x5e, 0x64, 0x5e, 0x65, 0x55, 0x55, 0x4d, 0x49, 
+  0x21, 0x24, 0x24, 0x37, 0x66, 0x43, 0x39, 0x3e, 0x39, 0x21, 0x28, 0x28, 0x28, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x21, 0x34, 0x30, 0x30, 0x2e, 0x2d, 0x3f, 0x29, 0x29, 0x26, 
+  0x26, 0x23, 0x23, 0x33, 0x33, 0x33, 0x33, 0x3c, 0x46, 0x56, 0x34, 0x5c, 0x55, 0x67, 0x64, 0x64, 
+  0x68, 0x68, 0x69, 0x64, 0x6a, 0x6b, 0x68, 0x68, 0x64, 0x68, 0x5e, 0x5e, 0x5d, 0x5d, 0x4d, 0x56, 
+  0x56, 0x6c, 0x40, 0x41, 0x37, 0x2a, 0x4a, 0x39, 0x57, 0x39, 0x26, 0x28, 0x28, 0x28, 0x2c, 0x2c, 
+  0x2f, 0x35, 0x20, 0x20, 0x20, 0x20, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x21, 0x21, 0x34, 0x30, 0x2e, 0x2e, 0x3f, 0x3f, 0x29, 0x29, 
+  0x26, 0x26, 0x23, 0x23, 0x33, 0x33, 0x3f, 0x6d, 0x47, 0x34, 0x54, 0x67, 0x67, 0x6e, 0x68, 0x6b, 
+  0x6b, 0x6b, 0x6b, 0x6a, 0x6a, 0x6b, 0x6a, 0x6b, 0x6b, 0x68, 0x68, 0x64, 0x5e, 0x5e, 0x65, 0x26, 
+  0x6f, 0x4e, 0x49, 0x40, 0x3c, 0x37, 0x43, 0x3e, 0x39, 0x3e, 0x45, 0x28, 0x2c, 0x2c, 0x28, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x79, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x36, 0x34, 0x30, 0x2e, 0x2e, 0x3f, 0x29, 0x29, 0x26, 
+  0x23, 0x26, 0x23, 0x23, 0x33, 0x33, 0x3c, 0x46, 0x54, 0x70, 0x5d, 0x5e, 0x68, 0x6b, 0x6b, 0x6a, 
+  0x6a, 0x71, 0x71, 0x71, 0x71, 0x6a, 0x6a, 0x71, 0x6a, 0x6a, 0x6b, 0x68, 0x64, 0x5e, 0x5e, 0x55, 
+  0x55, 0x4d, 0x49, 0x41, 0x4b, 0x3c, 0x4f, 0x61, 0x39, 0x39, 0x3e, 0x2a, 0x24, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2f, 0x2b, 0x20, 0x20, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x36, 0x34, 0x30, 0x2e, 0x2e, 0x3f, 0x29, 0x29, 0x26, 
+  0x23, 0x26, 0x23, 0x23, 0x33, 0x33, 0x3c, 0x46, 0x54, 0x70, 0x5d, 0x5e, 0x68, 0x6b, 0x6b, 0x6a, 
+  0x6a, 0x71, 0x71, 0x71, 0x71, 0x6a, 0x6a, 0x71, 0x6a, 0x6a, 0x6b, 0x68, 0x64, 0x5e, 0x5e, 0x55, 
+  0x55, 0x4d, 0x49, 0x41, 0x4b, 0x3c, 0x4f, 0x61, 0x39, 0x39, 0x3e, 0x2a, 0x24, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2f, 0x2b, 0x20, 0x20, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x24, 0x21, 0x36, 0x34, 0x30, 0x2d, 0x3f, 0x3f, 0x29, 0x29, 
+  0x29, 0x23, 0x23, 0x23, 0x23, 0x31, 0x72, 0x34, 0x4d, 0x5e, 0x64, 0x68, 0x6b, 0x6a, 0x71, 0x73, 
+  0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x71, 0x71, 0x6a, 0x6a, 0x6b, 0x68, 0x68, 0x5e, 0x5e, 
+  0x65, 0x4d, 0x49, 0x49, 0x48, 0x46, 0x3c, 0x43, 0x3e, 0x39, 0x39, 0x3e, 0x20, 0x20, 0x2a, 0x24, 
+  0x2c, 0x2c, 0x24, 0x20, 0x79, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x21, 0x36, 0x36, 0x30, 0x2d, 0x2e, 0x3f, 0x29, 0x26, 
+  0x29, 0x23, 0x23, 0x23, 0x23, 0x36, 0x2b, 0x5f, 0x65, 0x64, 0x64, 0x6b, 0x6a, 0x71, 0x73, 0x73, 
+  0x73, 0x74, 0x75, 0x75, 0x74, 0x75, 0x73, 0x73, 0x73, 0x71, 0x71, 0x6a, 0x6b, 0x68, 0x64, 0x5e, 
+  0x5e, 0x65, 0x4d, 0x49, 0x54, 0x46, 0x3c, 0x4f, 0x61, 0x3e, 0x3e, 0x3e, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x2b, 0x2b, 0x57, 0x4a, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x36, 0x34, 0x30, 0x2e, 0x2d, 0x2e, 0x29, 0x29, 
+  0x29, 0x26, 0x26, 0x23, 0x26, 0x2b, 0x6c, 0x5c, 0x2d, 0x67, 0x68, 0x6a, 0x73, 0x73, 0x73, 0x75, 
+  0x75, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x75, 0x73, 0x73, 0x68, 0x6a, 0x76, 0x6a, 0x64, 0x64, 
+  0x64, 0x5d, 0x55, 0x4d, 0x49, 0x4b, 0x41, 0x58, 0x43, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x57, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x36, 0x34, 0x30, 0x2e, 0x2d, 0x2e, 0x29, 0x29, 
+  0x29, 0x26, 0x26, 0x23, 0x26, 0x2b, 0x6c, 0x5c, 0x2d, 0x67, 0x68, 0x6a, 0x73, 0x73, 0x73, 0x75, 
+  0x75, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x75, 0x73, 0x73, 0x68, 0x6a, 0x76, 0x6a, 0x64, 0x64, 
+  0x64, 0x5d, 0x55, 0x4d, 0x49, 0x4b, 0x41, 0x58, 0x43, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x57, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x36, 0x36, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 0x29, 
+  0x29, 0x26, 0x23, 0x23, 0x23, 0x32, 0x36, 0x77, 0x5d, 0x28, 0x6a, 0x6a, 0x73, 0x75, 0x74, 0x74, 
+  0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x75, 0x75, 0x74, 0x75, 0x75, 0x73, 0x6a, 0x6a, 0x6a, 0x64, 
+  0x5e, 0x5e, 0x4d, 0x55, 0x4c, 0x47, 0x24, 0x44, 0x4f, 0x60, 0x57, 0x3e, 0x79, 0x20, 0x20, 0x20, 
+  0x20, 0x79, 0x4a, 0x57, 0x57, 0x4a, 0x57, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x34, 0x30, 0x30, 0x2d, 0x2e, 0x3f, 0x3f, 
+  0x29, 0x29, 0x29, 0x26, 0x34, 0x40, 0x4d, 0x59, 0x68, 0x6b, 0x6a, 0x73, 0x75, 0x75, 0x74, 0x7a, 
+  0x78, 0x7a, 0x7a, 0x78, 0x78, 0x78, 0x75, 0x73, 0x74, 0x74, 0x75, 0x73, 0x71, 0x6a, 0x6b, 0x6b, 
+  0x64, 0x64, 0x5e, 0x4d, 0x56, 0x7b, 0x46, 0x42, 0x4f, 0x4a, 0x39, 0x39, 0x79, 0x20, 0x20, 0x20, 
+  0x57, 0x87, 0x57, 0x4a, 0x4a, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x2b, 0x21, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 
+  0x29, 0x26, 0x26, 0x23, 0x37, 0x40, 0x4d, 0x2d, 0x5a, 0x2c, 0x6a, 0x73, 0x74, 0x74, 0x78, 0x73, 
+  0x78, 0x73, 0x7c, 0x7a, 0x7c, 0x7c, 0x7d, 0x78, 0x78, 0x75, 0x74, 0x73, 0x73, 0x71, 0x6a, 0x6a, 
+  0x64, 0x5e, 0x5e, 0x65, 0x4d, 0x53, 0x47, 0x42, 0x66, 0x43, 0x3e, 0x39, 0x3e, 0x20, 0x79, 0x4f, 
+  0x4a, 0x4a, 0x4a, 0x4a, 0x57, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x2b, 0x21, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x3f, 0x3f, 
+  0x29, 0x26, 0x26, 0x23, 0x37, 0x40, 0x4d, 0x2d, 0x5a, 0x2c, 0x6a, 0x73, 0x74, 0x74, 0x78, 0x73, 
+  0x78, 0x73, 0x7c, 0x7a, 0x7c, 0x7c, 0x7d, 0x78, 0x78, 0x75, 0x74, 0x73, 0x73, 0x71, 0x6a, 0x6a, 
+  0x64, 0x5e, 0x5e, 0x65, 0x4d, 0x53, 0x47, 0x42, 0x66, 0x43, 0x3e, 0x39, 0x3e, 0x20, 0x79, 0x4f, 
+  0x4a, 0x4a, 0x4a, 0x4a, 0x57, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x36, 0x36, 0x30, 0x30, 0x2d, 0x2e, 0x3f, 
+  0x3f, 0x3f, 0x36, 0x3a, 0x2a, 0x5f, 0x55, 0x5d, 0x76, 0x76, 0x68, 0x73, 0x75, 0x7a, 0x7a, 0x7a, 
+  0x7d, 0x7a, 0x7c, 0x7e, 0x7e, 0x7f, 0x7f, 0x7e, 0x7a, 0x74, 0x74, 0x75, 0x73, 0x71, 0x6a, 0x6b, 
+  0x68, 0x64, 0x5e, 0x65, 0x4d, 0x36, 0x7b, 0x46, 0x58, 0x43, 0x39, 0x3e, 0x39, 0x6d, 0x4f, 0x6d, 
+  0x43, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x2b, 0x21, 0x36, 0x30, 0x30, 0x30, 0x2e, 0x3f, 
+  0x29, 0x36, 0x20, 0x20, 0x2a, 0x49, 0x55, 0x64, 0x5a, 0x76, 0x80, 0x81, 0x75, 0x78, 0x73, 0x7d, 
+  0x82, 0x7a, 0x83, 0x7f, 0x84, 0x84, 0x84, 0x85, 0x7d, 0x86, 0x73, 0x74, 0x75, 0x73, 0x6a, 0x6a, 
+  0x6b, 0x68, 0x5e, 0x65, 0x4d, 0x34, 0x47, 0x46, 0x58, 0x43, 0x39, 0x87, 0x50, 0x88, 0x4f, 0x6d, 
+  0x87, 0x57, 0x57, 0x87, 0x57, 0x57, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x36, 0x34, 0x34, 0x30, 0x30, 0x2d, 0x3f, 
+  0x3a, 0x20, 0x20, 0x20, 0x27, 0x5f, 0x65, 0x68, 0x6b, 0x69, 0x89, 0x80, 0x75, 0x74, 0x7c, 0x7c, 
+  0x86, 0x7c, 0x7e, 0x85, 0x84, 0x8a, 0x8a, 0x84, 0x7f, 0x7c, 0x78, 0x74, 0x73, 0x73, 0x73, 0x6a, 
+  0x68, 0x64, 0x5e, 0x5e, 0x4d, 0x5c, 0x47, 0x42, 0x58, 0x58, 0x8b, 0x50, 0x8b, 0x8c, 0x4f, 0x6d, 
+  0x6d, 0x87, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x36, 0x34, 0x34, 0x30, 0x30, 0x2d, 0x3f, 
+  0x3a, 0x20, 0x20, 0x20, 0x27, 0x5f, 0x65, 0x68, 0x6b, 0x69, 0x89, 0x80, 0x75, 0x74, 0x7c, 0x7c, 
+  0x86, 0x7c, 0x7e, 0x85, 0x84, 0x8a, 0x8a, 0x84, 0x7f, 0x7c, 0x78, 0x74, 0x73, 0x73, 0x73, 0x6a, 
+  0x68, 0x64, 0x5e, 0x5e, 0x4d, 0x5c, 0x47, 0x42, 0x58, 0x58, 0x8b, 0x50, 0x8b, 0x8c, 0x4f, 0x6d, 
+  0x6d, 0x87, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x21, 0x36, 0x36, 0x30, 0x30, 0x2d, 0x2a, 
+  0x20, 0x20, 0x20, 0x20, 0x2a, 0x4e, 0x65, 0x64, 0x6b, 0x71, 0x69, 0x81, 0x7a, 0x78, 0x7a, 0x7c, 
+  0x7c, 0x7c, 0x7f, 0x84, 0x8a, 0x8a, 0x8a, 0x8a, 0x85, 0x7d, 0x78, 0x74, 0x75, 0x73, 0x71, 0x6a, 
+  0x6b, 0x68, 0x5e, 0x65, 0x4d, 0x4b, 0x53, 0x47, 0x8d, 0x8e, 0x8f, 0x50, 0x50, 0x8c, 0x72, 0x4f, 
+  0x43, 0x4a, 0x57, 0x4a, 0x4a, 0x57, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2b, 0x24, 0x21, 0x34, 0x34, 0x30, 0x3a, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x3a, 0x5f, 0x65, 0x64, 0x6a, 0x90, 0x91, 0x73, 0x74, 0x7a, 0x7c, 0x7a, 
+  0x7d, 0x7a, 0x7f, 0x85, 0x8a, 0x8a, 0x8a, 0x84, 0x85, 0x7c, 0x78, 0x74, 0x75, 0x73, 0x71, 0x6a, 
+  0x6b, 0x64, 0x5e, 0x2f, 0x4c, 0x92, 0x93, 0x94, 0x92, 0x92, 0x8d, 0x8b, 0x8b, 0x8c, 0x4f, 0x6d, 
+  0x6d, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x21, 0x36, 0x5c, 0x53, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x55, 0x64, 0x6b, 0x71, 0x73, 0x86, 0x75, 0x78, 0x7a, 0x86, 
+  0x7c, 0x7c, 0x7c, 0x7f, 0x84, 0x84, 0x84, 0x85, 0x7f, 0x7c, 0x78, 0x74, 0x75, 0x73, 0x71, 0x6a, 
+  0x6a, 0x68, 0x2c, 0x63, 0x95, 0x63, 0x93, 0x96, 0x92, 0x92, 0x8d, 0x8b, 0x50, 0x8c, 0x72, 0x6d, 
+  0x43, 0x4a, 0x57, 0x57, 0x87, 0x57, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x21, 0x36, 0x5c, 0x53, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x55, 0x64, 0x6b, 0x71, 0x73, 0x86, 0x75, 0x78, 0x7a, 0x86, 
+  0x7c, 0x7c, 0x7c, 0x7f, 0x84, 0x84, 0x84, 0x85, 0x7f, 0x7c, 0x78, 0x74, 0x75, 0x73, 0x71, 0x6a, 
+  0x6a, 0x68, 0x2c, 0x63, 0x95, 0x63, 0x93, 0x96, 0x92, 0x92, 0x8d, 0x8b, 0x50, 0x8c, 0x72, 0x6d, 
+  0x43, 0x4a, 0x57, 0x57, 0x87, 0x57, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2b, 0x21, 0x34, 0x32, 0x97, 0x98, 0x99, 
+  0x6d, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4d, 0x64, 0x6b, 0x6a, 0x71, 0x86, 0x7a, 0x7a, 0x7a, 0x7d, 
+  0x86, 0x86, 0x7c, 0x83, 0x7f, 0x85, 0x85, 0x7f, 0x7c, 0x78, 0x78, 0x74, 0x75, 0x73, 0x6a, 0x22, 
+  0x76, 0x97, 0x9a, 0x9a, 0x9b, 0x99, 0x94, 0x94, 0x92, 0x8e, 0x8d, 0x8f, 0x8b, 0x8b, 0x88, 0x4f, 
+  0x6d, 0x87, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x24, 0x36, 0x20, 0x94, 0x98, 0x9c, 
+  0x9d, 0x9e, 0x9a, 0x8e, 0x4f, 0x27, 0x4d, 0x5e, 0x68, 0x6a, 0x73, 0x73, 0x75, 0x74, 0x7a, 0x7a, 
+  0x7d, 0x86, 0x82, 0x82, 0x82, 0x78, 0x7c, 0x7c, 0x7a, 0x7a, 0x73, 0x81, 0x81, 0x9f, 0x9f, 0x9c, 
+  0x97, 0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x94, 0x92, 0x8e, 0x8d, 0x8f, 0x8b, 0x8c, 0x88, 0x4f, 
+  0x43, 0x87, 0x4a, 0x57, 0x4a, 0x57, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2b, 0x24, 0x38, 0x20, 0x8f, 0x97, 0x9c, 
+  0x9f, 0x9f, 0xa0, 0xa1, 0xa2, 0xa2, 0xa3, 0x81, 0x81, 0x81, 0xa4, 0x86, 0xa4, 0x75, 0x7a, 0x7a, 
+  0x7c, 0x7e, 0x82, 0xa5, 0xa6, 0xa4, 0x86, 0x82, 0xa1, 0xa7, 0xa7, 0xa8, 0x9e, 0x9d, 0x9c, 0x98, 
+  0xa9, 0x97, 0xaa, 0x9b, 0x9b, 0x99, 0x93, 0x94, 0x92, 0x92, 0x8d, 0x50, 0x8b, 0x8b, 0x88, 0x4f, 
+  0x6d, 0x43, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x57, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2b, 0x24, 0x38, 0x20, 0x8f, 0x97, 0x9c, 
+  0x9f, 0x9f, 0xa0, 0xa1, 0xa2, 0xa2, 0xa3, 0x81, 0x81, 0x81, 0xa4, 0x86, 0xa4, 0x75, 0x7a, 0x7a, 
+  0x7c, 0x7e, 0x82, 0xa5, 0xa6, 0xa4, 0x86, 0x82, 0xa1, 0xa7, 0xa7, 0xa8, 0x9e, 0x9d, 0x9c, 0x98, 
+  0xa9, 0x97, 0xaa, 0x9b, 0x9b, 0x99, 0x93, 0x94, 0x92, 0x92, 0x8d, 0x50, 0x8b, 0x8b, 0x88, 0x4f, 
+  0x6d, 0x43, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x57, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x37, 0x20, 0x20, 0x8b, 0x97, 0x98, 
+  0x9d, 0x9f, 0x9e, 0xa7, 0xa1, 0xab, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa5, 0xa6, 0xa5, 0xa6, 0xa5, 
+  0xa6, 0xa5, 0xa5, 0xa5, 0xa3, 0xa5, 0xa3, 0xa3, 0xa3, 0xa1, 0xa7, 0xa0, 0x9f, 0x9d, 0x9c, 0x98, 
+  0xa9, 0x97, 0xaa, 0x9a, 0x9b, 0x99, 0x93, 0x94, 0x92, 0x92, 0x8d, 0x8f, 0x8b, 0x8c, 0x4f, 0x4f, 
+  0x6d, 0x87, 0x4a, 0x57, 0x87, 0x57, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x39, 0x20, 0x20, 0x20, 0x9a, 0xa9, 
+  0x9c, 0x9d, 0x9e, 0xa0, 0xa1, 0xa2, 0xa2, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 
+  0xa5, 0xa6, 0xa6, 0xa5, 0xa5, 0xa3, 0xa3, 0xab, 0xa1, 0xa7, 0xa0, 0x9e, 0x9e, 0x9f, 0x98, 0x9c, 
+  0xa9, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x93, 0x94, 0x96, 0x8e, 0x8f, 0x8f, 0x8b, 0x8b, 0x8c, 0x4f, 
+  0x6d, 0x6d, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0x9f, 0x9e, 0x9e, 0xa7, 0xa1, 0xa2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa6, 0xa5, 
+  0xa5, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0xa1, 0xa7, 0xa0, 0xa0, 0x9f, 0x9f, 0x98, 0x98, 
+  0x97, 0x97, 0xaa, 0x95, 0x9b, 0x99, 0x99, 0x96, 0x92, 0x92, 0x8d, 0x8f, 0x8b, 0x8b, 0x88, 0x4f, 
+  0x6d, 0x87, 0x4a, 0x57, 0x4a, 0x4a, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0x9f, 0x9e, 0x9e, 0xa7, 0xa1, 0xa2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa5, 0xa5, 0xa5, 0xa6, 0xa5, 
+  0xa5, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0xa1, 0xa7, 0xa0, 0xa0, 0x9f, 0x9f, 0x98, 0x98, 
+  0x97, 0x97, 0xaa, 0x95, 0x9b, 0x99, 0x99, 0x96, 0x92, 0x92, 0x8d, 0x8f, 0x8b, 0x8b, 0x88, 0x4f, 
+  0x6d, 0x87, 0x4a, 0x57, 0x4a, 0x4a, 0x57, 0x57, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0x97, 
+  0x98, 0x98, 0x9f, 0x9e, 0xa0, 0xa7, 0xa2, 0xa2, 0xa2, 0xa3, 0xa5, 0xa3, 0xa5, 0xa5, 0xa3, 0xa5, 
+  0xa3, 0xa5, 0xa5, 0xa5, 0xa3, 0xa3, 0xa2, 0xa2, 0xa1, 0xa7, 0xa0, 0x9e, 0x9d, 0x9d, 0x9c, 0x98, 
+  0x98, 0x97, 0x9a, 0x9b, 0x9b, 0x99, 0x93, 0x94, 0x96, 0x92, 0x8e, 0x8d, 0x8b, 0x8b, 0x88, 0x72, 
+  0x4f, 0x6d, 0x4a, 0x4a, 0x4a, 0x57, 0x87, 0x4a, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0xaa, 
+  0xa9, 0x98, 0x9d, 0x9f, 0xa0, 0xa0, 0xa1, 0xa2, 0xa3, 0xa2, 0xa3, 0xa3, 0xa3, 0xa5, 0xa3, 0xa5, 
+  0xa5, 0xa3, 0xa3, 0xa3, 0xab, 0xab, 0xa1, 0xa1, 0xa1, 0xa7, 0xa0, 0xa0, 0x9f, 0x9d, 0x9c, 0xa9, 
+  0xa9, 0x97, 0x97, 0x9a, 0x9b, 0x99, 0x94, 0x94, 0x92, 0x92, 0x8f, 0x8f, 0x8f, 0x8b, 0x8c, 0x4f, 
+  0x6d, 0x6d, 0x4a, 0x57, 0x4a, 0x4a, 0x4a, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x9a, 
+  0x97, 0x98, 0x9c, 0x9d, 0x9e, 0xa0, 0xa7, 0xa1, 0xa2, 0xab, 0xa3, 0xa3, 0xa3, 0xa3, 0xa5, 0xa3, 
+  0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0xa2, 0xa2, 0xa7, 0xa7, 0xa0, 0x9e, 0x9e, 0x9d, 0x9d, 0x98, 0x98, 
+  0x97, 0xaa, 0x9a, 0x95, 0x9b, 0x9b, 0x99, 0x94, 0x96, 0x92, 0x8d, 0x8d, 0x50, 0x8b, 0x8c, 0x72, 
+  0x4f, 0x87, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x9a, 
+  0x97, 0x98, 0x9c, 0x9d, 0x9e, 0xa0, 0xa7, 0xa1, 0xa2, 0xab, 0xa3, 0xa3, 0xa3, 0xa3, 0xa5, 0xa3, 
+  0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0xa2, 0xa2, 0xa7, 0xa7, 0xa0, 0x9e, 0x9e, 0x9d, 0x9d, 0x98, 0x98, 
+  0x97, 0xaa, 0x9a, 0x95, 0x9b, 0x9b, 0x99, 0x94, 0x96, 0x92, 0x8d, 0x8d, 0x50, 0x8b, 0x8c, 0x72, 
+  0x4f, 0x87, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x97, 0xa9, 0x9c, 0x9d, 0x9f, 0xa0, 0xa0, 0xa7, 0xa1, 0xa2, 0xab, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 
+  0xa3, 0xa3, 0xab, 0xa3, 0xa2, 0xa1, 0xa1, 0xa7, 0xa7, 0xa0, 0x9e, 0x9e, 0x9f, 0x9d, 0x98, 0x98, 
+  0x97, 0x97, 0x9a, 0x9a, 0x9b, 0x99, 0x94, 0x94, 0x92, 0x92, 0x8d, 0x8f, 0x8b, 0x8b, 0x8c, 0x88, 
+  0x4f, 0x6d, 0x87, 0x4a, 0x57, 0x57, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x95, 
+  0x9a, 0x97, 0x98, 0x9c, 0x9d, 0x9e, 0xa0, 0xa0, 0xa7, 0xa1, 0xa1, 0xa1, 0xa2, 0xa2, 0xa3, 0xa3, 
+  0xa3, 0xab, 0xa2, 0xa2, 0xa1, 0xa1, 0xa1, 0xa8, 0xa0, 0xa0, 0x9e, 0x9f, 0x9d, 0x9c, 0x9c, 0xa9, 
+  0x97, 0x9a, 0x9a, 0x95, 0x9b, 0x63, 0x99, 0x94, 0x96, 0x92, 0x8e, 0x8f, 0x50, 0x8b, 0x8c, 0x72, 
+  0x4f, 0x43, 0x6d, 0x57, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 
+  0x9a, 0x97, 0x98, 0x98, 0x9d, 0x9d, 0x9e, 0xa0, 0xa7, 0xa7, 0xa1, 0xa1, 0xab, 0xa1, 0xa2, 0xab, 
+  0xa2, 0xab, 0xa1, 0xa2, 0xa1, 0xa1, 0xa7, 0xa7, 0xa0, 0xa0, 0x9f, 0x9f, 0x9d, 0x98, 0x98, 0x98, 
+  0xa9, 0xaa, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x92, 0x8e, 0x8e, 0x8f, 0x50, 0x8b, 0x88, 0x72, 
+  0x6d, 0x6d, 0x43, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 
+  0x9a, 0x97, 0x98, 0x98, 0x9d, 0x9d, 0x9e, 0xa0, 0xa7, 0xa7, 0xa1, 0xa1, 0xab, 0xa1, 0xa2, 0xab, 
+  0xa2, 0xab, 0xa1, 0xa2, 0xa1, 0xa1, 0xa7, 0xa7, 0xa0, 0xa0, 0x9f, 0x9f, 0x9d, 0x98, 0x98, 0x98, 
+  0xa9, 0xaa, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x92, 0x8e, 0x8e, 0x8f, 0x50, 0x8b, 0x88, 0x72, 
+  0x6d, 0x6d, 0x43, 0x4a, 0x57, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 
+  0x95, 0xaa, 0xa9, 0x98, 0x9c, 0x9f, 0x9e, 0x9e, 0xa0, 0xa7, 0xa7, 0xa1, 0xa1, 0xa2, 0xa1, 0xa1, 
+  0xa2, 0xa1, 0xa2, 0xa1, 0xa1, 0xa7, 0xa7, 0xa0, 0x9e, 0x9e, 0x9e, 0x9d, 0x9c, 0x9c, 0x98, 0xa9, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x63, 0x94, 0x94, 0x96, 0x92, 0x8d, 0x8d, 0x8f, 0x8b, 0x8c, 0x4f, 
+  0x4f, 0x6d, 0x87, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x95, 0x9a, 0x97, 0x98, 0x98, 0x9d, 0x9f, 0x9e, 0xa0, 0xa0, 0xa7, 0xa7, 0xa1, 0xa1, 0xa1, 0xa1, 
+  0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa7, 0xa0, 0xa0, 0x9e, 0x9f, 0x9f, 0x9d, 0x98, 0xa9, 0x97, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x63, 0x94, 0x94, 0x92, 0x92, 0x8d, 0x8f, 0x50, 0x8b, 0x8b, 0x8c, 
+  0x4f, 0x6d, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9a, 0xaa, 0xa9, 0x98, 0x98, 0x9d, 0x9f, 0x9e, 0xa0, 0xa0, 0xa7, 0xa7, 0xa7, 0xa7, 0xa1, 
+  0xa7, 0xa1, 0xa8, 0xa7, 0xa0, 0xa0, 0xa0, 0xa0, 0x9e, 0x9e, 0x9f, 0x9d, 0x9c, 0x9c, 0x98, 0xa9, 
+  0x97, 0x97, 0x9a, 0x9a, 0x99, 0x99, 0x99, 0x94, 0x96, 0x92, 0x8d, 0x8d, 0x8f, 0x50, 0x8c, 0x88, 
+  0x4f, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9a, 0xaa, 0xa9, 0x98, 0x98, 0x9d, 0x9f, 0x9e, 0xa0, 0xa0, 0xa7, 0xa7, 0xa7, 0xa7, 0xa1, 
+  0xa7, 0xa1, 0xa8, 0xa7, 0xa0, 0xa0, 0xa0, 0xa0, 0x9e, 0x9e, 0x9f, 0x9d, 0x9c, 0x9c, 0x98, 0xa9, 
+  0x97, 0x97, 0x9a, 0x9a, 0x99, 0x99, 0x99, 0x94, 0x96, 0x92, 0x8d, 0x8d, 0x8f, 0x50, 0x8c, 0x88, 
+  0x4f, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0x95, 0x9a, 0xa9, 0x98, 0x9c, 0x9d, 0x9d, 0x9f, 0x9e, 0xa0, 0xa0, 0xa0, 0xa1, 0xa7, 0xa1, 
+  0xa8, 0xa7, 0xa8, 0xa7, 0xa7, 0xa0, 0xa0, 0x9e, 0x9e, 0x9d, 0x9f, 0x9d, 0x9c, 0x98, 0x97, 0xa9, 
+  0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x94, 0x92, 0x92, 0x8d, 0x8d, 0x8f, 0x8b, 0x8c, 0x4f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8c, 0x9b, 0x9a, 0xaa, 0xa9, 0x98, 0x9c, 0x9d, 0x9d, 0x9e, 0x9f, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0xa7, 0xa7, 0xa0, 0xa0, 0xa0, 0x9e, 0xa0, 0x9e, 0x9f, 0x9d, 0x9d, 0x98, 0x98, 0x98, 0x97, 
+  0x97, 0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x94, 0x96, 0x92, 0x8d, 0x8f, 0x50, 0x50, 0x57, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x87, 0x9b, 0x9b, 0x9a, 0x97, 0xa9, 0x9c, 0x9c, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0xa0, 0xa0, 0x9e, 0x9e, 0xa0, 0x9e, 0x9f, 0x9f, 0x9d, 0x9d, 0x9c, 0x9c, 0xa9, 0x97, 0x97, 
+  0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x63, 0x94, 0x94, 0x92, 0x8e, 0x8e, 0x8f, 0x6d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x87, 0x9b, 0x9b, 0x9a, 0x97, 0xa9, 0x9c, 0x9c, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0xa0, 0xa0, 0x9e, 0x9e, 0xa0, 0x9e, 0x9f, 0x9f, 0x9d, 0x9d, 0x9c, 0x9c, 0xa9, 0x97, 0x97, 
+  0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x63, 0x94, 0x94, 0x92, 0x8e, 0x8e, 0x8f, 0x6d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9b, 0x9a, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x9d, 0x9d, 0x9d, 0x9f, 0x9e, 0x9e, 0x9e, 0x9e, 
+  0xa0, 0x9e, 0xa0, 0xa0, 0xa0, 0x9e, 0x9f, 0x9e, 0x9d, 0x9f, 0x9c, 0x9c, 0x98, 0x98, 0xa9, 0x97, 
+  0x97, 0x9a, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x94, 0x96, 0x92, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8e, 0x9b, 0x9b, 0x97, 0x97, 0xa9, 0x98, 0x9c, 0x9d, 0x9f, 0x9f, 0x9e, 0x9e, 0x9e, 0x9e, 
+  0xa0, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9f, 0x9f, 0x9d, 0x9d, 0x98, 0x9c, 0x98, 0x98, 0xa9, 0x97, 
+  0x97, 0x9a, 0x9b, 0x9b, 0x63, 0x99, 0x94, 0x8f, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x43, 0x8b, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x9c, 0x9d, 0x9d, 0x9f, 0x9f, 0x9e, 0x9e, 
+  0x9e, 0x9e, 0x9e, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9d, 0x9d, 0x9d, 0x98, 0x98, 0x97, 0x97, 0xaa, 
+  0x9a, 0x9a, 0x9a, 0x9b, 0x99, 0x8b, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x43, 0x8b, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x9c, 0x9d, 0x9d, 0x9f, 0x9f, 0x9e, 0x9e, 
+  0x9e, 0x9e, 0x9e, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9d, 0x9d, 0x9d, 0x98, 0x98, 0x97, 0x97, 0xaa, 
+  0x9a, 0x9a, 0x9a, 0x9b, 0x99, 0x8b, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8b, 0x94, 0x98, 0x98, 0x9c, 0x9d, 0x9c, 0x9d, 0x9f, 0x9f, 0x9d, 
+  0x9e, 0x9e, 0x9e, 0x9f, 0x9d, 0x9d, 0x9d, 0x9f, 0x9c, 0x9c, 0x98, 0x9c, 0xa9, 0x97, 0x97, 0x97, 
+  0x9a, 0x96, 0x8b, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x8f, 0x99, 0x9c, 0x9d, 0x9d, 0x9d, 0x9f, 
+  0x9f, 0x9f, 0x9f, 0x9d, 0x9f, 0x9f, 0x9d, 0x9c, 0x9d, 0x98, 0x9c, 0xa9, 0x98, 0x8f, 0x50, 0x43, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x8d, 0x8f, 
+  0x8d, 0x8d, 0x8d, 0x8e, 0x8f, 0x8d, 0x8f, 0x8d, 0x8d, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x8d, 0x8f, 
+  0x8d, 0x8d, 0x8d, 0x8e, 0x8f, 0x8d, 0x8f, 0x8d, 0x8d, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x21, 0x21, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x25, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x27, 0x28, 0x24, 
+  0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x27, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x29, 0x28, 0x28, 0x24, 0x28, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x27, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x29, 0x28, 0x28, 0x24, 0x28, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x27, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x2b, 0x2b, 0x2b, 0x28, 0x24, 0x28, 0x24, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x2a, 0x2c, 0x2d, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x24, 0x24, 0x28, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x2a, 0x30, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 
+  0x33, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x28, 0x28, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x33, 0x31, 0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x25, 0x34, 0x35, 0x34, 0x34, 0x22, 0x24, 0x22, 0x22, 0x24, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x33, 0x31, 0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x25, 0x34, 0x35, 0x34, 0x34, 0x22, 0x24, 0x22, 0x22, 0x24, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x25, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x34, 0x37, 0x38, 0x38, 0x36, 0x38, 0x36, 0x38, 0x38, 0x38, 0x36, 0x38, 0x34, 0x33, 
+  0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x25, 0x23, 0x33, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2f, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x29, 
+  0x35, 0x38, 0x38, 0x37, 0x26, 0x26, 0x26, 0x26, 0x2a, 0x2a, 0x2a, 0x38, 0x39, 0x38, 0x38, 0x36, 
+  0x37, 0x34, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x2b, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x25, 0x23, 0x23, 0x23, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x21, 0x36, 
+  0x2a, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3c, 0x3c, 0x3c, 0x3c, 0x26, 0x37, 0x2a, 0x38, 0x38, 
+  0x38, 0x38, 0x3d, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x25, 0x23, 0x23, 0x23, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x21, 0x36, 
+  0x2a, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3c, 0x3c, 0x3c, 0x3c, 0x26, 0x37, 0x2a, 0x38, 0x38, 
+  0x38, 0x38, 0x3d, 0x23, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x3e, 0x29, 0x29, 0x25, 0x25, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2b, 0x2f, 0x2b, 0x25, 0x38, 0x3f, 0x40, 
+  0x41, 0x41, 0x3c, 0x42, 0x43, 0x43, 0x43, 0x3c, 0x44, 0x3c, 0x3c, 0x3c, 0x3c, 0x2a, 0x26, 0x2a, 
+  0x45, 0x39, 0x45, 0x39, 0x41, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x2c, 0x3e, 0x3e, 0x25, 0x25, 0x25, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2d, 0x31, 0x2f, 0x2f, 0x2b, 0x29, 0x3f, 0x40, 0x46, 0x47, 
+  0x48, 0x49, 0x21, 0x4a, 0x4a, 0x4a, 0x4a, 0x44, 0x44, 0x44, 0x44, 0x4a, 0x3b, 0x3b, 0x3b, 0x3b, 
+  0x36, 0x4b, 0x39, 0x45, 0x4b, 0x37, 0x24, 0x24, 0x24, 0x28, 0x28, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2b, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2e, 0x2c, 0x3e, 0x3e, 0x29, 0x25, 0x25, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x40, 0x40, 0x4c, 0x48, 0x4d, 0x49, 
+  0x4d, 0x4e, 0x4d, 0x30, 0x4f, 0x50, 0x51, 0x50, 0x4f, 0x4a, 0x44, 0x52, 0x32, 0x32, 0x3b, 0x3b, 
+  0x53, 0x54, 0x36, 0x39, 0x39, 0x3d, 0x3d, 0x25, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2e, 0x2c, 0x3e, 0x3e, 0x29, 0x25, 0x25, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x40, 0x40, 0x4c, 0x48, 0x4d, 0x49, 
+  0x4d, 0x4e, 0x4d, 0x30, 0x4f, 0x50, 0x51, 0x50, 0x4f, 0x4a, 0x44, 0x52, 0x32, 0x32, 0x3b, 0x3b, 
+  0x53, 0x54, 0x36, 0x39, 0x39, 0x3d, 0x3d, 0x25, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x30, 0x2e, 0x3e, 0x3e, 0x29, 0x29, 0x25, 0x23, 
+  0x23, 0x23, 0x33, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x29, 0x37, 0x47, 0x32, 0x32, 0x55, 0x56, 
+  0x4e, 0x57, 0x57, 0x4e, 0x4e, 0x4e, 0x29, 0x4f, 0x30, 0x50, 0x50, 0x4f, 0x55, 0x4a, 0x4a, 0x58, 
+  0x27, 0x41, 0x54, 0x59, 0x3d, 0x39, 0x39, 0x39, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 0x28, 0x2b, 
+  0x2b, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x30, 0x30, 0x2c, 0x3e, 0x29, 0x29, 0x25, 0x25, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x3e, 0x26, 0x47, 0x5a, 0x2e, 0x4f, 0x4f, 0x3e, 
+  0x4e, 0x56, 0x56, 0x5b, 0x2c, 0x2b, 0x5c, 0x5c, 0x5d, 0x5d, 0x2c, 0x30, 0x5e, 0x50, 0x4a, 0x4a, 
+  0x32, 0x5f, 0x41, 0x40, 0x3f, 0x3d, 0x3d, 0x39, 0x37, 0x24, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x34, 0x30, 0x3e, 0x3e, 0x3e, 0x29, 0x29, 0x25, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x3f, 0x21, 0x52, 0x4f, 0x60, 0x5d, 0x5c, 0x61, 
+  0x3e, 0x2d, 0x31, 0x62, 0x62, 0x62, 0x63, 0x62, 0x62, 0x5c, 0x61, 0x5e, 0x60, 0x2c, 0x50, 0x4a, 
+  0x48, 0x32, 0x5f, 0x4c, 0x54, 0x36, 0x39, 0x3d, 0x64, 0x21, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x34, 0x34, 0x30, 0x3e, 0x3e, 0x3e, 0x29, 0x29, 0x25, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x3f, 0x21, 0x52, 0x4f, 0x60, 0x5d, 0x5c, 0x61, 
+  0x3e, 0x2d, 0x31, 0x62, 0x62, 0x62, 0x63, 0x62, 0x62, 0x5c, 0x61, 0x5e, 0x60, 0x2c, 0x50, 0x4a, 
+  0x48, 0x32, 0x5f, 0x4c, 0x54, 0x36, 0x39, 0x3d, 0x64, 0x21, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x21, 0x35, 0x30, 0x30, 0x2e, 0x2c, 0x3e, 0x29, 0x25, 0x25, 
+  0x23, 0x23, 0x23, 0x33, 0x31, 0x33, 0x31, 0x3b, 0x3b, 0x4a, 0x50, 0x5d, 0x5c, 0x5c, 0x62, 0x65, 
+  0x62, 0x62, 0x63, 0x66, 0x63, 0x63, 0x63, 0x63, 0x62, 0x62, 0x62, 0x5c, 0x5c, 0x4f, 0x29, 0x67, 
+  0x49, 0x49, 0x48, 0x41, 0x41, 0x54, 0x64, 0x3d, 0x39, 0x39, 0x25, 0x28, 0x28, 0x28, 0x2b, 0x2b, 
+  0x2f, 0x2d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x27, 0x27, 0x35, 0x34, 0x30, 0x2e, 0x2e, 0x3e, 0x29, 0x29, 0x29, 
+  0x25, 0x23, 0x23, 0x23, 0x33, 0x33, 0x2e, 0x3c, 0x52, 0x4f, 0x5d, 0x5c, 0x62, 0x63, 0x63, 0x66, 
+  0x68, 0x68, 0x68, 0x68, 0x68, 0x66, 0x66, 0x66, 0x66, 0x63, 0x62, 0x62, 0x62, 0x5c, 0x3e, 0x2c, 
+  0x2c, 0x4d, 0x4d, 0x5f, 0x41, 0x40, 0x3f, 0x4b, 0x3d, 0x39, 0x40, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x27, 0x21, 0x35, 0x30, 0x2c, 0x2e, 0x3e, 0x29, 0x29, 0x29, 
+  0x25, 0x25, 0x23, 0x23, 0x33, 0x33, 0x32, 0x3b, 0x44, 0x60, 0x5c, 0x62, 0x62, 0x68, 0x68, 0x68, 
+  0x68, 0x68, 0x6a, 0x6b, 0x6a, 0x6a, 0x68, 0x68, 0x68, 0x68, 0x63, 0x6c, 0x2d, 0x6c, 0x5c, 0x60, 
+  0x4f, 0x6d, 0x6e, 0x49, 0x6f, 0x41, 0x40, 0x3f, 0x39, 0x39, 0x39, 0x37, 0x27, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2f, 0x32, 0x20, 0x20, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x27, 0x21, 0x35, 0x30, 0x2c, 0x2e, 0x3e, 0x29, 0x29, 0x29, 
+  0x25, 0x25, 0x23, 0x23, 0x33, 0x33, 0x32, 0x3b, 0x44, 0x60, 0x5c, 0x62, 0x62, 0x68, 0x68, 0x68, 
+  0x68, 0x68, 0x6a, 0x6b, 0x6a, 0x6a, 0x68, 0x68, 0x68, 0x68, 0x63, 0x6c, 0x2d, 0x6c, 0x5c, 0x60, 
+  0x4f, 0x6d, 0x6e, 0x49, 0x6f, 0x41, 0x40, 0x3f, 0x39, 0x39, 0x39, 0x37, 0x27, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2f, 0x32, 0x20, 0x20, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x35, 0x34, 0x34, 0x30, 0x2c, 0x2e, 0x3e, 0x29, 0x25, 
+  0x29, 0x23, 0x23, 0x23, 0x23, 0x33, 0x41, 0x5a, 0x5d, 0x5c, 0x62, 0x63, 0x66, 0x68, 0x68, 0x68, 
+  0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6a, 0x68, 0x68, 0x63, 0x2d, 0x5b, 0x62, 0x5c, 
+  0x70, 0x30, 0x6e, 0x4d, 0x48, 0x5f, 0x54, 0x40, 0x4b, 0x45, 0x3d, 0x20, 0x20, 0x20, 0x2a, 0x27, 
+  0x2f, 0x2b, 0x27, 0x20, 0x3d, 0x64, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x27, 0x21, 0x35, 0x34, 0x30, 0x2e, 0x3e, 0x2c, 0x29, 0x29, 
+  0x29, 0x25, 0x23, 0x23, 0x23, 0x35, 0x5a, 0x50, 0x60, 0x62, 0x63, 0x66, 0x68, 0x6b, 0x6b, 0x71, 
+  0x71, 0x6b, 0x71, 0x71, 0x71, 0x72, 0x6b, 0x6b, 0x6b, 0x6a, 0x68, 0x63, 0x63, 0x73, 0x63, 0x5c, 
+  0x5c, 0x74, 0x30, 0x4e, 0x49, 0x48, 0x4c, 0x54, 0x36, 0x4b, 0x3d, 0x45, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x32, 0x32, 0x3d, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x35, 0x34, 0x30, 0x2c, 0x2e, 0x3e, 0x3e, 0x29, 
+  0x29, 0x25, 0x25, 0x23, 0x23, 0x21, 0x4d, 0x4f, 0x5c, 0x62, 0x66, 0x68, 0x6a, 0x6b, 0x71, 0x71, 
+  0x72, 0x72, 0x72, 0x72, 0x72, 0x71, 0x6b, 0x75, 0x6b, 0x6b, 0x76, 0x68, 0x68, 0x63, 0x62, 0x62, 
+  0x62, 0x2c, 0x56, 0x30, 0x6e, 0x48, 0x41, 0x41, 0x59, 0x45, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3d, 0x3d, 0x64, 0x64, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x35, 0x34, 0x30, 0x2c, 0x2e, 0x3e, 0x3e, 0x29, 
+  0x29, 0x25, 0x25, 0x23, 0x23, 0x21, 0x4d, 0x4f, 0x5c, 0x62, 0x66, 0x68, 0x6a, 0x6b, 0x71, 0x71, 
+  0x72, 0x72, 0x72, 0x72, 0x72, 0x71, 0x6b, 0x75, 0x6b, 0x6b, 0x76, 0x68, 0x68, 0x63, 0x62, 0x62, 
+  0x62, 0x2c, 0x56, 0x30, 0x6e, 0x48, 0x41, 0x41, 0x59, 0x45, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3d, 0x3d, 0x64, 0x64, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x21, 0x35, 0x34, 0x30, 0x2e, 0x3e, 0x3e, 0x29, 
+  0x25, 0x29, 0x25, 0x25, 0x23, 0x3c, 0x49, 0x4f, 0x62, 0x63, 0x68, 0x6a, 0x6b, 0x71, 0x72, 0x72, 
+  0x72, 0x77, 0x77, 0x77, 0x77, 0x77, 0x71, 0x71, 0x6b, 0x72, 0x6b, 0x6b, 0x68, 0x68, 0x68, 0x63, 
+  0x5c, 0x56, 0x56, 0x2e, 0x4d, 0x49, 0x48, 0x41, 0x40, 0x3d, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x3d, 0x64, 0x3d, 0x3d, 0x64, 0x3d, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x21, 0x34, 0x34, 0x30, 0x30, 0x3e, 0x3e, 0x3e, 
+  0x29, 0x25, 0x25, 0x23, 0x2e, 0x5a, 0x57, 0x3e, 0x62, 0x66, 0x68, 0x24, 0x6b, 0x78, 0x72, 0x77, 
+  0x79, 0x79, 0x79, 0x79, 0x77, 0x77, 0x77, 0x77, 0x72, 0x72, 0x71, 0x6b, 0x6b, 0x68, 0x63, 0x63, 
+  0x62, 0x67, 0x67, 0x7a, 0x6e, 0x49, 0x5f, 0x41, 0x54, 0x3f, 0x39, 0x39, 0x7b, 0x20, 0x20, 0x20, 
+  0x3d, 0x64, 0x64, 0xb0, 0x64, 0x64, 0x64, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x21, 0x35, 0x35, 0x30, 0x30, 0x2e, 0x3e, 0x3e, 
+  0x29, 0x29, 0x29, 0x25, 0x3a, 0x42, 0x30, 0x56, 0x2d, 0x66, 0x6a, 0x28, 0x72, 0x72, 0x77, 0x79, 
+  0x79, 0x78, 0x7c, 0x79, 0x7c, 0x7c, 0x79, 0x77, 0x77, 0x72, 0x72, 0x6b, 0x6b, 0x6a, 0x31, 0x7d, 
+  0x6c, 0x6c, 0x3e, 0x74, 0x7e, 0x6e, 0x48, 0x48, 0x40, 0x3f, 0x3d, 0x39, 0x3d, 0x20, 0x7b, 0x54, 
+  0x64, 0x64, 0x4b, 0x64, 0x3d, 0x64, 0x3d, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x21, 0x35, 0x35, 0x30, 0x30, 0x2e, 0x3e, 0x3e, 
+  0x29, 0x29, 0x29, 0x25, 0x3a, 0x42, 0x30, 0x56, 0x2d, 0x66, 0x6a, 0x28, 0x72, 0x72, 0x77, 0x79, 
+  0x79, 0x78, 0x7c, 0x79, 0x7c, 0x7c, 0x79, 0x77, 0x77, 0x72, 0x72, 0x6b, 0x6b, 0x6a, 0x31, 0x7d, 
+  0x6c, 0x6c, 0x3e, 0x74, 0x7e, 0x6e, 0x48, 0x48, 0x40, 0x3f, 0x3d, 0x39, 0x3d, 0x20, 0x7b, 0x54, 
+  0x64, 0x64, 0x4b, 0x64, 0x3d, 0x64, 0x3d, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x21, 0x21, 0x34, 0x34, 0x30, 0x2c, 0x2e, 0x3e, 
+  0x3e, 0x3e, 0x35, 0x2a, 0x36, 0x44, 0x70, 0x56, 0x6c, 0x68, 0x76, 0x7f, 0x6b, 0x77, 0x79, 0x79, 
+  0x79, 0x7c, 0x7c, 0x80, 0x80, 0x81, 0x81, 0x80, 0x79, 0x77, 0x72, 0x71, 0x6b, 0x6a, 0x6b, 0x2d, 
+  0x5b, 0x7d, 0x61, 0x56, 0x4e, 0x4d, 0x4d, 0x41, 0x4c, 0x59, 0x39, 0x3d, 0x39, 0x82, 0x54, 0x82, 
+  0x82, 0x3d, 0x64, 0x64, 0x64, 0x64, 0x64, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x21, 0x34, 0x30, 0x30, 0x2e, 0x2e, 0x3e, 
+  0x29, 0x35, 0x20, 0x20, 0x2a, 0x4a, 0x5d, 0x5c, 0x76, 0x68, 0x6b, 0x6b, 0x72, 0x77, 0x79, 0x7c, 
+  0x7c, 0x79, 0x80, 0x81, 0x83, 0x83, 0x83, 0x84, 0x80, 0x77, 0x72, 0x72, 0x6b, 0x6b, 0x68, 0x63, 
+  0x85, 0x85, 0x5b, 0x4e, 0x86, 0x6e, 0x49, 0x48, 0x4c, 0x38, 0x64, 0x64, 0x46, 0x87, 0x54, 0x82, 
+  0x59, 0x3d, 0x3d, 0xb0, 0x3d, 0x64, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x35, 0x35, 0x34, 0x30, 0x30, 0x2c, 0x2e, 
+  0x2a, 0x20, 0x20, 0x20, 0x2a, 0x44, 0x60, 0x62, 0x66, 0x6a, 0x6b, 0x71, 0x77, 0x79, 0x79, 0x79, 
+  0x7c, 0x72, 0x81, 0x84, 0x83, 0x88, 0x88, 0x83, 0x81, 0x7c, 0x77, 0x72, 0x71, 0x6b, 0x6b, 0x68, 
+  0x6c, 0x85, 0x56, 0x56, 0x4e, 0x6e, 0x49, 0x48, 0x41, 0x41, 0x46, 0x89, 0x46, 0x87, 0x54, 0x82, 
+  0x82, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x27, 0x35, 0x35, 0x34, 0x30, 0x30, 0x2c, 0x2e, 
+  0x2a, 0x20, 0x20, 0x20, 0x2a, 0x44, 0x60, 0x62, 0x66, 0x6a, 0x6b, 0x71, 0x77, 0x79, 0x79, 0x79, 
+  0x7c, 0x72, 0x81, 0x84, 0x83, 0x88, 0x88, 0x83, 0x81, 0x7c, 0x77, 0x72, 0x71, 0x6b, 0x6b, 0x68, 
+  0x6c, 0x85, 0x56, 0x56, 0x4e, 0x6e, 0x49, 0x48, 0x41, 0x41, 0x46, 0x89, 0x46, 0x87, 0x54, 0x82, 
+  0x82, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x32, 0x21, 0x21, 0x34, 0x34, 0x30, 0x2c, 0x36, 
+  0x20, 0x20, 0x20, 0x20, 0x2a, 0x44, 0x8a, 0x62, 0x63, 0x6a, 0x6b, 0x71, 0x77, 0x79, 0x7c, 0x79, 
+  0x7c, 0x7c, 0x81, 0x83, 0x88, 0x88, 0x88, 0x88, 0x84, 0x7c, 0x79, 0x72, 0x71, 0x6b, 0x6b, 0x68, 
+  0x31, 0x85, 0x67, 0x56, 0x4e, 0x6e, 0x4d, 0x49, 0x8b, 0x8c, 0x89, 0x46, 0x46, 0x87, 0x4c, 0x82, 
+  0x82, 0x64, 0x3d, 0x64, 0x3d, 0xb0, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x27, 0x35, 0x35, 0x34, 0x30, 0x38, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x36, 0x4a, 0x4f, 0x31, 0x68, 0x68, 0x24, 0x72, 0x77, 0x79, 0x79, 0x7c, 
+  0x7c, 0x7c, 0x80, 0x84, 0x88, 0x88, 0x88, 0x83, 0x84, 0x8d, 0x77, 0x72, 0x71, 0x6b, 0x6a, 0x6a, 
+  0x2d, 0x67, 0x67, 0x56, 0x4e, 0x56, 0x8e, 0x8e, 0x8c, 0x8b, 0x8b, 0x89, 0x46, 0x8f, 0x54, 0x54, 
+  0x59, 0x64, 0xb0, 0x64, 0x64, 0x64, 0x64, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x21, 0x35, 0x86, 0x57, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x8a, 0x2c, 0x76, 0x6a, 0x76, 0x90, 0x78, 0x79, 0x79, 0x7c, 
+  0x7c, 0x7c, 0x80, 0x81, 0x83, 0x83, 0x83, 0x84, 0x81, 0x72, 0x77, 0x72, 0x71, 0x6b, 0x6a, 0x76, 
+  0x85, 0x67, 0x91, 0x67, 0x91, 0x92, 0x8e, 0x8e, 0x8c, 0x8c, 0x8b, 0x93, 0x46, 0x8f, 0x54, 0x82, 
+  0xb0, 0xb0, 0x3d, 0x64, 0x3d, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x27, 0x21, 0x35, 0x86, 0x57, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x8a, 0x2c, 0x76, 0x6a, 0x76, 0x90, 0x78, 0x79, 0x79, 0x7c, 
+  0x7c, 0x7c, 0x80, 0x81, 0x83, 0x83, 0x83, 0x84, 0x81, 0x72, 0x77, 0x72, 0x71, 0x6b, 0x6a, 0x76, 
+  0x85, 0x67, 0x91, 0x67, 0x91, 0x92, 0x8e, 0x8e, 0x8c, 0x8c, 0x8b, 0x93, 0x46, 0x8f, 0x54, 0x82, 
+  0xb0, 0xb0, 0x3d, 0x64, 0x3d, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x32, 0x21, 0x35, 0x27, 0x94, 0x95, 0x96, 
+  0x82, 0x20, 0x20, 0x20, 0x20, 0x55, 0x4f, 0x5c, 0x65, 0x68, 0x6b, 0x72, 0x90, 0x97, 0x97, 0x7c, 
+  0x79, 0x7c, 0x8d, 0x80, 0x81, 0x84, 0x84, 0x81, 0x7c, 0x79, 0x77, 0x72, 0x71, 0x71, 0x63, 0x98, 
+  0x95, 0x95, 0x94, 0x99, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8b, 0x89, 0x89, 0x46, 0x46, 0x8f, 0x54, 
+  0x59, 0x59, 0x64, 0x64, 0x64, 0x3d, 0x64, 0x64, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x32, 0x21, 0x35, 0x20, 0x8e, 0x95, 0x9a, 
+  0x9b, 0x9c, 0x91, 0x8c, 0x54, 0x3a, 0x4f, 0x5c, 0x63, 0x68, 0x6b, 0x6b, 0x9d, 0x9b, 0x9d, 0x78, 
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x79, 0x77, 0x79, 0x78, 0x97, 0x97, 0x9b, 0x9b, 0x95, 
+  0x98, 0x94, 0x91, 0x91, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8c, 0x89, 0x89, 0x46, 0x8f, 0x4c, 0x54, 
+  0x82, 0xb0, 0x3d, 0x64, 0x64, 0x3d, 0x64, 0x64, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x27, 0x38, 0x20, 0x93, 0x94, 0x95, 
+  0x9e, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0xa1, 0x90, 0x9d, 0x97, 0x97, 0x9d, 0x9b, 0x9d, 0x9b, 0xa2, 
+  0x78, 0x7c, 0x78, 0x97, 0x97, 0xa3, 0x97, 0xa2, 0xa4, 0xa4, 0xa0, 0x9c, 0x9c, 0x9c, 0x9b, 0x9a, 
+  0x98, 0x94, 0x91, 0x91, 0x92, 0xa5, 0xa6, 0x8e, 0xa7, 0x8c, 0x8b, 0x89, 0x46, 0x46, 0x8f, 0x54, 
+  0x82, 0x59, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x27, 0x38, 0x20, 0x93, 0x94, 0x95, 
+  0x9e, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0xa1, 0x90, 0x9d, 0x97, 0x97, 0x9d, 0x9b, 0x9d, 0x9b, 0xa2, 
+  0x78, 0x7c, 0x78, 0x97, 0x97, 0xa3, 0x97, 0xa2, 0xa4, 0xa4, 0xa0, 0x9c, 0x9c, 0x9c, 0x9b, 0x9a, 
+  0x98, 0x94, 0x91, 0x91, 0x92, 0xa5, 0xa6, 0x8e, 0xa7, 0x8c, 0x8b, 0x89, 0x46, 0x46, 0x8f, 0x54, 
+  0x82, 0x59, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x37, 0x20, 0x20, 0x93, 0x94, 0x95, 
+  0x9b, 0x9b, 0xa8, 0xa9, 0xa4, 0xaa, 0xa1, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xa2, 0xaa, 0xa8, 0x9f, 0x9c, 0x9c, 0x9b, 0x9b, 0x95, 
+  0x95, 0x94, 0x91, 0xac, 0x92, 0x96, 0x96, 0xa7, 0x8c, 0x8c, 0x8b, 0x93, 0x46, 0x8f, 0x8f, 0x54, 
+  0x82, 0x59, 0x3d, 0xb0, 0x64, 0x3d, 0x3d, 0x3d, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x38, 0x20, 0x20, 0x20, 0x94, 0x98, 
+  0x9a, 0x9e, 0x9c, 0x9c, 0xa4, 0xa0, 0xa0, 0xa1, 0xa1, 0xab, 0xab, 0xab, 0xab, 0xab, 0xad, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xab, 0xa1, 0xaa, 0xaa, 0xa4, 0xa4, 0x9f, 0xa8, 0x9c, 0x9e, 0x9a, 0x95, 
+  0x98, 0x94, 0x91, 0x91, 0x92, 0x96, 0xa6, 0x8e, 0x8c, 0x8c, 0x8b, 0x89, 0x46, 0x46, 0x8f, 0x54, 
+  0x82, 0xb0, 0x64, 0x3d, 0x64, 0xb0, 0x64, 0x64, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x91, 0x94, 
+  0x95, 0x9b, 0x9c, 0x9c, 0x9f, 0xa4, 0xa0, 0xa1, 0xa1, 0xab, 0xab, 0xab, 0xad, 0xab, 0xad, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xa1, 0xa1, 0xa0, 0xaa, 0xa9, 0x9f, 0xa8, 0x9c, 0x9e, 0x9b, 0x9a, 0x95, 
+  0x98, 0x94, 0x91, 0xac, 0xac, 0x96, 0x8e, 0x8e, 0x8c, 0xae, 0x8b, 0x8b, 0x46, 0x8f, 0x8f, 0x54, 
+  0x54, 0x82, 0x64, 0x3d, 0x64, 0x64, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x91, 0x94, 
+  0x95, 0x9b, 0x9c, 0x9c, 0x9f, 0xa4, 0xa0, 0xa1, 0xa1, 0xab, 0xab, 0xab, 0xad, 0xab, 0xad, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xa1, 0xa1, 0xa0, 0xaa, 0xa9, 0x9f, 0xa8, 0x9c, 0x9e, 0x9b, 0x9a, 0x95, 
+  0x98, 0x94, 0x91, 0xac, 0xac, 0x96, 0x8e, 0x8e, 0x8c, 0xae, 0x8b, 0x8b, 0x46, 0x8f, 0x8f, 0x54, 
+  0x54, 0x82, 0x64, 0x3d, 0x64, 0x64, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x93, 0x94, 
+  0x98, 0x9a, 0x9e, 0x9c, 0xa8, 0x9f, 0xa0, 0xa0, 0xa0, 0xa0, 0xa1, 0xab, 0xa1, 0xab, 0xa1, 0xab, 
+  0xab, 0xab, 0xa1, 0xa1, 0xa1, 0xaa, 0xaa, 0xa4, 0x9f, 0xa4, 0x9c, 0x9c, 0x9e, 0x9b, 0x9b, 0x95, 
+  0x94, 0x94, 0x99, 0x91, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8c, 0x8b, 0x89, 0x93, 0x46, 0x8f, 0x54, 
+  0x82, 0xb0, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x46, 0x91, 
+  0x94, 0x95, 0x9b, 0x9c, 0xa8, 0xa8, 0xa4, 0xa0, 0xa1, 0xa1, 0xa0, 0xa1, 0xa1, 0xab, 0xab, 0xa1, 
+  0xa1, 0xa1, 0xa1, 0xaf, 0xa1, 0xa0, 0xa0, 0xa4, 0x9f, 0xa9, 0x9f, 0x9c, 0x9e, 0x9b, 0x9a, 0x95, 
+  0x98, 0x91, 0x91, 0x92, 0x92, 0x96, 0xa6, 0x8e, 0x8c, 0x8c, 0x8b, 0x89, 0x93, 0x46, 0x8f, 0x87, 
+  0x54, 0x59, 0xb0, 0x3d, 0x3d, 0x3d, 0xb0, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x94, 
+  0x98, 0x95, 0x9a, 0x9e, 0x9c, 0xa8, 0x9f, 0xa4, 0xa0, 0xa0, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xab, 
+  0xaf, 0xaf, 0xa1, 0xa1, 0xaa, 0xaa, 0xa4, 0xa4, 0x9f, 0xa8, 0x9c, 0x9c, 0x9e, 0x9a, 0x95, 0x95, 
+  0x94, 0x94, 0x91, 0x91, 0x92, 0xa5, 0x96, 0x8e, 0xa7, 0x8c, 0x8b, 0x89, 0x46, 0x93, 0x8f, 0x54, 
+  0x82, 0xb0, 0x59, 0xb0, 0x64, 0x64, 0x64, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x94, 
+  0x98, 0x95, 0x9a, 0x9e, 0x9c, 0xa8, 0x9f, 0xa4, 0xa0, 0xa0, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xab, 
+  0xaf, 0xaf, 0xa1, 0xa1, 0xaa, 0xaa, 0xa4, 0xa4, 0x9f, 0xa8, 0x9c, 0x9c, 0x9e, 0x9a, 0x95, 0x95, 
+  0x94, 0x94, 0x91, 0x91, 0x92, 0xa5, 0x96, 0x8e, 0xa7, 0x8c, 0x8b, 0x89, 0x46, 0x93, 0x8f, 0x54, 
+  0x82, 0xb0, 0x59, 0xb0, 0x64, 0x64, 0x64, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x92, 
+  0x94, 0x98, 0x95, 0x9b, 0x9e, 0xa8, 0xa8, 0x9f, 0xa4, 0xa0, 0xaa, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 
+  0xa1, 0xa1, 0xa0, 0xaa, 0xa4, 0xaa, 0xa4, 0xa4, 0x9f, 0xa8, 0x9c, 0x9e, 0x9e, 0x9b, 0x9a, 0x95, 
+  0x94, 0x94, 0x91, 0x91, 0x92, 0x96, 0xa6, 0x8e, 0x8c, 0x8c, 0x8b, 0x8b, 0x46, 0x46, 0x8f, 0x87, 
+  0x54, 0xb0, 0xb0, 0x64, 0x64, 0x4b, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x91, 
+  0x91, 0x94, 0x95, 0x9a, 0x9b, 0x9c, 0x9c, 0x9f, 0x9f, 0xa4, 0xa0, 0xa4, 0xa0, 0xaa, 0xa0, 0xaa, 
+  0xaa, 0xaa, 0xaa, 0xa0, 0xa0, 0xa4, 0xa4, 0x9f, 0xa8, 0xa8, 0x9c, 0x9b, 0x9b, 0x9a, 0x95, 0x98, 
+  0x98, 0x99, 0x91, 0x92, 0x92, 0x96, 0xa6, 0x8e, 0xa7, 0x8c, 0x8c, 0x89, 0x89, 0x46, 0x8f, 0x54, 
+  0x82, 0x54, 0x59, 0x64, 0x64, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x93, 
+  0x91, 0x94, 0x95, 0x9a, 0x9b, 0x9e, 0x9c, 0xa8, 0x9f, 0x9f, 0xa4, 0xa4, 0xa0, 0xaa, 0xa0, 0xa0, 
+  0xaa, 0xaa, 0xa0, 0xaa, 0xa4, 0xa4, 0xa9, 0x9f, 0x9c, 0xa8, 0x9c, 0x9e, 0x9e, 0x9a, 0x95, 0x94, 
+  0x94, 0x94, 0x91, 0x92, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8b, 0x8b, 0x8b, 0x93, 0x93, 0x46, 0x87, 
+  0x54, 0x82, 0xb0, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x93, 
+  0x91, 0x94, 0x95, 0x9a, 0x9b, 0x9e, 0x9c, 0xa8, 0x9f, 0x9f, 0xa4, 0xa4, 0xa0, 0xaa, 0xa0, 0xa0, 
+  0xaa, 0xaa, 0xa0, 0xaa, 0xa4, 0xa4, 0xa9, 0x9f, 0x9c, 0xa8, 0x9c, 0x9e, 0x9e, 0x9a, 0x95, 0x94, 
+  0x94, 0x94, 0x91, 0x92, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8b, 0x8b, 0x8b, 0x93, 0x93, 0x46, 0x87, 
+  0x54, 0x82, 0xb0, 0x3d, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8f, 
+  0x91, 0x99, 0x94, 0x95, 0x9a, 0x9e, 0x9e, 0x9c, 0xa8, 0xa9, 0x9f, 0xa4, 0xaa, 0xa4, 0xaa, 0xa0, 
+  0xa4, 0xa4, 0xaa, 0xa4, 0xa4, 0x9f, 0x9f, 0x9f, 0xa8, 0x9c, 0x9c, 0x9b, 0x9a, 0x9a, 0x95, 0x95, 
+  0x94, 0x99, 0x91, 0x91, 0x92, 0x96, 0x8e, 0x8e, 0xa7, 0x8c, 0x8c, 0x89, 0x89, 0x8f, 0x8f, 0x54, 
+  0x54, 0x82, 0x59, 0x4b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xac, 0x99, 0x94, 0x95, 0x95, 0x9b, 0x9e, 0x9c, 0x9c, 0x9f, 0xa8, 0xa9, 0x9f, 0x9f, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0x9f, 0x9f, 0xa4, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9e, 0x9b, 0x9b, 0x9a, 0x98, 0x98, 
+  0x99, 0x91, 0x92, 0x91, 0x92, 0x92, 0x8e, 0x8e, 0xa7, 0xae, 0x8b, 0x89, 0x89, 0x93, 0x46, 0x54, 
+  0x54, 0x82, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0x92, 0x91, 0x98, 0x95, 0x9a, 0x9b, 0x9e, 0x9c, 0xa8, 0x9f, 0xa8, 0xa9, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0x9f, 0xa4, 0xa4, 0x9f, 0x9f, 0x9f, 0x9c, 0x9c, 0x9e, 0x9b, 0x9b, 0x95, 0x95, 0x98, 0x94, 
+  0x94, 0x94, 0x91, 0x92, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8c, 0x8c, 0x8b, 0x93, 0x46, 0x46, 0x87, 
+  0x54, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0x92, 0x91, 0x98, 0x95, 0x9a, 0x9b, 0x9e, 0x9c, 0xa8, 0x9f, 0xa8, 0xa9, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0x9f, 0xa4, 0xa4, 0x9f, 0x9f, 0x9f, 0x9c, 0x9c, 0x9e, 0x9b, 0x9b, 0x95, 0x95, 0x98, 0x94, 
+  0x94, 0x94, 0x91, 0x92, 0x92, 0x96, 0x96, 0x8e, 0x8c, 0x8c, 0x8c, 0x8b, 0x93, 0x46, 0x46, 0x87, 
+  0x54, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8c, 0x91, 0x91, 0x98, 0x95, 0x9a, 0x9b, 0x9e, 0x9e, 0x9e, 0xa8, 0x9c, 0xa8, 0xa8, 0x9f, 0x9f, 
+  0xa4, 0x9f, 0x9f, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9c, 0x9e, 0x9e, 0x9b, 0x9a, 0x95, 0x95, 0x94, 
+  0x91, 0x91, 0x91, 0x92, 0x92, 0x96, 0x8e, 0x8e, 0xa7, 0x8c, 0x8b, 0x8b, 0x93, 0x46, 0x8f, 0x54, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x46, 0x92, 0x91, 0x94, 0x94, 0x95, 0x9a, 0x9b, 0x9b, 0x9c, 0x9c, 0xa8, 0x9c, 0x9f, 0xa8, 0x9f, 
+  0xa8, 0xa9, 0xa8, 0x9f, 0x9f, 0x9c, 0x9c, 0x9c, 0x9c, 0x9e, 0x9b, 0x9b, 0x95, 0x9a, 0x98, 0x94, 
+  0x99, 0x99, 0x91, 0x92, 0x96, 0xa5, 0x96, 0x8e, 0x8c, 0x8c, 0x8b, 0x89, 0x46, 0x46, 0x3d, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x59, 0x92, 0x92, 0x94, 0x94, 0x94, 0x95, 0x9b, 0x9e, 0x9e, 0x9c, 0xa8, 0xa8, 0x9c, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9c, 0x9e, 0x9c, 0x9e, 0x9e, 0x9a, 0x95, 0x95, 0x98, 0x94, 
+  0x91, 0x91, 0x91, 0xac, 0x96, 0x96, 0xa6, 0x8e, 0x8c, 0x8c, 0x8c, 0x8b, 0x82, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x59, 0x92, 0x92, 0x94, 0x94, 0x94, 0x95, 0x9b, 0x9e, 0x9e, 0x9c, 0xa8, 0xa8, 0x9c, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x9c, 0x9e, 0x9c, 0x9e, 0x9e, 0x9a, 0x95, 0x95, 0x98, 0x94, 
+  0x91, 0x91, 0x91, 0xac, 0x96, 0x96, 0xa6, 0x8e, 0x8c, 0x8c, 0x8c, 0x8b, 0x82, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x92, 0x91, 0x91, 0x94, 0x98, 0x95, 0x95, 0x9a, 0x9b, 0x9e, 0x9e, 0x9c, 0xa8, 0x9c, 0x9c, 
+  0x9c, 0xa8, 0x9c, 0x9c, 0x9c, 0x9c, 0x9e, 0x9e, 0x9b, 0x9b, 0x9a, 0x9a, 0x9a, 0x94, 0x94, 0x94, 
+  0x94, 0x91, 0xac, 0x92, 0x92, 0xa5, 0x8e, 0x8e, 0xa7, 0x8c, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8b, 0x92, 0x91, 0x99, 0x94, 0x98, 0x95, 0x9a, 0x9a, 0x9b, 0x9b, 0x9e, 0x9c, 0xa8, 0x9c, 
+  0x9c, 0xa8, 0xa8, 0xa8, 0x9c, 0x9c, 0x9b, 0x9e, 0x9b, 0x9b, 0x9a, 0x95, 0x9a, 0x95, 0x98, 0x94, 
+  0x99, 0x91, 0x92, 0x92, 0x96, 0x96, 0xa6, 0x89, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x59, 0x46, 0x91, 0x99, 0x94, 0x95, 0x95, 0x95, 0x9b, 0x9e, 0x9b, 0x9e, 0x9e, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9b, 0x9e, 0x9b, 0x95, 0x9a, 0x98, 0x98, 0x94, 0x94, 
+  0x91, 0xac, 0x91, 0x92, 0x92, 0x8f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x59, 0x46, 0x91, 0x99, 0x94, 0x95, 0x95, 0x95, 0x9b, 0x9e, 0x9b, 0x9e, 0x9e, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9b, 0x9e, 0x9b, 0x95, 0x9a, 0x98, 0x98, 0x94, 0x94, 
+  0x91, 0xac, 0x91, 0x92, 0x92, 0x8f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x93, 0x8e, 0x98, 0x95, 0x9a, 0x95, 0x9b, 0x9b, 0x9b, 0x9c, 0x9e, 
+  0x9e, 0x9e, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9b, 0x9b, 0x9a, 0x95, 0x95, 0x98, 0x98, 0x94, 0x99, 
+  0x91, 0x8c, 0x46, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x82, 0x89, 0x96, 0x9b, 0x9b, 0x9b, 0x9e, 0x9b, 
+  0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9a, 0x9a, 0x95, 0x9a, 0x95, 0x94, 0x46, 0x93, 0x82, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x82, 0x8b, 0x8b, 
+  0xae, 0x8b, 0xae, 0x8b, 0xae, 0x8b, 0x8b, 0x8b, 0x8b, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x82, 0x8b, 0x8b, 
+  0xae, 0x8b, 0xae, 0x8b, 0xae, 0x8b, 0x8b, 0x8b, 0x8b, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x2b, 0x2b, 0x28, 0x28, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x29, 0x2c, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x29, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x29, 0x2d, 0x2e, 0x2e, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x29, 0x2f, 0x30, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x25, 0x28, 0x28, 
+  0x28, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 
+  0x31, 0x30, 0x30, 0x30, 0x30, 0x2b, 0x2b, 0x2b, 0x32, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x25, 
+  0x25, 0x28, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x31, 
+  0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x34, 0x35, 0x33, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x31, 
+  0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x28, 0x2b, 0x2b, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x34, 0x35, 0x33, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x23, 0x31, 0x34, 
+  0x34, 0x31, 0x30, 0x2e, 0x2e, 0x30, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x33, 0x36, 0x37, 0x38, 0x39, 0x38, 0x38, 0x38, 0x37, 0x38, 0x38, 0x38, 0x33, 0x34, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x34, 0x31, 
+  0x31, 0x34, 0x31, 0x31, 0x2e, 0x30, 0x2e, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x28, 0x28, 0x28, 0x23, 
+  0x33, 0x38, 0x37, 0x26, 0x26, 0x26, 0x26, 0x3a, 0x26, 0x29, 0x29, 0x37, 0x38, 0x37, 0x38, 0x37, 
+  0x3a, 0x2f, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x27, 0x34, 0x23, 0x34, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x2e, 0x2b, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x33, 0x39, 
+  0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x26, 0x26, 0x29, 0x37, 0x38, 
+  0x37, 0x38, 0x39, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x2b, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x27, 0x34, 0x23, 0x34, 
+  0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x2e, 0x2b, 0x2e, 0x2b, 0x2b, 0x2b, 0x2b, 0x33, 0x39, 
+  0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x26, 0x26, 0x29, 0x37, 0x38, 
+  0x37, 0x38, 0x39, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x2b, 0x2b, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x27, 0x27, 0x27, 0x23, 0x23, 0x34, 
+  0x34, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x30, 0x2b, 0x2e, 0x2b, 0x2b, 0x23, 0x40, 0x41, 0x42, 
+  0x42, 0x43, 0x3f, 0x44, 0x45, 0x46, 0x47, 0x3e, 0x46, 0x3e, 0x3e, 0x3e, 0x3e, 0x3d, 0x3a, 0x26, 
+  0x37, 0x39, 0x39, 0x48, 0x36, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2c, 0x2c, 0x27, 0x27, 0x23, 0x23, 0x34, 
+  0x31, 0x34, 0x31, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2e, 0x2e, 0x2b, 0x27, 0x41, 0x3c, 0x43, 0x43, 
+  0x49, 0x4a, 0x4b, 0x4c, 0x4c, 0x4d, 0x4c, 0x4d, 0x4c, 0x4c, 0x45, 0x47, 0x24, 0x3a, 0x3d, 0x26, 
+  0x26, 0x37, 0x39, 0x48, 0x40, 0x36, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x2c, 0x2c, 0x27, 0x23, 0x23, 0x23, 
+  0x34, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2b, 0x2e, 0x3a, 0x3b, 0x3f, 0x46, 0x4b, 0x4a, 
+  0x4e, 0x4e, 0x4f, 0x35, 0x50, 0x50, 0x50, 0x50, 0x4d, 0x4c, 0x4d, 0x4c, 0x4b, 0x2a, 0x46, 0x3a, 
+  0x3a, 0x3c, 0x41, 0x39, 0x48, 0x48, 0x48, 0x23, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2f, 0x2d, 0x2c, 0x2c, 0x27, 0x23, 0x23, 0x23, 
+  0x34, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2b, 0x2e, 0x3a, 0x3b, 0x3f, 0x46, 0x4b, 0x4a, 
+  0x4e, 0x4e, 0x4f, 0x35, 0x50, 0x50, 0x50, 0x50, 0x4d, 0x4c, 0x4d, 0x4c, 0x4b, 0x2a, 0x46, 0x3a, 
+  0x3a, 0x3c, 0x41, 0x39, 0x48, 0x48, 0x48, 0x23, 0x25, 0x28, 0x28, 0x25, 0x28, 0x28, 0x2b, 0x28, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2f, 0x51, 0x2d, 0x27, 0x27, 0x27, 0x23, 0x34, 
+  0x34, 0x34, 0x31, 0x30, 0x31, 0x30, 0x30, 0x2e, 0x30, 0x27, 0x3d, 0x3e, 0x47, 0x4c, 0x4f, 0x52, 
+  0x53, 0x53, 0x53, 0x52, 0x4f, 0x31, 0x54, 0x55, 0x56, 0x55, 0x57, 0x52, 0x4c, 0x4c, 0x58, 0x24, 
+  0x43, 0x59, 0x3c, 0x41, 0x39, 0x40, 0x39, 0x48, 0x28, 0x25, 0x28, 0x28, 0x28, 0x2b, 0x28, 0x2b, 
+  0x2b, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x35, 0x2f, 0x2d, 0x51, 0x2c, 0x27, 0x27, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x2c, 0x26, 0x44, 0x4c, 0x50, 0x50, 0x5a, 0x5b, 
+  0x5b, 0x34, 0x27, 0x5c, 0x5d, 0x34, 0x5e, 0x34, 0x5d, 0x56, 0x54, 0x55, 0x55, 0x33, 0x4c, 0x58, 
+  0x43, 0x43, 0x42, 0x5f, 0x38, 0x40, 0x39, 0x39, 0x3a, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x35, 0x2f, 0x2f, 0x2d, 0x2c, 0x2c, 0x27, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x34, 0x30, 0x31, 0x30, 0x26, 0x3f, 0x4c, 0x50, 0x56, 0x5c, 0x5d, 0x5c, 
+  0x5c, 0x5e, 0x5e, 0x5e, 0x60, 0x60, 0x5e, 0x5e, 0x23, 0x5d, 0x5c, 0x5c, 0x54, 0x61, 0x50, 0x52, 
+  0x4a, 0x49, 0x42, 0x42, 0x59, 0x41, 0x40, 0x40, 0x40, 0x35, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x21, 0x35, 0x2f, 0x2f, 0x2d, 0x2c, 0x2c, 0x27, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x31, 0x34, 0x30, 0x31, 0x30, 0x26, 0x3f, 0x4c, 0x50, 0x56, 0x5c, 0x5d, 0x5c, 
+  0x5c, 0x5e, 0x5e, 0x5e, 0x60, 0x60, 0x5e, 0x5e, 0x23, 0x5d, 0x5c, 0x5c, 0x54, 0x61, 0x50, 0x52, 
+  0x4a, 0x49, 0x42, 0x42, 0x59, 0x41, 0x40, 0x40, 0x40, 0x35, 0x28, 0x28, 0x28, 0x2b, 0x2b, 0x28, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x35, 0x2d, 0x2d, 0x2c, 0x2c, 0x27, 0x27, 0x27, 
+  0x34, 0x34, 0x34, 0x31, 0x34, 0x30, 0x30, 0x3f, 0x24, 0x50, 0x50, 0x54, 0x5d, 0x5c, 0x5e, 0x5e, 
+  0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x5e, 0x62, 0x27, 0x5e, 0x23, 0x5d, 0x27, 0x2f, 0x63, 
+  0x4f, 0x4a, 0x64, 0x43, 0x42, 0x3c, 0x65, 0x39, 0x40, 0x39, 0x23, 0x28, 0x28, 0x28, 0x2b, 0x2b, 
+  0x32, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x21, 0x33, 0x35, 0x2f, 0x2d, 0x2d, 0x2c, 0x2c, 0x27, 0x23, 
+  0x23, 0x34, 0x34, 0x34, 0x31, 0x31, 0x2d, 0x3e, 0x47, 0x50, 0x56, 0x5c, 0x5e, 0x5e, 0x60, 0x66, 
+  0x66, 0x66, 0x67, 0x67, 0x67, 0x67, 0x66, 0x66, 0x66, 0x60, 0x5e, 0x68, 0x68, 0x53, 0x23, 0x61, 
+  0x4e, 0x69, 0x6a, 0x49, 0x42, 0x59, 0x41, 0x40, 0x39, 0x48, 0x3a, 0x28, 0x2b, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x33, 0x35, 0x2f, 0x2d, 0x2d, 0x2c, 0x27, 0x27, 0x23, 
+  0x27, 0x23, 0x34, 0x34, 0x31, 0x31, 0x3f, 0x4b, 0x4d, 0x54, 0x5d, 0x60, 0x60, 0x66, 0x66, 0x67, 
+  0x67, 0x6b, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x67, 0x67, 0x67, 0x62, 0x22, 0x6d, 0x6e, 0x6e, 0x53, 
+  0x53, 0x4e, 0x69, 0x4a, 0x43, 0x42, 0x59, 0x3b, 0x40, 0x39, 0x48, 0x3a, 0x24, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x33, 0x35, 0x2f, 0x2d, 0x2d, 0x2c, 0x27, 0x27, 0x23, 
+  0x27, 0x23, 0x34, 0x34, 0x31, 0x31, 0x3f, 0x4b, 0x4d, 0x54, 0x5d, 0x60, 0x60, 0x66, 0x66, 0x67, 
+  0x67, 0x6b, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x67, 0x67, 0x67, 0x62, 0x22, 0x6d, 0x6e, 0x6e, 0x53, 
+  0x53, 0x4e, 0x69, 0x4a, 0x43, 0x42, 0x59, 0x3b, 0x40, 0x39, 0x48, 0x3a, 0x24, 0x2b, 0x2b, 0x2b, 
+  0x2b, 0x2e, 0x2a, 0x20, 0x20, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x51, 0x2c, 0x2c, 0x27, 0x27, 
+  0x23, 0x34, 0x34, 0x34, 0x34, 0x31, 0x3a, 0x4c, 0x54, 0x5c, 0x5e, 0x5e, 0x60, 0x67, 0x6c, 0x6c, 
+  0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x6c, 0x6f, 0x62, 0x70, 0x30, 0x60, 0x71, 0x72, 0x6d, 0x6e, 
+  0x53, 0x4f, 0x4f, 0x4a, 0x49, 0x64, 0x42, 0x41, 0x65, 0x39, 0x39, 0x73, 0x20, 0x20, 0x29, 0x2a, 
+  0x2b, 0x2b, 0x2a, 0x20, 0x40, 0x8d, 0x8d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x2d, 0x2c, 0x2c, 0x27, 0x27, 
+  0x27, 0x23, 0x34, 0x34, 0x34, 0x33, 0x24, 0x4c, 0x5d, 0x5e, 0x66, 0x67, 0x67, 0x6c, 0x6b, 0x6b, 
+  0x6b, 0x6b, 0x74, 0x74, 0x74, 0x74, 0x6b, 0x6c, 0x75, 0x71, 0x67, 0x67, 0x66, 0x62, 0x76, 0x6d, 
+  0x6e, 0x53, 0x4f, 0x4f, 0x6a, 0x43, 0x42, 0x5f, 0x3b, 0x40, 0x40, 0x48, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x2a, 0x2a, 0x40, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x35, 0x2f, 0x2f, 0x2d, 0x2d, 0x27, 0x27, 
+  0x27, 0x23, 0x23, 0x34, 0x34, 0x2a, 0x24, 0x50, 0x34, 0x5e, 0x60, 0x67, 0x6c, 0x6b, 0x6b, 0x74, 
+  0x77, 0x77, 0x77, 0x6b, 0x77, 0x77, 0x77, 0x6b, 0x6c, 0x78, 0x6b, 0x67, 0x66, 0x30, 0x79, 0x5b, 
+  0x5b, 0x6e, 0x4f, 0x69, 0x69, 0x49, 0x43, 0x3c, 0x3b, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x40, 0x40, 0x8d, 0x8d, 0x8d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x35, 0x2f, 0x2f, 0x2d, 0x2d, 0x27, 0x27, 
+  0x27, 0x23, 0x23, 0x34, 0x34, 0x2a, 0x24, 0x50, 0x34, 0x5e, 0x60, 0x67, 0x6c, 0x6b, 0x6b, 0x74, 
+  0x77, 0x77, 0x77, 0x6b, 0x77, 0x77, 0x77, 0x6b, 0x6c, 0x78, 0x6b, 0x67, 0x66, 0x30, 0x79, 0x5b, 
+  0x5b, 0x6e, 0x4f, 0x69, 0x69, 0x49, 0x43, 0x3c, 0x3b, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x40, 0x40, 0x8d, 0x8d, 0x8d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x35, 0x2f, 0x2f, 0x2f, 0x2c, 0x2c, 0x27, 
+  0x27, 0x23, 0x23, 0x23, 0x34, 0x42, 0x35, 0x54, 0x27, 0x23, 0x67, 0x6c, 0x6b, 0x74, 0x77, 0x77, 
+  0x7a, 0x7a, 0x7b, 0x7c, 0x7a, 0x6f, 0x75, 0x7d, 0x77, 0x78, 0x6b, 0x6b, 0x67, 0x32, 0x32, 0x2e, 
+  0x5b, 0x6e, 0x53, 0x4f, 0x4f, 0x4a, 0x64, 0x42, 0x5f, 0x39, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x40, 0x8d, 0x40, 0x40, 0x8d, 0x40, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x2d, 0x2d, 0x2c, 0x2c, 
+  0x27, 0x27, 0x27, 0x34, 0x45, 0x45, 0x57, 0x5e, 0x5b, 0x66, 0x6c, 0x6b, 0x74, 0x77, 0x77, 0x77, 
+  0x7c, 0x7c, 0x6f, 0x7c, 0x7c, 0x7c, 0x7c, 0x7a, 0x77, 0x77, 0x77, 0x6b, 0x6b, 0x7e, 0x72, 0x7e, 
+  0x6d, 0x6e, 0x6e, 0x4f, 0x4e, 0x4a, 0x49, 0x42, 0x3c, 0x41, 0x39, 0x39, 0x73, 0x20, 0x20, 0x20, 
+  0x40, 0x8d, 0x8d, 0xb9, 0x8d, 0x8d, 0x8d, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 
+  0x27, 0x27, 0x27, 0x23, 0x3d, 0x4b, 0x50, 0x5e, 0x60, 0x67, 0x6c, 0x6b, 0x77, 0x6b, 0x7c, 0x7a, 
+  0x7c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7c, 0x7c, 0x7c, 0x77, 0x77, 0x6b, 0x80, 0x81, 0x7e, 0x30, 
+  0x6d, 0x82, 0x6e, 0x53, 0x69, 0x4e, 0x49, 0x43, 0x59, 0x3b, 0x40, 0x39, 0x40, 0x20, 0x73, 0x5f, 
+  0xb9, 0x8d, 0x8d, 0x8d, 0x40, 0x8d, 0x40, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 
+  0x27, 0x27, 0x27, 0x23, 0x3d, 0x4b, 0x50, 0x5e, 0x60, 0x67, 0x6c, 0x6b, 0x77, 0x6b, 0x7c, 0x7a, 
+  0x7c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7c, 0x7c, 0x7c, 0x77, 0x77, 0x6b, 0x80, 0x81, 0x7e, 0x30, 
+  0x6d, 0x82, 0x6e, 0x53, 0x69, 0x4e, 0x49, 0x43, 0x59, 0x3b, 0x40, 0x39, 0x40, 0x20, 0x73, 0x5f, 
+  0xb9, 0x8d, 0x8d, 0x8d, 0x40, 0x8d, 0x40, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x33, 0x35, 0x2d, 0x2d, 0x2d, 0x2c, 
+  0x27, 0x27, 0x35, 0x29, 0x37, 0x33, 0x54, 0x5e, 0x66, 0x67, 0x6c, 0x6f, 0x74, 0x7a, 0x7c, 0x7c, 
+  0x7f, 0x7c, 0x7f, 0x83, 0x83, 0x84, 0x84, 0x83, 0x7c, 0x74, 0x77, 0x6b, 0x81, 0x81, 0x70, 0x62, 
+  0x5b, 0x6d, 0x5b, 0x53, 0x4f, 0x69, 0x4a, 0x43, 0x42, 0x3b, 0x39, 0x40, 0x39, 0x85, 0x5f, 0x85, 
+  0xb9, 0x40, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x33, 0x35, 0x2f, 0x2d, 0x2c, 0x2c, 
+  0x27, 0x21, 0x20, 0x20, 0x29, 0x21, 0x54, 0x5e, 0x67, 0x67, 0x6b, 0x77, 0x7a, 0x74, 0x7c, 0x7c, 
+  0x7c, 0x7f, 0x86, 0x84, 0x87, 0x87, 0x87, 0x88, 0x7f, 0x89, 0x80, 0x8a, 0x8b, 0x89, 0x60, 0x7e, 
+  0x8b, 0x5b, 0x6e, 0x6e, 0x4f, 0x8c, 0x4a, 0x64, 0x59, 0x5f, 0x39, 0x8d, 0x8e, 0x8f, 0x5f, 0x85, 
+  0x41, 0x40, 0x40, 0xb9, 0x40, 0x8d, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x35, 0x2f, 0x2f, 0x2d, 0x2d, 
+  0x29, 0x20, 0x20, 0x20, 0x29, 0x21, 0x56, 0x5e, 0x66, 0x6b, 0x74, 0x74, 0x77, 0x7c, 0x7c, 0x7c, 
+  0x7f, 0x7f, 0x83, 0x88, 0x87, 0x90, 0x90, 0x87, 0x84, 0x7f, 0x81, 0x80, 0x78, 0x6b, 0x81, 0x8b, 
+  0x6d, 0x6d, 0x5b, 0x6e, 0x4f, 0x4e, 0x4a, 0x43, 0x42, 0x91, 0x8e, 0x92, 0x8e, 0x8e, 0x5f, 0x5f, 
+  0xb9, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x35, 0x2f, 0x2f, 0x2d, 0x2d, 
+  0x29, 0x20, 0x20, 0x20, 0x29, 0x21, 0x56, 0x5e, 0x66, 0x6b, 0x74, 0x74, 0x77, 0x7c, 0x7c, 0x7c, 
+  0x7f, 0x7f, 0x83, 0x88, 0x87, 0x90, 0x90, 0x87, 0x84, 0x7f, 0x81, 0x80, 0x78, 0x6b, 0x81, 0x8b, 
+  0x6d, 0x6d, 0x5b, 0x6e, 0x4f, 0x4e, 0x4a, 0x43, 0x42, 0x91, 0x8e, 0x92, 0x8e, 0x8e, 0x5f, 0x5f, 
+  0xb9, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x24, 0x33, 0x35, 0x35, 0x2f, 0x51, 0x37, 
+  0x20, 0x20, 0x20, 0x20, 0x37, 0x33, 0x56, 0x93, 0x67, 0x6c, 0x74, 0x77, 0x6f, 0x7c, 0x7f, 0x7f, 
+  0x7f, 0x7f, 0x84, 0x87, 0x90, 0x90, 0x90, 0x90, 0x88, 0x86, 0x80, 0x94, 0x8b, 0x78, 0x81, 0x8b, 
+  0x8b, 0x6d, 0x5b, 0x6e, 0x53, 0x4e, 0x4a, 0x4a, 0x6a, 0x6a, 0x95, 0x92, 0x8e, 0x96, 0x5f, 0x5f, 
+  0x85, 0x8d, 0x40, 0x8d, 0x40, 0xb9, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2a, 0x24, 0x21, 0x33, 0x35, 0x2f, 0x29, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x29, 0x58, 0x5c, 0x31, 0x97, 0x25, 0x6b, 0x77, 0x7c, 0x7c, 0x7c, 0x7c, 
+  0x7f, 0x7f, 0x86, 0x88, 0x90, 0x90, 0x90, 0x87, 0x88, 0x7f, 0x7a, 0x98, 0x94, 0x81, 0x81, 0x8b, 
+  0x99, 0x5b, 0x5b, 0x6e, 0x4f, 0x6e, 0x9a, 0x9a, 0x9b, 0x9b, 0x6a, 0x8e, 0x8e, 0x8f, 0x91, 0x5f, 
+  0x41, 0x8d, 0xb9, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x33, 0x2f, 0x9c, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x54, 0x27, 0x8b, 0x8b, 0x6b, 0x6b, 0x7a, 0x7c, 0x7f, 0x7f, 
+  0x7f, 0x7f, 0x83, 0x84, 0x87, 0x87, 0x90, 0x88, 0x84, 0x7a, 0x6f, 0x98, 0x81, 0x81, 0x81, 0x8b, 
+  0x6d, 0x6d, 0x9d, 0x9e, 0x9f, 0x9f, 0x9a, 0x9a, 0x9b, 0x9c, 0x6a, 0x95, 0x92, 0x96, 0x5f, 0x85, 
+  0xb9, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x33, 0x33, 0x2f, 0x9c, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x4b, 0x54, 0x27, 0x8b, 0x8b, 0x6b, 0x6b, 0x7a, 0x7c, 0x7f, 0x7f, 
+  0x7f, 0x7f, 0x83, 0x84, 0x87, 0x87, 0x90, 0x88, 0x84, 0x7a, 0x6f, 0x98, 0x81, 0x81, 0x81, 0x8b, 
+  0x6d, 0x6d, 0x9d, 0x9e, 0x9f, 0x9f, 0x9a, 0x9a, 0x9b, 0x9c, 0x6a, 0x95, 0x92, 0x96, 0x5f, 0x85, 
+  0xb9, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x2a, 0x21, 0x33, 0x2a, 0x9d, 0xa0, 0x9e, 
+  0x85, 0x20, 0x20, 0x20, 0x20, 0x4b, 0xa1, 0x6e, 0x8b, 0x8b, 0x22, 0x74, 0x77, 0x7a, 0x7c, 0x7c, 
+  0x7f, 0x7f, 0x7f, 0x86, 0x84, 0x88, 0x84, 0x84, 0x7f, 0x7c, 0x80, 0x89, 0x94, 0x81, 0x81, 0xa2, 
+  0xa2, 0xa3, 0xa3, 0xa4, 0x9f, 0xa5, 0xa6, 0x9a, 0x9b, 0x9b, 0x6a, 0x8e, 0x8e, 0x8f, 0x8f, 0x5f, 
+  0x85, 0xb9, 0x8d, 0x8d, 0x8d, 0x40, 0x8d, 0x8d, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2a, 0x24, 0x33, 0x20, 0xa6, 0xa7, 0xa8, 
+  0xa9, 0xaa, 0xa4, 0x9b, 0x5f, 0x3d, 0x51, 0x6e, 0x6d, 0x8b, 0x81, 0x6b, 0x77, 0x7a, 0x7c, 0x7f, 
+  0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xab, 0x7f, 0xab, 0x6f, 0x89, 0x94, 0xaa, 0x98, 0xac, 0xa9, 0x81, 
+  0xa7, 0x9d, 0xa3, 0xad, 0x9f, 0x9f, 0x9a, 0x9a, 0x9b, 0x9c, 0x6a, 0x95, 0x8e, 0x8e, 0x96, 0x5f, 
+  0x85, 0xb9, 0x40, 0x8d, 0x8d, 0x40, 0x8d, 0x8d, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2a, 0x24, 0x37, 0x20, 0x92, 0x9d, 0xa7, 
+  0xac, 0xaa, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0x94, 0xa9, 0x94, 0xac, 0xb3, 0x77, 0x74, 0x7c, 0x89, 
+  0x7b, 0x6f, 0x83, 0x80, 0x75, 0x75, 0x75, 0x94, 0xb4, 0xb1, 0xb0, 0xae, 0xaa, 0xaa, 0xa9, 0xa9, 
+  0xa0, 0xa4, 0xa4, 0xad, 0x9f, 0x9e, 0xa6, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x92, 0x8f, 0x96, 0x5f, 
+  0x85, 0x41, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2a, 0x24, 0x37, 0x20, 0x92, 0x9d, 0xa7, 
+  0xac, 0xaa, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0x94, 0xa9, 0x94, 0xac, 0xb3, 0x77, 0x74, 0x7c, 0x89, 
+  0x7b, 0x6f, 0x83, 0x80, 0x75, 0x75, 0x75, 0x94, 0xb4, 0xb1, 0xb0, 0xae, 0xaa, 0xaa, 0xa9, 0xa9, 
+  0xa0, 0xa4, 0xa4, 0xad, 0x9f, 0x9e, 0xa6, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x92, 0x8f, 0x96, 0x5f, 
+  0x85, 0x41, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x36, 0x20, 0x20, 0x8e, 0xa0, 0xa7, 
+  0xa8, 0xac, 0xaa, 0xaf, 0xb0, 0xb1, 0xb5, 0xb4, 0xb5, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 
+  0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb7, 0xb2, 0xb8, 0xb8, 0xaa, 0xac, 0xac, 0xa8, 0xa8, 
+  0xa7, 0xa0, 0xa4, 0x9f, 0x9f, 0x9e, 0x9a, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x8e, 0x8f, 0x96, 0x5f, 
+  0x85, 0xb9, 0x40, 0xb9, 0x8d, 0x40, 0x40, 0x40, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x38, 0x20, 0x20, 0x20, 0xa0, 0xa7, 
+  0xa7, 0xa9, 0xae, 0xae, 0xb0, 0xb1, 0xb1, 0xb1, 0xb7, 0xb7, 0xb7, 0xb7, 0xb6, 0xb6, 0xb7, 0xb7, 
+  0xb7, 0xb6, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb5, 0xb0, 0xaf, 0xae, 0xae, 0xaa, 0xa9, 0xa7, 0xa7, 
+  0x9d, 0xa0, 0xa3, 0xa4, 0x9f, 0xa5, 0x9e, 0x9a, 0x9b, 0x9c, 0x95, 0x95, 0x92, 0x8e, 0x5f, 0x5f, 
+  0x85, 0x85, 0x8d, 0x40, 0x8d, 0xb9, 0x8d, 0x8d, 0x8d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20, 0x20, 0xa4, 0x9d, 
+  0xa7, 0xa9, 0xaa, 0xaa, 0xaf, 0xb0, 0xb2, 0xb5, 0xb5, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 
+  0xb7, 0xb7, 0xb6, 0xb6, 0xb7, 0xb5, 0xb2, 0xb2, 0xb0, 0xaf, 0xae, 0xaa, 0xaa, 0xa9, 0xa8, 0xa7, 
+  0x9d, 0xa0, 0xa3, 0xa4, 0x9f, 0x9e, 0x9e, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x8e, 0x8e, 0x8f, 0x5f, 
+  0x85, 0xb9, 0x8d, 0x40, 0x8d, 0x8d, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20, 0x20, 0xa4, 0x9d, 
+  0xa7, 0xa9, 0xaa, 0xaa, 0xaf, 0xb0, 0xb2, 0xb5, 0xb5, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 
+  0xb7, 0xb7, 0xb6, 0xb6, 0xb7, 0xb5, 0xb2, 0xb2, 0xb0, 0xaf, 0xae, 0xaa, 0xaa, 0xa9, 0xa8, 0xa7, 
+  0x9d, 0xa0, 0xa3, 0xa4, 0x9f, 0x9e, 0x9e, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x8e, 0x8e, 0x8f, 0x5f, 
+  0x85, 0xb9, 0x8d, 0x40, 0x8d, 0x8d, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 0xa4, 
+  0xa7, 0xa8, 0xa9, 0xaa, 0xae, 0xaf, 0xb0, 0xb1, 0xb1, 0xb5, 0xb5, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 
+  0xb7, 0xb7, 0xb5, 0xb5, 0xb4, 0xb5, 0xb1, 0xb0, 0xb0, 0xaf, 0xae, 0xaa, 0xac, 0xac, 0xa7, 0xa7, 
+  0xa0, 0xa3, 0xa4, 0xad, 0x9f, 0xa5, 0x9e, 0x9a, 0x8c, 0x9b, 0x6a, 0x95, 0x8e, 0x8e, 0x96, 0x91, 
+  0x5f, 0x85, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x40, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x92, 0xa4, 
+  0xa0, 0xa8, 0xa9, 0xaa, 0xae, 0xae, 0xb0, 0xb1, 0xb1, 0xb5, 0xb1, 0xb5, 0xb5, 0xb5, 0xb7, 0xb7, 
+  0xb7, 0xb7, 0xb7, 0xb1, 0xb5, 0xb2, 0xb0, 0xb0, 0xb0, 0xaf, 0xae, 0xaa, 0xa9, 0xac, 0xa8, 0xa7, 
+  0xa0, 0xa0, 0xa4, 0xa4, 0x9f, 0x9e, 0x9e, 0x9b, 0x9b, 0x9b, 0x6a, 0x95, 0x95, 0x8e, 0x96, 0x91, 
+  0x5f, 0x41, 0x8d, 0x40, 0x40, 0x40, 0xb9, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb9, 0xa4, 
+  0x9d, 0xa7, 0xa8, 0xac, 0xaa, 0xaa, 0xaf, 0xb0, 0xb2, 0xb2, 0xb5, 0xb5, 0xb5, 0xb4, 0xb4, 0xb5, 
+  0xb5, 0xb5, 0xb1, 0xb5, 0xb2, 0xb2, 0xb1, 0xb0, 0xb8, 0xae, 0xaa, 0xaa, 0xac, 0xa8, 0xa8, 0xa7, 
+  0x9d, 0xa0, 0xa4, 0xad, 0x9f, 0x9f, 0x9a, 0x9a, 0x8c, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x8f, 0x5f, 
+  0x5f, 0xb9, 0xb9, 0xb9, 0x8d, 0x8d, 0x8d, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb9, 0xa4, 
+  0x9d, 0xa7, 0xa8, 0xac, 0xaa, 0xaa, 0xaf, 0xb0, 0xb2, 0xb2, 0xb5, 0xb5, 0xb5, 0xb4, 0xb4, 0xb5, 
+  0xb5, 0xb5, 0xb1, 0xb5, 0xb2, 0xb2, 0xb1, 0xb0, 0xb8, 0xae, 0xaa, 0xaa, 0xac, 0xa8, 0xa8, 0xa7, 
+  0x9d, 0xa0, 0xa4, 0xad, 0x9f, 0x9f, 0x9a, 0x9a, 0x8c, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x8f, 0x5f, 
+  0x5f, 0xb9, 0xb9, 0xb9, 0x8d, 0x8d, 0x8d, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa4, 
+  0xa0, 0xa0, 0xa7, 0xa9, 0xaa, 0xaa, 0xae, 0xaf, 0xaf, 0xb0, 0xb1, 0xb2, 0xb1, 0xb1, 0xb5, 0xb2, 
+  0xb5, 0xb5, 0xb2, 0xb1, 0xb1, 0xb1, 0xb0, 0xaf, 0xaf, 0xae, 0xaa, 0xaa, 0xa9, 0xa9, 0xa7, 0xa0, 
+  0xa0, 0xa0, 0xa4, 0x9f, 0x9f, 0xa5, 0x9e, 0x9a, 0x9b, 0x9b, 0x6a, 0x95, 0x8e, 0x8e, 0x8f, 0x5f, 
+  0x5f, 0x85, 0xb9, 0x8d, 0x8d, 0x65, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9f, 
+  0xa4, 0x9d, 0xa8, 0xa9, 0xac, 0xaa, 0xae, 0xaf, 0xb0, 0xb0, 0xb1, 0xb1, 0xb2, 0xb5, 0xb1, 0xb1, 
+  0xb2, 0xb2, 0xb1, 0xb2, 0xb0, 0xb0, 0xb0, 0xaf, 0xae, 0xae, 0xae, 0xac, 0xa9, 0xa7, 0xa7, 0xa7, 
+  0xa0, 0xa3, 0xa4, 0xad, 0x9f, 0x9e, 0x9e, 0x9a, 0x8c, 0x9b, 0x9c, 0x6a, 0x92, 0x8e, 0x8e, 0x8f, 
+  0x5f, 0x41, 0x41, 0x8d, 0x8d, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0xa4, 0xa3, 0x9d, 0xa7, 0xac, 0xa9, 0xac, 0xaa, 0xaf, 0xb0, 0xb0, 0xb1, 0xb1, 0xb2, 0xb2, 0xb1, 
+  0xb1, 0xb2, 0xb1, 0xb1, 0xb0, 0xaf, 0xaf, 0xb8, 0xaa, 0xaa, 0xaa, 0xac, 0xac, 0xa9, 0xa7, 0xa7, 
+  0xa0, 0xa0, 0xa4, 0x9f, 0x9f, 0x9e, 0x9a, 0x9a, 0x9b, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x91, 0x96, 
+  0x85, 0x85, 0xb9, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0xa4, 0xa3, 0x9d, 0xa7, 0xac, 0xa9, 0xac, 0xaa, 0xaf, 0xb0, 0xb0, 0xb1, 0xb1, 0xb2, 0xb2, 0xb1, 
+  0xb1, 0xb2, 0xb1, 0xb1, 0xb0, 0xaf, 0xaf, 0xb8, 0xaa, 0xaa, 0xaa, 0xac, 0xac, 0xa9, 0xa7, 0xa7, 
+  0xa0, 0xa0, 0xa4, 0x9f, 0x9f, 0x9e, 0x9a, 0x9a, 0x9b, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x91, 0x96, 
+  0x85, 0x85, 0xb9, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 
+  0x9f, 0xa4, 0x9d, 0xa7, 0xa8, 0xaa, 0xa9, 0xae, 0xae, 0xaf, 0xaf, 0xaf, 0xb0, 0xb0, 0xb1, 0xb1, 
+  0xb1, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xaf, 0xae, 0xae, 0xaa, 0xac, 0xa9, 0xa8, 0xa8, 0xa8, 0x9d, 
+  0xa0, 0xa3, 0xa4, 0xa4, 0x9f, 0xa5, 0x9e, 0x9a, 0x8c, 0x9c, 0x6a, 0x95, 0x92, 0x8e, 0x8e, 0x8f, 
+  0x5f, 0x85, 0xb9, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa4, 0xa4, 0xa0, 0xa0, 0xa7, 0xac, 0xaa, 0xaa, 0xaa, 0xae, 0xaf, 0xb8, 0xaf, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xb0, 0xb0, 0xaf, 0xaf, 0xaf, 0xae, 0xae, 0xaa, 0xaa, 0xa9, 0xa9, 0xa7, 0xa0, 0x9d, 
+  0xa0, 0xa4, 0xa4, 0xad, 0xa5, 0x9e, 0x9a, 0x9a, 0x8c, 0x9b, 0x9c, 0x95, 0x8e, 0x8e, 0x8f, 0x96, 
+  0x5f, 0x85, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9f, 0xa4, 0xa0, 0x9d, 0xa8, 0xa7, 0xa9, 0xac, 0xaa, 0xaa, 0xae, 0xaf, 0xaf, 0xaf, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xb0, 0xaf, 0xaf, 0xaf, 0xaa, 0xaa, 0xaa, 0xaa, 0xac, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 
+  0xa3, 0xa0, 0x9f, 0x9f, 0x9e, 0xa5, 0x9e, 0x9a, 0x9b, 0x9b, 0x6a, 0x6a, 0x95, 0x8e, 0x8e, 0x96, 
+  0x5f, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9f, 0xa4, 0xa0, 0x9d, 0xa8, 0xa7, 0xa9, 0xac, 0xaa, 0xaa, 0xae, 0xaf, 0xaf, 0xaf, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xb0, 0xaf, 0xaf, 0xaf, 0xaa, 0xaa, 0xaa, 0xaa, 0xac, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 
+  0xa3, 0xa0, 0x9f, 0x9f, 0x9e, 0xa5, 0x9e, 0x9a, 0x9b, 0x9b, 0x6a, 0x6a, 0x95, 0x8e, 0x8e, 0x96, 
+  0x5f, 0x48, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9b, 0x9f, 0xa4, 0xa0, 0xa7, 0xa7, 0xa9, 0xa9, 0xaa, 0xaa, 0xaa, 0xaf, 0xae, 0xae, 0xaf, 0xaf, 
+  0xaf, 0xaf, 0xaf, 0xaf, 0xaf, 0xae, 0xaf, 0xaa, 0xaa, 0xa9, 0xac, 0xa9, 0xa7, 0xa7, 0xa7, 0xa0, 
+  0xa0, 0xa3, 0xa4, 0xad, 0x9f, 0x9e, 0x9a, 0x9e, 0x9b, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x8f, 0x5f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8f, 0x9f, 0xa3, 0xa0, 0xa0, 0xa7, 0xa8, 0xa9, 0xac, 0xaa, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaf, 
+  0xaf, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaa, 0xae, 0xaa, 0xac, 0xa9, 0xa9, 0xa8, 0xa8, 0x9d, 0xa0, 
+  0xa4, 0xa4, 0xa4, 0x9f, 0x9e, 0x9e, 0xa6, 0x9a, 0x8c, 0x9b, 0x6a, 0x6a, 0x92, 0x8e, 0x40, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x41, 0x9f, 0xa4, 0xa3, 0xa0, 0xa0, 0xa8, 0xa8, 0xa9, 0xa9, 0xac, 0xaa, 0xaa, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xac, 0xac, 0xac, 0xa9, 0xa9, 0xa8, 0xa7, 0xa7, 0x9d, 0x9d, 
+  0xa3, 0xa4, 0xa4, 0xad, 0x9f, 0x9e, 0x9a, 0x9a, 0x8c, 0x9b, 0x6a, 0x95, 0x85, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x41, 0x9f, 0xa4, 0xa3, 0xa0, 0xa0, 0xa8, 0xa8, 0xa9, 0xa9, 0xac, 0xaa, 0xaa, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xac, 0xac, 0xac, 0xa9, 0xa9, 0xa8, 0xa7, 0xa7, 0x9d, 0x9d, 
+  0xa3, 0xa4, 0xa4, 0xad, 0x9f, 0x9e, 0x9a, 0x9a, 0x8c, 0x9b, 0x6a, 0x95, 0x85, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9e, 0x9f, 0xa4, 0xa0, 0x9d, 0xa7, 0xa7, 0xa9, 0xa9, 0xa9, 0xaa, 0xaa, 0xaa, 0xaa, 0xae, 
+  0xae, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa9, 0xa9, 0xa9, 0xa7, 0xa7, 0xa0, 0xa0, 0xa3, 
+  0xa0, 0xa4, 0x9f, 0x9f, 0xa5, 0x9e, 0x9e, 0x9a, 0x9b, 0x9b, 0x5f, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x9b, 0x9f, 0xa4, 0xa4, 0xa0, 0x9d, 0xa8, 0xa9, 0xa9, 0xa9, 0xac, 0xaa, 0xaa, 0xaa, 0xaa, 
+  0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xac, 0xac, 0xac, 0xa9, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 0xa0, 
+  0xa3, 0xa4, 0x9f, 0x9f, 0x9e, 0x9e, 0x9a, 0x6a, 0x5f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb9, 0x8e, 0xa3, 0xa0, 0xa0, 0xa0, 0xa8, 0xa8, 0xac, 0xa9, 0xac, 0xac, 0xac, 0xaa, 
+  0xaa, 0xae, 0xaa, 0xaa, 0xac, 0xac, 0xa9, 0xac, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 0x9d, 0xa0, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0x9f, 0x9f, 0x8f, 0xb9, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xb9, 0x8e, 0xa3, 0xa0, 0xa0, 0xa0, 0xa8, 0xa8, 0xac, 0xa9, 0xac, 0xac, 0xac, 0xaa, 
+  0xaa, 0xae, 0xaa, 0xaa, 0xac, 0xac, 0xa9, 0xac, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 0x9d, 0xa0, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0x9f, 0x9f, 0x8f, 0xb9, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8e, 0x9e, 0xa0, 0xa7, 0xa7, 0xa9, 0xa8, 0xa9, 0xa9, 0xac, 0xac, 
+  0xa9, 0xaa, 0xac, 0xac, 0xa9, 0xaa, 0xa9, 0xa9, 0xa9, 0xa7, 0xa8, 0xa8, 0xa7, 0x9d, 0x9d, 0xa0, 
+  0xa3, 0x9b, 0x8e, 0xb9, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x95, 0x9e, 0xa7, 0xa9, 0xac, 0xa9, 0xa9, 
+  0xac, 0xac, 0xaa, 0xa9, 0xac, 0xa9, 0xa9, 0xa9, 0xa8, 0xa8, 0xa7, 0xa0, 0xa0, 0x95, 0x8e, 0x41, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x6a, 0x6a, 
+  0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x95, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x6a, 0x6a, 
+  0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x95, 0x85, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x21, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x2d, 0x2a, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x31, 0x31, 0x2f, 0x2d, 0x34, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x33, 0x21, 0x35, 0x35, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x31, 0x31, 0x2f, 0x2d, 0x34, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x33, 0x21, 0x35, 0x35, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x23, 0x33, 0x33, 
+  0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2d, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x21, 0x36, 0x37, 0x37, 0x38, 0x38, 0x39, 0x37, 0x38, 0x38, 0x38, 0x38, 0x35, 0x33, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x33, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2d, 0x2d, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x23, 
+  0x3a, 0x3b, 0x39, 0x26, 0x3c, 0x3c, 0x3c, 0x3c, 0x26, 0x26, 0x37, 0x39, 0x37, 0x37, 0x38, 0x37, 
+  0x36, 0x32, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x33, 0x33, 0x33, 
+  0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x3a, 0x39, 
+  0x3d, 0x3e, 0x26, 0x3f, 0x3f, 0x40, 0x3f, 0x3f, 0x3f, 0x40, 0x36, 0x3c, 0x38, 0x26, 0x37, 0x38, 
+  0x37, 0x38, 0x38, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x33, 0x33, 0x33, 
+  0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x3a, 0x39, 
+  0x3d, 0x3e, 0x26, 0x3f, 0x3f, 0x40, 0x3f, 0x3f, 0x3f, 0x40, 0x36, 0x3c, 0x38, 0x26, 0x37, 0x38, 
+  0x37, 0x38, 0x38, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x28, 0x28, 0x23, 0x23, 0x31, 
+  0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x28, 0x38, 0x26, 0x41, 
+  0x42, 0x43, 0x40, 0x44, 0x45, 0x45, 0x24, 0x45, 0x40, 0x40, 0x40, 0x3f, 0x3f, 0x46, 0x3c, 0x26, 
+  0x37, 0x37, 0x37, 0x38, 0x36, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x47, 0x47, 0x28, 0x23, 0x23, 0x33, 0x33, 
+  0x31, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x26, 0x36, 0x3f, 0x43, 
+  0x48, 0x48, 0x44, 0x49, 0x49, 0x4a, 0x49, 0x4a, 0x4b, 0x49, 0x45, 0x44, 0x40, 0x3f, 0x40, 0x3c, 
+  0x3c, 0x26, 0x38, 0x39, 0x38, 0x36, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2e, 0x2b, 0x47, 0x47, 0x28, 0x28, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x36, 0x3c, 0x3f, 0x45, 0x43, 0x4c, 
+  0x4d, 0x4d, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x49, 0x49, 0x49, 0x49, 0x50, 0x45, 0x24, 0x40, 
+  0x3f, 0x37, 0x38, 0x39, 0x51, 0x39, 0x38, 0x23, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x2e, 0x2b, 0x47, 0x47, 0x28, 0x28, 0x23, 0x23, 
+  0x33, 0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x36, 0x3c, 0x3f, 0x45, 0x43, 0x4c, 
+  0x4d, 0x4d, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x49, 0x49, 0x49, 0x49, 0x50, 0x45, 0x24, 0x40, 
+  0x3f, 0x37, 0x38, 0x39, 0x51, 0x39, 0x38, 0x23, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2e, 0x2c, 0x2c, 0x2b, 0x47, 0x28, 0x28, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x28, 0x3c, 0x40, 0x52, 0x49, 0x2e, 0x4c, 
+  0x53, 0x4c, 0x47, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x52, 0x4e, 0x48, 0x21, 0x4b, 0x40, 
+  0x24, 0x30, 0x41, 0x55, 0x39, 0x3b, 0x39, 0x38, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x35, 0x2e, 0x2c, 0x2c, 0x47, 0x28, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x47, 0x3c, 0x45, 0x49, 0x4f, 0x4f, 0x54, 0x54, 
+  0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x33, 0x54, 0x54, 0x23, 0x4f, 0x4f, 0x4b, 0x48, 0x21, 
+  0x24, 0x57, 0x58, 0x41, 0x38, 0x3b, 0x39, 0x39, 0x59, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x32, 0x2e, 0x2e, 0x2b, 0x47, 0x47, 0x28, 0x23, 0x33, 
+  0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x3c, 0x24, 0x52, 0x4f, 0x54, 0x5a, 0x56, 0x56, 
+  0x56, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x56, 0x5c, 0x54, 0x54, 0x47, 0x4d, 0x4c, 
+  0x5d, 0x5e, 0x43, 0x3e, 0x5f, 0x55, 0x3b, 0x3b, 0x3b, 0x21, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x27, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x32, 0x2e, 0x2e, 0x2b, 0x47, 0x47, 0x28, 0x23, 0x33, 
+  0x33, 0x31, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x3c, 0x24, 0x52, 0x4f, 0x54, 0x5a, 0x56, 0x56, 
+  0x56, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x56, 0x5c, 0x54, 0x54, 0x47, 0x4d, 0x4c, 
+  0x5d, 0x5e, 0x43, 0x3e, 0x5f, 0x55, 0x3b, 0x3b, 0x3b, 0x21, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x27, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x35, 0x2e, 0x2c, 0x47, 0x47, 0x47, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x30, 0x40, 0x49, 0x4f, 0x54, 0x56, 0x56, 0x5b, 0x5b, 
+  0x60, 0x61, 0x60, 0x60, 0x61, 0x62, 0x2a, 0x5b, 0x5b, 0x5b, 0x63, 0x56, 0x33, 0x53, 0x64, 0x53, 
+  0x48, 0x48, 0x5e, 0x42, 0x58, 0x5f, 0x65, 0x39, 0x39, 0x39, 0x23, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x20, 0x20, 0x20, 0x20, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x32, 0x2e, 0x2e, 0x2c, 0x47, 0x28, 0x23, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x31, 0x2c, 0x3f, 0x45, 0x4f, 0x54, 0x5c, 0x5b, 0x5b, 0x60, 0x66, 
+  0x61, 0x60, 0x66, 0x66, 0x60, 0x61, 0x67, 0x60, 0x56, 0x25, 0x68, 0x61, 0x23, 0x69, 0x53, 0x64, 
+  0x53, 0x4d, 0x48, 0x43, 0x43, 0x41, 0x55, 0x39, 0x3b, 0x51, 0x59, 0x27, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x73, 0x51, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x35, 0x35, 0x2e, 0x2c, 0x2c, 0x47, 0x47, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x33, 0x31, 0x30, 0x50, 0x4f, 0x5a, 0x5b, 0x5b, 0x5b, 0x60, 0x61, 0x66, 
+  0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x66, 0x66, 0x68, 0x6b, 0x6c, 0x2a, 0x6b, 0x6c, 0x69, 0x53, 
+  0x64, 0x64, 0x4c, 0x5d, 0x5d, 0x42, 0x41, 0x37, 0x3b, 0x3b, 0x51, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x35, 0x35, 0x2e, 0x2c, 0x2c, 0x47, 0x47, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x33, 0x31, 0x30, 0x50, 0x4f, 0x5a, 0x5b, 0x5b, 0x5b, 0x60, 0x61, 0x66, 
+  0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x66, 0x66, 0x68, 0x6b, 0x6c, 0x2a, 0x6b, 0x6c, 0x69, 0x53, 
+  0x64, 0x64, 0x4c, 0x5d, 0x5d, 0x42, 0x41, 0x37, 0x3b, 0x3b, 0x51, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x32, 0x32, 0x2e, 0x47, 0x47, 0x47, 0x47, 0x28, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x33, 0x30, 0x50, 0x4f, 0x56, 0x5b, 0x5b, 0x60, 0x66, 0x6a, 0x6d, 
+  0x6d, 0x6d, 0x6d, 0x6d, 0x6e, 0x6d, 0x66, 0x6e, 0x6f, 0x70, 0x70, 0x6b, 0x5b, 0x71, 0x69, 0x6c, 
+  0x53, 0x64, 0x4d, 0x4c, 0x43, 0x5d, 0x5f, 0x72, 0x65, 0x39, 0x39, 0x73, 0x20, 0x20, 0x26, 0x24, 
+  0x2d, 0x2a, 0x24, 0x20, 0x3b, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x24, 0x24, 0x35, 0x35, 0x32, 0x2e, 0x47, 0x47, 0x28, 0x28, 
+  0x28, 0x23, 0x33, 0x23, 0x33, 0x44, 0x29, 0x4b, 0x54, 0x56, 0x5b, 0x60, 0x6a, 0x6a, 0x6d, 0x6a, 
+  0x74, 0x74, 0x74, 0x74, 0x22, 0x75, 0x70, 0x76, 0x6b, 0x6b, 0x77, 0x70, 0x6f, 0x6f, 0x71, 0x69, 
+  0x53, 0x53, 0x64, 0x64, 0x48, 0x5e, 0x43, 0x5f, 0x3d, 0x51, 0x39, 0x51, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x3b, 0xbb, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x32, 0x2e, 0x2c, 0x2c, 0x47, 0x47, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x33, 0x50, 0x52, 0x5a, 0x56, 0x5b, 0x61, 0x6a, 0x6a, 0x6d, 0x6e, 0x74, 
+  0x76, 0x74, 0x78, 0x78, 0x75, 0x79, 0x74, 0x76, 0x6d, 0x6e, 0x77, 0x77, 0x6f, 0x70, 0x6c, 0x71, 
+  0x6c, 0x69, 0x53, 0x4d, 0x48, 0x5d, 0x42, 0x41, 0x3d, 0x39, 0x51, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3b, 0xbb, 0xbb, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x32, 0x2e, 0x2c, 0x2c, 0x47, 0x47, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x33, 0x50, 0x52, 0x5a, 0x56, 0x5b, 0x61, 0x6a, 0x6a, 0x6d, 0x6e, 0x74, 
+  0x76, 0x74, 0x78, 0x78, 0x75, 0x79, 0x74, 0x76, 0x6d, 0x6e, 0x77, 0x77, 0x6f, 0x70, 0x6c, 0x71, 
+  0x6c, 0x69, 0x53, 0x4d, 0x48, 0x5d, 0x42, 0x41, 0x3d, 0x39, 0x51, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3b, 0xbb, 0xbb, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x35, 0x35, 0x32, 0x2c, 0x2e, 0x47, 0x47, 0x28, 
+  0x23, 0x23, 0x23, 0x23, 0x33, 0x3f, 0x49, 0x5c, 0x5b, 0x60, 0x66, 0x66, 0x6d, 0x6d, 0x6e, 0x7a, 
+  0x76, 0x7b, 0x6e, 0x76, 0x6e, 0x7c, 0x76, 0x76, 0x78, 0x79, 0x77, 0x7d, 0x70, 0x70, 0x6f, 0x71, 
+  0x6c, 0x69, 0x53, 0x64, 0x4d, 0x48, 0x43, 0x42, 0x41, 0x39, 0x3b, 0x51, 0x73, 0x20, 0x20, 0x20, 
+  0x20, 0x3b, 0xbb, 0x3b, 0x3b, 0xbb, 0x3b, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x32, 0x2e, 0x32, 0x2c, 0x47, 0x47, 0x47, 
+  0x28, 0x28, 0x23, 0x33, 0x2e, 0x50, 0x4f, 0x56, 0x61, 0x60, 0x6a, 0x6d, 0x74, 0x76, 0x76, 0x7c, 
+  0x7c, 0x76, 0x7c, 0x7e, 0x7a, 0x7e, 0x7e, 0x76, 0x74, 0x7b, 0x7f, 0x77, 0x77, 0x70, 0x70, 0x6f, 
+  0x71, 0x69, 0x69, 0x64, 0x64, 0x48, 0x5d, 0x42, 0x5f, 0x37, 0x39, 0x39, 0x73, 0x20, 0x20, 0x20, 
+  0x3b, 0x72, 0x3b, 0xbb, 0xbb, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x29, 0x24, 0x35, 0x32, 0x32, 0x2e, 0x2c, 0x47, 0x47, 
+  0x28, 0x28, 0x28, 0x23, 0x36, 0x21, 0x4f, 0x56, 0x5b, 0x68, 0x6a, 0x6d, 0x74, 0x76, 0x7e, 0x7e, 
+  0x7e, 0x7e, 0x80, 0x7e, 0x7e, 0x80, 0x80, 0x7c, 0x7b, 0x79, 0x78, 0x77, 0x77, 0x77, 0x6f, 0x6f, 
+  0x71, 0x69, 0x53, 0x53, 0x4d, 0x4c, 0x48, 0x42, 0x41, 0x55, 0x3b, 0x39, 0x51, 0x20, 0x73, 0x81, 
+  0xbb, 0xbb, 0xbb, 0x72, 0x3b, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x29, 0x24, 0x35, 0x32, 0x32, 0x2e, 0x2c, 0x47, 0x47, 
+  0x28, 0x28, 0x28, 0x23, 0x36, 0x21, 0x4f, 0x56, 0x5b, 0x68, 0x6a, 0x6d, 0x74, 0x76, 0x7e, 0x7e, 
+  0x7e, 0x7e, 0x80, 0x7e, 0x7e, 0x80, 0x80, 0x7c, 0x7b, 0x79, 0x78, 0x77, 0x77, 0x77, 0x6f, 0x6f, 
+  0x71, 0x69, 0x53, 0x53, 0x4d, 0x4c, 0x48, 0x42, 0x41, 0x55, 0x3b, 0x39, 0x51, 0x20, 0x73, 0x81, 
+  0xbb, 0xbb, 0xbb, 0x72, 0x3b, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x35, 0x2e, 0x2c, 0x47, 0x2c, 0x47, 
+  0x28, 0x28, 0x35, 0x26, 0x26, 0x45, 0x54, 0x5b, 0x60, 0x66, 0x6e, 0x74, 0x74, 0x7c, 0x7c, 0x7e, 
+  0x7e, 0x80, 0x80, 0x82, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x77, 0x7f, 0x7f, 0x77, 0x77, 0x70, 
+  0x6f, 0x71, 0x6c, 0x53, 0x64, 0x4d, 0x5d, 0x5e, 0x58, 0x55, 0x39, 0x51, 0x39, 0x81, 0x41, 0x81, 
+  0x55, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x24, 0x21, 0x35, 0x32, 0x2e, 0x2e, 0x2c, 0x47, 
+  0x28, 0x21, 0x20, 0x20, 0x26, 0x21, 0x5c, 0x5b, 0x5b, 0x68, 0x6d, 0x76, 0x76, 0x7e, 0x7e, 0x80, 
+  0x7e, 0x80, 0x80, 0x88, 0x89, 0x89, 0x89, 0x84, 0x8a, 0x8b, 0x75, 0x8c, 0x77, 0x77, 0x70, 0x6f, 
+  0x6f, 0x71, 0x69, 0x69, 0x64, 0x4d, 0x48, 0x5d, 0x42, 0x55, 0x65, 0x72, 0x8d, 0x8e, 0x41, 0x81, 
+  0x55, 0x3b, 0x3b, 0xbb, 0x3b, 0x3b, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x24, 0x35, 0x35, 0x2e, 0x32, 0x2c, 0x2c, 0x47, 
+  0x39, 0x20, 0x20, 0x20, 0x58, 0x48, 0x2b, 0x5b, 0x60, 0x6a, 0x6d, 0x74, 0x7c, 0x7c, 0x7e, 0x7e, 
+  0x80, 0x80, 0x83, 0x8f, 0x89, 0x90, 0x91, 0x90, 0x84, 0x80, 0x87, 0x92, 0x8c, 0x77, 0x77, 0x70, 
+  0x6f, 0x6c, 0x69, 0x69, 0x64, 0x64, 0x5d, 0x5d, 0x43, 0x3e, 0x8d, 0x93, 0x8d, 0x94, 0x41, 0x81, 
+  0x72, 0xbb, 0xbb, 0x72, 0xbb, 0xbb, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x24, 0x35, 0x35, 0x2e, 0x32, 0x2c, 0x2c, 0x47, 
+  0x39, 0x20, 0x20, 0x20, 0x58, 0x48, 0x2b, 0x5b, 0x60, 0x6a, 0x6d, 0x74, 0x7c, 0x7c, 0x7e, 0x7e, 
+  0x80, 0x80, 0x83, 0x8f, 0x89, 0x90, 0x91, 0x90, 0x84, 0x80, 0x87, 0x92, 0x8c, 0x77, 0x77, 0x70, 
+  0x6f, 0x6c, 0x69, 0x69, 0x64, 0x64, 0x5d, 0x5d, 0x43, 0x3e, 0x8d, 0x93, 0x8d, 0x94, 0x41, 0x81, 
+  0x72, 0xbb, 0xbb, 0x72, 0xbb, 0xbb, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x35, 0x32, 0x32, 0x2e, 0x2c, 0x38, 
+  0x20, 0x20, 0x20, 0x20, 0x65, 0x48, 0x2b, 0x5b, 0x60, 0x6a, 0x74, 0x74, 0x7c, 0x7e, 0x80, 0x7e, 
+  0x80, 0x80, 0x80, 0x89, 0x91, 0x90, 0x90, 0x90, 0x83, 0x95, 0x96, 0x92, 0x77, 0x77, 0x77, 0x70, 
+  0x6f, 0x71, 0x97, 0x53, 0x64, 0x64, 0x48, 0x48, 0x98, 0x99, 0x98, 0x93, 0x8d, 0x8e, 0x3e, 0x41, 
+  0x81, 0xbb, 0x3b, 0xbb, 0xbb, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x29, 0x24, 0x21, 0x35, 0x2e, 0x2c, 0x38, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x65, 0x48, 0x53, 0x5b, 0x60, 0x6a, 0x74, 0x76, 0x7c, 0x7c, 0x80, 0x80, 
+  0x80, 0x80, 0x80, 0x89, 0x90, 0x90, 0x90, 0x90, 0x84, 0x8a, 0x86, 0x92, 0x92, 0x7d, 0x77, 0x70, 
+  0x6f, 0x71, 0x6c, 0x69, 0x53, 0x99, 0x9a, 0x9b, 0x99, 0x9c, 0x9c, 0x8d, 0x8d, 0x8e, 0x3e, 0x41, 
+  0x55, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x2b, 0x9d, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x69, 0x56, 0x61, 0x6a, 0x6d, 0x74, 0x7c, 0x7e, 0x7e, 0x80, 
+  0x80, 0x80, 0x9e, 0x83, 0x89, 0x89, 0x91, 0x89, 0x9f, 0x8a, 0x86, 0x92, 0x77, 0x77, 0x77, 0x70, 
+  0x6f, 0x6c, 0xa0, 0xa0, 0xa1, 0xa2, 0x9b, 0x9b, 0x99, 0x99, 0x9c, 0x98, 0x93, 0x8e, 0x8e, 0x81, 
+  0x72, 0xbb, 0x3b, 0x3b, 0x72, 0xbb, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x35, 0x2b, 0x9d, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x69, 0x56, 0x61, 0x6a, 0x6d, 0x74, 0x7c, 0x7e, 0x7e, 0x80, 
+  0x80, 0x80, 0x9e, 0x83, 0x89, 0x89, 0x91, 0x89, 0x9f, 0x8a, 0x86, 0x92, 0x77, 0x77, 0x77, 0x70, 
+  0x6f, 0x6c, 0xa0, 0xa0, 0xa1, 0xa2, 0x9b, 0x9b, 0x99, 0x99, 0x9c, 0x98, 0x93, 0x8e, 0x8e, 0x81, 
+  0x72, 0xbb, 0x3b, 0x3b, 0x72, 0xbb, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x29, 0x35, 0x3a, 0x24, 0xa3, 0xa4, 0xa2, 
+  0x81, 0x20, 0x20, 0x20, 0x20, 0x43, 0x64, 0x56, 0x61, 0x66, 0x6e, 0x74, 0x76, 0x7c, 0x7e, 0x80, 
+  0x80, 0x9e, 0x80, 0x80, 0x84, 0x84, 0x84, 0x95, 0x8a, 0x86, 0xa5, 0x92, 0x92, 0x77, 0x77, 0x7d, 
+  0xa3, 0xa6, 0xa6, 0xa7, 0xa0, 0xa0, 0x9a, 0x9b, 0x99, 0x9c, 0x9c, 0x93, 0x8d, 0x94, 0x41, 0x41, 
+  0x81, 0x72, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x20, 0x9a, 0xa6, 0xa8, 
+  0xa9, 0xaa, 0xab, 0x99, 0x3e, 0x41, 0x4c, 0x23, 0x68, 0x70, 0xac, 0x62, 0x7e, 0x7e, 0x7e, 0x80, 
+  0x7e, 0x80, 0x80, 0x79, 0xad, 0x8a, 0x8a, 0x8a, 0x8a, 0x75, 0x92, 0x8a, 0xa4, 0xa9, 0xa9, 0xa4, 
+  0xa3, 0xa3, 0xa7, 0xa0, 0xa0, 0xa2, 0x9a, 0x9b, 0x99, 0x9d, 0x98, 0x98, 0x8d, 0x8d, 0x94, 0x41, 
+  0x55, 0x72, 0xbb, 0x3b, 0x3b, 0x3b, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x29, 0x24, 0x38, 0x20, 0x8d, 0xa3, 0xa8, 
+  0xae, 0xae, 0xaf, 0xaf, 0xb0, 0xad, 0xb1, 0x7f, 0x86, 0xae, 0xaa, 0xb2, 0x74, 0x7c, 0x7c, 0x6a, 
+  0x80, 0xb3, 0x8a, 0xb0, 0xb1, 0x95, 0xb1, 0x8a, 0xb0, 0xb0, 0xb0, 0xaa, 0xaf, 0xae, 0xa9, 0xa8, 
+  0xa6, 0xa7, 0xab, 0xa1, 0xa0, 0xa0, 0x9b, 0x9b, 0xb4, 0x99, 0x9c, 0x98, 0x8d, 0x94, 0x3e, 0x41, 
+  0x81, 0x55, 0xbb, 0x72, 0xbb, 0xbb, 0xbb, 0x3b, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x29, 0x24, 0x38, 0x20, 0x8d, 0xa3, 0xa8, 
+  0xae, 0xae, 0xaf, 0xaf, 0xb0, 0xad, 0xb1, 0x7f, 0x86, 0xae, 0xaa, 0xb2, 0x74, 0x7c, 0x7c, 0x6a, 
+  0x80, 0xb3, 0x8a, 0xb0, 0xb1, 0x95, 0xb1, 0x8a, 0xb0, 0xb0, 0xb0, 0xaa, 0xaf, 0xae, 0xa9, 0xa8, 
+  0xa6, 0xa7, 0xab, 0xa1, 0xa0, 0xa0, 0x9b, 0x9b, 0xb4, 0x99, 0x9c, 0x98, 0x8d, 0x94, 0x3e, 0x41, 
+  0x81, 0x55, 0xbb, 0x72, 0xbb, 0xbb, 0xbb, 0x3b, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x36, 0x20, 0x20, 0x93, 0xa3, 0xa4, 
+  0xa9, 0xae, 0xaf, 0xb5, 0xb0, 0xad, 0xad, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0x9f, 0xb6, 0xb6, 0x9f, 
+  0x9f, 0x9f, 0xb6, 0x9f, 0x9f, 0x9f, 0xb1, 0xb1, 0xb7, 0xb5, 0xb5, 0xaa, 0xaa, 0xa9, 0xa4, 0xa4, 
+  0xa6, 0xa3, 0xa7, 0xa1, 0xa0, 0xb8, 0xa2, 0x9b, 0x99, 0x99, 0x9c, 0x98, 0x93, 0x94, 0x94, 0x41, 
+  0x81, 0x72, 0xbb, 0xbb, 0xbb, 0x3b, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x39, 0x20, 0x20, 0x20, 0xa3, 0xa6, 
+  0xa8, 0xa9, 0xaa, 0xaf, 0xb5, 0xb7, 0xb7, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 
+  0x9f, 0x9f, 0x9f, 0x9f, 0xb1, 0xb1, 0xb7, 0xb7, 0xad, 0xb0, 0xb5, 0xaa, 0xaa, 0xae, 0xa9, 0xa8, 
+  0xa6, 0xa3, 0xab, 0xa0, 0xa0, 0xa2, 0x9b, 0x9b, 0xb4, 0x99, 0x9c, 0x98, 0x8d, 0x8d, 0x41, 0x41, 
+  0x81, 0x55, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xab, 0xa3, 
+  0xa4, 0xa9, 0xae, 0xaf, 0xb5, 0xb0, 0xb7, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0xb6, 
+  0x9f, 0x9f, 0x9f, 0xb1, 0xb1, 0xb1, 0xad, 0xad, 0xb5, 0xb5, 0xaf, 0xaa, 0xaa, 0xa9, 0xa4, 0xa4, 
+  0xa6, 0xa3, 0xa7, 0xa1, 0xa0, 0xa0, 0xa2, 0x9b, 0x99, 0x99, 0x9c, 0x9c, 0x8d, 0x8d, 0x94, 0x41, 
+  0x81, 0x72, 0x3b, 0x3b, 0x72, 0xbb, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xab, 0xa3, 
+  0xa4, 0xa9, 0xae, 0xaf, 0xb5, 0xb0, 0xb7, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0xb6, 
+  0x9f, 0x9f, 0x9f, 0xb1, 0xb1, 0xb1, 0xad, 0xad, 0xb5, 0xb5, 0xaf, 0xaa, 0xaa, 0xa9, 0xa4, 0xa4, 
+  0xa6, 0xa3, 0xa7, 0xa1, 0xa0, 0xa0, 0xa2, 0x9b, 0x99, 0x99, 0x9c, 0x9c, 0x8d, 0x8d, 0x94, 0x41, 
+  0x81, 0x72, 0x3b, 0x3b, 0x72, 0xbb, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x93, 0xa3, 
+  0xa4, 0xa8, 0xae, 0xaa, 0xaf, 0xb5, 0xb0, 0xb7, 0xb1, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 0x9f, 0xb1, 
+  0x9f, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xb7, 0xb0, 0xad, 0xb9, 0xb5, 0xaa, 0xa9, 0xae, 0xa9, 0xa4, 
+  0xa3, 0xa3, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0x9b, 0xb4, 0x9d, 0x9c, 0x98, 0x93, 0x8d, 0x94, 0x41, 
+  0x41, 0x81, 0xbb, 0xbb, 0xbb, 0x3b, 0x72, 0xbb, 0x51, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8d, 0xab, 
+  0xa3, 0xa4, 0xa9, 0xae, 0xaf, 0xaf, 0xb0, 0xb0, 0xad, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0x9f, 0x9f, 
+  0x9f, 0xb1, 0x9f, 0xad, 0xad, 0xb7, 0xb0, 0xb0, 0xb5, 0xaf, 0xaf, 0xaa, 0xa9, 0xa9, 0xa8, 0xa4, 
+  0xa3, 0xa3, 0xa3, 0xab, 0xa0, 0xa2, 0xa2, 0x9b, 0xb4, 0x99, 0x9c, 0x98, 0x93, 0x8d, 0x94, 0x41, 
+  0x41, 0x81, 0xbb, 0x3b, 0xbb, 0xbb, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0xa7, 
+  0xa3, 0xa4, 0xa8, 0xae, 0xaa, 0xaf, 0xb5, 0xb0, 0xb7, 0xb7, 0xb1, 0xb1, 0xba, 0x9f, 0xb1, 0xb1, 
+  0xb1, 0xb1, 0xad, 0xb1, 0xad, 0xb7, 0xb0, 0xad, 0xb5, 0xb5, 0xaa, 0xaa, 0xae, 0xa9, 0xa4, 0xa4, 
+  0xa3, 0xa3, 0xab, 0xa1, 0xa0, 0xb8, 0x9b, 0x9b, 0x99, 0x99, 0x9d, 0x98, 0x8d, 0x8d, 0x8e, 0x3e, 
+  0x41, 0x55, 0x72, 0xbb, 0xbb, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0xa7, 
+  0xa3, 0xa4, 0xa8, 0xae, 0xaa, 0xaf, 0xb5, 0xb0, 0xb7, 0xb7, 0xb1, 0xb1, 0xba, 0x9f, 0xb1, 0xb1, 
+  0xb1, 0xb1, 0xad, 0xb1, 0xad, 0xb7, 0xb0, 0xad, 0xb5, 0xb5, 0xaa, 0xaa, 0xae, 0xa9, 0xa4, 0xa4, 
+  0xa3, 0xa3, 0xab, 0xa1, 0xa0, 0xb8, 0x9b, 0x9b, 0x99, 0x99, 0x9d, 0x98, 0x8d, 0x8d, 0x8e, 0x3e, 
+  0x41, 0x55, 0x72, 0xbb, 0xbb, 0xbb, 0xbb, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xab, 
+  0xa7, 0xa3, 0xa4, 0xa9, 0xae, 0xaf, 0xaf, 0xb5, 0xb0, 0xb0, 0xb7, 0xb7, 0xb1, 0xad, 0xb1, 0xb1, 
+  0xb1, 0xb1, 0xad, 0xb7, 0xad, 0xad, 0xb9, 0xb9, 0xaf, 0xaf, 0xaf, 0xae, 0xae, 0xa9, 0xa8, 0xa4, 
+  0xa3, 0xa3, 0xab, 0xa1, 0xa0, 0xb8, 0x9b, 0x9b, 0x99, 0x99, 0x9d, 0x9c, 0x98, 0x8d, 0x8e, 0x41, 
+  0x81, 0x81, 0x72, 0xbb, 0x3b, 0x3b, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xab, 
+  0xab, 0xa6, 0xa4, 0xa9, 0xa9, 0xaa, 0xaf, 0xaf, 0xb0, 0xb0, 0xb7, 0xb7, 0xb7, 0xb7, 0xb1, 0xb1, 
+  0xad, 0xb7, 0xb7, 0xb7, 0xb0, 0xb0, 0xb0, 0xb5, 0xaa, 0xaf, 0xaa, 0xae, 0xa9, 0xa8, 0xa4, 0xa6, 
+  0xa3, 0xab, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0x9b, 0xb4, 0x9d, 0x9c, 0x98, 0x93, 0x8d, 0x94, 0x94, 
+  0x41, 0x55, 0x81, 0x3b, 0xbb, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8d, 
+  0xab, 0xa6, 0xa6, 0xa8, 0xa9, 0xa9, 0xaa, 0xaa, 0xb5, 0xb9, 0xb0, 0xb0, 0xad, 0xb0, 0xb7, 0xad, 
+  0xb7, 0xad, 0xad, 0xb7, 0xad, 0xb9, 0xb5, 0xb5, 0xaa, 0xaa, 0xaa, 0xae, 0xa9, 0xa8, 0xa4, 0xa4, 
+  0xa6, 0xa3, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0x9b, 0xb4, 0x99, 0x9d, 0x98, 0x93, 0x8d, 0x8d, 0x3e, 
+  0x81, 0x81, 0x55, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8d, 
+  0xab, 0xa6, 0xa6, 0xa8, 0xa9, 0xa9, 0xaa, 0xaa, 0xb5, 0xb9, 0xb0, 0xb0, 0xad, 0xb0, 0xb7, 0xad, 
+  0xb7, 0xad, 0xad, 0xb7, 0xad, 0xb9, 0xb5, 0xb5, 0xaa, 0xaa, 0xaa, 0xae, 0xa9, 0xa8, 0xa4, 0xa4, 
+  0xa6, 0xa3, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0x9b, 0xb4, 0x99, 0x9d, 0x98, 0x93, 0x8d, 0x8d, 0x3e, 
+  0x81, 0x81, 0x55, 0xbb, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8d, 
+  0xab, 0xab, 0xa3, 0xa4, 0xa8, 0xae, 0xae, 0xaf, 0xaf, 0xb5, 0xb0, 0xb0, 0xb0, 0xb7, 0xb0, 0xb0, 
+  0xad, 0xb7, 0xb0, 0xb0, 0xb5, 0xb9, 0xb0, 0xb5, 0xaf, 0xaf, 0xaa, 0xa9, 0xa9, 0xa4, 0xa4, 0xa6, 
+  0xa3, 0xa3, 0xab, 0xab, 0xa0, 0xa0, 0x9b, 0x9b, 0x99, 0x99, 0x9c, 0x9c, 0x98, 0x8d, 0x94, 0x8e, 
+  0x41, 0x81, 0x72, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa1, 0xa3, 0xab, 0xa4, 0xa4, 0xa9, 0xae, 0xaa, 0xaa, 0xaf, 0xb5, 0xb5, 0xb0, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xb0, 0xb0, 0xb5, 0xb5, 0xaf, 0xaf, 0xaa, 0xaa, 0xae, 0xae, 0xa9, 0xa8, 0xa4, 0xa3, 
+  0xa3, 0xa7, 0xab, 0xa1, 0xa0, 0xb8, 0x9b, 0x9b, 0x99, 0x99, 0x9c, 0x98, 0x93, 0x8d, 0x94, 0x8e, 
+  0x41, 0x41, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa0, 0xa0, 0xa3, 0xa3, 0xa8, 0xa4, 0xa9, 0xae, 0xaa, 0xaa, 0xaf, 0xb5, 0xaf, 0xb0, 0xb5, 0xb5, 
+  0xb0, 0xb5, 0xb5, 0xb9, 0xb5, 0xaf, 0xb5, 0xaa, 0xaf, 0xaa, 0xa9, 0xa9, 0xa8, 0xa4, 0xa6, 0xa6, 
+  0xa7, 0xab, 0xab, 0xa0, 0xa2, 0xa2, 0xa2, 0x9a, 0xb4, 0x99, 0x9d, 0x9c, 0x93, 0x93, 0x8d, 0x8e, 
+  0x41, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa0, 0xa0, 0xa3, 0xa3, 0xa8, 0xa4, 0xa9, 0xae, 0xaa, 0xaa, 0xaf, 0xb5, 0xaf, 0xb0, 0xb5, 0xb5, 
+  0xb0, 0xb5, 0xb5, 0xb9, 0xb5, 0xaf, 0xb5, 0xaa, 0xaf, 0xaa, 0xa9, 0xa9, 0xa8, 0xa4, 0xa6, 0xa6, 
+  0xa7, 0xab, 0xab, 0xa0, 0xa2, 0xa2, 0xa2, 0x9a, 0xb4, 0x99, 0x9d, 0x9c, 0x93, 0x93, 0x8d, 0x8e, 
+  0x41, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x99, 0xab, 0xa3, 0xa3, 0xa4, 0xa4, 0xa9, 0xae, 0xaa, 0xaa, 0xaf, 0xaf, 0xaf, 0xb9, 0xb0, 0xb5, 
+  0xb0, 0xb9, 0xb5, 0xb9, 0xb5, 0xaf, 0xaf, 0xaa, 0xaa, 0xae, 0xae, 0xa9, 0xa8, 0xa4, 0xa3, 0xa3, 
+  0xa3, 0xab, 0xab, 0xa1, 0xa0, 0xa2, 0x9b, 0x9b, 0x99, 0x99, 0x9c, 0x98, 0x8d, 0x8d, 0x94, 0x41, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8d, 0xa0, 0xab, 0xa3, 0xa3, 0xa4, 0xa8, 0xa8, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xaf, 0xaf, 0xb5, 
+  0xaf, 0xb5, 0xb5, 0xaf, 0xaf, 0xaf, 0xaf, 0xaa, 0xae, 0xae, 0xa9, 0xa9, 0xa8, 0xa4, 0xa4, 0xa3, 
+  0xa3, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0xa2, 0x9b, 0xb4, 0x99, 0x9d, 0x9c, 0x98, 0x8d, 0x3b, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x72, 0xa0, 0xa0, 0xa3, 0xa6, 0xa3, 0xa4, 0xa4, 0xa9, 0xae, 0xaa, 0xaf, 0xaa, 0xaa, 0xaf, 0xaf, 
+  0xaf, 0xaf, 0xaa, 0xaa, 0xaa, 0xaa, 0xaf, 0xaa, 0xae, 0xa9, 0xa9, 0xa4, 0xa8, 0xa4, 0xa6, 0xa3, 
+  0xa3, 0xa7, 0xab, 0xa0, 0xa0, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x9d, 0x9c, 0x81, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x72, 0xa0, 0xa0, 0xa3, 0xa6, 0xa3, 0xa4, 0xa4, 0xa9, 0xae, 0xaa, 0xaf, 0xaa, 0xaa, 0xaf, 0xaf, 
+  0xaf, 0xaf, 0xaa, 0xaa, 0xaa, 0xaa, 0xaf, 0xaa, 0xae, 0xa9, 0xa9, 0xa4, 0xa8, 0xa4, 0xa6, 0xa3, 
+  0xa3, 0xa7, 0xab, 0xa0, 0xa0, 0x9a, 0x9b, 0x9b, 0x99, 0x99, 0x9d, 0x9c, 0x81, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0xa0, 0xab, 0xab, 0xab, 0xa4, 0xa4, 0xa8, 0xa9, 0xa9, 0xae, 0xaa, 0xaa, 0xaf, 0xaa, 0xaa, 
+  0xaa, 0xaa, 0xb5, 0xaf, 0xaf, 0xaa, 0xae, 0xae, 0xa9, 0xae, 0xa9, 0xa8, 0xa4, 0xa6, 0xa3, 0xa3, 
+  0xa7, 0xab, 0xa0, 0xa0, 0xa2, 0xa2, 0xa2, 0x9b, 0xb4, 0x99, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x99, 0xa0, 0xab, 0xab, 0xa3, 0xa3, 0xa4, 0xa9, 0xa9, 0xa9, 0xae, 0xae, 0xaa, 0xaa, 0xaa, 
+  0xb5, 0xaa, 0xaa, 0xaa, 0xaf, 0xaa, 0xae, 0xae, 0xa9, 0xa8, 0xa9, 0xa4, 0xa4, 0xa4, 0xa6, 0xab, 
+  0xab, 0xab, 0xab, 0xa0, 0xa2, 0xa2, 0x9b, 0x98, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x55, 0x8d, 0xa7, 0xa3, 0xa6, 0xa4, 0xa4, 0xa8, 0xa9, 0xa9, 0xa9, 0xae, 0xaa, 0xaa, 
+  0xae, 0xaf, 0xaa, 0xae, 0xaa, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0xa8, 0xa4, 0xa6, 0xa3, 0xa3, 
+  0xa7, 0xab, 0xa0, 0xa0, 0xa0, 0x8e, 0x55, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x55, 0x8d, 0xa7, 0xa3, 0xa6, 0xa4, 0xa4, 0xa8, 0xa9, 0xa9, 0xa9, 0xae, 0xaa, 0xaa, 
+  0xae, 0xaf, 0xaa, 0xae, 0xaa, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa8, 0xa8, 0xa4, 0xa6, 0xa3, 0xa3, 
+  0xa7, 0xab, 0xa0, 0xa0, 0xa0, 0x8e, 0x55, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8d, 0x9a, 0xa6, 0xa6, 0xa8, 0xa9, 0xa9, 0xa9, 0xae, 0xae, 0xae, 
+  0xa9, 0xaa, 0xaa, 0xa9, 0xae, 0xae, 0xae, 0xae, 0xa9, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa3, 0xa3, 
+  0xa7, 0xb4, 0x8d, 0x55, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x81, 0x93, 0xa2, 0xa8, 0xa9, 0xa9, 0xae, 0xa9, 
+  0xae, 0xae, 0xae, 0xae, 0xae, 0xa9, 0xa9, 0xa9, 0xa8, 0xa8, 0xa4, 0xa4, 0xa4, 0x98, 0x98, 0x72, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x81, 0x9c, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x98, 0x9c, 0x98, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x81, 0x9c, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 0x98, 0x9c, 0x98, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x21, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x2f, 0x2a, 0x2d, 0x2a, 0x2a, 0x27, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x21, 0x32, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x21, 0x32, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x23, 0x33, 0x31, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x27, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x32, 0x35, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x38, 0x36, 0x36, 0x36, 0x34, 0x33, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x23, 0x33, 0x33, 0x33, 
+  0x33, 0x31, 0x2f, 0x31, 0x2d, 0x2f, 0x39, 0x2a, 0x2d, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x23, 
+  0x3a, 0x3b, 0x3b, 0x3c, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x26, 0x37, 0x37, 0x3f, 0x36, 0x36, 
+  0x35, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x23, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x27, 0x2a, 0x32, 0x3f, 
+  0x37, 0x40, 0x40, 0x3d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x3d, 0x3d, 0x3d, 0x26, 0x37, 0x37, 
+  0x37, 0x37, 0x37, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x28, 0x23, 0x23, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x27, 0x2a, 0x32, 0x3f, 
+  0x37, 0x40, 0x40, 0x3d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x3d, 0x3d, 0x3d, 0x26, 0x37, 0x37, 
+  0x37, 0x37, 0x37, 0x33, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x41, 0x28, 0x28, 0x33, 0x33, 0x33, 
+  0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2a, 0x2a, 0x2a, 0x2a, 0x23, 0x37, 0x26, 0x42, 
+  0x43, 0x43, 0x44, 0x44, 0x45, 0x44, 0x45, 0x30, 0x45, 0x24, 0x44, 0x46, 0x3d, 0x26, 0x3e, 0x26, 
+  0x37, 0x3f, 0x37, 0x3f, 0x35, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x2b, 0x41, 0x28, 0x23, 0x23, 0x23, 0x33, 
+  0x33, 0x33, 0x2f, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x3e, 0x3d, 0x47, 0x48, 
+  0x49, 0x4a, 0x4b, 0x4b, 0x45, 0x4b, 0x45, 0x45, 0x4b, 0x4b, 0x44, 0x45, 0x47, 0x30, 0x35, 0x3d, 
+  0x3e, 0x26, 0x37, 0x37, 0x37, 0x35, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2e, 0x2c, 0x41, 0x41, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x3d, 0x3d, 0x35, 0x45, 0x29, 0x4c, 
+  0x4d, 0x4d, 0x45, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x45, 0x45, 0x4b, 0x45, 0x4b, 0x44, 0x44, 0x30, 
+  0x3d, 0x3d, 0x26, 0x37, 0x3f, 0x37, 0x3f, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2e, 0x2c, 0x41, 0x41, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2d, 0x2a, 0x3d, 0x3d, 0x35, 0x45, 0x29, 0x4c, 
+  0x4d, 0x4d, 0x45, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x45, 0x45, 0x4b, 0x45, 0x4b, 0x44, 0x44, 0x30, 
+  0x3d, 0x3d, 0x26, 0x37, 0x3f, 0x37, 0x3f, 0x23, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x2e, 0x41, 0x2c, 0x41, 0x28, 0x28, 0x23, 0x23, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x41, 0x3d, 0x44, 0x4b, 0x45, 0x4f, 0x4e, 
+  0x4e, 0x50, 0x51, 0x52, 0x52, 0x52, 0x52, 0x50, 0x52, 0x50, 0x4e, 0x53, 0x45, 0x4b, 0x4b, 0x45, 
+  0x24, 0x46, 0x3d, 0x3e, 0x37, 0x37, 0x37, 0x37, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x27, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x34, 0x2e, 0x2b, 0x2c, 0x41, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x33, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2d, 0x28, 0x3d, 0x4b, 0x45, 0x4e, 0x4e, 0x52, 0x52, 
+  0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x51, 0x54, 0x4e, 0x2e, 0x55, 0x56, 0x53, 0x4e, 0x45, 0x4b, 
+  0x46, 0x42, 0x26, 0x40, 0x3f, 0x36, 0x37, 0x37, 0x35, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x34, 0x34, 0x2e, 0x41, 0x41, 0x41, 0x23, 0x23, 0x23, 
+  0x33, 0x33, 0x33, 0x33, 0x31, 0x2f, 0x31, 0x2f, 0x3e, 0x30, 0x45, 0x4e, 0x50, 0x52, 0x54, 0x54, 
+  0x57, 0x57, 0x57, 0x57, 0x58, 0x2e, 0x57, 0x56, 0x33, 0x54, 0x52, 0x52, 0x2e, 0x4e, 0x4e, 0x4f, 
+  0x4a, 0x4c, 0x43, 0x59, 0x40, 0x3f, 0x38, 0x37, 0x37, 0x32, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x34, 0x34, 0x2e, 0x41, 0x41, 0x41, 0x23, 0x23, 0x23, 
+  0x33, 0x33, 0x33, 0x33, 0x31, 0x2f, 0x31, 0x2f, 0x3e, 0x30, 0x45, 0x4e, 0x50, 0x52, 0x54, 0x54, 
+  0x57, 0x57, 0x57, 0x57, 0x58, 0x2e, 0x57, 0x56, 0x33, 0x54, 0x52, 0x52, 0x2e, 0x4e, 0x4e, 0x4f, 
+  0x4a, 0x4c, 0x43, 0x59, 0x40, 0x3f, 0x38, 0x37, 0x37, 0x32, 0x27, 0x27, 0x27, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x21, 0x32, 0x34, 0x2e, 0x41, 0x41, 0x41, 0x28, 0x23, 0x28, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x30, 0x30, 0x45, 0x4e, 0x52, 0x54, 0x54, 0x57, 0x57, 
+  0x58, 0x58, 0x2a, 0x25, 0x58, 0x58, 0x5a, 0x27, 0x2b, 0x58, 0x57, 0x5b, 0x55, 0x56, 0x2e, 0x4f, 
+  0x5c, 0x4c, 0x4c, 0x43, 0x5d, 0x40, 0x3b, 0x38, 0x36, 0x3f, 0x23, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x32, 0x34, 0x2e, 0x2e, 0x2c, 0x41, 0x28, 0x28, 0x23, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x31, 0x41, 0x3d, 0x45, 0x4e, 0x52, 0x54, 0x57, 0x57, 0x58, 0x5e, 
+  0x5a, 0x5a, 0x58, 0x5e, 0x5a, 0x5e, 0x58, 0x25, 0x5f, 0x27, 0x56, 0x60, 0x60, 0x5b, 0x55, 0x55, 
+  0x61, 0x5c, 0x4c, 0x43, 0x42, 0x62, 0x40, 0x63, 0x38, 0x38, 0x3d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 
+  0x2d, 0x39, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x21, 0x32, 0x34, 0x2e, 0x2c, 0x2c, 0x41, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x33, 0x31, 0x30, 0x44, 0x4e, 0x50, 0x54, 0x57, 0x58, 0x58, 0x5e, 0x5e, 
+  0x5e, 0x5e, 0x5e, 0x64, 0x5e, 0x65, 0x5e, 0x5f, 0x58, 0x66, 0x67, 0x67, 0x68, 0x60, 0x5b, 0x5b, 
+  0x55, 0x61, 0x4c, 0x4c, 0x43, 0x42, 0x40, 0x69, 0x36, 0x36, 0x3b, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x21, 0x32, 0x34, 0x2e, 0x2c, 0x2c, 0x41, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x33, 0x31, 0x30, 0x44, 0x4e, 0x50, 0x54, 0x57, 0x58, 0x58, 0x5e, 0x5e, 
+  0x5e, 0x5e, 0x5e, 0x64, 0x5e, 0x65, 0x5e, 0x5f, 0x58, 0x66, 0x67, 0x67, 0x68, 0x60, 0x5b, 0x5b, 
+  0x55, 0x61, 0x4c, 0x4c, 0x43, 0x42, 0x40, 0x69, 0x36, 0x36, 0x3b, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x34, 0x2e, 0x2c, 0x41, 0x41, 0x28, 0x28, 
+  0x23, 0x23, 0x33, 0x33, 0x31, 0x6a, 0x35, 0x4b, 0x50, 0x54, 0x52, 0x58, 0x5e, 0x65, 0x5e, 0x5e, 
+  0x66, 0x6b, 0x5e, 0x6b, 0x5f, 0x6c, 0x5f, 0x6d, 0x5e, 0x6e, 0x67, 0x67, 0x68, 0x68, 0x60, 0x5b, 
+  0x55, 0x55, 0x4d, 0x4c, 0x4c, 0x43, 0x59, 0x40, 0x36, 0x36, 0x36, 0x38, 0x20, 0x20, 0x26, 0x24, 
+  0x2a, 0x2a, 0x24, 0x20, 0x3b, 0x88, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x24, 0x32, 0x34, 0x2e, 0x2e, 0x2c, 0x41, 0x28, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x31, 0x32, 0x44, 0x45, 0x54, 0x57, 0x58, 0x27, 0x5e, 0x5e, 0x6b, 0x5f, 
+  0x5f, 0x6c, 0x6f, 0x66, 0x70, 0x71, 0x70, 0x5f, 0x5e, 0x71, 0x71, 0x6e, 0x67, 0x67, 0x60, 0x60, 
+  0x55, 0x55, 0x4d, 0x61, 0x4c, 0x43, 0x42, 0x59, 0x3f, 0x3b, 0x38, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x24, 0x29, 0x3b, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x32, 0x34, 0x34, 0x2c, 0x2b, 0x2c, 0x28, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x33, 0x24, 0x45, 0x52, 0x54, 0x57, 0x58, 0x5e, 0x6b, 0x22, 0x22, 0x5e, 
+  0x72, 0x72, 0x73, 0x6b, 0x72, 0x74, 0x70, 0x70, 0x6d, 0x75, 0x71, 0x6e, 0x67, 0x67, 0x67, 0x60, 
+  0x60, 0x55, 0x55, 0x61, 0x4c, 0x4c, 0x43, 0x5d, 0x40, 0x36, 0x36, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3b, 0x3b, 0x88, 0x88, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x32, 0x34, 0x34, 0x2c, 0x2b, 0x2c, 0x28, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x33, 0x24, 0x45, 0x52, 0x54, 0x57, 0x58, 0x5e, 0x6b, 0x22, 0x22, 0x5e, 
+  0x72, 0x72, 0x73, 0x6b, 0x72, 0x74, 0x70, 0x70, 0x6d, 0x75, 0x71, 0x6e, 0x67, 0x67, 0x67, 0x60, 
+  0x60, 0x55, 0x55, 0x61, 0x4c, 0x4c, 0x43, 0x5d, 0x40, 0x36, 0x36, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3b, 0x3b, 0x88, 0x88, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x32, 0x34, 0x34, 0x2c, 0x2c, 0x41, 0x41, 0x28, 
+  0x28, 0x23, 0x33, 0x23, 0x33, 0x46, 0x45, 0x41, 0x57, 0x58, 0x5e, 0x5e, 0x76, 0x5e, 0x73, 0x6b, 
+  0x73, 0x76, 0x77, 0x72, 0x72, 0x6f, 0x74, 0x70, 0x70, 0x70, 0x75, 0x71, 0x71, 0x67, 0x67, 0x68, 
+  0x60, 0x55, 0x55, 0x61, 0x61, 0x4c, 0x43, 0x42, 0x59, 0x38, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x3b, 0x88, 0x3b, 0x3b, 0x88, 0x3b, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x29, 0x21, 0x32, 0x34, 0x34, 0x2c, 0x2c, 0x41, 0x28, 
+  0x28, 0x28, 0x28, 0x23, 0x2e, 0x44, 0x78, 0x51, 0x57, 0x5e, 0x5e, 0x6b, 0x6b, 0x76, 0x77, 0x73, 
+  0x79, 0x79, 0x77, 0x79, 0x77, 0x7a, 0x7b, 0x7a, 0x74, 0x70, 0x75, 0x70, 0x6e, 0x6e, 0x6e, 0x68, 
+  0x68, 0x60, 0x5b, 0x55, 0x5c, 0x4c, 0x4a, 0x42, 0x42, 0x37, 0x36, 0x36, 0x7c, 0x20, 0x20, 0x20, 
+  0x3b, 0x88, 0x3c, 0x3c, 0x88, 0x88, 0x88, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x32, 0x34, 0x34, 0x2c, 0x41, 0x41, 0x41, 
+  0x28, 0x28, 0x23, 0x23, 0x40, 0x45, 0x4e, 0x54, 0x58, 0x5e, 0x65, 0x6b, 0x76, 0x73, 0x79, 0x77, 
+  0x79, 0x79, 0x79, 0x6b, 0x79, 0x7d, 0x7e, 0x7a, 0x7a, 0x74, 0x70, 0x70, 0x70, 0x71, 0x67, 0x67, 
+  0x68, 0x5b, 0x5b, 0x55, 0x61, 0x5c, 0x4c, 0x43, 0x59, 0x69, 0x3b, 0x36, 0x3b, 0x20, 0x7c, 0x7f, 
+  0x3c, 0x63, 0x63, 0x88, 0x3b, 0x88, 0x3b, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x32, 0x34, 0x34, 0x2c, 0x41, 0x41, 0x41, 
+  0x28, 0x28, 0x23, 0x23, 0x40, 0x45, 0x4e, 0x54, 0x58, 0x5e, 0x65, 0x6b, 0x76, 0x73, 0x79, 0x77, 
+  0x79, 0x79, 0x79, 0x6b, 0x79, 0x7d, 0x7e, 0x7a, 0x7a, 0x74, 0x70, 0x70, 0x70, 0x71, 0x67, 0x67, 
+  0x68, 0x5b, 0x5b, 0x55, 0x61, 0x5c, 0x4c, 0x43, 0x59, 0x69, 0x3b, 0x36, 0x3b, 0x20, 0x7c, 0x7f, 
+  0x3c, 0x63, 0x63, 0x88, 0x3b, 0x88, 0x3b, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x32, 0x34, 0x2e, 0x2e, 0x2c, 0x2c, 0x28, 
+  0x28, 0x28, 0x32, 0x26, 0x36, 0x4b, 0x50, 0x57, 0x58, 0x5e, 0x6b, 0x76, 0x77, 0x77, 0x79, 0x79, 
+  0x79, 0x72, 0x7d, 0x80, 0x7d, 0x81, 0x81, 0x80, 0x82, 0x74, 0x74, 0x75, 0x70, 0x71, 0x71, 0x67, 
+  0x67, 0x60, 0x60, 0x55, 0x61, 0x5c, 0x4c, 0x43, 0x40, 0x40, 0x36, 0x3b, 0x36, 0x7f, 0x59, 0x7f, 
+  0x69, 0x3b, 0x88, 0x88, 0x88, 0x88, 0x88, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x21, 0x32, 0x34, 0x2e, 0x2e, 0x2c, 0x41, 
+  0x28, 0x21, 0x20, 0x20, 0x63, 0x45, 0x50, 0x57, 0x5e, 0x5e, 0x76, 0x76, 0x77, 0x79, 0x83, 0x7d, 
+  0x79, 0x84, 0x80, 0x81, 0x85, 0x85, 0x85, 0x81, 0x81, 0x86, 0x74, 0x70, 0x70, 0x6e, 0x6e, 0x87, 
+  0x68, 0x68, 0x60, 0x55, 0x55, 0x61, 0x4a, 0x43, 0x42, 0x3c, 0x36, 0x88, 0x89, 0x8a, 0x59, 0x7f, 
+  0x69, 0x3b, 0x3b, 0x3c, 0x3b, 0x88, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x32, 0x34, 0x2e, 0x2c, 0x2c, 0x41, 
+  0x26, 0x20, 0x20, 0x20, 0x37, 0x53, 0x52, 0x58, 0x5e, 0x65, 0x6b, 0x76, 0x73, 0x77, 0x72, 0x7e, 
+  0x79, 0x80, 0x82, 0x85, 0x85, 0x8b, 0x8b, 0x85, 0x81, 0x7a, 0x74, 0x74, 0x70, 0x75, 0x71, 0x6e, 
+  0x67, 0x60, 0x60, 0x5b, 0x61, 0x61, 0x5c, 0x43, 0x5d, 0x42, 0x89, 0x89, 0x89, 0x8a, 0x59, 0x7f, 
+  0x7f, 0x3c, 0x88, 0x88, 0x88, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x32, 0x34, 0x2e, 0x2c, 0x2c, 0x41, 
+  0x26, 0x20, 0x20, 0x20, 0x37, 0x53, 0x52, 0x58, 0x5e, 0x65, 0x6b, 0x76, 0x73, 0x77, 0x72, 0x7e, 
+  0x79, 0x80, 0x82, 0x85, 0x85, 0x8b, 0x8b, 0x85, 0x81, 0x7a, 0x74, 0x74, 0x70, 0x75, 0x71, 0x6e, 
+  0x67, 0x60, 0x60, 0x5b, 0x61, 0x61, 0x5c, 0x43, 0x5d, 0x42, 0x89, 0x89, 0x89, 0x8a, 0x59, 0x7f, 
+  0x7f, 0x3c, 0x88, 0x88, 0x88, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x32, 0x32, 0x34, 0x2e, 0x2c, 0x37, 
+  0x20, 0x20, 0x20, 0x20, 0x3f, 0x45, 0x52, 0x57, 0x5a, 0x65, 0x76, 0x76, 0x77, 0x79, 0x7d, 0x7e, 
+  0x7d, 0x83, 0x79, 0x85, 0x8b, 0x8b, 0x8b, 0x8b, 0x8c, 0x8d, 0x82, 0x70, 0x70, 0x75, 0x71, 0x6e, 
+  0x67, 0x60, 0x60, 0x5b, 0x55, 0x61, 0x4c, 0x4c, 0x8e, 0x49, 0x49, 0x89, 0x89, 0x8a, 0x59, 0x7f, 
+  0x69, 0x88, 0x3b, 0x88, 0x3b, 0x3c, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x24, 0x24, 0x21, 0x32, 0x34, 0x2c, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x3b, 0x2c, 0x8f, 0x57, 0x5e, 0x5e, 0x6b, 0x76, 0x79, 0x79, 0x79, 0x90, 
+  0x80, 0x79, 0x81, 0x91, 0x8b, 0x8b, 0x8b, 0x92, 0x81, 0x84, 0x7a, 0x74, 0x75, 0x75, 0x71, 0x6e, 
+  0x67, 0x67, 0x5b, 0x55, 0x55, 0x93, 0x93, 0x94, 0x8e, 0x95, 0x95, 0x96, 0x89, 0x8a, 0x59, 0x59, 
+  0x69, 0x88, 0x3c, 0x88, 0x88, 0x88, 0x88, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x32, 0x32, 0x56, 0x95, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x55, 0x33, 0x58, 0x65, 0x76, 0x76, 0x77, 0x79, 0x83, 0x82, 
+  0x90, 0x82, 0x84, 0x81, 0x85, 0x85, 0x85, 0x85, 0x97, 0x98, 0x7b, 0x74, 0x70, 0x71, 0x6e, 0x6e, 
+  0x67, 0x68, 0x67, 0x99, 0x99, 0x93, 0x9a, 0x9a, 0x8e, 0x95, 0x9b, 0x9b, 0x96, 0x8a, 0x9c, 0x59, 
+  0x3c, 0x3c, 0x3b, 0x88, 0x3b, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x32, 0x32, 0x56, 0x95, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x5c, 0x55, 0x33, 0x58, 0x65, 0x76, 0x76, 0x77, 0x79, 0x83, 0x82, 
+  0x90, 0x82, 0x84, 0x81, 0x85, 0x85, 0x85, 0x85, 0x97, 0x98, 0x7b, 0x74, 0x70, 0x71, 0x6e, 0x6e, 
+  0x67, 0x68, 0x67, 0x99, 0x99, 0x93, 0x9a, 0x9a, 0x8e, 0x95, 0x9b, 0x9b, 0x96, 0x8a, 0x9c, 0x59, 
+  0x3c, 0x3c, 0x3b, 0x88, 0x3b, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x24, 0x21, 0x32, 0x29, 0x9d, 0x9e, 0x9f, 
+  0x7f, 0x20, 0x20, 0x20, 0x20, 0x47, 0x55, 0x2e, 0x58, 0x5e, 0x6b, 0x76, 0x73, 0x72, 0x7a, 0x82, 
+  0x82, 0x80, 0x80, 0xa0, 0xa1, 0x91, 0x81, 0x80, 0x90, 0x7b, 0x7b, 0x70, 0x70, 0x75, 0x71, 0x70, 
+  0x9d, 0x9d, 0xa2, 0xa3, 0x99, 0x9f, 0x93, 0x9a, 0x8e, 0x95, 0x49, 0x9b, 0x89, 0x9c, 0x9c, 0x59, 
+  0x69, 0x69, 0x88, 0x88, 0x88, 0x3b, 0x88, 0x88, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x24, 0x29, 0x32, 0x20, 0x9a, 0x9e, 0xa4, 
+  0xa5, 0xa6, 0xa3, 0x8e, 0x59, 0x42, 0x61, 0x5b, 0x5a, 0x5e, 0x66, 0x27, 0x74, 0x74, 0x7a, 0x82, 
+  0x82, 0x82, 0x80, 0x80, 0x84, 0xa7, 0x80, 0x80, 0x7e, 0x7b, 0x82, 0xa4, 0x86, 0x98, 0xa4, 0x9e, 
+  0x9e, 0x9d, 0xa2, 0xa3, 0x99, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x96, 0x8a, 0x59, 0x59, 
+  0x7f, 0x3c, 0x3b, 0x3c, 0x88, 0x3b, 0x88, 0x88, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x29, 0x21, 0x36, 0x20, 0x96, 0x9d, 0xa4, 
+  0x98, 0xa6, 0xa8, 0xa9, 0xaa, 0xab, 0xa0, 0xa4, 0x86, 0xac, 0x7e, 0x86, 0x74, 0x74, 0x7a, 0x7a, 
+  0x7a, 0x82, 0x82, 0xab, 0xa7, 0x80, 0xa7, 0xad, 0xae, 0xad, 0xa8, 0xa8, 0xa6, 0x98, 0xa5, 0xa4, 
+  0x9d, 0x9d, 0xa3, 0x99, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x9b, 0x96, 0x89, 0x89, 0x9c, 0x59, 
+  0x7f, 0x69, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x29, 0x21, 0x36, 0x20, 0x96, 0x9d, 0xa4, 
+  0x98, 0xa6, 0xa8, 0xa9, 0xaa, 0xab, 0xa0, 0xa4, 0x86, 0xac, 0x7e, 0x86, 0x74, 0x74, 0x7a, 0x7a, 
+  0x7a, 0x82, 0x82, 0xab, 0xa7, 0x80, 0xa7, 0xad, 0xae, 0xad, 0xa8, 0xa8, 0xa6, 0x98, 0xa5, 0xa4, 
+  0x9d, 0x9d, 0xa3, 0x99, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x9b, 0x96, 0x89, 0x89, 0x9c, 0x59, 
+  0x7f, 0x69, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x35, 0x20, 0x20, 0x96, 0x9d, 0x9e, 
+  0xa4, 0x98, 0xa8, 0xaf, 0xad, 0xab, 0xaa, 0xab, 0xb0, 0xb0, 0xb1, 0xb0, 0xb0, 0xb1, 0xb1, 0xb1, 
+  0xb0, 0xb0, 0xb0, 0xa0, 0xa0, 0xae, 0xae, 0xad, 0xad, 0xad, 0xa8, 0xa6, 0xa6, 0x98, 0x9e, 0xa4, 
+  0xb2, 0x9d, 0xa2, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x89, 0x89, 0x9c, 0x59, 
+  0x7f, 0x69, 0x3b, 0x88, 0x88, 0x3b, 0x3b, 0x3b, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x3f, 0x20, 0x20, 0x20, 0xa3, 0x9e, 
+  0x9e, 0xa5, 0xa6, 0xa6, 0xa9, 0xad, 0xab, 0xae, 0xae, 0xb0, 0xb0, 0xb0, 0xb1, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xb0, 0xb0, 0xae, 0xae, 0xab, 0xab, 0xad, 0xa9, 0xa9, 0xa8, 0xa6, 0xa5, 0xa5, 0x9e, 
+  0x9d, 0x9d, 0xa3, 0xa3, 0x99, 0x9f, 0x93, 0x9a, 0x8e, 0x8e, 0x49, 0x49, 0x89, 0x8a, 0x9c, 0x59, 
+  0x7f, 0x3c, 0x88, 0x3b, 0x88, 0x3c, 0x88, 0x88, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xa3, 0xb2, 
+  0x9e, 0xa5, 0xa6, 0xa8, 0xa9, 0xad, 0xad, 0xae, 0xae, 0xae, 0xb0, 0xae, 0xb0, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xa0, 0xa0, 0xae, 0xae, 0xae, 0xaa, 0xab, 0xad, 0xa9, 0xa6, 0xa6, 0x98, 0xa5, 0xa5, 0xa4, 
+  0xb2, 0x9d, 0xa3, 0xa3, 0x99, 0x9f, 0x93, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x96, 0x8a, 0x59, 0x59, 
+  0x59, 0x69, 0x88, 0x3b, 0x3c, 0x88, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0xa3, 0xb2, 
+  0x9e, 0xa5, 0xa6, 0xa8, 0xa9, 0xad, 0xad, 0xae, 0xae, 0xae, 0xb0, 0xae, 0xb0, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xa0, 0xa0, 0xae, 0xae, 0xae, 0xaa, 0xab, 0xad, 0xa9, 0xa6, 0xa6, 0x98, 0xa5, 0xa5, 0xa4, 
+  0xb2, 0x9d, 0xa3, 0xa3, 0x99, 0x9f, 0x93, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x96, 0x8a, 0x59, 0x59, 
+  0x59, 0x69, 0x88, 0x3b, 0x3c, 0x88, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 0xa3, 
+  0x9e, 0xa4, 0x98, 0xa6, 0xa8, 0xa9, 0xad, 0xab, 0xae, 0xae, 0xae, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 
+  0xb0, 0xb0, 0xae, 0xa0, 0xae, 0xaa, 0xab, 0xad, 0xad, 0xa9, 0xa8, 0xa8, 0xa6, 0xa5, 0x9e, 0x9e, 
+  0x9d, 0x9d, 0xa2, 0xb3, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x95, 0x49, 0x9b, 0x89, 0x89, 0x8a, 0x59, 
+  0x59, 0x3c, 0x88, 0x88, 0x88, 0x88, 0x88, 0x3b, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x96, 0xa3, 
+  0x9d, 0x9e, 0xa5, 0x98, 0xa6, 0xa8, 0xa9, 0xad, 0xab, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 
+  0xae, 0xb0, 0xae, 0xab, 0xae, 0xaa, 0xad, 0xa9, 0xad, 0xa9, 0xa6, 0x98, 0x98, 0x98, 0xa4, 0x9e, 
+  0xb2, 0xa3, 0xa3, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x94, 0x95, 0x95, 0x49, 0x9b, 0x89, 0x8a, 0x59, 
+  0x59, 0x7f, 0x3c, 0x3b, 0x3b, 0x3b, 0x3c, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0xa2, 
+  0xb2, 0x9e, 0xa4, 0x98, 0xa8, 0xa8, 0xad, 0xad, 0xaa, 0xaa, 0xab, 0xae, 0xa0, 0xa0, 0xa0, 0xa0, 
+  0xae, 0xae, 0xab, 0xae, 0xab, 0xaa, 0xab, 0xad, 0xa9, 0xa8, 0xa8, 0xa6, 0x98, 0xa4, 0x9e, 0x9e, 
+  0x9d, 0x9d, 0xa2, 0x99, 0x99, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x89, 0x89, 0x8a, 0x59, 
+  0x59, 0x3c, 0x69, 0x3c, 0x88, 0x88, 0x63, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0xa2, 
+  0xb2, 0x9e, 0xa4, 0x98, 0xa8, 0xa8, 0xad, 0xad, 0xaa, 0xaa, 0xab, 0xae, 0xa0, 0xa0, 0xa0, 0xa0, 
+  0xae, 0xae, 0xab, 0xae, 0xab, 0xaa, 0xab, 0xad, 0xa9, 0xa8, 0xa8, 0xa6, 0x98, 0xa4, 0x9e, 0x9e, 
+  0x9d, 0x9d, 0xa2, 0x99, 0x99, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x89, 0x89, 0x8a, 0x59, 
+  0x59, 0x3c, 0x69, 0x3c, 0x88, 0x88, 0x63, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa3, 
+  0xa2, 0x9d, 0x9e, 0xa5, 0x98, 0xa6, 0xa8, 0xa9, 0xad, 0xad, 0xaa, 0xaa, 0xaa, 0xae, 0xae, 0xae, 
+  0xae, 0xae, 0xab, 0xaa, 0xab, 0xad, 0xad, 0xad, 0xa9, 0xa8, 0xa6, 0x98, 0xa5, 0xa5, 0xa4, 0x9e, 
+  0x9d, 0xa3, 0xa2, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x49, 0x49, 0x96, 0x8a, 0x8a, 0x9c, 
+  0x59, 0x7f, 0x3c, 0x88, 0x88, 0x88, 0x7c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x99, 
+  0xa3, 0x9d, 0xa4, 0x9e, 0xa5, 0xa6, 0xa6, 0xa8, 0xad, 0xa9, 0xab, 0xab, 0xab, 0xaa, 0xaa, 0xab, 
+  0xab, 0xab, 0xaa, 0xab, 0xad, 0xad, 0xad, 0xa9, 0xa8, 0xa6, 0xa8, 0xa5, 0xa5, 0xa4, 0x9e, 0x9e, 
+  0xb2, 0x9d, 0xa3, 0x99, 0x99, 0x99, 0x9a, 0x9a, 0x94, 0x8e, 0x95, 0x49, 0x9b, 0x89, 0x8a, 0x5d, 
+  0x59, 0x7f, 0x69, 0x88, 0x88, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0xa3, 0x9d, 0x9e, 0xa4, 0xa5, 0x98, 0xa6, 0xa6, 0xaf, 0xa9, 0xa9, 0xaa, 0xab, 0xab, 0xab, 0xaa, 
+  0xaa, 0xab, 0xad, 0xab, 0xad, 0xa9, 0xa9, 0xaf, 0xa8, 0xa6, 0xa6, 0xa6, 0xa5, 0xa4, 0x9e, 0x9d, 
+  0x9d, 0x9d, 0xa3, 0xb3, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x9b, 0x89, 0x8a, 0x5d, 
+  0x59, 0x69, 0x3c, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0xa3, 0x9d, 0x9e, 0xa4, 0xa5, 0x98, 0xa6, 0xa6, 0xaf, 0xa9, 0xa9, 0xaa, 0xab, 0xab, 0xab, 0xaa, 
+  0xaa, 0xab, 0xad, 0xab, 0xad, 0xa9, 0xa9, 0xaf, 0xa8, 0xa6, 0xa6, 0xa6, 0xa5, 0xa4, 0x9e, 0x9d, 
+  0x9d, 0x9d, 0xa3, 0xb3, 0x99, 0x9f, 0x9f, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x9b, 0x89, 0x8a, 0x5d, 
+  0x59, 0x69, 0x3c, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 
+  0xa3, 0xa3, 0xb2, 0x9e, 0xa4, 0x98, 0xa6, 0xa8, 0xa6, 0xa9, 0xad, 0xad, 0xad, 0xad, 0xad, 0xaa, 
+  0xaa, 0xad, 0xad, 0xad, 0xad, 0xad, 0xaf, 0xa8, 0xa8, 0xa6, 0x98, 0x98, 0xa5, 0x9e, 0x9e, 0x9e, 
+  0x9d, 0xa3, 0xa3, 0x99, 0x99, 0x99, 0x9a, 0x9a, 0x94, 0x8e, 0x49, 0x49, 0x9b, 0x8a, 0x89, 0x59, 
+  0x59, 0x7f, 0x69, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa3, 0xa3, 0x9d, 0x9e, 0x9e, 0xa5, 0x98, 0xa8, 0xa6, 0xa8, 0xa9, 0xa9, 0xa9, 0xad, 0xad, 0xad, 
+  0xad, 0xaa, 0xa9, 0xad, 0xa9, 0xa9, 0xa9, 0xa6, 0xa8, 0xa8, 0xa5, 0xa5, 0xa5, 0xa4, 0x9e, 0xb2, 
+  0x9d, 0xa2, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x49, 0x96, 0x89, 0x89, 0x59, 
+  0x59, 0x7f, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x99, 0xa3, 0xa3, 0x9d, 0x9e, 0xa4, 0xa5, 0xa5, 0xa8, 0xa6, 0xa8, 0xa9, 0xad, 0xa9, 0xad, 0xad, 
+  0xad, 0xad, 0xad, 0xa9, 0xad, 0xa9, 0xa6, 0xa8, 0xa6, 0x98, 0x98, 0xa5, 0xa5, 0x9e, 0xb2, 0x9d, 
+  0x9d, 0xa3, 0xa3, 0xa3, 0x99, 0x99, 0x9f, 0x9a, 0x94, 0x8e, 0x8e, 0x9b, 0x9b, 0x89, 0x8a, 0x8a, 
+  0x59, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x99, 0xa3, 0xa3, 0x9d, 0x9e, 0xa4, 0xa5, 0xa5, 0xa8, 0xa6, 0xa8, 0xa9, 0xad, 0xa9, 0xad, 0xad, 
+  0xad, 0xad, 0xad, 0xa9, 0xad, 0xa9, 0xa6, 0xa8, 0xa6, 0x98, 0x98, 0xa5, 0xa5, 0x9e, 0xb2, 0x9d, 
+  0x9d, 0xa3, 0xa3, 0xa3, 0x99, 0x99, 0x9f, 0x9a, 0x94, 0x8e, 0x8e, 0x9b, 0x9b, 0x89, 0x8a, 0x8a, 
+  0x59, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8e, 0xa3, 0xa2, 0xb2, 0xb2, 0x9e, 0xa5, 0xa5, 0xa6, 0xa6, 0xa8, 0xa6, 0xa9, 0xa9, 0xa9, 0xa9, 
+  0xa9, 0xa9, 0xa9, 0xa8, 0xa9, 0xa8, 0xa8, 0xa8, 0xa6, 0x98, 0x98, 0xa4, 0xa4, 0x9e, 0x9e, 0xb2, 
+  0x9d, 0xa3, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x8e, 0x9b, 0x9b, 0x89, 0x89, 0x7f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x89, 0x99, 0xa3, 0x9d, 0x9d, 0x9e, 0xa4, 0xa5, 0x98, 0x98, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 0xa9, 
+  0xa8, 0xa9, 0xa9, 0xa8, 0xa8, 0xa8, 0xa6, 0xa6, 0xa6, 0xa5, 0xa5, 0xa5, 0x9e, 0x9e, 0xb2, 0x9d, 
+  0xa2, 0xa2, 0x99, 0x99, 0x99, 0x9f, 0x9f, 0x9a, 0x94, 0x8e, 0x49, 0x49, 0x9b, 0x96, 0x3b, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3c, 0x99, 0xa3, 0xa3, 0x9d, 0x9e, 0xa4, 0xa4, 0xa5, 0x98, 0x98, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xa6, 0xa8, 0xa8, 0xa6, 0x98, 0xa6, 0x98, 0xa5, 0xa5, 0xa4, 0x9e, 0x9d, 0x9d, 
+  0xa3, 0xa2, 0xa3, 0x99, 0x99, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x7f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3c, 0x99, 0xa3, 0xa3, 0x9d, 0x9e, 0xa4, 0xa4, 0xa5, 0x98, 0x98, 0xa6, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa8, 0xa8, 0xa8, 0xa6, 0xa8, 0xa8, 0xa6, 0x98, 0xa6, 0x98, 0xa5, 0xa5, 0xa4, 0x9e, 0x9d, 0x9d, 
+  0xa3, 0xa2, 0xa3, 0x99, 0x99, 0x9f, 0x9a, 0x9a, 0x8e, 0x8e, 0x49, 0x9b, 0x7f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x99, 0x99, 0xa3, 0x9d, 0x9d, 0x9d, 0x9e, 0xa5, 0xa5, 0x98, 0x98, 0x98, 0xa6, 0xa6, 0xa8, 
+  0xa8, 0xa8, 0xa6, 0xa8, 0xa6, 0xa6, 0xa6, 0x98, 0x98, 0xa5, 0xa5, 0xa4, 0x9e, 0x9d, 0xb2, 0x9d, 
+  0x9d, 0xa3, 0xb3, 0x99, 0x99, 0x9f, 0x93, 0x9a, 0x94, 0x95, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8e, 0x99, 0xa3, 0xa2, 0xb2, 0x9e, 0x9e, 0xa4, 0xa5, 0x98, 0xa5, 0x98, 0xa6, 0xa6, 0xa6, 
+  0xa6, 0xa8, 0xa6, 0xa6, 0xa6, 0xa6, 0xa5, 0xa5, 0xa5, 0x98, 0xa4, 0xa4, 0xa4, 0x9e, 0x9d, 0x9d, 
+  0xa3, 0xa3, 0xa3, 0x99, 0x9f, 0x9f, 0x9a, 0x9b, 0x59, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x69, 0x89, 0xa3, 0xa3, 0x9d, 0x9e, 0x9e, 0x9e, 0xa5, 0x98, 0x98, 0x98, 0x98, 0x98, 
+  0xa8, 0x98, 0xa6, 0xa6, 0x98, 0x98, 0x98, 0x98, 0xa5, 0xa5, 0x9e, 0x9e, 0x9d, 0x9d, 0x9d, 0x9d, 
+  0xa2, 0xa3, 0x99, 0x99, 0x99, 0x8a, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x69, 0x89, 0xa3, 0xa3, 0x9d, 0x9e, 0x9e, 0x9e, 0xa5, 0x98, 0x98, 0x98, 0x98, 0x98, 
+  0xa8, 0x98, 0xa6, 0xa6, 0x98, 0x98, 0x98, 0x98, 0xa5, 0xa5, 0x9e, 0x9e, 0x9d, 0x9d, 0x9d, 0x9d, 
+  0xa2, 0xa3, 0x99, 0x99, 0x99, 0x8a, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x89, 0x93, 0xb2, 0x9e, 0x9e, 0x9e, 0xa5, 0xa5, 0xa5, 0x98, 0xa5, 
+  0xa6, 0x98, 0xa6, 0x98, 0x98, 0x98, 0xa5, 0xa5, 0xa4, 0xa5, 0x9e, 0xa4, 0x9e, 0x9e, 0x9d, 0xa2, 
+  0xa3, 0x94, 0x89, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7f, 0x9b, 0x99, 0xa4, 0xa5, 0x98, 0xa5, 0x98, 
+  0xa5, 0x98, 0x98, 0x98, 0xa5, 0xa5, 0xa5, 0xa5, 0x9e, 0xa4, 0xa4, 0x9e, 0xb2, 0x96, 0x96, 0x7f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x9b, 0x49, 
+  0x49, 0x49, 0x49, 0x49, 0x95, 0x49, 0x49, 0x49, 0x9b, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x59, 0x9b, 0x49, 
+  0x49, 0x49, 0x49, 0x49, 0x95, 0x49, 0x49, 0x49, 0x9b, 0x7f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x24, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x24, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x27, 0x25, 0x27, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2d, 0x2e, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x27, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2c, 0x2f, 0x2e, 0x2e, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x25, 0x25, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2e, 0x2e, 0x2a, 0x2e, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x34, 0x34, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x23, 0x34, 0x34, 0x34, 0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x27, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x23, 0x33, 0x31, 
+  0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2e, 0x2e, 0x2a, 0x2e, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x34, 0x35, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x38, 0x36, 0x36, 0x39, 0x34, 0x33, 
+  0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x33, 0x33, 
+  0x33, 0x31, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x23, 
+  0x34, 0x36, 0x3a, 0x3b, 0x3c, 0x3c, 0x3d, 0x3c, 0x26, 0x38, 0x3e, 0x39, 0x37, 0x37, 0x38, 0x37, 
+  0x30, 0x34, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x33, 0x23, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x34, 0x37, 
+  0x3e, 0x3f, 0x26, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3c, 0x3c, 0x3c, 0x26, 0x38, 0x37, 0x38, 
+  0x36, 0x36, 0x37, 0x33, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x23, 0x33, 0x23, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x34, 0x37, 
+  0x3e, 0x3f, 0x26, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3c, 0x3c, 0x3c, 0x26, 0x38, 0x37, 0x38, 
+  0x36, 0x36, 0x37, 0x33, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2b, 0x28, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2e, 0x2a, 0x2a, 0x23, 0x37, 0x3d, 0x41, 
+  0x42, 0x43, 0x44, 0x45, 0x45, 0x46, 0x45, 0x44, 0x44, 0x44, 0x30, 0x40, 0x40, 0x3c, 0x3c, 0x3d, 
+  0x37, 0x39, 0x37, 0x37, 0x47, 0x25, 0x25, 0x25, 0x27, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x48, 0x2b, 0x2b, 0x23, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2e, 0x2e, 0x2e, 0x2a, 0x2e, 0x28, 0x26, 0x47, 0x40, 0x29, 
+  0x42, 0x43, 0x49, 0x49, 0x49, 0x4a, 0x49, 0x4b, 0x4b, 0x49, 0x45, 0x45, 0x45, 0x40, 0x40, 0x3c, 
+  0x3c, 0x3d, 0x37, 0x37, 0x37, 0x47, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x4c, 0x48, 0x2b, 0x2b, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2e, 0x2e, 0x2e, 0x2a, 0x40, 0x3c, 0x40, 0x45, 0x4b, 0x4b, 
+  0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x49, 0x45, 0x46, 0x44, 0x45, 0x40, 
+  0x40, 0x3c, 0x26, 0x38, 0x37, 0x38, 0x37, 0x33, 0x25, 0x25, 0x27, 0x25, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x4c, 0x48, 0x2b, 0x2b, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2e, 0x2e, 0x2e, 0x2a, 0x40, 0x3c, 0x40, 0x45, 0x4b, 0x4b, 
+  0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x49, 0x45, 0x46, 0x44, 0x45, 0x40, 
+  0x40, 0x3c, 0x26, 0x38, 0x37, 0x38, 0x37, 0x33, 0x25, 0x25, 0x27, 0x25, 0x27, 0x2a, 0x2a, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x4c, 0x2b, 0x48, 0x2b, 0x28, 0x28, 0x23, 0x23, 
+  0x23, 0x33, 0x33, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f, 0x2b, 0x3c, 0x45, 0x49, 0x49, 0x4a, 0x4d, 
+  0x4d, 0x4e, 0x4f, 0x4f, 0x50, 0x50, 0x4f, 0x4f, 0x4d, 0x4a, 0x4b, 0x4a, 0x4a, 0x4b, 0x4b, 0x45, 
+  0x40, 0x40, 0x3c, 0x3d, 0x38, 0x37, 0x37, 0x38, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x27, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x32, 0x4c, 0x4c, 0x2c, 0x2b, 0x28, 0x28, 0x23, 0x33, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x28, 0x3c, 0x45, 0x4b, 0x4a, 0x4a, 0x4f, 0x50, 
+  0x50, 0x4d, 0x51, 0x4d, 0x33, 0x51, 0x50, 0x50, 0x51, 0x4f, 0x4d, 0x4a, 0x4a, 0x4a, 0x49, 0x49, 
+  0x44, 0x44, 0x40, 0x3c, 0x3d, 0x38, 0x37, 0x37, 0x47, 0x25, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x32, 0x32, 0x4c, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x28, 
+  0x23, 0x33, 0x31, 0x33, 0x2f, 0x2f, 0x2f, 0x2f, 0x3c, 0x44, 0x4b, 0x4a, 0x4a, 0x50, 0x50, 0x50, 
+  0x52, 0x52, 0x53, 0x2e, 0x52, 0x48, 0x52, 0x52, 0x54, 0x52, 0x51, 0x50, 0x4a, 0x4a, 0x4a, 0x4b, 
+  0x4b, 0x44, 0x45, 0x40, 0x3c, 0x3d, 0x38, 0x37, 0x37, 0x21, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x21, 0x32, 0x32, 0x4c, 0x2b, 0x2b, 0x28, 0x28, 0x23, 0x28, 
+  0x23, 0x33, 0x31, 0x33, 0x2f, 0x2f, 0x2f, 0x2f, 0x3c, 0x44, 0x4b, 0x4a, 0x4a, 0x50, 0x50, 0x50, 
+  0x52, 0x52, 0x53, 0x2e, 0x52, 0x48, 0x52, 0x52, 0x54, 0x52, 0x51, 0x50, 0x4a, 0x4a, 0x4a, 0x4b, 
+  0x4b, 0x44, 0x45, 0x40, 0x3c, 0x3d, 0x38, 0x37, 0x37, 0x21, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x34, 0x32, 0x4c, 0x2c, 0x48, 0x2b, 0x28, 0x23, 0x23, 
+  0x33, 0x23, 0x31, 0x33, 0x31, 0x31, 0x2f, 0x30, 0x40, 0x4b, 0x4a, 0x50, 0x51, 0x53, 0x53, 0x55, 
+  0x56, 0x53, 0x55, 0x55, 0x2d, 0x55, 0x55, 0x27, 0x53, 0x33, 0x53, 0x51, 0x51, 0x4a, 0x57, 0x58, 
+  0x34, 0x45, 0x24, 0x44, 0x40, 0x3c, 0x26, 0x37, 0x37, 0x38, 0x28, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x34, 0x32, 0x4c, 0x2c, 0x2b, 0x2b, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x31, 0x2c, 0x40, 0x49, 0x4a, 0x4f, 0x50, 0x53, 0x53, 0x55, 0x59, 
+  0x55, 0x59, 0x59, 0x59, 0x22, 0x59, 0x59, 0x55, 0x56, 0x5a, 0x53, 0x53, 0x51, 0x33, 0x5b, 0x5c, 
+  0x5d, 0x5e, 0x5e, 0x5f, 0x40, 0x40, 0x3c, 0x37, 0x37, 0x37, 0x35, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 
+  0x2e, 0x2d, 0x20, 0x20, 0x20, 0x78, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x34, 0x34, 0x4c, 0x4c, 0x2c, 0x2c, 0x28, 0x28, 0x23, 
+  0x28, 0x23, 0x33, 0x33, 0x31, 0x31, 0x30, 0x44, 0x60, 0x4f, 0x51, 0x53, 0x50, 0x61, 0x55, 0x62, 
+  0x63, 0x64, 0x59, 0x62, 0x63, 0x62, 0x62, 0x65, 0x56, 0x56, 0x56, 0x5a, 0x52, 0x5b, 0x5a, 0x5c, 
+  0x5d, 0x5d, 0x5e, 0x5e, 0x66, 0x30, 0x3c, 0x26, 0x37, 0x37, 0x37, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x29, 0x20, 0x20, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x34, 0x34, 0x4c, 0x4c, 0x2c, 0x2c, 0x28, 0x28, 0x23, 
+  0x28, 0x23, 0x33, 0x33, 0x31, 0x31, 0x30, 0x44, 0x60, 0x4f, 0x51, 0x53, 0x50, 0x61, 0x55, 0x62, 
+  0x63, 0x64, 0x59, 0x62, 0x63, 0x62, 0x62, 0x65, 0x56, 0x56, 0x56, 0x5a, 0x52, 0x5b, 0x5a, 0x5c, 
+  0x5d, 0x5d, 0x5e, 0x5e, 0x66, 0x30, 0x3c, 0x26, 0x37, 0x37, 0x37, 0x26, 0x24, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2e, 0x29, 0x20, 0x20, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x67, 0x24, 0x21, 0x32, 0x4c, 0x4c, 0x2c, 0x2b, 0x2b, 0x28, 0x23, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x33, 0x40, 0x49, 0x4d, 0x50, 0x53, 0x2d, 0x65, 0x2a, 0x65, 0x22, 
+  0x2a, 0x22, 0x65, 0x68, 0x62, 0x65, 0x69, 0x69, 0x69, 0x69, 0x56, 0x56, 0x56, 0x6a, 0x54, 0x54, 
+  0x5c, 0x5d, 0x6b, 0x5e, 0x5e, 0x66, 0x3e, 0x47, 0x37, 0x38, 0x37, 0x36, 0x20, 0x20, 0x26, 0x24, 
+  0x2e, 0x2a, 0x24, 0x20, 0x78, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x24, 0x34, 0x32, 0x4c, 0x2c, 0x2c, 0x2b, 0x28, 0x28, 
+  0x23, 0x23, 0x33, 0x33, 0x33, 0x21, 0x44, 0x4a, 0x50, 0x53, 0x53, 0x55, 0x22, 0x6c, 0x63, 0x63, 
+  0x68, 0x68, 0x6d, 0x63, 0x22, 0x65, 0x6d, 0x68, 0x6d, 0x6e, 0x69, 0x69, 0x56, 0x6a, 0x6a, 0x5b, 
+  0x54, 0x5c, 0x5d, 0x6b, 0x6f, 0x43, 0x66, 0x67, 0x37, 0x38, 0x37, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x3a, 0x3b, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x34, 0x4c, 0x4c, 0x48, 0x2c, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x33, 0x70, 0x49, 0x4d, 0x50, 0x55, 0x55, 0x62, 0x6c, 0x64, 0x64, 0x64, 
+  0x64, 0x68, 0x71, 0x72, 0x72, 0x68, 0x68, 0x65, 0x68, 0x68, 0x6e, 0x69, 0x69, 0x56, 0x6a, 0x6a, 
+  0x5b, 0x54, 0x5c, 0x6b, 0x5e, 0x57, 0x42, 0x41, 0x38, 0x36, 0x39, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x21, 0x34, 0x4c, 0x4c, 0x48, 0x2c, 0x2b, 0x28, 
+  0x28, 0x23, 0x23, 0x23, 0x33, 0x70, 0x49, 0x4d, 0x50, 0x55, 0x55, 0x62, 0x6c, 0x64, 0x64, 0x64, 
+  0x64, 0x68, 0x71, 0x72, 0x72, 0x68, 0x68, 0x65, 0x68, 0x68, 0x6e, 0x69, 0x69, 0x56, 0x6a, 0x6a, 
+  0x5b, 0x54, 0x5c, 0x6b, 0x5e, 0x57, 0x42, 0x41, 0x38, 0x36, 0x39, 0x36, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x21, 0x34, 0x32, 0x4c, 0x4c, 0x2c, 0x2b, 0x28, 0x28, 
+  0x28, 0x23, 0x23, 0x33, 0x23, 0x40, 0x4a, 0x50, 0x53, 0x55, 0x55, 0x62, 0x73, 0x64, 0x73, 0x73, 
+  0x74, 0x6d, 0x75, 0x71, 0x71, 0x76, 0x68, 0x68, 0x71, 0x68, 0x68, 0x6e, 0x69, 0x56, 0x56, 0x6a, 
+  0x5b, 0x5b, 0x5c, 0x5d, 0x6b, 0x5e, 0x43, 0x77, 0x3f, 0x37, 0x3a, 0x39, 0x78, 0x20, 0x20, 0x20, 
+  0x20, 0x3a, 0x83, 0x3a, 0x3a, 0x3b, 0x3a, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x32, 0x4c, 0x4c, 0x2c, 0x2c, 0x2b, 
+  0x28, 0x23, 0x23, 0x23, 0x49, 0x44, 0x4a, 0x50, 0x53, 0x59, 0x62, 0x64, 0x64, 0x73, 0x64, 0x79, 
+  0x74, 0x76, 0x76, 0x7a, 0x76, 0x76, 0x76, 0x76, 0x71, 0x68, 0x6d, 0x68, 0x6e, 0x69, 0x56, 0x6a, 
+  0x6a, 0x54, 0x5c, 0x5c, 0x6b, 0x5e, 0x43, 0x66, 0x41, 0x3f, 0x36, 0x36, 0x78, 0x20, 0x20, 0x20, 
+  0x3a, 0x3a, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x4c, 0x48, 0x2b, 0x2b, 0x2b, 
+  0x28, 0x28, 0x23, 0x33, 0x47, 0x44, 0x4d, 0x53, 0x55, 0x59, 0x22, 0x73, 0x64, 0x22, 0x72, 0x22, 
+  0x74, 0x75, 0x75, 0x7b, 0x7a, 0x7c, 0x7a, 0x76, 0x7d, 0x71, 0x68, 0x68, 0x6d, 0x6e, 0x56, 0x56, 
+  0x6a, 0x5b, 0x54, 0x5c, 0x6b, 0x5e, 0x6f, 0x66, 0x41, 0x3e, 0x39, 0x36, 0x39, 0x20, 0x78, 0x7e, 
+  0x3f, 0x86, 0x86, 0x3b, 0x3a, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x4c, 0x48, 0x2b, 0x2b, 0x2b, 
+  0x28, 0x28, 0x23, 0x33, 0x47, 0x44, 0x4d, 0x53, 0x55, 0x59, 0x22, 0x73, 0x64, 0x22, 0x72, 0x22, 
+  0x74, 0x75, 0x75, 0x7b, 0x7a, 0x7c, 0x7a, 0x76, 0x7d, 0x71, 0x68, 0x68, 0x6d, 0x6e, 0x56, 0x56, 
+  0x6a, 0x5b, 0x54, 0x5c, 0x6b, 0x5e, 0x6f, 0x66, 0x41, 0x3e, 0x39, 0x36, 0x39, 0x20, 0x78, 0x7e, 
+  0x3f, 0x86, 0x86, 0x3b, 0x3a, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x34, 0x34, 0x32, 0x4c, 0x2c, 0x2c, 0x2b, 
+  0x28, 0x28, 0x21, 0x26, 0x37, 0x4b, 0x4a, 0x53, 0x55, 0x63, 0x2d, 0x64, 0x7f, 0x7d, 0x7c, 0x80, 
+  0x72, 0x7a, 0x7a, 0x7c, 0x81, 0x7c, 0x81, 0x7c, 0x76, 0x76, 0x71, 0x6d, 0x6d, 0x82, 0x69, 0x56, 
+  0x56, 0x5b, 0x5b, 0x5c, 0x5c, 0x57, 0x57, 0x42, 0x66, 0x3b, 0x3a, 0x39, 0x36, 0x7e, 0x41, 0x3f, 
+  0x86, 0x83, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x34, 0x32, 0x4c, 0x4c, 0x4c, 0x2b, 0x2c, 
+  0x2b, 0x34, 0x20, 0x20, 0x83, 0x4b, 0x4f, 0x53, 0x55, 0x62, 0x6d, 0x22, 0x72, 0x71, 0x7f, 0x74, 
+  0x75, 0x7c, 0x7c, 0x81, 0x81, 0x84, 0x84, 0x81, 0x7c, 0x7a, 0x71, 0x65, 0x68, 0x6d, 0x69, 0x56, 
+  0x56, 0x6a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5e, 0x43, 0x85, 0x3f, 0x38, 0x86, 0x77, 0x87, 0x41, 0x7e, 
+  0x86, 0x3a, 0x3a, 0x86, 0x3a, 0x3a, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x4c, 0x4c, 0x2c, 0x2b, 
+  0x26, 0x20, 0x20, 0x20, 0x38, 0x4b, 0x4f, 0x59, 0x59, 0x63, 0x68, 0x6c, 0x88, 0x64, 0x64, 0x75, 
+  0x7c, 0x7c, 0x7a, 0x81, 0x84, 0x84, 0x84, 0x84, 0x81, 0x7c, 0x71, 0x68, 0x6d, 0x6e, 0x6e, 0x69, 
+  0x56, 0x6a, 0x54, 0x5c, 0x5d, 0x6b, 0x5e, 0x43, 0x66, 0x66, 0x77, 0x6f, 0x77, 0x87, 0x41, 0x41, 
+  0x7e, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x4c, 0x4c, 0x2c, 0x2b, 
+  0x26, 0x20, 0x20, 0x20, 0x38, 0x4b, 0x4f, 0x59, 0x59, 0x63, 0x68, 0x6c, 0x88, 0x64, 0x64, 0x75, 
+  0x7c, 0x7c, 0x7a, 0x81, 0x84, 0x84, 0x84, 0x84, 0x81, 0x7c, 0x71, 0x68, 0x6d, 0x6e, 0x6e, 0x69, 
+  0x56, 0x6a, 0x54, 0x5c, 0x5d, 0x6b, 0x5e, 0x43, 0x66, 0x66, 0x77, 0x6f, 0x77, 0x87, 0x41, 0x41, 
+  0x7e, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x34, 0x32, 0x4c, 0x2c, 0x37, 
+  0x20, 0x20, 0x20, 0x20, 0x3f, 0x4b, 0x4f, 0x53, 0x59, 0x62, 0x6d, 0x79, 0x63, 0x7c, 0x7c, 0x7a, 
+  0x7a, 0x7c, 0x81, 0x84, 0x84, 0x84, 0x84, 0x84, 0x81, 0x7c, 0x71, 0x71, 0x71, 0x6e, 0x69, 0x69, 
+  0x56, 0x6a, 0x54, 0x89, 0x5d, 0x6b, 0x6b, 0x6b, 0x8a, 0x8b, 0x8c, 0x77, 0x77, 0x87, 0x41, 0x7e, 
+  0x7e, 0x3b, 0x3a, 0x3b, 0x3b, 0x3a, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x24, 0x21, 0x32, 0x32, 0x4c, 0x37, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x3a, 0x45, 0x8d, 0x33, 0x59, 0x65, 0x68, 0x68, 0x7d, 0x71, 0x76, 0x7a, 
+  0x7c, 0x7c, 0x7c, 0x8e, 0x84, 0x8f, 0x84, 0x84, 0x81, 0x7c, 0x76, 0x71, 0x68, 0x68, 0x6e, 0x6e, 
+  0x56, 0x6a, 0x5b, 0x90, 0x5c, 0x54, 0x91, 0x92, 0x93, 0x8b, 0x8a, 0x8c, 0x6f, 0x87, 0x41, 0x41, 
+  0x3f, 0x86, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x34, 0x48, 0x92, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2c, 0x6a, 0x56, 0x69, 0x6d, 0x71, 0x71, 0x76, 0x76, 0x7a, 
+  0x7a, 0x7c, 0x7c, 0x81, 0x84, 0x84, 0x84, 0x8e, 0x81, 0x94, 0x71, 0x71, 0x6d, 0x6d, 0x69, 0x69, 
+  0x56, 0x6a, 0x95, 0x89, 0x96, 0x91, 0x91, 0x92, 0x92, 0x8b, 0x8a, 0x77, 0x6f, 0x77, 0x41, 0x7e, 
+  0x3f, 0x3b, 0x3a, 0x3a, 0x86, 0x3a, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x34, 0x48, 0x92, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2c, 0x6a, 0x56, 0x69, 0x6d, 0x71, 0x71, 0x76, 0x76, 0x7a, 
+  0x7a, 0x7c, 0x7c, 0x81, 0x84, 0x84, 0x84, 0x8e, 0x81, 0x94, 0x71, 0x71, 0x6d, 0x6d, 0x69, 0x69, 
+  0x56, 0x6a, 0x95, 0x89, 0x96, 0x91, 0x91, 0x92, 0x92, 0x8b, 0x8a, 0x77, 0x6f, 0x77, 0x41, 0x7e, 
+  0x3f, 0x3b, 0x3a, 0x3a, 0x86, 0x3a, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x47, 0x24, 0x21, 0x34, 0x29, 0x97, 0x98, 0x91, 
+  0x7e, 0x20, 0x20, 0x20, 0x20, 0x43, 0x4d, 0x54, 0x56, 0x69, 0x6d, 0x71, 0x71, 0x76, 0x7a, 0x7a, 
+  0x7a, 0x7c, 0x7c, 0x99, 0x81, 0x81, 0x81, 0x7c, 0x7a, 0x76, 0x65, 0x71, 0x71, 0x6e, 0x6e, 0x6e, 
+  0x97, 0x97, 0x9a, 0x9a, 0x96, 0x9b, 0x91, 0x93, 0x92, 0x8b, 0x8c, 0x8c, 0x77, 0x87, 0x9c, 0x41, 
+  0x7e, 0x86, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x20, 0x93, 0x98, 0x9d, 
+  0x9e, 0x99, 0x9a, 0x8b, 0x41, 0x35, 0x48, 0x5c, 0x56, 0x69, 0x6e, 0x68, 0x71, 0x7d, 0x76, 0x76, 
+  0x7a, 0x7a, 0x7a, 0x7a, 0x76, 0x7c, 0x7c, 0x7c, 0x7c, 0x76, 0x76, 0x94, 0x9f, 0x9f, 0x9e, 0x98, 
+  0xa0, 0x97, 0x95, 0xa1, 0x96, 0x91, 0xa2, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x77, 0x87, 0x9c, 0x7e, 
+  0x7e, 0x86, 0x3b, 0x3a, 0x3b, 0x3a, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x24, 0x36, 0x20, 0x8c, 0x97, 0x98, 
+  0x9f, 0x99, 0xa3, 0xa4, 0xa5, 0xa5, 0xa6, 0x6d, 0x94, 0x76, 0x99, 0x7d, 0x71, 0x71, 0x76, 0x7a, 
+  0x76, 0x7a, 0x7c, 0xa5, 0xa5, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0x94, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 
+  0x97, 0x97, 0x9a, 0x96, 0x96, 0x9b, 0xa2, 0x93, 0xa7, 0x92, 0x8a, 0x8c, 0x77, 0x77, 0x9c, 0x41, 
+  0x7e, 0x3f, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3a, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x24, 0x36, 0x20, 0x8c, 0x97, 0x98, 
+  0x9f, 0x99, 0xa3, 0xa4, 0xa5, 0xa5, 0xa6, 0x6d, 0x94, 0x76, 0x99, 0x7d, 0x71, 0x71, 0x76, 0x7a, 
+  0x76, 0x7a, 0x7c, 0xa5, 0xa5, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0x94, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 
+  0x97, 0x97, 0x9a, 0x96, 0x96, 0x9b, 0xa2, 0x93, 0xa7, 0x92, 0x8a, 0x8c, 0x77, 0x77, 0x9c, 0x41, 
+  0x7e, 0x3f, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3a, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x35, 0x20, 0x20, 0x6f, 0x97, 0x98, 
+  0x9e, 0x9f, 0x99, 0xa3, 0xa4, 0xa5, 0xa8, 0xa6, 0xa9, 0xa9, 0xaa, 0xab, 0xab, 0xab, 0xab, 0xaa, 
+  0xab, 0xab, 0xab, 0xaa, 0xab, 0xa9, 0xaa, 0xa5, 0xa8, 0xa3, 0xa3, 0x99, 0x99, 0x9f, 0x98, 0x9d, 
+  0x98, 0x97, 0x95, 0x96, 0x96, 0x91, 0x91, 0x93, 0x92, 0x8b, 0x8a, 0x8a, 0x77, 0x87, 0x9c, 0x41, 
+  0x7e, 0x86, 0x3b, 0x3a, 0x86, 0x3a, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x38, 0x20, 0x20, 0x20, 0x97, 0xa0, 
+  0x98, 0x9e, 0x99, 0xa3, 0xa3, 0xa5, 0xa5, 0xa8, 0xa6, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xa6, 0xa9, 0xa6, 0xa5, 0xa8, 0xa4, 0xac, 0x94, 0x94, 0x9f, 0x9e, 0x9e, 0x98, 
+  0xa0, 0x97, 0x9a, 0x9a, 0x96, 0x9b, 0xa2, 0x93, 0x92, 0x92, 0x8c, 0x8c, 0x6f, 0x77, 0x9c, 0x41, 
+  0x7e, 0x7e, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x83, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0x9e, 0x9f, 0x94, 0xa3, 0xa4, 0xa5, 0xa6, 0xa6, 0xa6, 0xa6, 0xab, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xa9, 0xa6, 0xa5, 0xa4, 0xa4, 0xac, 0x94, 0x94, 0x99, 0x9e, 0x9d, 0x98, 
+  0x98, 0x97, 0x95, 0x9a, 0x96, 0x91, 0x93, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x77, 0x77, 0x85, 0x41, 
+  0x41, 0x86, 0x3b, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x9a, 0x97, 
+  0x98, 0x9e, 0x9f, 0x94, 0xa3, 0xa4, 0xa5, 0xa6, 0xa6, 0xa6, 0xa6, 0xab, 0xab, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xab, 0xab, 0xa9, 0xa6, 0xa5, 0xa4, 0xa4, 0xac, 0x94, 0x94, 0x99, 0x9e, 0x9d, 0x98, 
+  0x98, 0x97, 0x95, 0x9a, 0x96, 0x91, 0x93, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x77, 0x77, 0x85, 0x41, 
+  0x41, 0x86, 0x3b, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x97, 
+  0x98, 0x9e, 0x9e, 0x99, 0x94, 0xac, 0xa4, 0xa5, 0xa8, 0xa6, 0xab, 0xa6, 0xa6, 0xab, 0xab, 0xab, 
+  0xab, 0xab, 0xa6, 0xa6, 0xa8, 0xa8, 0xa8, 0xa5, 0xa3, 0xa3, 0x94, 0x99, 0x9f, 0x9f, 0x98, 0x98, 
+  0xa0, 0x97, 0x9a, 0x96, 0x96, 0x9b, 0x91, 0x93, 0xa7, 0x92, 0x8a, 0x8c, 0x6f, 0x77, 0x87, 0x85, 
+  0x7e, 0x3f, 0x86, 0x3b, 0x3b, 0x3a, 0x86, 0x3b, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x95, 
+  0xa0, 0x9d, 0x9e, 0x9f, 0x99, 0xa3, 0xa4, 0xa4, 0xa8, 0xa5, 0xa6, 0xab, 0xa9, 0xa6, 0xab, 0xa6, 
+  0xa9, 0xa9, 0xa9, 0xa6, 0xa8, 0xa5, 0xa8, 0xa4, 0xa3, 0xa3, 0x94, 0x9f, 0x9e, 0x9e, 0x9d, 0x98, 
+  0xa0, 0x97, 0x95, 0x9a, 0x96, 0x9b, 0x91, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x77, 0x77, 0x9c, 0x41, 
+  0x7e, 0x7e, 0x3b, 0x3a, 0x3b, 0x3b, 0x3b, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x9a, 
+  0x97, 0x98, 0x9d, 0x9f, 0x99, 0x94, 0xa3, 0xa3, 0xa4, 0xa8, 0xa8, 0xa6, 0xa6, 0xa9, 0xa6, 0xa6, 
+  0xa6, 0xa8, 0xa6, 0xa5, 0xa6, 0xa4, 0xa4, 0xa4, 0xa4, 0x94, 0x99, 0x99, 0x9f, 0x9e, 0x9d, 0xa0, 
+  0x97, 0x95, 0x9a, 0xa1, 0x96, 0x91, 0xa2, 0x93, 0xa7, 0x8b, 0x8b, 0x8c, 0x6f, 0x77, 0x87, 0x85, 
+  0x41, 0x3f, 0x86, 0x3b, 0x3b, 0x3b, 0x3b, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x9a, 
+  0x97, 0x98, 0x9d, 0x9f, 0x99, 0x94, 0xa3, 0xa3, 0xa4, 0xa8, 0xa8, 0xa6, 0xa6, 0xa9, 0xa6, 0xa6, 
+  0xa6, 0xa8, 0xa6, 0xa5, 0xa6, 0xa4, 0xa4, 0xa4, 0xa4, 0x94, 0x99, 0x99, 0x9f, 0x9e, 0x9d, 0xa0, 
+  0x97, 0x95, 0x9a, 0xa1, 0x96, 0x91, 0xa2, 0x93, 0xa7, 0x8b, 0x8b, 0x8c, 0x6f, 0x77, 0x87, 0x85, 
+  0x41, 0x3f, 0x86, 0x3b, 0x3b, 0x3b, 0x3b, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x95, 0x97, 0x98, 0x9f, 0x9f, 0x94, 0x94, 0xa3, 0xa4, 0xa4, 0xa5, 0xa8, 0xa5, 0xa6, 0xa6, 0xa6, 
+  0xa6, 0xa8, 0xa6, 0xa5, 0xa8, 0xa5, 0xa4, 0xa3, 0xa3, 0x94, 0x99, 0x9f, 0x9f, 0x9e, 0x98, 0x98, 
+  0x97, 0x97, 0x9a, 0xa1, 0x96, 0x9b, 0x93, 0x93, 0xa7, 0x92, 0x92, 0x8c, 0x77, 0x77, 0x87, 0x85, 
+  0x7e, 0x7e, 0x86, 0x3b, 0x3a, 0x3a, 0x78, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x9a, 
+  0x9a, 0x97, 0x9d, 0x98, 0x9e, 0x9f, 0x94, 0xa3, 0xa3, 0xa4, 0xa4, 0xa5, 0xa8, 0xa8, 0xa8, 0xa8, 
+  0xa5, 0xa5, 0xa8, 0xa8, 0xa5, 0xa4, 0xa4, 0xac, 0x94, 0x99, 0x94, 0x9f, 0x9e, 0x98, 0x98, 0xa0, 
+  0x97, 0x95, 0x9a, 0x96, 0x96, 0x91, 0x91, 0x93, 0x92, 0x92, 0x8a, 0x8a, 0x8c, 0x77, 0x87, 0x41, 
+  0x41, 0x3f, 0x7e, 0x3a, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 
+  0x95, 0x97, 0x98, 0x98, 0x9e, 0x99, 0x99, 0x94, 0xa3, 0xa4, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 0xa8, 
+  0xa8, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0x94, 0x99, 0x99, 0x9f, 0x9f, 0x9e, 0x98, 0x98, 
+  0x97, 0x97, 0x9a, 0x9a, 0x96, 0x9b, 0x91, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x8c, 0x77, 0x77, 0x9c, 
+  0x41, 0x3f, 0x3f, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 
+  0x95, 0x97, 0x98, 0x98, 0x9e, 0x99, 0x99, 0x94, 0xa3, 0xa4, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 0xa8, 
+  0xa8, 0xa5, 0xa4, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0x94, 0x99, 0x99, 0x9f, 0x9f, 0x9e, 0x98, 0x98, 
+  0x97, 0x97, 0x9a, 0x9a, 0x96, 0x9b, 0x91, 0x93, 0x92, 0x92, 0x8a, 0x8c, 0x8c, 0x77, 0x77, 0x9c, 
+  0x41, 0x3f, 0x3f, 0x3b, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 
+  0x96, 0x9a, 0xa0, 0x9d, 0x9e, 0x9e, 0x9f, 0x94, 0x94, 0x94, 0xa3, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 
+  0xa5, 0xa4, 0xa5, 0xa4, 0xa3, 0xa3, 0xa3, 0xa3, 0x94, 0x99, 0x99, 0x9e, 0x9d, 0x9d, 0x98, 0xa0, 
+  0x97, 0x95, 0x9a, 0x96, 0x96, 0x91, 0x93, 0x93, 0xa7, 0x8b, 0x8a, 0x8a, 0x77, 0x77, 0x87, 0x85, 
+  0x41, 0x7e, 0x86, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x9a, 0x9a, 0x97, 0xa0, 0x9d, 0x9e, 0x9e, 0x99, 0x99, 0xa3, 0xa3, 0xa3, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa4, 0xac, 0xac, 0x94, 0x94, 0x94, 0x99, 0x9f, 0x9e, 0x9e, 0x9d, 0x98, 0x98, 
+  0x97, 0x95, 0x9a, 0xa1, 0x96, 0x9b, 0x91, 0x93, 0xa7, 0x8b, 0x8b, 0x8a, 0x6f, 0x77, 0x87, 0x41, 
+  0x7e, 0x7e, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x96, 0x9a, 0x9a, 0x97, 0x98, 0x98, 0x9f, 0x99, 0x99, 0x94, 0x94, 0xac, 0xa3, 0xa3, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa3, 0xac, 0xa3, 0x94, 0xa3, 0x99, 0x99, 0x99, 0x9f, 0x9e, 0x9d, 0x98, 0xa0, 0x97, 
+  0x97, 0x9a, 0x9a, 0x96, 0x96, 0x91, 0x91, 0x93, 0x92, 0x92, 0x8b, 0x8c, 0x8c, 0x77, 0x77, 0x87, 
+  0x85, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x96, 0x9a, 0x9a, 0x97, 0x98, 0x98, 0x9f, 0x99, 0x99, 0x94, 0x94, 0xac, 0xa3, 0xa3, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa3, 0xac, 0xa3, 0x94, 0xa3, 0x99, 0x99, 0x99, 0x9f, 0x9e, 0x9d, 0x98, 0xa0, 0x97, 
+  0x97, 0x9a, 0x9a, 0x96, 0x96, 0x91, 0x91, 0x93, 0x92, 0x92, 0x8b, 0x8c, 0x8c, 0x77, 0x77, 0x87, 
+  0x85, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x92, 0xa1, 0x97, 0x97, 0x98, 0x98, 0x9d, 0x9f, 0x9f, 0x99, 0x99, 0x94, 0x94, 0x94, 0xa3, 0xa3, 
+  0xa3, 0xa4, 0xa3, 0xa3, 0xa3, 0x94, 0x94, 0x94, 0x99, 0x9e, 0x9f, 0x9e, 0x9d, 0x98, 0x98, 0x97, 
+  0x97, 0x95, 0x9a, 0x96, 0x96, 0xa2, 0xa2, 0x93, 0x92, 0x8b, 0x92, 0x8c, 0x8c, 0x77, 0x77, 0x7e, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x77, 0x96, 0x9a, 0x97, 0x97, 0x98, 0x9d, 0x9e, 0x9e, 0x9f, 0x99, 0x94, 0x94, 0xa3, 0x94, 0xa3, 
+  0xa3, 0x94, 0xa3, 0xa3, 0x99, 0x94, 0x99, 0x99, 0x99, 0x9f, 0x9e, 0x9e, 0x98, 0x9d, 0x97, 0x97, 
+  0x95, 0x9a, 0xa1, 0x96, 0x96, 0x91, 0x91, 0x93, 0xa7, 0x92, 0x8a, 0x8a, 0x6f, 0x6f, 0x39, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x86, 0x96, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x9e, 0x9e, 0x9f, 0x99, 0x99, 0x99, 0x94, 0x94, 0x94, 
+  0x94, 0x94, 0x94, 0x94, 0x99, 0x94, 0x99, 0x9f, 0x9f, 0x9f, 0x9e, 0x9d, 0x98, 0x9d, 0xa0, 0x97, 
+  0x95, 0x9a, 0xa1, 0x96, 0x91, 0xa2, 0xa2, 0x93, 0x92, 0x8b, 0x8b, 0x8a, 0x3f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x86, 0x96, 0x9a, 0x97, 0x97, 0x98, 0x98, 0x9e, 0x9e, 0x9f, 0x99, 0x99, 0x99, 0x94, 0x94, 0x94, 
+  0x94, 0x94, 0x94, 0x94, 0x99, 0x94, 0x99, 0x9f, 0x9f, 0x9f, 0x9e, 0x9d, 0x98, 0x9d, 0xa0, 0x97, 
+  0x95, 0x9a, 0xa1, 0x96, 0x91, 0xa2, 0xa2, 0x93, 0x92, 0x8b, 0x8b, 0x8a, 0x3f, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x96, 0xa1, 0x9a, 0x97, 0x97, 0xa0, 0x9d, 0x9e, 0x9e, 0x9e, 0x9f, 0x94, 0x99, 0x94, 0x94, 
+  0x99, 0x94, 0x99, 0x94, 0x94, 0x99, 0x99, 0x99, 0x9e, 0x9e, 0x9d, 0x9d, 0x98, 0xa0, 0x97, 0x97, 
+  0x97, 0x9a, 0x9a, 0x96, 0x96, 0x91, 0x91, 0x93, 0xa7, 0x92, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x92, 0x96, 0xa1, 0x9a, 0x97, 0x97, 0x98, 0x9e, 0x9e, 0x9f, 0x9e, 0x9f, 0x9f, 0x99, 0x94, 
+  0x99, 0x94, 0x99, 0x99, 0x99, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0x98, 0x9d, 0x98, 0x98, 0x97, 0x97, 
+  0x95, 0x9a, 0xa1, 0x96, 0x91, 0xa2, 0xa2, 0x8c, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3f, 0x77, 0x95, 0x97, 0x97, 0x98, 0x98, 0x9d, 0x9e, 0x9e, 0x9f, 0x9e, 0x9f, 0x9f, 
+  0x99, 0x99, 0x99, 0x9f, 0x99, 0x99, 0x9e, 0x9f, 0x9f, 0x9e, 0x9e, 0x98, 0x98, 0xa0, 0xa0, 0x9a, 
+  0x9a, 0x9a, 0x96, 0x96, 0x9b, 0x87, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3f, 0x77, 0x95, 0x97, 0x97, 0x98, 0x98, 0x9d, 0x9e, 0x9e, 0x9f, 0x9e, 0x9f, 0x9f, 
+  0x99, 0x99, 0x99, 0x9f, 0x99, 0x99, 0x9e, 0x9f, 0x9f, 0x9e, 0x9e, 0x98, 0x98, 0xa0, 0xa0, 0x9a, 
+  0x9a, 0x9a, 0x96, 0x96, 0x9b, 0x87, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x6f, 0xa2, 0xa0, 0x98, 0x98, 0x9e, 0x9e, 0x9f, 0x9e, 0x9e, 0x99, 
+  0x9f, 0x9f, 0x99, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0x9e, 0x9d, 0x98, 0x98, 0xa0, 0x97, 0xa0, 0x97, 
+  0x9a, 0xa7, 0x77, 0x86, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x8a, 0x9b, 0x9d, 0x9e, 0x9e, 0x9f, 0x9e, 
+  0x9e, 0x9f, 0x9f, 0x9f, 0x9e, 0x9e, 0x9e, 0x9e, 0x98, 0x98, 0x9d, 0x98, 0x97, 0x8c, 0x77, 0x3f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7e, 0x8a, 0x8a, 
+  0x8c, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7e, 0x8a, 0x8a, 
+  0x8c, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x7e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x21, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x23, 0x21, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x27, 0x25, 
+  0x25, 0x25, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x21, 0x26, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x28, 0x27, 0x27, 0x25, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x2a, 0x2a, 0x2a, 0x27, 0x25, 0x27, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x26, 0x2c, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x27, 0x27, 0x25, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x26, 0x2e, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x30, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 
+  0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x33, 0x34, 0x21, 0x34, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x32, 0x33, 
+  0x31, 0x2f, 0x31, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x33, 0x34, 0x21, 0x34, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x23, 0x33, 0x31, 
+  0x31, 0x31, 0x2f, 0x2d, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x27, 0x27, 0x27, 
+  0x27, 0x27, 0x32, 0x36, 0x37, 0x37, 0x38, 0x38, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x34, 0x23, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x23, 0x33, 0x33, 0x33, 
+  0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x27, 0x27, 0x23, 
+  0x34, 0x37, 0x35, 0x39, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3b, 0x3b, 0x3c, 0x37, 0x38, 0x35, 0x37, 
+  0x36, 0x34, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x23, 0x23, 0x33, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x34, 0x3c, 
+  0x37, 0x3d, 0x26, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3a, 0x3f, 0x3c, 0x3b, 0x3c, 0x3c, 
+  0x35, 0x37, 0x37, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x23, 0x23, 0x33, 0x33, 
+  0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2f, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x27, 0x2a, 0x34, 0x3c, 
+  0x37, 0x3d, 0x26, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3a, 0x3f, 0x3c, 0x3b, 0x3c, 0x3c, 
+  0x35, 0x37, 0x37, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x25, 0x27, 0x27, 0x2a, 
+  0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x40, 0x28, 0x23, 0x23, 0x33, 0x33, 
+  0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x23, 0x3c, 0x3b, 0x3a, 
+  0x3d, 0x36, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41, 0x43, 0x43, 0x3e, 0x44, 0x3a, 0x3a, 0x37, 
+  0x3c, 0x3c, 0x3c, 0x35, 0x3a, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x40, 0x40, 0x40, 0x28, 0x23, 0x23, 0x33, 
+  0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x28, 0x3b, 0x3a, 0x41, 0x45, 
+  0x43, 0x45, 0x46, 0x47, 0x47, 0x47, 0x47, 0x46, 0x48, 0x46, 0x29, 0x49, 0x24, 0x41, 0x3e, 0x3a, 
+  0x3f, 0x37, 0x37, 0x3c, 0x35, 0x36, 0x25, 0x25, 0x27, 0x27, 0x27, 0x27, 0x25, 0x2a, 0x27, 0x27, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2e, 0x40, 0x40, 0x40, 0x28, 0x23, 0x23, 0x23, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x3a, 0x3a, 0x3e, 0x42, 0x48, 0x47, 
+  0x21, 0x4a, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x46, 0x4c, 0x48, 0x48, 0x41, 0x43, 0x3e, 
+  0x3a, 0x3f, 0x3b, 0x3c, 0x3c, 0x3c, 0x38, 0x33, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2e, 0x40, 0x40, 0x40, 0x28, 0x23, 0x23, 0x23, 
+  0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2d, 0x2d, 0x2a, 0x3a, 0x3a, 0x3e, 0x42, 0x48, 0x47, 
+  0x21, 0x4a, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x46, 0x4c, 0x48, 0x48, 0x41, 0x43, 0x3e, 
+  0x3a, 0x3f, 0x3b, 0x3c, 0x3c, 0x3c, 0x38, 0x33, 0x25, 0x25, 0x25, 0x27, 0x27, 0x2a, 0x2a, 0x27, 
+  0x27, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2e, 0x2e, 0x2c, 0x40, 0x40, 0x28, 0x28, 0x23, 0x33, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x2f, 0x28, 0x4d, 0x41, 0x46, 0x47, 0x4b, 0x4b, 
+  0x40, 0x4e, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f, 0x4e, 0x50, 0x4b, 0x51, 0x51, 0x47, 0x48, 0x46, 0x41, 
+  0x41, 0x3e, 0x3a, 0x3b, 0x3c, 0x3c, 0x3c, 0x52, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2a, 
+  0x2a, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x49, 0x32, 0x2e, 0x2c, 0x2c, 0x40, 0x28, 0x28, 0x23, 0x33, 
+  0x33, 0x33, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2d, 0x40, 0x3a, 0x42, 0x46, 0x4b, 0x4b, 0x4a, 0x31, 
+  0x4b, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x31, 0x54, 0x54, 0x50, 0x4b, 0x4b, 0x48, 0x48, 
+  0x41, 0x42, 0x3e, 0x3a, 0x3b, 0x3c, 0x3c, 0x3c, 0x44, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x32, 0x32, 0x2e, 0x40, 0x40, 0x40, 0x23, 0x28, 0x23, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x3a, 0x24, 0x46, 0x4b, 0x50, 0x4e, 0x55, 0x53, 
+  0x56, 0x34, 0x57, 0x54, 0x34, 0x58, 0x59, 0x53, 0x53, 0x53, 0x53, 0x4e, 0x4e, 0x4b, 0x4a, 0x47, 
+  0x48, 0x41, 0x43, 0x43, 0x3a, 0x26, 0x3c, 0x3c, 0x38, 0x34, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x32, 0x32, 0x2e, 0x40, 0x40, 0x40, 0x23, 0x28, 0x23, 
+  0x33, 0x33, 0x33, 0x31, 0x31, 0x2f, 0x2f, 0x2f, 0x3a, 0x24, 0x46, 0x4b, 0x50, 0x4e, 0x55, 0x53, 
+  0x56, 0x34, 0x57, 0x54, 0x34, 0x58, 0x59, 0x53, 0x53, 0x53, 0x53, 0x4e, 0x4e, 0x4b, 0x4a, 0x47, 
+  0x48, 0x41, 0x43, 0x43, 0x3a, 0x26, 0x3c, 0x3c, 0x38, 0x34, 0x27, 0x27, 0x27, 0x27, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x34, 0x34, 0x32, 0x2e, 0x2c, 0x40, 0x40, 0x28, 0x28, 0x28, 
+  0x23, 0x33, 0x33, 0x31, 0x31, 0x31, 0x31, 0x3e, 0x43, 0x42, 0x4b, 0x2c, 0x4e, 0x53, 0x53, 0x56, 
+  0x56, 0x56, 0x56, 0x56, 0x56, 0x58, 0x2f, 0x5a, 0x56, 0x56, 0x53, 0x53, 0x53, 0x4e, 0x50, 0x4b, 
+  0x47, 0x48, 0x41, 0x43, 0x3e, 0x3a, 0x26, 0x3c, 0x35, 0x37, 0x23, 0x2a, 0x27, 0x27, 0x27, 0x2a, 
+  0x2d, 0x30, 0x20, 0x20, 0x20, 0x20, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x34, 0x32, 0x2e, 0x2c, 0x2c, 0x40, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x2c, 0x4d, 0x42, 0x4b, 0x4e, 0x5b, 0x2f, 0x53, 0x30, 0x57, 
+  0x57, 0x5c, 0x5d, 0x5e, 0x57, 0x30, 0x58, 0x56, 0x56, 0x56, 0x56, 0x59, 0x53, 0x53, 0x4e, 0x50, 
+  0x4b, 0x47, 0x46, 0x42, 0x41, 0x3a, 0x3a, 0x3c, 0x3c, 0x3c, 0x36, 0x27, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x67, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x34, 0x32, 0x32, 0x2c, 0x2c, 0x40, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x49, 0x41, 0x4b, 0x4e, 0x4e, 0x2d, 0x58, 0x30, 0x5f, 0x58, 
+  0x27, 0x5e, 0x5d, 0x22, 0x5f, 0x60, 0x61, 0x5e, 0x5e, 0x5a, 0x2f, 0x62, 0x63, 0x54, 0x31, 0x4f, 
+  0x50, 0x4a, 0x47, 0x48, 0x42, 0x3e, 0x4d, 0x3b, 0x3c, 0x37, 0x37, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x30, 0x29, 0x20, 0x20, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x24, 0x34, 0x32, 0x32, 0x2c, 0x2c, 0x40, 0x28, 0x28, 0x23, 
+  0x23, 0x33, 0x33, 0x33, 0x31, 0x31, 0x49, 0x41, 0x4b, 0x4e, 0x4e, 0x2d, 0x58, 0x30, 0x5f, 0x58, 
+  0x27, 0x5e, 0x5d, 0x22, 0x5f, 0x60, 0x61, 0x5e, 0x5e, 0x5a, 0x2f, 0x62, 0x63, 0x54, 0x31, 0x4f, 
+  0x50, 0x4a, 0x47, 0x48, 0x42, 0x3e, 0x4d, 0x3b, 0x3c, 0x37, 0x37, 0x26, 0x24, 0x2a, 0x27, 0x2a, 
+  0x2a, 0x30, 0x29, 0x20, 0x20, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x40, 0x40, 0x28, 0x28, 
+  0x28, 0x23, 0x33, 0x33, 0x33, 0x31, 0x3e, 0x48, 0x50, 0x33, 0x53, 0x56, 0x56, 0x64, 0x64, 0x61, 
+  0x22, 0x5c, 0x60, 0x60, 0x60, 0x60, 0x65, 0x60, 0x22, 0x57, 0x65, 0x64, 0x64, 0x66, 0x63, 0x55, 
+  0x32, 0x47, 0x4b, 0x46, 0x42, 0x43, 0x3e, 0x3a, 0x3c, 0x37, 0x38, 0x67, 0x20, 0x20, 0x26, 0x24, 
+  0x2a, 0x2a, 0x24, 0x20, 0x67, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x21, 0x32, 0x32, 0x2e, 0x2e, 0x40, 0x2c, 0x28, 0x23, 
+  0x23, 0x23, 0x23, 0x33, 0x33, 0x34, 0x42, 0x4a, 0x4e, 0x53, 0x56, 0x5d, 0x5d, 0x61, 0x60, 0x5f, 
+  0x5e, 0x68, 0x68, 0x68, 0x69, 0x68, 0x60, 0x69, 0x6a, 0x60, 0x60, 0x64, 0x65, 0x62, 0x62, 0x62, 
+  0x6b, 0x5b, 0x50, 0x47, 0x46, 0x41, 0x3e, 0x3a, 0x3b, 0x37, 0x37, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x52, 0x82, 0x82, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x32, 0x2e, 0x2c, 0x2c, 0x40, 0x28, 0x28, 
+  0x28, 0x23, 0x33, 0x33, 0x33, 0x43, 0x46, 0x4e, 0x53, 0x56, 0x5e, 0x5e, 0x5e, 0x60, 0x69, 0x6c, 
+  0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x60, 0x60, 0x65, 0x60, 0x64, 0x64, 0x62, 0x66, 
+  0x62, 0x55, 0x32, 0x4b, 0x47, 0x42, 0x43, 0x3e, 0x3a, 0x35, 0x38, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x52, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x32, 0x2e, 0x2c, 0x2c, 0x40, 0x28, 0x28, 
+  0x28, 0x23, 0x33, 0x33, 0x33, 0x43, 0x46, 0x4e, 0x53, 0x56, 0x5e, 0x5e, 0x5e, 0x60, 0x69, 0x6c, 
+  0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x60, 0x60, 0x65, 0x60, 0x64, 0x64, 0x62, 0x66, 
+  0x62, 0x55, 0x32, 0x4b, 0x47, 0x42, 0x43, 0x3e, 0x3a, 0x35, 0x38, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x52, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x21, 0x32, 0x32, 0x2e, 0x2e, 0x2c, 0x40, 0x28, 
+  0x23, 0x28, 0x23, 0x33, 0x23, 0x3e, 0x47, 0x40, 0x53, 0x57, 0x57, 0x58, 0x5f, 0x69, 0x69, 0x68, 
+  0x68, 0x6d, 0x6d, 0x6d, 0x6d, 0x6e, 0x68, 0x68, 0x68, 0x68, 0x6a, 0x60, 0x60, 0x64, 0x64, 0x62, 
+  0x62, 0x6b, 0x55, 0x40, 0x47, 0x48, 0x42, 0x3e, 0x3a, 0x3c, 0x38, 0x35, 0x38, 0x20, 0x20, 0x20, 
+  0x20, 0x38, 0x82, 0x52, 0x52, 0x82, 0x52, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x40, 0x40, 0x40, 
+  0x28, 0x23, 0x28, 0x23, 0x2c, 0x45, 0x4b, 0x54, 0x2f, 0x64, 0x6f, 0x22, 0x5f, 0x68, 0x68, 0x6d, 
+  0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x68, 0x6d, 0x68, 0x69, 0x69, 0x6a, 0x60, 0x65, 0x65, 0x62, 
+  0x62, 0x6b, 0x55, 0x5b, 0x51, 0x70, 0x43, 0x3b, 0x4d, 0x3b, 0x3c, 0x35, 0x37, 0x20, 0x20, 0x20, 
+  0x52, 0x82, 0x52, 0x82, 0x82, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x32, 0x32, 0x2c, 0x2c, 0x2c, 0x40, 
+  0x28, 0x28, 0x23, 0x23, 0x3a, 0x45, 0x50, 0x6b, 0x2d, 0x64, 0x5f, 0x6a, 0x68, 0x6e, 0x68, 0x6d, 
+  0x6d, 0x71, 0x71, 0x71, 0x72, 0x72, 0x71, 0x6d, 0x6e, 0x6f, 0x69, 0x6a, 0x6a, 0x65, 0x64, 0x64, 
+  0x62, 0x62, 0x6b, 0x55, 0x73, 0x70, 0x70, 0x74, 0x3e, 0x26, 0x35, 0x38, 0x38, 0x20, 0x67, 0x3d, 
+  0xa8, 0x82, 0x82, 0x82, 0x52, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x24, 0x21, 0x32, 0x32, 0x2c, 0x2c, 0x2c, 0x40, 
+  0x28, 0x28, 0x23, 0x23, 0x3a, 0x45, 0x50, 0x6b, 0x2d, 0x64, 0x5f, 0x6a, 0x68, 0x6e, 0x68, 0x6d, 
+  0x6d, 0x71, 0x71, 0x71, 0x72, 0x72, 0x71, 0x6d, 0x6e, 0x6f, 0x69, 0x6a, 0x6a, 0x65, 0x64, 0x64, 
+  0x62, 0x62, 0x6b, 0x55, 0x73, 0x70, 0x70, 0x74, 0x3e, 0x26, 0x35, 0x38, 0x38, 0x20, 0x67, 0x3d, 
+  0xa8, 0x82, 0x82, 0x82, 0x52, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x40, 0x40, 
+  0x40, 0x28, 0x34, 0x26, 0x26, 0x48, 0x50, 0x6b, 0x2f, 0x5a, 0x22, 0x6a, 0x6f, 0x6e, 0x71, 0x6d, 
+  0x71, 0x71, 0x6d, 0x75, 0x75, 0x76, 0x76, 0x75, 0x6d, 0x68, 0x68, 0x69, 0x60, 0x60, 0x65, 0x64, 
+  0x62, 0x66, 0x6b, 0x77, 0x55, 0x70, 0x70, 0x78, 0x39, 0x3f, 0x37, 0x37, 0x37, 0x79, 0x3d, 0x79, 
+  0x39, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x34, 0x32, 0x2e, 0x2c, 0x2c, 0x40, 
+  0x28, 0x34, 0x20, 0x20, 0x37, 0x7a, 0x54, 0x62, 0x57, 0x7b, 0x6f, 0x69, 0x68, 0x68, 0x7c, 0x71, 
+  0x71, 0x7d, 0x75, 0x76, 0x7e, 0x7f, 0x7f, 0x80, 0x72, 0x71, 0x68, 0x68, 0x69, 0x6a, 0x65, 0x64, 
+  0x64, 0x62, 0x66, 0x6b, 0x73, 0x70, 0x70, 0x29, 0x3d, 0x81, 0x38, 0x82, 0x83, 0x78, 0x3d, 0x79, 
+  0xa8, 0x52, 0x52, 0xa8, 0x52, 0x52, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x40, 
+  0x3c, 0x20, 0x20, 0x20, 0x26, 0x70, 0x55, 0x62, 0x64, 0x60, 0x60, 0x68, 0x68, 0x6d, 0x6d, 0x7c, 
+  0x71, 0x71, 0x75, 0x80, 0x84, 0x84, 0x84, 0x7f, 0x76, 0x7d, 0x6e, 0x68, 0x69, 0x60, 0x60, 0x65, 
+  0x62, 0x62, 0x6b, 0x6b, 0x55, 0x70, 0x70, 0x70, 0x36, 0x74, 0x85, 0x86, 0x83, 0x87, 0x3d, 0x3d, 
+  0x79, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x21, 0x34, 0x32, 0x2e, 0x2e, 0x2c, 0x40, 
+  0x3c, 0x20, 0x20, 0x20, 0x26, 0x70, 0x55, 0x62, 0x64, 0x60, 0x60, 0x68, 0x68, 0x6d, 0x6d, 0x7c, 
+  0x71, 0x71, 0x75, 0x80, 0x84, 0x84, 0x84, 0x7f, 0x76, 0x7d, 0x6e, 0x68, 0x69, 0x60, 0x60, 0x65, 
+  0x62, 0x62, 0x6b, 0x6b, 0x55, 0x70, 0x70, 0x70, 0x36, 0x74, 0x85, 0x86, 0x83, 0x87, 0x3d, 0x3d, 
+  0x79, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x29, 0x21, 0x34, 0x2e, 0x32, 0x2e, 0x2c, 0x3c, 
+  0x20, 0x20, 0x20, 0x20, 0x3c, 0x70, 0x55, 0x62, 0x65, 0x60, 0x60, 0x68, 0x6d, 0x6d, 0x71, 0x71, 
+  0x7d, 0x71, 0x75, 0x7f, 0x84, 0x84, 0x84, 0x84, 0x80, 0x72, 0x68, 0x68, 0x6f, 0x60, 0x60, 0x65, 
+  0x64, 0x62, 0x66, 0x55, 0x55, 0x73, 0x70, 0x70, 0x88, 0x89, 0x88, 0x85, 0x83, 0x78, 0x3d, 0x3d, 
+  0x39, 0x82, 0x52, 0x82, 0x82, 0x52, 0x82, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x29, 0x24, 0x21, 0x34, 0x32, 0x2e, 0x3c, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x82, 0x51, 0x73, 0x62, 0x64, 0x60, 0x69, 0x6f, 0x6d, 0x6d, 0x71, 0x71, 
+  0x71, 0x71, 0x75, 0x80, 0x84, 0x84, 0x84, 0x7f, 0x80, 0x7d, 0x6e, 0x68, 0x69, 0x69, 0x65, 0x65, 
+  0x64, 0x62, 0x62, 0x6b, 0x73, 0x55, 0x8a, 0x8b, 0x8b, 0x88, 0x88, 0x85, 0x85, 0x87, 0x3d, 0x79, 
+  0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x34, 0x54, 0x73, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0x55, 0x62, 0x64, 0x60, 0x60, 0x68, 0x6d, 0x6d, 0x6d, 0x71, 
+  0x71, 0x72, 0x75, 0x76, 0x7f, 0x7f, 0x7f, 0x80, 0x75, 0x6d, 0x6e, 0x68, 0x69, 0x6a, 0x65, 0x65, 
+  0x64, 0x62, 0x8d, 0x8e, 0x8f, 0x8d, 0x90, 0x8a, 0x8b, 0x89, 0x88, 0x83, 0x83, 0x87, 0x78, 0x3d, 
+  0x79, 0x82, 0x52, 0x52, 0xa8, 0x52, 0x82, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x24, 0x21, 0x34, 0x54, 0x73, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x8c, 0x55, 0x62, 0x64, 0x60, 0x60, 0x68, 0x6d, 0x6d, 0x6d, 0x71, 
+  0x71, 0x72, 0x75, 0x76, 0x7f, 0x7f, 0x7f, 0x80, 0x75, 0x6d, 0x6e, 0x68, 0x69, 0x6a, 0x65, 0x65, 
+  0x64, 0x62, 0x8d, 0x8e, 0x8f, 0x8d, 0x90, 0x8a, 0x8b, 0x89, 0x88, 0x83, 0x83, 0x87, 0x78, 0x3d, 
+  0x79, 0x82, 0x52, 0x52, 0xa8, 0x52, 0x82, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x29, 0x21, 0x34, 0x29, 0x91, 0x92, 0x90, 
+  0x79, 0x20, 0x20, 0x20, 0x20, 0x78, 0x63, 0x6b, 0x64, 0x65, 0x6a, 0x69, 0x68, 0x6d, 0x71, 0x71, 
+  0x7d, 0x6d, 0x6d, 0x75, 0x75, 0x80, 0x7e, 0x75, 0x72, 0x6d, 0x68, 0x68, 0x69, 0x60, 0x60, 0x60, 
+  0x91, 0x91, 0x93, 0x8f, 0x8d, 0x90, 0x8a, 0x8a, 0x94, 0x8b, 0x88, 0x86, 0x83, 0x83, 0x3d, 0x3d, 
+  0xa8, 0xa8, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x24, 0x24, 0x34, 0x20, 0x8a, 0x92, 0x95, 
+  0x95, 0x96, 0x8f, 0x89, 0x78, 0x36, 0x51, 0x6b, 0x62, 0x97, 0x6a, 0x6f, 0x68, 0x68, 0x6d, 0x6d, 
+  0x71, 0x7d, 0x7d, 0x6d, 0x6d, 0x7d, 0x72, 0x6d, 0x71, 0x6d, 0x6d, 0x98, 0x6e, 0x96, 0x95, 0x92, 
+  0x92, 0x91, 0x8f, 0x8f, 0x8d, 0x8d, 0x8a, 0x8a, 0x8b, 0x89, 0x88, 0x86, 0x83, 0x83, 0x87, 0x3d, 
+  0x79, 0x39, 0x82, 0x52, 0x82, 0x52, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x24, 0x37, 0x20, 0x86, 0x91, 0x92, 
+  0x99, 0x99, 0x98, 0x9a, 0x9a, 0x9b, 0x9c, 0x68, 0x9d, 0x71, 0x99, 0x68, 0x69, 0x6d, 0x6d, 0x71, 
+  0x6d, 0x71, 0x7d, 0x9e, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0x9f, 0xa1, 0x98, 0x96, 0x95, 0x95, 0xa2, 
+  0x91, 0x91, 0x91, 0x8d, 0x8d, 0x90, 0x90, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x83, 0x87, 0x3d, 0x3d, 
+  0x79, 0xa8, 0x82, 0xa8, 0x82, 0x82, 0x82, 0x52, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x29, 0x24, 0x37, 0x20, 0x86, 0x91, 0x92, 
+  0x99, 0x99, 0x98, 0x9a, 0x9a, 0x9b, 0x9c, 0x68, 0x9d, 0x71, 0x99, 0x68, 0x69, 0x6d, 0x6d, 0x71, 
+  0x6d, 0x71, 0x7d, 0x9e, 0x9e, 0x9f, 0x9f, 0xa0, 0xa0, 0x9f, 0xa1, 0x98, 0x96, 0x95, 0x95, 0xa2, 
+  0x91, 0x91, 0x91, 0x8d, 0x8d, 0x90, 0x90, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x83, 0x87, 0x3d, 0x3d, 
+  0x79, 0xa8, 0x82, 0xa8, 0x82, 0x82, 0x82, 0x52, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x36, 0x20, 0x20, 0x83, 0x91, 0x92, 
+  0x95, 0x95, 0x96, 0x9f, 0x9a, 0x9a, 0x9c, 0xa3, 0xa4, 0xa4, 0xa4, 0x9b, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa4, 0x9e, 0xa4, 0x9e, 0xa0, 0xa5, 0x9f, 0x9f, 0x96, 0x96, 0x95, 0x92, 0xa2, 
+  0x9d, 0x91, 0x93, 0x8f, 0x8d, 0x90, 0x8a, 0x8a, 0x8b, 0x89, 0x88, 0x88, 0x85, 0x83, 0x87, 0x3d, 
+  0x79, 0xa8, 0x82, 0x52, 0x82, 0x52, 0x82, 0x82, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x35, 0x20, 0x20, 0x20, 0x91, 0x9d, 
+  0x92, 0x99, 0x96, 0x98, 0x9f, 0xa0, 0xa0, 0xa0, 0x9c, 0xa4, 0xa4, 0x9c, 0xa4, 0xa4, 0xa4, 0x9b, 
+  0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0x9c, 0xa5, 0xa0, 0x9a, 0x98, 0x98, 0x96, 0x99, 0x95, 0x92, 
+  0x91, 0x91, 0x8f, 0x8f, 0x8d, 0x8d, 0x90, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x83, 0x87, 0x74, 0x3d, 
+  0x3d, 0x39, 0x82, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x8f, 0x91, 
+  0x92, 0x95, 0x99, 0x98, 0x9f, 0x9a, 0xa5, 0xa5, 0x9c, 0x9c, 0xa4, 0xa4, 0xa4, 0xa4, 0x9c, 0xa4, 
+  0x9c, 0xa4, 0x9c, 0xa4, 0x9c, 0x9c, 0xa0, 0x9a, 0x9f, 0x9f, 0x98, 0x98, 0x96, 0x95, 0x95, 0xa2, 
+  0x9d, 0x91, 0x8f, 0x8f, 0x8d, 0x90, 0x90, 0x8a, 0x8b, 0x89, 0x88, 0x86, 0x85, 0x83, 0x78, 0x3d, 
+  0x79, 0xa8, 0xa9, 0x52, 0x82, 0x82, 0x52, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x8f, 0x91, 
+  0x92, 0x95, 0x99, 0x98, 0x9f, 0x9a, 0xa5, 0xa5, 0x9c, 0x9c, 0xa4, 0xa4, 0xa4, 0xa4, 0x9c, 0xa4, 
+  0x9c, 0xa4, 0x9c, 0xa4, 0x9c, 0x9c, 0xa0, 0x9a, 0x9f, 0x9f, 0x98, 0x98, 0x96, 0x95, 0x95, 0xa2, 
+  0x9d, 0x91, 0x8f, 0x8f, 0x8d, 0x90, 0x90, 0x8a, 0x8b, 0x89, 0x88, 0x86, 0x85, 0x83, 0x78, 0x3d, 
+  0x79, 0xa8, 0xa9, 0x52, 0x82, 0x82, 0x52, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x91, 
+  0x9d, 0x95, 0x95, 0x96, 0x98, 0x9f, 0x9a, 0xa0, 0xa0, 0xa3, 0x9c, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0x9c, 0xa4, 0x9c, 0xa5, 0xa0, 0xa0, 0x9a, 0xa0, 0x9f, 0x96, 0x96, 0x99, 0x99, 0x92, 0x92, 
+  0x91, 0x91, 0x93, 0xa6, 0x8d, 0x8e, 0x90, 0x8a, 0x8b, 0x8b, 0x8b, 0x88, 0x83, 0x83, 0x87, 0x3d, 
+  0x3d, 0x39, 0x82, 0x82, 0xa8, 0x52, 0x82, 0x82, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x8f, 
+  0x9d, 0x92, 0x95, 0x96, 0x98, 0x98, 0x9a, 0xa5, 0xa0, 0x9c, 0x9c, 0x9c, 0x9c, 0xa4, 0x9c, 0xa4, 
+  0xa4, 0xa3, 0x9c, 0x9c, 0x9c, 0xa5, 0xa5, 0x9a, 0x9a, 0x9f, 0x98, 0x96, 0x95, 0x95, 0xa2, 0x92, 
+  0x9d, 0x8f, 0x8f, 0x8d, 0x8d, 0x90, 0x90, 0x8a, 0x8b, 0x88, 0x88, 0x86, 0x83, 0x83, 0x87, 0x3d, 
+  0x79, 0x79, 0x82, 0x52, 0x82, 0x82, 0xa8, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x79, 0x93, 
+  0x91, 0x92, 0xa2, 0x99, 0x96, 0x96, 0x9f, 0x9f, 0xa0, 0xa5, 0xa5, 0x9c, 0x9c, 0x9c, 0xa3, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9c, 0xa5, 0xa0, 0x9a, 0x9a, 0x9f, 0x98, 0x96, 0x96, 0x99, 0x95, 0x92, 0x92, 
+  0x91, 0x91, 0x8f, 0x8f, 0x8d, 0x8e, 0xa7, 0x8a, 0x94, 0x8b, 0x88, 0x88, 0x85, 0x83, 0x87, 0x78, 
+  0x3d, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x79, 0x93, 
+  0x91, 0x92, 0xa2, 0x99, 0x96, 0x96, 0x9f, 0x9f, 0xa0, 0xa5, 0xa5, 0x9c, 0x9c, 0x9c, 0xa3, 0x9c, 
+  0x9c, 0x9c, 0x9c, 0x9c, 0xa5, 0xa0, 0x9a, 0x9a, 0x9f, 0x98, 0x96, 0x96, 0x99, 0x95, 0x92, 0x92, 
+  0x91, 0x91, 0x8f, 0x8f, 0x8d, 0x8e, 0xa7, 0x8a, 0x94, 0x8b, 0x88, 0x88, 0x85, 0x83, 0x87, 0x78, 
+  0x3d, 0xa8, 0x82, 0x82, 0x82, 0x82, 0x82, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x8f, 
+  0x91, 0x91, 0x92, 0x95, 0x96, 0x98, 0x9f, 0xa1, 0x9f, 0x9a, 0xa5, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 
+  0xa5, 0xa5, 0xa0, 0xa0, 0xa5, 0xa0, 0x9f, 0xa1, 0xa1, 0x98, 0x96, 0x96, 0x99, 0x95, 0x92, 0x92, 
+  0x91, 0x91, 0x8f, 0x8d, 0x8d, 0x90, 0xa7, 0x8a, 0x8b, 0x8b, 0x88, 0x88, 0x85, 0x83, 0x87, 0x78, 
+  0x3d, 0x79, 0x39, 0x82, 0x52, 0x52, 0x67, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa6, 
+  0x93, 0x91, 0x92, 0x95, 0x95, 0x99, 0x98, 0x98, 0x9a, 0x9f, 0xa0, 0x9a, 0xa0, 0xa0, 0xa5, 0xa5, 
+  0xa5, 0x9c, 0xa5, 0xa0, 0x9a, 0x9a, 0x9a, 0x9f, 0x98, 0x98, 0x96, 0x99, 0x95, 0xa2, 0xa2, 0x9d, 
+  0x9d, 0x93, 0x93, 0x8f, 0x8d, 0x8e, 0x90, 0x8a, 0x94, 0x8b, 0x88, 0x86, 0x86, 0x83, 0x87, 0x3d, 
+  0x3d, 0x79, 0xa8, 0x52, 0x82, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x8f, 0x91, 0x9d, 0xa2, 0x95, 0x99, 0x96, 0x98, 0xa1, 0x9f, 0x9a, 0x9a, 0xa5, 0xa0, 0xa5, 0xa0, 
+  0xa5, 0xa0, 0xa5, 0x9a, 0x9a, 0x9a, 0x9f, 0x9f, 0x96, 0x98, 0x99, 0x99, 0x95, 0x92, 0x92, 0x91, 
+  0x91, 0x8f, 0x8d, 0x8d, 0x8d, 0x90, 0x8a, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x85, 0x83, 0x87, 0x78, 
+  0x79, 0x79, 0x39, 0xa8, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x8f, 0x91, 0x9d, 0xa2, 0x95, 0x99, 0x96, 0x98, 0xa1, 0x9f, 0x9a, 0x9a, 0xa5, 0xa0, 0xa5, 0xa0, 
+  0xa5, 0xa0, 0xa5, 0x9a, 0x9a, 0x9a, 0x9f, 0x9f, 0x96, 0x98, 0x99, 0x99, 0x95, 0x92, 0x92, 0x91, 
+  0x91, 0x8f, 0x8d, 0x8d, 0x8d, 0x90, 0x8a, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x85, 0x83, 0x87, 0x78, 
+  0x79, 0x79, 0x39, 0xa8, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x8f, 0x91, 0x91, 0x92, 0x95, 0x95, 0x96, 0x96, 0x96, 0x9f, 0x9f, 0x9a, 0x9a, 0xa0, 0x9a, 0xa0, 
+  0x9a, 0xa5, 0x9a, 0x9a, 0x9a, 0x9f, 0x9a, 0x98, 0x98, 0x96, 0x96, 0x95, 0x95, 0x95, 0x92, 0x9d, 
+  0x91, 0x91, 0x8f, 0x8f, 0x8d, 0x90, 0x90, 0x8a, 0x94, 0x8b, 0x8b, 0x86, 0x86, 0x83, 0x83, 0x3d, 
+  0x3d, 0x3d, 0xa8, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa6, 0x93, 0x91, 0x9d, 0xa2, 0x95, 0x99, 0x98, 0x98, 0x9f, 0x9f, 0x9f, 0x9a, 0x9a, 0x9a, 0x9a, 
+  0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x98, 0x9f, 0x98, 0x98, 0x96, 0x99, 0x95, 0x95, 0xa2, 0x92, 0x9d, 
+  0x91, 0x93, 0x8d, 0x8d, 0x8d, 0x90, 0xa7, 0x8a, 0x8b, 0x89, 0x8b, 0x85, 0x85, 0x83, 0x83, 0x78, 
+  0x3d, 0x3d, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8d, 0x8f, 0x8f, 0x9d, 0x92, 0x92, 0x95, 0x95, 0x99, 0x98, 0x98, 0x9f, 0x9f, 0x9f, 0x9a, 0x9a, 
+  0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x98, 0x96, 0x96, 0x99, 0x99, 0x99, 0xa2, 0x92, 0x92, 0x91, 
+  0x91, 0x8f, 0x8f, 0x8f, 0x90, 0x8d, 0x8a, 0x8a, 0x94, 0x8b, 0x88, 0x88, 0x86, 0x83, 0x87, 0x78, 
+  0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8d, 0x8f, 0x8f, 0x9d, 0x92, 0x92, 0x95, 0x95, 0x99, 0x98, 0x98, 0x9f, 0x9f, 0x9f, 0x9a, 0x9a, 
+  0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x98, 0x96, 0x96, 0x99, 0x99, 0x99, 0xa2, 0x92, 0x92, 0x91, 
+  0x91, 0x8f, 0x8f, 0x8f, 0x90, 0x8d, 0x8a, 0x8a, 0x94, 0x8b, 0x88, 0x88, 0x86, 0x83, 0x87, 0x78, 
+  0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x89, 0x8f, 0x8f, 0x91, 0x92, 0x92, 0x95, 0x95, 0x99, 0x96, 0x98, 0x98, 0x9f, 0x9f, 0x9f, 0x9a, 
+  0x9a, 0x9a, 0x9f, 0x9f, 0x98, 0x9f, 0x98, 0x96, 0x96, 0x95, 0x95, 0x95, 0xa2, 0x92, 0x92, 0x91, 
+  0x91, 0x93, 0x8d, 0x8f, 0x90, 0x8d, 0x8a, 0x8a, 0x8b, 0x8b, 0x88, 0x86, 0x85, 0x83, 0x87, 0x3d, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x83, 0x8d, 0x8f, 0x91, 0x91, 0xa2, 0x95, 0x95, 0x95, 0x96, 0x96, 0x96, 0x98, 0x98, 0x9f, 0x98, 
+  0x98, 0x9f, 0x98, 0x98, 0x98, 0x96, 0x98, 0x98, 0x96, 0x99, 0x95, 0xa2, 0x92, 0xa2, 0x9d, 0x9d, 
+  0x91, 0x8f, 0x8f, 0x8d, 0x8d, 0x90, 0x90, 0x8a, 0x8a, 0x89, 0x88, 0x88, 0x86, 0x85, 0x52, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x39, 0x8d, 0x8f, 0x91, 0x91, 0x9d, 0x92, 0x95, 0x99, 0x99, 0x96, 0x96, 0x98, 0x98, 0x98, 0x98, 
+  0x98, 0x9f, 0x98, 0x98, 0x98, 0x96, 0x96, 0x96, 0x99, 0x99, 0x95, 0xa2, 0x92, 0x9d, 0x91, 0x91, 
+  0x91, 0x8f, 0xa6, 0x8d, 0x90, 0x90, 0x8a, 0x8a, 0x94, 0x8b, 0x8b, 0x88, 0x79, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x39, 0x8d, 0x8f, 0x91, 0x91, 0x9d, 0x92, 0x95, 0x99, 0x99, 0x96, 0x96, 0x98, 0x98, 0x98, 0x98, 
+  0x98, 0x9f, 0x98, 0x98, 0x98, 0x96, 0x96, 0x96, 0x99, 0x99, 0x95, 0xa2, 0x92, 0x9d, 0x91, 0x91, 
+  0x91, 0x8f, 0xa6, 0x8d, 0x90, 0x90, 0x8a, 0x8a, 0x94, 0x8b, 0x8b, 0x88, 0x79, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8d, 0x8d, 0x8f, 0x91, 0x91, 0x92, 0x92, 0xa2, 0x95, 0x99, 0x99, 0x99, 0x96, 0x96, 0x96, 
+  0x98, 0x98, 0x98, 0x96, 0x96, 0x96, 0x99, 0x99, 0x95, 0x95, 0x95, 0x92, 0x92, 0x92, 0x9d, 0x91, 
+  0x8f, 0x93, 0x8d, 0x8d, 0x8d, 0x90, 0xa7, 0x8a, 0x8b, 0x8b, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8b, 0x8d, 0x8d, 0x91, 0x9d, 0x9d, 0x92, 0xa2, 0xa2, 0x99, 0x95, 0x96, 0x96, 0x98, 0x96, 
+  0x98, 0x96, 0x96, 0x98, 0x98, 0x96, 0x99, 0x99, 0x99, 0x95, 0x95, 0x92, 0x92, 0x91, 0x91, 0x91, 
+  0x8f, 0x8f, 0x8d, 0x8d, 0x8e, 0x90, 0xa7, 0x86, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xa8, 0x83, 0x8f, 0x8f, 0x91, 0x92, 0x92, 0x95, 0x95, 0x99, 0x95, 0x99, 0x99, 0x96, 
+  0x99, 0x96, 0x96, 0x99, 0x99, 0x99, 0x95, 0x95, 0x95, 0x95, 0xa2, 0xa2, 0x92, 0x92, 0x91, 0x91, 
+  0x93, 0x8f, 0x8f, 0x8d, 0x90, 0x87, 0xa8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0xa8, 0x83, 0x8f, 0x8f, 0x91, 0x92, 0x92, 0x95, 0x95, 0x99, 0x95, 0x99, 0x99, 0x96, 
+  0x99, 0x96, 0x96, 0x99, 0x99, 0x99, 0x95, 0x95, 0x95, 0x95, 0xa2, 0xa2, 0x92, 0x92, 0x91, 0x91, 
+  0x93, 0x8f, 0x8f, 0x8d, 0x90, 0x87, 0xa8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x8a, 0x92, 0x9d, 0x92, 0x92, 0x95, 0x95, 0x95, 0x99, 0x95, 
+  0x96, 0x99, 0x96, 0x95, 0x95, 0x96, 0x99, 0x95, 0x95, 0xa2, 0x92, 0x92, 0x9d, 0x9d, 0x91, 0x8f, 
+  0x8f, 0x8b, 0x83, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x79, 0x86, 0x8e, 0x95, 0x95, 0x95, 0x95, 0x99, 
+  0x99, 0x96, 0x95, 0x96, 0x99, 0x95, 0x95, 0x95, 0x95, 0x92, 0x92, 0x92, 0x9d, 0x86, 0x85, 0x79, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x88, 0x86, 
+  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3d, 0x88, 0x86, 
+  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x3d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x21, 0x21, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x23, 0x21, 0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x24, 0x24, 
+  0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x21, 0x25, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x27, 0x28, 0x28, 0x28, 0x28, 0x24, 
+  0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x28, 0x26, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x29, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x24, 0x24, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 0x28, 
+  0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x25, 0x2b, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x28, 0x28, 0x24, 0x28, 0x24, 
+  0x24, 0x24, 0x22, 0x24, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x24, 0x22, 0x22, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x25, 0x2c, 0x2d, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x25, 0x2c, 0x2d, 0x2e, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x24, 0x24, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x24, 0x22, 0x22, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x28, 0x24, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x25, 0x2f, 0x30, 0x30, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 
+  0x32, 0x30, 0x32, 0x2e, 0x30, 0x2d, 0x2a, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x24, 
+  0x24, 0x28, 0x24, 0x24, 0x24, 0x24, 0x24, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 
+  0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x33, 0x32, 
+  0x30, 0x30, 0x30, 0x2d, 0x30, 0x2d, 0x2e, 0x2a, 0x2d, 0x2a, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x34, 0x33, 0x33, 0x35, 0x35, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x33, 0x32, 
+  0x30, 0x30, 0x30, 0x2d, 0x30, 0x2d, 0x2e, 0x2a, 0x2d, 0x2a, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x34, 0x33, 0x33, 0x35, 0x35, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x23, 0x34, 0x34, 
+  0x32, 0x30, 0x32, 0x30, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x28, 0x28, 0x28, 
+  0x28, 0x28, 0x35, 0x37, 0x38, 0x39, 0x3a, 0x3a, 0x3a, 0x39, 0x39, 0x3a, 0x3a, 0x39, 0x35, 0x23, 
+  0x24, 0x24, 0x24, 0x24, 0x22, 0x24, 0x24, 0x22, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x23, 0x23, 0x34, 0x34, 
+  0x32, 0x32, 0x30, 0x30, 0x30, 0x2d, 0x2d, 0x2d, 0x2d, 0x2a, 0x2a, 0x28, 0x2a, 0x28, 0x28, 0x23, 
+  0x35, 0x36, 0x38, 0x3b, 0x37, 0x37, 0x37, 0x37, 0x25, 0x25, 0x3c, 0x25, 0x38, 0x36, 0x39, 0x39, 
+  0x3d, 0x35, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x2a, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x23, 0x34, 0x23, 0x34, 
+  0x34, 0x32, 0x30, 0x32, 0x2d, 0x2d, 0x2d, 0x2e, 0x2a, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x3e, 0x25, 
+  0x3c, 0x3b, 0x3f, 0x37, 0x40, 0x40, 0x40, 0x40, 0x40, 0x37, 0x37, 0x37, 0x3c, 0x25, 0x25, 0x38, 
+  0x39, 0x39, 0x3a, 0x34, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x27, 0x23, 0x34, 0x23, 0x34, 
+  0x34, 0x32, 0x30, 0x32, 0x2d, 0x2d, 0x2d, 0x2e, 0x2a, 0x2d, 0x2a, 0x2a, 0x2a, 0x2a, 0x3e, 0x25, 
+  0x3c, 0x3b, 0x3f, 0x37, 0x40, 0x40, 0x40, 0x40, 0x40, 0x37, 0x37, 0x37, 0x3c, 0x25, 0x25, 0x38, 
+  0x39, 0x39, 0x3a, 0x34, 0x24, 0x22, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x2b, 0x27, 0x27, 0x23, 0x23, 0x34, 
+  0x32, 0x32, 0x30, 0x32, 0x32, 0x2e, 0x2d, 0x2d, 0x2a, 0x2a, 0x2d, 0x2a, 0x23, 0x36, 0x25, 0x40, 
+  0x41, 0x42, 0x3e, 0x3e, 0x43, 0x43, 0x3e, 0x43, 0x43, 0x3e, 0x41, 0x3c, 0x44, 0x45, 0x25, 0x46, 
+  0x39, 0x39, 0x3a, 0x39, 0x3d, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x2b, 0x2b, 0x2b, 0x27, 0x23, 0x23, 0x34, 
+  0x34, 0x32, 0x32, 0x30, 0x30, 0x32, 0x2d, 0x30, 0x2d, 0x2d, 0x2a, 0x27, 0x25, 0x42, 0x41, 0x31, 
+  0x21, 0x43, 0x47, 0x47, 0x48, 0x47, 0x48, 0x47, 0x49, 0x21, 0x3e, 0x26, 0x31, 0x40, 0x44, 0x37, 
+  0x37, 0x25, 0x39, 0x4a, 0x39, 0x3d, 0x24, 0x24, 0x24, 0x28, 0x28, 0x24, 0x24, 0x28, 0x28, 0x28, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2f, 0x2b, 0x2b, 0x27, 0x23, 0x23, 0x34, 0x34, 
+  0x34, 0x34, 0x32, 0x30, 0x30, 0x32, 0x2d, 0x2d, 0x2d, 0x2e, 0x37, 0x37, 0x40, 0x43, 0x4b, 0x35, 
+  0x48, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4b, 0x4d, 0x21, 0x47, 0x49, 0x43, 0x3d, 0x44, 
+  0x40, 0x37, 0x3c, 0x38, 0x38, 0x3a, 0x39, 0x23, 0x28, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x2f, 0x2b, 0x2b, 0x27, 0x23, 0x23, 0x34, 0x34, 
+  0x34, 0x34, 0x32, 0x30, 0x30, 0x32, 0x2d, 0x2d, 0x2d, 0x2e, 0x37, 0x37, 0x40, 0x43, 0x4b, 0x35, 
+  0x48, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4b, 0x4d, 0x21, 0x47, 0x49, 0x43, 0x3d, 0x44, 
+  0x40, 0x37, 0x3c, 0x38, 0x38, 0x3a, 0x39, 0x23, 0x28, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 
+  0x2a, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x2f, 0x2c, 0x2b, 0x2b, 0x27, 0x27, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x27, 0x37, 0x3e, 0x49, 0x21, 0x4c, 0x4e, 
+  0x4f, 0x4f, 0x50, 0x50, 0x50, 0x50, 0x50, 0x4f, 0x2b, 0x2b, 0x4c, 0x48, 0x21, 0x49, 0x49, 0x26, 
+  0x3d, 0x37, 0x37, 0x3c, 0x36, 0x4a, 0x4a, 0x39, 0x24, 0x28, 0x28, 0x28, 0x28, 0x2a, 0x28, 0x2a, 
+  0x2a, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x33, 0x2f, 0x2f, 0x2c, 0x2b, 0x27, 0x27, 0x23, 0x23, 
+  0x23, 0x34, 0x32, 0x32, 0x32, 0x30, 0x30, 0x2d, 0x27, 0x42, 0x26, 0x47, 0x48, 0x2f, 0x4c, 0x50, 
+  0x51, 0x32, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x54, 0x34, 0x4c, 0x4f, 0x4c, 0x4e, 0x47, 0x4d, 
+  0x55, 0x56, 0x44, 0x37, 0x3c, 0x36, 0x4a, 0x4a, 0x57, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2c, 0x58, 0x2b, 0x2b, 0x27, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x32, 0x25, 0x29, 0x3e, 0x4c, 0x4c, 0x4c, 0x52, 0x52, 
+  0x52, 0x59, 0x5a, 0x30, 0x59, 0x5b, 0x59, 0x52, 0x59, 0x52, 0x52, 0x50, 0x4f, 0x4f, 0x4c, 0x4e, 
+  0x47, 0x3e, 0x41, 0x26, 0x37, 0x25, 0x39, 0x39, 0x39, 0x35, 0x28, 0x28, 0x28, 0x2a, 0x2a, 0x28, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x21, 0x33, 0x33, 0x2c, 0x58, 0x2b, 0x2b, 0x27, 0x23, 0x23, 
+  0x34, 0x34, 0x34, 0x32, 0x32, 0x30, 0x30, 0x32, 0x25, 0x29, 0x3e, 0x4c, 0x4c, 0x4c, 0x52, 0x52, 
+  0x52, 0x59, 0x5a, 0x30, 0x59, 0x5b, 0x59, 0x52, 0x59, 0x52, 0x52, 0x50, 0x4f, 0x4f, 0x4c, 0x4e, 
+  0x47, 0x3e, 0x41, 0x26, 0x37, 0x25, 0x39, 0x39, 0x39, 0x35, 0x28, 0x28, 0x28, 0x2a, 0x2a, 0x28, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x21, 0x35, 0x33, 0x2c, 0x2c, 0x2b, 0x2b, 0x27, 0x23, 0x27, 
+  0x34, 0x34, 0x34, 0x32, 0x32, 0x32, 0x30, 0x31, 0x41, 0x5c, 0x4f, 0x2b, 0x23, 0x5d, 0x32, 0x2d, 
+  0x5b, 0x59, 0x5e, 0x5f, 0x59, 0x60, 0x5b, 0x59, 0x59, 0x59, 0x52, 0x52, 0x52, 0x4f, 0x4c, 0x4c, 
+  0x61, 0x61, 0x3e, 0x41, 0x41, 0x37, 0x25, 0x39, 0x3a, 0x39, 0x27, 0x28, 0x28, 0x28, 0x2a, 0x2a, 
+  0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x21, 0x33, 0x33, 0x2f, 0x58, 0x2c, 0x2b, 0x27, 0x27, 0x23, 
+  0x23, 0x23, 0x34, 0x32, 0x32, 0x30, 0x2b, 0x37, 0x43, 0x4c, 0x4c, 0x5f, 0x5a, 0x5a, 0x59, 0x59, 
+  0x5b, 0x24, 0x2e, 0x28, 0x5b, 0x60, 0x5b, 0x60, 0x60, 0x5b, 0x5b, 0x59, 0x52, 0x52, 0x62, 0x4c, 
+  0x4c, 0x48, 0x47, 0x41, 0x41, 0x37, 0x37, 0x39, 0x39, 0x39, 0x3d, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
+  0x2d, 0x2e, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x26, 0x35, 0x35, 0x2f, 0x2c, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 
+  0x23, 0x23, 0x34, 0x34, 0x34, 0x32, 0x31, 0x3e, 0x48, 0x53, 0x5d, 0x5f, 0x63, 0x2e, 0x63, 0x2e, 
+  0x64, 0x65, 0x65, 0x22, 0x60, 0x60, 0x60, 0x60, 0x5b, 0x5b, 0x60, 0x59, 0x5b, 0x52, 0x52, 0x50, 
+  0x4f, 0x4c, 0x47, 0x49, 0x43, 0x40, 0x37, 0x25, 0x3a, 0x39, 0x39, 0x25, 0x26, 0x2a, 0x28, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x26, 0x35, 0x35, 0x2f, 0x2c, 0x2b, 0x2b, 0x2b, 0x27, 0x27, 
+  0x23, 0x23, 0x34, 0x34, 0x34, 0x32, 0x31, 0x3e, 0x48, 0x53, 0x5d, 0x5f, 0x63, 0x2e, 0x63, 0x2e, 
+  0x64, 0x65, 0x65, 0x22, 0x60, 0x60, 0x60, 0x60, 0x5b, 0x5b, 0x60, 0x59, 0x5b, 0x52, 0x52, 0x50, 
+  0x4f, 0x4c, 0x47, 0x49, 0x43, 0x40, 0x37, 0x25, 0x3a, 0x39, 0x39, 0x25, 0x26, 0x2a, 0x28, 0x2a, 
+  0x2a, 0x2d, 0x29, 0x20, 0x20, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x35, 0x2f, 0x2f, 0x2c, 0x2b, 0x27, 0x27, 0x23, 
+  0x23, 0x34, 0x23, 0x34, 0x32, 0x34, 0x31, 0x47, 0x4f, 0x53, 0x5a, 0x66, 0x30, 0x28, 0x65, 0x67, 
+  0x68, 0x67, 0x68, 0x69, 0x6a, 0x60, 0x6b, 0x6c, 0x6d, 0x5e, 0x5b, 0x60, 0x60, 0x59, 0x59, 0x52, 
+  0x50, 0x4c, 0x4c, 0x47, 0x3e, 0x41, 0x41, 0x37, 0x39, 0x39, 0x39, 0x3a, 0x20, 0x20, 0x25, 0x26, 
+  0x2d, 0x2a, 0x26, 0x20, 0x4a, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x26, 0x21, 0x35, 0x33, 0x2f, 0x2c, 0x2c, 0x2b, 0x27, 0x27, 
+  0x27, 0x23, 0x34, 0x23, 0x32, 0x35, 0x26, 0x4d, 0x5a, 0x6e, 0x5f, 0x65, 0x65, 0x68, 0x68, 0x6f, 
+  0x68, 0x70, 0x68, 0x71, 0x64, 0x6b, 0x6c, 0x68, 0x67, 0x67, 0x63, 0x30, 0x60, 0x60, 0x59, 0x52, 
+  0x52, 0x50, 0x4c, 0x48, 0x47, 0x3e, 0x40, 0x37, 0x25, 0x3a, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x29, 0x29, 0x4a, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x26, 0x21, 0x33, 0x2f, 0x2f, 0x2b, 0x2c, 0x2b, 0x27, 
+  0x27, 0x23, 0x23, 0x34, 0x34, 0x29, 0x72, 0x54, 0x32, 0x5a, 0x73, 0x65, 0x68, 0x68, 0x6f, 0x70, 
+  0x70, 0x6f, 0x70, 0x70, 0x74, 0x6c, 0x70, 0x70, 0x68, 0x68, 0x68, 0x63, 0x5e, 0x59, 0x5b, 0x59, 
+  0x52, 0x52, 0x4c, 0x4c, 0x47, 0x43, 0x41, 0x40, 0x75, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x4a, 0x4a, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x26, 0x21, 0x33, 0x2f, 0x2f, 0x2b, 0x2c, 0x2b, 0x27, 
+  0x27, 0x23, 0x23, 0x34, 0x34, 0x29, 0x72, 0x54, 0x32, 0x5a, 0x73, 0x65, 0x68, 0x68, 0x6f, 0x70, 
+  0x70, 0x6f, 0x70, 0x70, 0x74, 0x6c, 0x70, 0x70, 0x68, 0x68, 0x68, 0x63, 0x5e, 0x59, 0x5b, 0x59, 
+  0x52, 0x52, 0x4c, 0x4c, 0x47, 0x43, 0x41, 0x40, 0x75, 0x39, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x4a, 0x4a, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x35, 0x33, 0x33, 0x2f, 0x58, 0x2b, 0x2b, 0x27, 
+  0x23, 0x27, 0x23, 0x23, 0x34, 0x3d, 0x21, 0x5a, 0x5a, 0x68, 0x65, 0x65, 0x67, 0x68, 0x6f, 0x70, 
+  0x76, 0x76, 0x70, 0x70, 0x76, 0x76, 0x70, 0x70, 0x70, 0x6f, 0x68, 0x68, 0x6d, 0x63, 0x60, 0x5b, 
+  0x52, 0x52, 0x50, 0x4c, 0x48, 0x47, 0x3e, 0x40, 0x45, 0x3a, 0x3a, 0x4a, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x4a, 0x79, 0x4a, 0x4a, 0x79, 0x4a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x35, 0x2f, 0x2f, 0x2c, 0x2b, 0x2b, 0x2b, 
+  0x27, 0x23, 0x27, 0x34, 0x2f, 0x77, 0x35, 0x5f, 0x66, 0x65, 0x65, 0x6f, 0x68, 0x70, 0x70, 0x76, 
+  0x74, 0x76, 0x76, 0x78, 0x76, 0x76, 0x70, 0x76, 0x70, 0x70, 0x6f, 0x6f, 0x68, 0x65, 0x59, 0x5b, 
+  0x59, 0x52, 0x62, 0x4f, 0x48, 0x47, 0x3e, 0x3d, 0x44, 0x79, 0x46, 0x38, 0x7a, 0x20, 0x20, 0x20, 
+  0x4a, 0x79, 0x3b, 0x3b, 0x79, 0x79, 0x79, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x35, 0x33, 0x33, 0x2f, 0x2b, 0x2b, 0x2b, 
+  0x27, 0x27, 0x27, 0x23, 0x57, 0x55, 0x54, 0x5f, 0x5f, 0x65, 0x65, 0x6f, 0x70, 0x76, 0x74, 0x74, 
+  0x76, 0x78, 0x78, 0x78, 0x7b, 0x7b, 0x78, 0x76, 0x70, 0x70, 0x6f, 0x68, 0x68, 0x65, 0x5e, 0x60, 
+  0x5b, 0x52, 0x52, 0x4f, 0x4c, 0x47, 0x43, 0x7c, 0x44, 0x79, 0x4a, 0x46, 0x38, 0x20, 0x7a, 0x7d, 
+  0x3b, 0x46, 0x46, 0x79, 0x4a, 0x79, 0x4a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x21, 0x35, 0x33, 0x33, 0x2f, 0x2b, 0x2b, 0x2b, 
+  0x27, 0x27, 0x27, 0x23, 0x57, 0x55, 0x54, 0x5f, 0x5f, 0x65, 0x65, 0x6f, 0x70, 0x76, 0x74, 0x74, 
+  0x76, 0x78, 0x78, 0x78, 0x7b, 0x7b, 0x78, 0x76, 0x70, 0x70, 0x6f, 0x68, 0x68, 0x65, 0x5e, 0x60, 
+  0x5b, 0x52, 0x52, 0x4f, 0x4c, 0x47, 0x43, 0x7c, 0x44, 0x79, 0x4a, 0x46, 0x38, 0x20, 0x7a, 0x7d, 
+  0x3b, 0x46, 0x46, 0x79, 0x4a, 0x79, 0x4a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x26, 0x21, 0x35, 0x33, 0x2f, 0x2c, 0x2c, 0x2b, 
+  0x27, 0x27, 0x35, 0x25, 0x39, 0x77, 0x54, 0x5f, 0x65, 0x65, 0x67, 0x6f, 0x70, 0x74, 0x76, 0x76, 
+  0x78, 0x78, 0x76, 0x7e, 0x7e, 0x7f, 0x7e, 0x7e, 0x78, 0x76, 0x70, 0x6c, 0x67, 0x68, 0x65, 0x5e, 
+  0x52, 0x59, 0x52, 0x50, 0x4c, 0x48, 0x49, 0x26, 0x3d, 0x45, 0x38, 0x3a, 0x36, 0x7d, 0x80, 0x75, 
+  0x3b, 0x4a, 0x79, 0x79, 0x79, 0x79, 0x79, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x26, 0x26, 0x21, 0x33, 0x2f, 0x2f, 0x2f, 0x2c, 0x2b, 
+  0x27, 0x35, 0x20, 0x20, 0x79, 0x55, 0x54, 0x5f, 0x73, 0x65, 0x67, 0x6f, 0x70, 0x70, 0x76, 0x78, 
+  0x78, 0x78, 0x7e, 0x7e, 0x81, 0x82, 0x82, 0x7f, 0x7e, 0x70, 0x70, 0x6f, 0x6f, 0x68, 0x63, 0x65, 
+  0x66, 0x5f, 0x52, 0x4f, 0x4f, 0x48, 0x49, 0x3e, 0x44, 0x45, 0x36, 0x3b, 0x83, 0x84, 0x7c, 0x80, 
+  0x75, 0x4a, 0x4a, 0x3b, 0x4a, 0x79, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x35, 0x35, 0x33, 0x2f, 0x2c, 0x2b, 0x2b, 
+  0x36, 0x20, 0x20, 0x20, 0x45, 0x77, 0x85, 0x66, 0x73, 0x65, 0x68, 0x70, 0x70, 0x76, 0x76, 0x71, 
+  0x86, 0x86, 0x7e, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x81, 0x86, 0x70, 0x70, 0x6f, 0x67, 0x65, 0x73, 
+  0x63, 0x66, 0x5f, 0x5d, 0x4c, 0x47, 0x47, 0x3e, 0x26, 0x3d, 0x83, 0x87, 0x83, 0x56, 0x80, 0x7d, 
+  0x7d, 0x3b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x26, 0x35, 0x35, 0x33, 0x2f, 0x2c, 0x2b, 0x2b, 
+  0x36, 0x20, 0x20, 0x20, 0x45, 0x77, 0x85, 0x66, 0x73, 0x65, 0x68, 0x70, 0x70, 0x76, 0x76, 0x71, 
+  0x86, 0x86, 0x7e, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x81, 0x86, 0x70, 0x70, 0x6f, 0x67, 0x65, 0x73, 
+  0x63, 0x66, 0x5f, 0x5d, 0x4c, 0x47, 0x47, 0x3e, 0x26, 0x3d, 0x83, 0x87, 0x83, 0x56, 0x80, 0x7d, 
+  0x7d, 0x3b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x29, 0x21, 0x35, 0x33, 0x33, 0x2f, 0x2c, 0x36, 
+  0x20, 0x20, 0x20, 0x20, 0x79, 0x77, 0x88, 0x66, 0x65, 0x68, 0x67, 0x70, 0x76, 0x76, 0x78, 0x78, 
+  0x78, 0x7b, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x81, 0x89, 0x74, 0x70, 0x6f, 0x67, 0x68, 0x65, 
+  0x66, 0x66, 0x5f, 0x5a, 0x5a, 0x77, 0x21, 0x21, 0x8a, 0x8a, 0x8b, 0x83, 0x83, 0x56, 0x7c, 0x7d, 
+  0x75, 0x79, 0x4a, 0x79, 0x4a, 0x3b, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x29, 0x26, 0x21, 0x35, 0x33, 0x2f, 0x38, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x38, 0x55, 0x8c, 0x66, 0x73, 0x68, 0x67, 0x70, 0x74, 0x76, 0x78, 0x78, 
+  0x76, 0x7e, 0x7e, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x81, 0x7b, 0x74, 0x70, 0x6f, 0x68, 0x68, 0x65, 
+  0x73, 0x5f, 0x5f, 0x54, 0x54, 0x51, 0x88, 0x8d, 0x8e, 0x8a, 0x8a, 0x87, 0x87, 0x84, 0x80, 0x80, 
+  0x3b, 0x79, 0x3b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x35, 0x5a, 0x54, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 0x85, 0x66, 0x73, 0x65, 0x67, 0x70, 0x74, 0x76, 0x78, 0x78, 
+  0x78, 0x76, 0x7e, 0x81, 0x82, 0x82, 0x82, 0x7f, 0x7e, 0x78, 0x76, 0x70, 0x6c, 0x68, 0x68, 0x65, 
+  0x65, 0x5f, 0x8f, 0x90, 0x8f, 0x91, 0x92, 0x92, 0x8e, 0x8e, 0x8a, 0x83, 0x83, 0x84, 0x56, 0x80, 
+  0x3b, 0x3b, 0x4a, 0x79, 0x4a, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x21, 0x35, 0x5a, 0x54, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x77, 0x85, 0x66, 0x73, 0x65, 0x67, 0x70, 0x74, 0x76, 0x78, 0x78, 
+  0x78, 0x76, 0x7e, 0x81, 0x82, 0x82, 0x82, 0x7f, 0x7e, 0x78, 0x76, 0x70, 0x6c, 0x68, 0x68, 0x65, 
+  0x65, 0x5f, 0x8f, 0x90, 0x8f, 0x91, 0x92, 0x92, 0x8e, 0x8e, 0x8a, 0x83, 0x83, 0x84, 0x56, 0x80, 
+  0x3b, 0x3b, 0x4a, 0x79, 0x4a, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x26, 0x21, 0x21, 0x31, 0x93, 0x94, 0x91, 
+  0x7d, 0x20, 0x20, 0x20, 0x20, 0x8a, 0x85, 0x5f, 0x73, 0x65, 0x68, 0x6f, 0x70, 0x76, 0x76, 0x76, 
+  0x86, 0x78, 0x78, 0x95, 0x7e, 0x81, 0x81, 0x7e, 0x7b, 0x76, 0x70, 0x70, 0x6f, 0x6f, 0x65, 0x6f, 
+  0x93, 0x96, 0x97, 0x8f, 0x8f, 0x91, 0x91, 0x92, 0x8e, 0x98, 0x8a, 0x8b, 0x87, 0x84, 0x80, 0x80, 
+  0x7d, 0x75, 0x79, 0x79, 0x79, 0x4a, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x29, 0x21, 0x21, 0x20, 0x92, 0x94, 0x99, 
+  0x9a, 0x9b, 0x90, 0x98, 0x7c, 0x3d, 0x55, 0x5f, 0x66, 0x65, 0x6f, 0x6f, 0x70, 0x76, 0x78, 0x76, 
+  0x78, 0x78, 0x78, 0x7b, 0x78, 0x78, 0x9c, 0x7b, 0x86, 0x76, 0x89, 0x89, 0x99, 0x9d, 0x9a, 0x94, 
+  0x93, 0x93, 0x93, 0x8f, 0x8f, 0x8f, 0x92, 0x92, 0x8e, 0x98, 0x8a, 0x87, 0x83, 0x83, 0x56, 0x80, 
+  0x75, 0x3b, 0x4a, 0x3b, 0x79, 0x4a, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x26, 0x26, 0x38, 0x20, 0x87, 0x93, 0x94, 
+  0x9d, 0x9b, 0x9e, 0x95, 0x9c, 0x95, 0x9f, 0x94, 0x89, 0x9e, 0x89, 0x89, 0x6f, 0x70, 0x70, 0x78, 
+  0x76, 0x78, 0x78, 0xa0, 0x95, 0xa0, 0x7b, 0xa1, 0xa2, 0xa1, 0xa3, 0x9e, 0x9b, 0x9d, 0x9a, 0x94, 
+  0x96, 0x93, 0x90, 0x90, 0x8f, 0xa4, 0x91, 0x92, 0x8e, 0x98, 0x8a, 0x8b, 0x87, 0x84, 0x80, 0x80, 
+  0x7d, 0x75, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7a, 0x26, 0x26, 0x38, 0x20, 0x87, 0x93, 0x94, 
+  0x9d, 0x9b, 0x9e, 0x95, 0x9c, 0x95, 0x9f, 0x94, 0x89, 0x9e, 0x89, 0x89, 0x6f, 0x70, 0x70, 0x78, 
+  0x76, 0x78, 0x78, 0xa0, 0x95, 0xa0, 0x7b, 0xa1, 0xa2, 0xa1, 0xa3, 0x9e, 0x9b, 0x9d, 0x9a, 0x94, 
+  0x96, 0x93, 0x90, 0x90, 0x8f, 0xa4, 0x91, 0x92, 0x8e, 0x98, 0x8a, 0x8b, 0x87, 0x84, 0x80, 0x80, 
+  0x7d, 0x75, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x3f, 0x20, 0x20, 0x87, 0x93, 0x94, 
+  0x99, 0x9a, 0x9b, 0xa1, 0x95, 0xa2, 0xa5, 0xa6, 0xa5, 0x9f, 0x9f, 0xa7, 0xa7, 0x9f, 0xa7, 0x9f, 
+  0xa7, 0xa7, 0xa7, 0xa7, 0xa5, 0xa5, 0xa5, 0x95, 0x95, 0xa1, 0x9e, 0x9e, 0x9b, 0x9d, 0x9a, 0x94, 
+  0x94, 0x93, 0x97, 0x90, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x98, 0x8b, 0x8b, 0x87, 0x83, 0x84, 0x7d, 
+  0x7d, 0x75, 0x4a, 0x79, 0x79, 0x4a, 0x4a, 0x4a, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x39, 0x20, 0x20, 0x20, 0x97, 0x94, 
+  0x94, 0x9d, 0x9b, 0x9b, 0xa1, 0x95, 0xa1, 0xa5, 0xa7, 0xa5, 0xa7, 0x9f, 0x9f, 0xa7, 0xa7, 0xa7, 
+  0xa7, 0xa7, 0xa7, 0xa7, 0xa7, 0xa5, 0xa5, 0xa2, 0xa1, 0x9c, 0x9c, 0x9b, 0x9d, 0x9a, 0x99, 0x99, 
+  0x93, 0x93, 0x90, 0xa8, 0x8f, 0x91, 0x91, 0x92, 0x92, 0x8e, 0x8a, 0x8b, 0x83, 0x84, 0x84, 0x7c, 
+  0x7d, 0x3b, 0x79, 0x4a, 0x79, 0x3b, 0x79, 0x79, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x20, 0x20, 0x20, 0x20, 0x90, 0x93, 
+  0x94, 0x9d, 0x9b, 0x9b, 0x9e, 0xa1, 0x95, 0x95, 0xa5, 0xa5, 0xa5, 0xa5, 0xa7, 0xa7, 0xa7, 0x9f, 
+  0xa7, 0xa7, 0xa7, 0xa5, 0xa6, 0xa2, 0x95, 0xa1, 0xa1, 0xa3, 0x9c, 0x9b, 0x9b, 0x9a, 0x94, 0x99, 
+  0x96, 0x93, 0x90, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8b, 0x87, 0x84, 0x80, 0x80, 
+  0x80, 0x75, 0x79, 0x4a, 0x3b, 0x79, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x25, 0x20, 0x20, 0x20, 0x20, 0x90, 0x93, 
+  0x94, 0x9d, 0x9b, 0x9b, 0x9e, 0xa1, 0x95, 0x95, 0xa5, 0xa5, 0xa5, 0xa5, 0xa7, 0xa7, 0xa7, 0x9f, 
+  0xa7, 0xa7, 0xa7, 0xa5, 0xa6, 0xa2, 0x95, 0xa1, 0xa1, 0xa3, 0x9c, 0x9b, 0x9b, 0x9a, 0x94, 0x99, 
+  0x96, 0x93, 0x90, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8b, 0x87, 0x84, 0x80, 0x80, 
+  0x80, 0x75, 0x79, 0x4a, 0x3b, 0x79, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x87, 0x93, 
+  0x94, 0x94, 0x9d, 0x9b, 0x9c, 0x9c, 0xa2, 0xa5, 0xa5, 0xa5, 0xa5, 0xa7, 0xa7, 0xa7, 0xa7, 0xa5, 
+  0xa7, 0xa7, 0xa5, 0xa6, 0xa5, 0xa5, 0xa2, 0x95, 0xa1, 0x9c, 0x9e, 0x9b, 0x9d, 0x9a, 0x9a, 0x94, 
+  0x96, 0x93, 0x93, 0x90, 0x8f, 0x91, 0x91, 0x92, 0x8e, 0x98, 0x8a, 0x8a, 0x83, 0x83, 0x84, 0x7c, 
+  0x7d, 0x3b, 0x79, 0x79, 0x79, 0x79, 0x79, 0x4a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x87, 0x90, 
+  0x96, 0x94, 0x9a, 0x9d, 0x9e, 0x9e, 0x9c, 0x95, 0xa2, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa7, 0xa5, 
+  0xa5, 0xa7, 0xa5, 0xa5, 0xa2, 0x95, 0x95, 0xa1, 0x9c, 0x9e, 0x9e, 0x9b, 0x9d, 0x9a, 0x94, 0x96, 
+  0x96, 0x97, 0x90, 0x90, 0x8f, 0x91, 0x92, 0x92, 0x8e, 0x8e, 0x8b, 0x8a, 0x8b, 0x83, 0x56, 0x80, 
+  0x80, 0x7d, 0x79, 0x4a, 0x4a, 0x4a, 0x3b, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x97, 
+  0x93, 0x94, 0x99, 0x9d, 0x9b, 0x9b, 0xa3, 0xa1, 0x95, 0xa2, 0xa5, 0xa5, 0xa7, 0xa7, 0xa5, 0xa7, 
+  0xa6, 0xa5, 0xa5, 0x95, 0x95, 0x95, 0xa1, 0x9c, 0xa1, 0x9c, 0x9e, 0x9d, 0x9d, 0x99, 0x99, 0x94, 
+  0x93, 0x90, 0x97, 0xa8, 0x8f, 0x8f, 0x91, 0x92, 0x8e, 0x8e, 0x8e, 0x8b, 0x87, 0x83, 0x84, 0x56, 
+  0x80, 0x3b, 0x3b, 0x3b, 0x79, 0x79, 0x46, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3b, 0x97, 
+  0x93, 0x94, 0x99, 0x9d, 0x9b, 0x9b, 0xa3, 0xa1, 0x95, 0xa2, 0xa5, 0xa5, 0xa7, 0xa7, 0xa5, 0xa7, 
+  0xa6, 0xa5, 0xa5, 0x95, 0x95, 0x95, 0xa1, 0x9c, 0xa1, 0x9c, 0x9e, 0x9d, 0x9d, 0x99, 0x99, 0x94, 
+  0x93, 0x90, 0x97, 0xa8, 0x8f, 0x8f, 0x91, 0x92, 0x8e, 0x8e, 0x8e, 0x8b, 0x87, 0x83, 0x84, 0x56, 
+  0x80, 0x3b, 0x3b, 0x3b, 0x79, 0x79, 0x46, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x90, 
+  0x93, 0x93, 0x94, 0x9a, 0x9d, 0x9b, 0x9e, 0x9c, 0xa1, 0xa1, 0xa2, 0x95, 0x95, 0xa5, 0xa2, 0xa5, 
+  0xa2, 0xa5, 0xa5, 0xa2, 0xa2, 0xa2, 0xa1, 0x9c, 0x9e, 0x9b, 0x9b, 0x9b, 0x9d, 0x99, 0x94, 0x94, 
+  0x96, 0x90, 0x90, 0xa8, 0x8f, 0x91, 0x91, 0x92, 0x8e, 0x98, 0x8a, 0x8b, 0x87, 0x83, 0x56, 0x80, 
+  0x80, 0x7d, 0x3b, 0x79, 0x79, 0x79, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa8, 
+  0x90, 0x96, 0x94, 0x9a, 0x9a, 0x9b, 0x9b, 0x9c, 0x9c, 0x9c, 0x95, 0xa2, 0xa2, 0xa2, 0x95, 0x95, 
+  0xa5, 0xa2, 0xa2, 0x95, 0xa1, 0xa1, 0xa1, 0x9c, 0x9c, 0x9e, 0x9e, 0x9a, 0x9a, 0x94, 0x94, 0x96, 
+  0x93, 0x93, 0x90, 0x8f, 0x8f, 0x8f, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x8b, 0x84, 0x84, 0x56, 
+  0x80, 0x7d, 0x75, 0x79, 0x79, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x90, 0x93, 0x96, 0x99, 0x9d, 0x9d, 0x9e, 0x9e, 0xa1, 0x9c, 0xa1, 0xa1, 0x95, 0xa2, 0xa2, 0x95, 
+  0x95, 0x95, 0x95, 0x95, 0xa1, 0x9c, 0xa1, 0x9c, 0x9e, 0x9b, 0x9b, 0x9b, 0x9d, 0x9a, 0x94, 0x96, 
+  0x93, 0x93, 0x90, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8b, 0x8b, 0x83, 0x84, 0x56, 
+  0x80, 0x75, 0x3b, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x90, 0x93, 0x96, 0x99, 0x9d, 0x9d, 0x9e, 0x9e, 0xa1, 0x9c, 0xa1, 0xa1, 0x95, 0xa2, 0xa2, 0x95, 
+  0x95, 0x95, 0x95, 0x95, 0xa1, 0x9c, 0xa1, 0x9c, 0x9e, 0x9b, 0x9b, 0x9b, 0x9d, 0x9a, 0x94, 0x96, 
+  0x93, 0x93, 0x90, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8b, 0x8b, 0x83, 0x84, 0x56, 
+  0x80, 0x75, 0x3b, 0x4a, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x8f, 0x97, 0x96, 0x94, 0x94, 0x9d, 0x9a, 0x9b, 0x9b, 0x9c, 0x9c, 0x9c, 0xa1, 0xa1, 0x95, 0xa1, 
+  0xa1, 0xa1, 0x95, 0xa1, 0x9c, 0xa1, 0x9e, 0x9c, 0x9b, 0x9b, 0x9d, 0x9a, 0x9a, 0x94, 0x94, 0x93, 
+  0x96, 0x90, 0x90, 0xa8, 0x8f, 0x91, 0x91, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x8b, 0x83, 0x83, 0x80, 
+  0x80, 0x7d, 0x75, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0xa8, 0x90, 0x97, 0x94, 0x94, 0x9d, 0x9b, 0x9e, 0x9e, 0x9e, 0xa1, 0xa3, 0x9c, 0xa1, 0xa1, 0xa1, 
+  0xa1, 0xa1, 0xa1, 0xa1, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9d, 0x9a, 0x9a, 0x99, 0x94, 0x93, 
+  0x93, 0x97, 0x90, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x87, 0x83, 0x83, 0x80, 
+  0x80, 0x7d, 0x4a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8f, 0x90, 0x90, 0x96, 0x94, 0x94, 0x9a, 0x9a, 0x9d, 0x9e, 0x9b, 0x9c, 0x9c, 0x9c, 0xa1, 0xa1, 
+  0xa1, 0xa3, 0xa1, 0x9c, 0xa3, 0x9c, 0x9e, 0x9e, 0x9b, 0x9d, 0x9d, 0x9a, 0x99, 0x94, 0x94, 0x96, 
+  0x93, 0x90, 0x8f, 0x90, 0xa4, 0x91, 0x91, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x8b, 0x83, 0x83, 0x84, 
+  0x80, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8f, 0x90, 0x90, 0x96, 0x94, 0x94, 0x9a, 0x9a, 0x9d, 0x9e, 0x9b, 0x9c, 0x9c, 0x9c, 0xa1, 0xa1, 
+  0xa1, 0xa3, 0xa1, 0x9c, 0xa3, 0x9c, 0x9e, 0x9e, 0x9b, 0x9d, 0x9d, 0x9a, 0x99, 0x94, 0x94, 0x96, 
+  0x93, 0x90, 0x8f, 0x90, 0xa4, 0x91, 0x91, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x8b, 0x83, 0x83, 0x84, 
+  0x80, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8e, 0x90, 0x90, 0x96, 0x94, 0x99, 0x9a, 0x9a, 0x9b, 0x9e, 0x9b, 0x9c, 0x9c, 0x9c, 0x9c, 0x9c, 
+  0x9c, 0x9c, 0xa3, 0x9c, 0x9e, 0x9c, 0x9b, 0x9e, 0x9b, 0x9a, 0x9d, 0x9a, 0x99, 0x99, 0x93, 0x96, 
+  0x93, 0x97, 0x8f, 0x8f, 0x8f, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8a, 0x8a, 0x87, 0x83, 0x83, 0x80, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x84, 0x8f, 0x97, 0x93, 0x93, 0x94, 0x99, 0x9a, 0x9a, 0x9d, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9c, 
+  0xa3, 0x9c, 0x9c, 0x9e, 0x9e, 0x9e, 0x9e, 0x9b, 0x9b, 0x9d, 0x9a, 0x99, 0x94, 0x94, 0x96, 0x93, 
+  0x93, 0x90, 0x90, 0x8f, 0x8f, 0x88, 0x91, 0x92, 0x8e, 0x8e, 0x8a, 0x8b, 0x8b, 0x83, 0x4a, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x75, 0x8f, 0x8f, 0x93, 0x97, 0x94, 0x99, 0x9a, 0x9a, 0x9a, 0x9d, 0x9d, 0x9e, 0x9e, 0x9e, 0x9b, 
+  0x9e, 0x9e, 0x9e, 0x9c, 0x9b, 0x9b, 0x9b, 0x9d, 0x9d, 0x9d, 0x9a, 0x9a, 0x94, 0x94, 0x93, 0x93, 
+  0x93, 0x90, 0x90, 0x8f, 0x91, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8e, 0x8b, 0x7d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x75, 0x8f, 0x8f, 0x93, 0x97, 0x94, 0x99, 0x9a, 0x9a, 0x9a, 0x9d, 0x9d, 0x9e, 0x9e, 0x9e, 0x9b, 
+  0x9e, 0x9e, 0x9e, 0x9c, 0x9b, 0x9b, 0x9b, 0x9d, 0x9d, 0x9d, 0x9a, 0x9a, 0x94, 0x94, 0x93, 0x93, 
+  0x93, 0x90, 0x90, 0x8f, 0x91, 0x91, 0x88, 0x92, 0x8e, 0x8e, 0x8e, 0x8b, 0x7d, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x91, 0xa8, 0x90, 0x93, 0x93, 0x96, 0x94, 0x9a, 0x9d, 0x9a, 0x9b, 0x9b, 0x9b, 0x9e, 0x9e, 
+  0x9e, 0x9b, 0x9b, 0x9b, 0x9e, 0x9e, 0x9d, 0x9b, 0x9a, 0x9a, 0x9a, 0x94, 0x94, 0x96, 0x96, 0x93, 
+  0x90, 0x90, 0xa8, 0x8f, 0x8f, 0x91, 0x92, 0x92, 0x8e, 0x8e, 0x7d, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x98, 0x8f, 0x90, 0x97, 0x93, 0x96, 0x94, 0x94, 0x9a, 0x9d, 0x9a, 0x9d, 0x9d, 0x9b, 0x9b, 
+  0x9e, 0x9e, 0x9e, 0x9b, 0x9d, 0x9b, 0x9a, 0x9d, 0x9a, 0x9a, 0x9a, 0x99, 0x94, 0x96, 0x96, 0x93, 
+  0x97, 0x90, 0x8f, 0x8f, 0x8f, 0x91, 0x91, 0x8a, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x75, 0x83, 0x90, 0x93, 0x93, 0x94, 0x94, 0x99, 0x9a, 0x9d, 0x9d, 0x9a, 0x9d, 0x9b, 
+  0x9d, 0x9b, 0x9d, 0x9d, 0x9b, 0x9d, 0x9d, 0x9d, 0x9d, 0x9a, 0x99, 0x94, 0x94, 0x93, 0x93, 0x97, 
+  0x90, 0x90, 0xa8, 0x8f, 0x91, 0x83, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x75, 0x83, 0x90, 0x93, 0x93, 0x94, 0x94, 0x99, 0x9a, 0x9d, 0x9d, 0x9a, 0x9d, 0x9b, 
+  0x9d, 0x9b, 0x9d, 0x9d, 0x9b, 0x9d, 0x9d, 0x9d, 0x9d, 0x9a, 0x99, 0x94, 0x94, 0x93, 0x93, 0x97, 
+  0x90, 0x90, 0xa8, 0x8f, 0x91, 0x83, 0x79, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x87, 0x88, 0x96, 0x94, 0x94, 0x94, 0x9a, 0x9d, 0x9d, 0x9d, 0x9b, 
+  0x9d, 0x9b, 0x9b, 0x9d, 0x9d, 0x9d, 0x9a, 0x9a, 0x99, 0x94, 0x94, 0x99, 0x94, 0x96, 0x93, 0x93, 
+  0x90, 0x8e, 0x83, 0x75, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x80, 0x8a, 0x8f, 0x9a, 0x99, 0x9a, 0x9a, 0x9a, 
+  0x9a, 0x9d, 0x9d, 0x9a, 0x9a, 0x9a, 0x9a, 0x99, 0x9a, 0x9a, 0x94, 0x96, 0x96, 0x8b, 0x87, 0x75, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x80, 0x8a, 0x8a, 
+  0x8b, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x80, 0x8a, 0x8a, 
+  0x8b, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x23, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x24, 0x24, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x26, 0x21, 0x27, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x24, 0x28, 0x25, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x28, 0x24, 0x27, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x25, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x29, 0x28, 0x25, 0x25, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x25, 0x28, 0x28, 0x24, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x25, 0x28, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x2a, 0x2d, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x25, 0x25, 0x25, 0x25, 
+  0x25, 0x25, 0x22, 0x25, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x2a, 0x2e, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x25, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x2a, 0x30, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x25, 0x25, 0x28, 
+  0x28, 0x28, 0x25, 0x25, 0x22, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x25, 0x22, 0x25, 0x22, 0x22, 0x22, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 
+  0x32, 0x32, 0x31, 0x2f, 0x2f, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x25, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 
+  0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x31, 0x32, 0x31, 0x31, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x34, 0x35, 0x35, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x2c, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x34, 0x23, 
+  0x31, 0x32, 0x31, 0x31, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x28, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x22, 0x23, 0x34, 0x35, 0x35, 0x34, 0x22, 0x22, 0x22, 0x22, 0x22, 
+  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x2c, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x26, 0x23, 0x23, 
+  0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x2c, 0x28, 0x28, 
+  0x28, 0x28, 0x35, 0x36, 0x37, 0x38, 0x37, 0x38, 0x37, 0x37, 0x38, 0x37, 0x37, 0x37, 0x35, 0x23, 
+  0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x28, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x26, 0x23, 0x23, 0x23, 
+  0x32, 0x32, 0x31, 0x31, 0x2f, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x26, 
+  0x35, 0x37, 0x39, 0x3a, 0x2a, 0x3b, 0x3b, 0x3b, 0x27, 0x39, 0x3c, 0x38, 0x37, 0x37, 0x37, 0x37, 
+  0x3d, 0x34, 0x22, 0x22, 0x25, 0x25, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 
+  0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x29, 0x26, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x3e, 0x2a, 
+  0x2a, 0x3b, 0x3b, 0x3b, 0x24, 0x3f, 0x3f, 0x36, 0x3f, 0x3b, 0x3b, 0x3b, 0x2a, 0x2a, 0x38, 0x38, 
+  0x38, 0x38, 0x38, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x2c, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x29, 0x26, 0x23, 0x23, 
+  0x23, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x33, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x3e, 0x2a, 
+  0x2a, 0x3b, 0x3b, 0x3b, 0x24, 0x3f, 0x3f, 0x36, 0x3f, 0x3b, 0x3b, 0x3b, 0x2a, 0x2a, 0x38, 0x38, 
+  0x38, 0x38, 0x38, 0x23, 0x22, 0x22, 0x25, 0x25, 0x25, 0x25, 0x25, 0x28, 0x25, 0x28, 0x28, 0x2c, 
+  0x28, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x40, 0x29, 0x26, 0x26, 0x23, 0x32, 
+  0x23, 0x32, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x2c, 0x2c, 0x2c, 0x26, 0x2a, 0x27, 0x3f, 
+  0x3f, 0x3f, 0x41, 0x42, 0x41, 0x43, 0x41, 0x43, 0x44, 0x3d, 0x45, 0x3f, 0x46, 0x3b, 0x3b, 0x2a, 
+  0x37, 0x37, 0x38, 0x38, 0x47, 0x25, 0x25, 0x25, 0x28, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x2d, 0x40, 0x29, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x32, 0x32, 0x31, 0x31, 0x31, 0x31, 0x31, 0x2f, 0x2f, 0x2c, 0x29, 0x2a, 0x3b, 0x3f, 0x42, 
+  0x42, 0x48, 0x48, 0x48, 0x41, 0x48, 0x48, 0x48, 0x41, 0x42, 0x2b, 0x2b, 0x49, 0x47, 0x3f, 0x4a, 
+  0x3b, 0x4b, 0x37, 0x37, 0x37, 0x47, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x28, 0x2c, 0x28, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x31, 0x2f, 0x2f, 0x36, 0x3b, 0x3f, 0x3e, 0x48, 0x48, 
+  0x48, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x2e, 0x4c, 0x48, 0x34, 0x4d, 0x21, 0x2b, 0x24, 0x4e, 
+  0x4f, 0x2a, 0x3c, 0x37, 0x37, 0x37, 0x37, 0x26, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x26, 0x26, 0x23, 
+  0x23, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x31, 0x2f, 0x2f, 0x36, 0x3b, 0x3f, 0x3e, 0x48, 0x48, 
+  0x48, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x2e, 0x4c, 0x48, 0x34, 0x4d, 0x21, 0x2b, 0x24, 0x4e, 
+  0x4f, 0x2a, 0x3c, 0x37, 0x37, 0x37, 0x37, 0x26, 0x25, 0x25, 0x25, 0x28, 0x28, 0x28, 0x2c, 0x28, 
+  0x2c, 0x2b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x2e, 0x2d, 0x2e, 0x29, 0x29, 0x29, 0x26, 0x23, 
+  0x23, 0x23, 0x32, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x2f, 0x29, 0x27, 0x3f, 0x42, 0x41, 0x4c, 0x4c, 
+  0x4c, 0x50, 0x50, 0x50, 0x51, 0x50, 0x50, 0x30, 0x40, 0x4c, 0x4c, 0x2e, 0x34, 0x2b, 0x42, 0x24, 
+  0x3f, 0x4e, 0x4f, 0x3a, 0x37, 0x52, 0x52, 0x37, 0x28, 0x28, 0x28, 0x25, 0x28, 0x2c, 0x28, 0x2c, 
+  0x28, 0x24, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x34, 0x30, 0x2e, 0x2e, 0x29, 0x29, 0x29, 0x26, 0x26, 
+  0x23, 0x23, 0x23, 0x32, 0x32, 0x32, 0x31, 0x31, 0x29, 0x3b, 0x47, 0x43, 0x4c, 0x4c, 0x50, 0x51, 
+  0x30, 0x50, 0x53, 0x53, 0x53, 0x53, 0x30, 0x51, 0x51, 0x50, 0x51, 0x4c, 0x4c, 0x30, 0x35, 0x48, 
+  0x43, 0x24, 0x3b, 0x3b, 0x2a, 0x37, 0x38, 0x37, 0x3d, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x35, 0x34, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x29, 0x26, 
+  0x23, 0x23, 0x23, 0x32, 0x32, 0x31, 0x32, 0x31, 0x27, 0x45, 0x54, 0x55, 0x40, 0x4c, 0x53, 0x53, 
+  0x56, 0x57, 0x57, 0x58, 0x53, 0x59, 0x26, 0x57, 0x53, 0x53, 0x53, 0x5a, 0x50, 0x5b, 0x54, 0x2b, 
+  0x42, 0x41, 0x43, 0x3f, 0x3b, 0x3c, 0x37, 0x52, 0x52, 0x21, 0x28, 0x28, 0x28, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x21, 0x35, 0x34, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x29, 0x26, 
+  0x23, 0x23, 0x23, 0x32, 0x32, 0x31, 0x32, 0x31, 0x27, 0x45, 0x54, 0x55, 0x40, 0x4c, 0x53, 0x53, 
+  0x56, 0x57, 0x57, 0x58, 0x53, 0x59, 0x26, 0x57, 0x53, 0x53, 0x53, 0x5a, 0x50, 0x5b, 0x54, 0x2b, 
+  0x42, 0x41, 0x43, 0x3f, 0x3b, 0x3c, 0x37, 0x52, 0x52, 0x21, 0x28, 0x28, 0x28, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x35, 0x35, 0x34, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x26, 0x29, 
+  0x23, 0x23, 0x23, 0x32, 0x32, 0x31, 0x31, 0x3f, 0x3f, 0x3e, 0x55, 0x30, 0x51, 0x23, 0x53, 0x58, 
+  0x2c, 0x5c, 0x58, 0x5c, 0x5c, 0x58, 0x57, 0x5c, 0x58, 0x57, 0x53, 0x53, 0x53, 0x5d, 0x5e, 0x55, 
+  0x35, 0x48, 0x41, 0x24, 0x46, 0x5f, 0x4b, 0x37, 0x52, 0x52, 0x26, 0x28, 0x28, 0x28, 0x2c, 0x2c, 
+  0x2c, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x35, 0x34, 0x30, 0x2d, 0x2e, 0x40, 0x29, 0x29, 0x26, 
+  0x26, 0x26, 0x32, 0x23, 0x32, 0x32, 0x2e, 0x3d, 0x54, 0x54, 0x30, 0x40, 0x60, 0x61, 0x61, 0x62, 
+  0x33, 0x58, 0x63, 0x63, 0x63, 0x63, 0x63, 0x5c, 0x58, 0x58, 0x58, 0x57, 0x53, 0x53, 0x4c, 0x50, 
+  0x4c, 0x48, 0x42, 0x42, 0x24, 0x2a, 0x3a, 0x52, 0x37, 0x37, 0x3d, 0x2c, 0x2c, 0x2c, 0x28, 0x2c, 
+  0x2f, 0x33, 0x20, 0x20, 0x20, 0x20, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x24, 0x35, 0x35, 0x30, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x26, 
+  0x26, 0x26, 0x23, 0x23, 0x32, 0x32, 0x47, 0x24, 0x64, 0x55, 0x60, 0x56, 0x62, 0x65, 0x65, 0x66, 
+  0x58, 0x63, 0x67, 0x63, 0x63, 0x63, 0x63, 0x68, 0x63, 0x63, 0x58, 0x58, 0x58, 0x57, 0x53, 0x50, 
+  0x50, 0x4c, 0x48, 0x42, 0x43, 0x4e, 0x49, 0x69, 0x52, 0x52, 0x37, 0x3b, 0x24, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2f, 0x2b, 0x20, 0x20, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x24, 0x35, 0x35, 0x30, 0x30, 0x2e, 0x40, 0x40, 0x29, 0x26, 
+  0x26, 0x26, 0x23, 0x23, 0x32, 0x32, 0x47, 0x24, 0x64, 0x55, 0x60, 0x56, 0x62, 0x65, 0x65, 0x66, 
+  0x58, 0x63, 0x67, 0x63, 0x63, 0x63, 0x63, 0x68, 0x63, 0x63, 0x58, 0x58, 0x58, 0x57, 0x53, 0x50, 
+  0x50, 0x4c, 0x48, 0x42, 0x43, 0x4e, 0x49, 0x69, 0x52, 0x52, 0x37, 0x3b, 0x24, 0x2c, 0x2c, 0x2c, 
+  0x2c, 0x2f, 0x2b, 0x20, 0x20, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x2b, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x40, 0x29, 0x40, 0x29, 
+  0x26, 0x23, 0x23, 0x23, 0x23, 0x32, 0x47, 0x54, 0x5e, 0x62, 0x56, 0x62, 0x65, 0x66, 0x6a, 0x6a, 
+  0x6a, 0x63, 0x63, 0x6b, 0x6c, 0x63, 0x63, 0x67, 0x63, 0x63, 0x63, 0x58, 0x58, 0x57, 0x57, 0x53, 
+  0x50, 0x4c, 0x4c, 0x48, 0x41, 0x3d, 0x49, 0x3a, 0x4b, 0x37, 0x38, 0x6d, 0x20, 0x20, 0x2a, 0x24, 
+  0x2c, 0x33, 0x24, 0x20, 0x52, 0x3c, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x24, 0x24, 0x35, 0x34, 0x30, 0x2e, 0x2e, 0x40, 0x29, 0x29, 
+  0x29, 0x26, 0x23, 0x23, 0x23, 0x6e, 0x4d, 0x64, 0x60, 0x60, 0x62, 0x65, 0x66, 0x6a, 0x6a, 0x6f, 
+  0x6f, 0x6c, 0x70, 0x70, 0x70, 0x6f, 0x68, 0x71, 0x67, 0x68, 0x68, 0x63, 0x5c, 0x58, 0x57, 0x57, 
+  0x53, 0x50, 0x4c, 0x41, 0x41, 0x24, 0x4e, 0x4f, 0x4b, 0x37, 0x37, 0x38, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x2b, 0x2b, 0x52, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x21, 0x35, 0x30, 0x30, 0x2e, 0x2e, 0x40, 0x29, 
+  0x29, 0x26, 0x26, 0x23, 0x23, 0x54, 0x72, 0x55, 0x60, 0x65, 0x65, 0x66, 0x6a, 0x6a, 0x6b, 0x70, 
+  0x6f, 0x70, 0x6f, 0x70, 0x70, 0x70, 0x73, 0x63, 0x63, 0x67, 0x67, 0x68, 0x63, 0x5c, 0x58, 0x57, 
+  0x53, 0x50, 0x50, 0x4c, 0x48, 0x42, 0x4e, 0x4e, 0x3a, 0x52, 0x52, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x52, 0x52, 0x3c, 0x3c, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x21, 0x35, 0x30, 0x30, 0x2e, 0x2e, 0x40, 0x29, 
+  0x29, 0x26, 0x26, 0x23, 0x23, 0x54, 0x72, 0x55, 0x60, 0x65, 0x65, 0x66, 0x6a, 0x6a, 0x6b, 0x70, 
+  0x6f, 0x70, 0x6f, 0x70, 0x70, 0x70, 0x73, 0x63, 0x63, 0x67, 0x67, 0x68, 0x63, 0x5c, 0x58, 0x57, 
+  0x53, 0x50, 0x50, 0x4c, 0x48, 0x42, 0x4e, 0x4e, 0x3a, 0x52, 0x52, 0x37, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x52, 0x52, 0x3c, 0x3c, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x24, 0x21, 0x21, 0x34, 0x34, 0x30, 0x2e, 0x40, 0x40, 0x29, 
+  0x29, 0x26, 0x26, 0x26, 0x23, 0x4e, 0x64, 0x62, 0x60, 0x66, 0x66, 0x6a, 0x6b, 0x6a, 0x70, 0x70, 
+  0x74, 0x70, 0x73, 0x73, 0x74, 0x70, 0x74, 0x6f, 0x67, 0x67, 0x67, 0x68, 0x63, 0x63, 0x58, 0x58, 
+  0x53, 0x53, 0x50, 0x4c, 0x4c, 0x41, 0x75, 0x4e, 0x2a, 0x3c, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x52, 0x3c, 0x52, 0x52, 0x3c, 0x52, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x2b, 0x35, 0x35, 0x30, 0x30, 0x2e, 0x2e, 0x40, 0x40, 
+  0x29, 0x29, 0x26, 0x23, 0x30, 0x72, 0x55, 0x56, 0x65, 0x65, 0x66, 0x76, 0x76, 0x70, 0x70, 0x73, 
+  0x73, 0x73, 0x73, 0x74, 0x73, 0x73, 0x70, 0x70, 0x6f, 0x77, 0x71, 0x67, 0x67, 0x63, 0x63, 0x58, 
+  0x58, 0x53, 0x53, 0x4c, 0x4c, 0x42, 0x78, 0x4e, 0x4a, 0x3c, 0x37, 0x37, 0x38, 0x20, 0x20, 0x20, 
+  0x52, 0x3c, 0xa8, 0xa8, 0x3c, 0x3c, 0x3c, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x21, 0x35, 0x34, 0x34, 0x2e, 0x2e, 0x40, 0x40, 
+  0x29, 0x29, 0x29, 0x23, 0x3d, 0x72, 0x79, 0x60, 0x62, 0x66, 0x66, 0x6b, 0x70, 0x70, 0x74, 0x73, 
+  0x7a, 0x73, 0x7a, 0x7a, 0x7b, 0x7c, 0x7a, 0x7a, 0x70, 0x71, 0x71, 0x67, 0x67, 0x63, 0x63, 0x58, 
+  0x58, 0x57, 0x53, 0x50, 0x4c, 0x34, 0x43, 0x49, 0x4e, 0x3a, 0x52, 0x52, 0x38, 0x20, 0x6d, 0x4f, 
+  0xa8, 0x4b, 0x4b, 0x3c, 0x52, 0x3c, 0x52, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x21, 0x35, 0x34, 0x34, 0x2e, 0x2e, 0x40, 0x40, 
+  0x29, 0x29, 0x29, 0x23, 0x3d, 0x72, 0x79, 0x60, 0x62, 0x66, 0x66, 0x6b, 0x70, 0x70, 0x74, 0x73, 
+  0x7a, 0x73, 0x7a, 0x7a, 0x7b, 0x7c, 0x7a, 0x7a, 0x70, 0x71, 0x71, 0x67, 0x67, 0x63, 0x63, 0x58, 
+  0x58, 0x57, 0x53, 0x50, 0x4c, 0x34, 0x43, 0x49, 0x4e, 0x3a, 0x52, 0x52, 0x38, 0x20, 0x6d, 0x4f, 
+  0xa8, 0x4b, 0x4b, 0x3c, 0x52, 0x3c, 0x52, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x21, 0x35, 0x34, 0x30, 0x2e, 0x2e, 0x29, 
+  0x29, 0x29, 0x34, 0x69, 0x37, 0x78, 0x5e, 0x56, 0x62, 0x66, 0x76, 0x6a, 0x6f, 0x73, 0x73, 0x6f, 
+  0x7a, 0x7a, 0x7d, 0x7d, 0x7d, 0x7e, 0x7f, 0x7c, 0x7a, 0x71, 0x71, 0x71, 0x67, 0x67, 0x63, 0x5c, 
+  0x58, 0x57, 0x53, 0x50, 0x30, 0x55, 0x21, 0x4e, 0x4e, 0x3a, 0x37, 0x37, 0x37, 0x80, 0x4f, 0x80, 
+  0x3a, 0x52, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x2b, 0x35, 0x34, 0x34, 0x30, 0x30, 0x2e, 0x40, 
+  0x40, 0x21, 0x20, 0x20, 0x3c, 0x64, 0x5e, 0x62, 0x65, 0x66, 0x6b, 0x70, 0x70, 0x70, 0x7a, 0x7a, 
+  0x7a, 0x7a, 0x7c, 0x7e, 0x7e, 0x81, 0x81, 0x7e, 0x7c, 0x7f, 0x77, 0x71, 0x71, 0x67, 0x63, 0x63, 
+  0x58, 0x58, 0x53, 0x30, 0x79, 0x55, 0x54, 0x72, 0x49, 0x82, 0x38, 0x3a, 0x83, 0x84, 0x4f, 0x80, 
+  0x3a, 0x52, 0x52, 0xa8, 0x52, 0x3c, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x35, 0x34, 0x30, 0x30, 0x2e, 0x2d, 
+  0x69, 0x20, 0x20, 0x20, 0x3a, 0x64, 0x5e, 0x62, 0x66, 0x6a, 0x76, 0x70, 0x70, 0x73, 0x73, 0x7a, 
+  0x7a, 0x7d, 0x7c, 0x85, 0x81, 0x81, 0x81, 0x81, 0x7e, 0x7c, 0x86, 0x71, 0x67, 0x68, 0x67, 0x63, 
+  0x5c, 0x57, 0x51, 0x56, 0x5e, 0x64, 0x64, 0x4e, 0x4e, 0x49, 0x87, 0x87, 0x83, 0x88, 0x4f, 0x80, 
+  0xa8, 0xa8, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x24, 0x21, 0x35, 0x34, 0x30, 0x30, 0x2e, 0x2d, 
+  0x69, 0x20, 0x20, 0x20, 0x3a, 0x64, 0x5e, 0x62, 0x66, 0x6a, 0x76, 0x70, 0x70, 0x73, 0x73, 0x7a, 
+  0x7a, 0x7d, 0x7c, 0x85, 0x81, 0x81, 0x81, 0x81, 0x7e, 0x7c, 0x86, 0x71, 0x67, 0x68, 0x67, 0x63, 
+  0x5c, 0x57, 0x51, 0x56, 0x5e, 0x64, 0x64, 0x4e, 0x4e, 0x49, 0x87, 0x87, 0x83, 0x88, 0x4f, 0x80, 
+  0xa8, 0xa8, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x2b, 0x21, 0x35, 0x34, 0x34, 0x30, 0x2e, 0x39, 
+  0x20, 0x20, 0x20, 0x20, 0x3c, 0x54, 0x5e, 0x62, 0x65, 0x6a, 0x6b, 0x70, 0x6f, 0x73, 0x73, 0x7a, 
+  0x7b, 0x7d, 0x7c, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7e, 0x7a, 0x74, 0x6f, 0x63, 0x71, 0x68, 0x5c, 
+  0x5c, 0x58, 0x57, 0x61, 0x79, 0x55, 0x54, 0x64, 0x89, 0x78, 0x78, 0x87, 0x83, 0x88, 0x4f, 0x4f, 
+  0x3a, 0x3c, 0x52, 0x3c, 0x52, 0xa8, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x2b, 0x24, 0x21, 0x35, 0x34, 0x30, 0x69, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x4b, 0x64, 0x8a, 0x62, 0x66, 0x66, 0x6a, 0x70, 0x73, 0x73, 0x7a, 0x7a, 
+  0x7d, 0x8b, 0x7e, 0x7e, 0x81, 0x81, 0x81, 0x81, 0x7e, 0x7c, 0x74, 0x74, 0x6f, 0x71, 0x22, 0x68, 
+  0x58, 0x57, 0x57, 0x60, 0x5e, 0x60, 0x8c, 0x8a, 0x89, 0x78, 0x78, 0x87, 0x83, 0x88, 0x84, 0x80, 
+  0x80, 0xa8, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x35, 0x35, 0x5b, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x5e, 0x60, 0x66, 0x6a, 0x6b, 0x8d, 0x70, 0x73, 0x73, 0x7a, 
+  0x7a, 0x7a, 0x73, 0x7e, 0x81, 0x81, 0x81, 0x7e, 0x7d, 0x7d, 0x70, 0x70, 0x6a, 0x76, 0x6c, 0x33, 
+  0x58, 0x57, 0x6c, 0x61, 0x8e, 0x8f, 0x8c, 0x8a, 0x89, 0x90, 0x78, 0x87, 0x83, 0x84, 0x49, 0x80, 
+  0x80, 0x3c, 0x52, 0x3c, 0x52, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x24, 0x35, 0x35, 0x5b, 0x89, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x5e, 0x60, 0x66, 0x6a, 0x6b, 0x8d, 0x70, 0x73, 0x73, 0x7a, 
+  0x7a, 0x7a, 0x73, 0x7e, 0x81, 0x81, 0x81, 0x7e, 0x7d, 0x7d, 0x70, 0x70, 0x6a, 0x76, 0x6c, 0x33, 
+  0x58, 0x57, 0x6c, 0x61, 0x8e, 0x8f, 0x8c, 0x8a, 0x89, 0x90, 0x78, 0x87, 0x83, 0x84, 0x49, 0x80, 
+  0x80, 0x3c, 0x52, 0x3c, 0x52, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x2b, 0x21, 0x21, 0x24, 0x91, 0x92, 0x93, 
+  0x80, 0x20, 0x20, 0x20, 0x20, 0x72, 0x55, 0x56, 0x65, 0x66, 0x6a, 0x6f, 0x73, 0x70, 0x7a, 0x7a, 
+  0x7a, 0x7b, 0x73, 0x7d, 0x94, 0x7e, 0x85, 0x7e, 0x7d, 0x73, 0x73, 0x70, 0x70, 0x76, 0x6a, 0x76, 
+  0x95, 0x96, 0x97, 0x98, 0x8e, 0x93, 0x8c, 0x99, 0x8a, 0x90, 0x9a, 0x83, 0x83, 0x88, 0x4f, 0x4f, 
+  0x80, 0x3a, 0x3c, 0x3c, 0xa8, 0x52, 0x3c, 0x3c, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x2b, 0x24, 0x21, 0x20, 0x99, 0x91, 0x95, 
+  0x9b, 0x8b, 0x98, 0x90, 0x4f, 0x4f, 0x55, 0x61, 0x62, 0x66, 0x6a, 0x6a, 0x70, 0x70, 0x73, 0x73, 
+  0x7a, 0x7a, 0x7a, 0x7c, 0x7c, 0x73, 0x9b, 0x8b, 0x7a, 0x73, 0x7a, 0x9c, 0x74, 0x9c, 0x95, 0x92, 
+  0x91, 0x97, 0x98, 0x98, 0x8e, 0x93, 0x99, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x87, 0x83, 0x4f, 0x80, 
+  0x80, 0x3a, 0x52, 0x3c, 0x3c, 0x52, 0x3c, 0x3c, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x2b, 0x24, 0x37, 0x20, 0x9a, 0x96, 0x92, 
+  0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0x9f, 0x94, 0x95, 0x9c, 0x9c, 0xa0, 0x73, 0x70, 0x73, 0x73, 0x73, 
+  0x7a, 0x7a, 0x7b, 0xa1, 0x94, 0x73, 0x7b, 0x9f, 0x94, 0x9d, 0xa0, 0xa0, 0x8b, 0x9b, 0x9b, 0x92, 
+  0x96, 0x96, 0x97, 0x98, 0x8e, 0x8e, 0x93, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x83, 0x88, 0x88, 0x4f, 
+  0x80, 0x3a, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x2b, 0x24, 0x37, 0x20, 0x9a, 0x96, 0x92, 
+  0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0x9f, 0x94, 0x95, 0x9c, 0x9c, 0xa0, 0x73, 0x70, 0x73, 0x73, 0x73, 
+  0x7a, 0x7a, 0x7b, 0xa1, 0x94, 0x73, 0x7b, 0x9f, 0x94, 0x9d, 0xa0, 0xa0, 0x8b, 0x9b, 0x9b, 0x92, 
+  0x96, 0x96, 0x97, 0x98, 0x8e, 0x8e, 0x93, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x83, 0x88, 0x88, 0x4f, 
+  0x80, 0x3a, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2b, 0x3f, 0x20, 0x20, 0x87, 0x96, 0x95, 
+  0x9b, 0x9b, 0x8b, 0x9d, 0x9e, 0x9f, 0x9f, 0xa2, 0xa3, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 0xa5, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa5, 0xa4, 0xa2, 0xa2, 0x94, 0x94, 0x9d, 0x9d, 0x8b, 0x8b, 0x9b, 0x9b, 0x95, 
+  0x96, 0x96, 0x98, 0xa6, 0x8e, 0x93, 0x99, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x83, 0x83, 0x88, 0x4f, 
+  0x80, 0x3a, 0x52, 0x3c, 0x3c, 0x52, 0x52, 0x52, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x37, 0x20, 0x20, 0x20, 0x96, 0x96, 
+  0x95, 0x9c, 0x8b, 0xa0, 0x9d, 0x94, 0x94, 0xa2, 0xa2, 0xa2, 0xa4, 0xa4, 0xa4, 0xa5, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa4, 0xa2, 0xa2, 0xa2, 0x94, 0x9f, 0x94, 0x9e, 0xa0, 0xa0, 0x9c, 0x9b, 0x95, 0x92, 
+  0x91, 0x97, 0x97, 0x98, 0x8e, 0x8e, 0x93, 0x99, 0x89, 0x90, 0x78, 0x9a, 0x87, 0x88, 0x84, 0x4f, 
+  0x80, 0xa8, 0xa8, 0x52, 0x3c, 0xa8, 0x3c, 0x3c, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x96, 0x96, 
+  0x92, 0x9c, 0x9c, 0xa0, 0xa0, 0x9e, 0x9e, 0xa2, 0xa2, 0xa4, 0xa2, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa2, 0xa4, 0xa4, 0xa2, 0xa2, 0x94, 0x9f, 0x9e, 0x9d, 0xa0, 0xa0, 0x8b, 0x9b, 0x95, 0x92, 
+  0x96, 0x96, 0x98, 0x8e, 0x8e, 0x8f, 0x93, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x83, 0x83, 0x4f, 0x4f, 
+  0x4f, 0x3a, 0x3c, 0x52, 0x3c, 0x3c, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x96, 0x96, 
+  0x92, 0x9c, 0x9c, 0xa0, 0xa0, 0x9e, 0x9e, 0xa2, 0xa2, 0xa4, 0xa2, 0xa4, 0xa4, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa2, 0xa4, 0xa4, 0xa2, 0xa2, 0x94, 0x9f, 0x9e, 0x9d, 0xa0, 0xa0, 0x8b, 0x9b, 0x95, 0x92, 
+  0x96, 0x96, 0x98, 0x8e, 0x8e, 0x8f, 0x93, 0x99, 0x89, 0x89, 0x78, 0x9a, 0x83, 0x83, 0x4f, 0x4f, 
+  0x4f, 0x3a, 0x3c, 0x52, 0x3c, 0x3c, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x96, 
+  0x96, 0x92, 0x9b, 0x8b, 0x9d, 0x9d, 0x94, 0x94, 0x9f, 0xa2, 0xa4, 0xa4, 0xa2, 0xa4, 0xa4, 0xa4, 
+  0xa4, 0xa4, 0xa2, 0xa2, 0xa2, 0xa2, 0x9f, 0x9e, 0x9d, 0x9d, 0xa0, 0x8b, 0x9c, 0x9b, 0x92, 0x95, 
+  0x91, 0x97, 0x97, 0x98, 0x8e, 0x93, 0x93, 0x99, 0x99, 0x90, 0x78, 0x9a, 0x9a, 0x88, 0x88, 0x4f, 
+  0x80, 0xa8, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x52, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x96, 
+  0x92, 0x92, 0x9b, 0x9c, 0xa0, 0xa0, 0x9e, 0x94, 0x94, 0x94, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0x94, 0x94, 0x9e, 0xa7, 0x9d, 0xa0, 0x8b, 0x9c, 0x9c, 0x92, 0x92, 
+  0x96, 0x96, 0x97, 0x98, 0x8e, 0x93, 0x93, 0x99, 0x8a, 0x89, 0x78, 0x9a, 0x9a, 0x83, 0x88, 0x4f, 
+  0x4f, 0xa8, 0xa8, 0x52, 0x52, 0x52, 0xa8, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa8, 0x98, 
+  0x96, 0x92, 0x95, 0x9c, 0x8b, 0xa0, 0xa0, 0x9e, 0x9e, 0xa2, 0x94, 0xa2, 0xa2, 0xa2, 0xa4, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 0xa0, 0x8b, 0x8b, 0x9c, 0x9b, 0x95, 0x92, 
+  0x91, 0x96, 0x98, 0xa6, 0x8e, 0x8f, 0x8c, 0x99, 0x89, 0x89, 0x89, 0x9a, 0x83, 0x83, 0x88, 0x84, 
+  0x80, 0x80, 0x3a, 0xa8, 0x3c, 0x3c, 0x3c, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa8, 0x98, 
+  0x96, 0x92, 0x95, 0x9c, 0x8b, 0xa0, 0xa0, 0x9e, 0x9e, 0xa2, 0x94, 0xa2, 0xa2, 0xa2, 0xa4, 0xa2, 
+  0xa2, 0xa2, 0xa2, 0xa2, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 0xa0, 0x8b, 0x8b, 0x9c, 0x9b, 0x95, 0x92, 
+  0x91, 0x96, 0x98, 0xa6, 0x8e, 0x8f, 0x8c, 0x99, 0x89, 0x89, 0x89, 0x9a, 0x83, 0x83, 0x88, 0x84, 
+  0x80, 0x80, 0x3a, 0xa8, 0x3c, 0x3c, 0x3c, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x98, 
+  0x96, 0x96, 0x92, 0x9b, 0x9c, 0xa0, 0xa0, 0xa7, 0x9e, 0x9e, 0x9f, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0x9f, 0x94, 0x9f, 0x94, 0x9e, 0x9d, 0x9d, 0xa0, 0x8b, 0x9c, 0x9b, 0x9b, 0x92, 0x91, 
+  0x96, 0x97, 0x98, 0xa6, 0x8e, 0x8f, 0x8c, 0x99, 0x89, 0x90, 0x78, 0x78, 0x9a, 0x83, 0x88, 0x84, 
+  0x4f, 0x3a, 0x3a, 0x3c, 0x3c, 0x3c, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa6, 
+  0x98, 0x96, 0x95, 0x95, 0x9b, 0x8b, 0xa0, 0x9d, 0x9d, 0x9e, 0x94, 0x94, 0x9f, 0x94, 0xa2, 0xa2, 
+  0xa2, 0xa2, 0x94, 0x94, 0x9e, 0x9e, 0x9d, 0x9e, 0xa0, 0xa0, 0xa0, 0x9b, 0x9b, 0x95, 0x92, 0x96, 
+  0x96, 0x98, 0x98, 0x8e, 0x8e, 0x93, 0x99, 0x99, 0x8a, 0x89, 0x89, 0x9a, 0x83, 0x83, 0x88, 0x84, 
+  0x80, 0x80, 0xa8, 0x3c, 0x3c, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x98, 0x97, 0x92, 0x92, 0x9b, 0x9c, 0x9c, 0xa0, 0x9d, 0x9d, 0x9e, 0x94, 0x9f, 0x94, 0x9f, 0x9f, 
+  0x9f, 0x9f, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 0x9d, 0x8b, 0x8b, 0x8b, 0x8b, 0x9b, 0x9b, 0x95, 0x92, 
+  0x96, 0x96, 0x98, 0x8e, 0x8e, 0x8e, 0x93, 0x99, 0x89, 0x90, 0x78, 0x78, 0x9a, 0x83, 0x84, 0x84, 
+  0x80, 0x80, 0xa8, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x98, 0x97, 0x92, 0x92, 0x9b, 0x9c, 0x9c, 0xa0, 0x9d, 0x9d, 0x9e, 0x94, 0x9f, 0x94, 0x9f, 0x9f, 
+  0x9f, 0x9f, 0x9f, 0x94, 0x9e, 0x9e, 0x9d, 0x9d, 0x8b, 0x8b, 0x8b, 0x8b, 0x9b, 0x9b, 0x95, 0x92, 
+  0x96, 0x96, 0x98, 0x8e, 0x8e, 0x8e, 0x93, 0x99, 0x89, 0x90, 0x78, 0x78, 0x9a, 0x83, 0x84, 0x84, 
+  0x80, 0x80, 0xa8, 0x52, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 
+  0x98, 0x98, 0x96, 0x92, 0x9b, 0x9b, 0x9b, 0x8b, 0xa0, 0xa7, 0x9d, 0x9d, 0x9e, 0x9e, 0x9e, 0x9e, 
+  0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9e, 0x9d, 0xa0, 0xa0, 0xa0, 0x8b, 0x9b, 0x9b, 0x95, 0x91, 0x91, 
+  0x91, 0x98, 0x98, 0x98, 0x8e, 0x93, 0x8c, 0x99, 0x8a, 0x89, 0x78, 0x9a, 0x87, 0x83, 0x88, 0x84, 
+  0x4f, 0x80, 0x3a, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x98, 0x98, 0x96, 0x92, 0x95, 0x9c, 0x8b, 0x8b, 0x8b, 0x9d, 0xa7, 0x9d, 0x9e, 0x9e, 0x9e, 0x94, 
+  0x94, 0x9e, 0x9e, 0x9e, 0x9d, 0xa7, 0x9d, 0xa0, 0x8b, 0xa0, 0x9c, 0x9b, 0x95, 0x92, 0x96, 0x96, 
+  0x96, 0x97, 0x98, 0xa6, 0x8e, 0x93, 0x99, 0x99, 0x89, 0x89, 0x89, 0x9a, 0x83, 0x83, 0x88, 0x84, 
+  0x4f, 0x80, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8e, 0x98, 0x97, 0x91, 0x92, 0x92, 0x9b, 0x9c, 0x8b, 0xa0, 0x8b, 0x9d, 0x9d, 0x9d, 0x9d, 0xa7, 
+  0x9e, 0x9d, 0x9e, 0x9d, 0x9d, 0x9d, 0xa0, 0x8b, 0x8b, 0x9c, 0x9c, 0x9b, 0x9b, 0x95, 0x92, 0x91, 
+  0x96, 0x98, 0xa6, 0x8e, 0x8e, 0x8f, 0x93, 0x99, 0x8a, 0x89, 0x78, 0x9a, 0x9a, 0x83, 0x83, 0x88, 
+  0x4f, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x8e, 0x98, 0x97, 0x91, 0x92, 0x92, 0x9b, 0x9c, 0x8b, 0xa0, 0x8b, 0x9d, 0x9d, 0x9d, 0x9d, 0xa7, 
+  0x9e, 0x9d, 0x9e, 0x9d, 0x9d, 0x9d, 0xa0, 0x8b, 0x8b, 0x9c, 0x9c, 0x9b, 0x9b, 0x95, 0x92, 0x91, 
+  0x96, 0x98, 0xa6, 0x8e, 0x8e, 0x8f, 0x93, 0x99, 0x8a, 0x89, 0x78, 0x9a, 0x9a, 0x83, 0x83, 0x88, 
+  0x4f, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x89, 0x8e, 0x98, 0x96, 0x92, 0x95, 0x9b, 0x9c, 0x9c, 0xa0, 0xa0, 0xa0, 0x9d, 0xa7, 0x9d, 0x9d, 
+  0x9e, 0x9d, 0xa7, 0xa7, 0xa0, 0xa0, 0xa0, 0xa0, 0x8b, 0x9b, 0x9c, 0x9b, 0x95, 0x92, 0x96, 0x91, 
+  0x96, 0x98, 0x98, 0x8e, 0x93, 0x8f, 0x99, 0x99, 0x89, 0x89, 0x89, 0x78, 0x87, 0x83, 0x88, 0x4f, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x83, 0x8e, 0x98, 0x96, 0x96, 0x92, 0x95, 0x9b, 0x9b, 0x9c, 0x8b, 0xa0, 0xa0, 0xa0, 0xa0, 0x9d, 
+  0xa0, 0x9d, 0xa0, 0x9d, 0x8b, 0xa0, 0xa0, 0x8b, 0x8b, 0x9c, 0x9b, 0x95, 0x92, 0x95, 0x91, 0x96, 
+  0x96, 0x98, 0xa6, 0x8e, 0x8e, 0x93, 0x93, 0x99, 0x8a, 0x90, 0x78, 0x78, 0x9a, 0x83, 0x52, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3a, 0x8e, 0x98, 0x97, 0x97, 0x92, 0x92, 0x9b, 0x9b, 0x9c, 0x9c, 0x8b, 0x8b, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0x9d, 0x8b, 0x9d, 0x8b, 0x8b, 0x8b, 0x8b, 0x9c, 0x9b, 0x9b, 0x9b, 0x92, 0x92, 0x91, 0x96, 
+  0x97, 0x98, 0x98, 0x8e, 0x93, 0x93, 0x99, 0x99, 0x99, 0x89, 0x78, 0x9a, 0x80, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x3a, 0x8e, 0x98, 0x97, 0x97, 0x92, 0x92, 0x9b, 0x9b, 0x9c, 0x9c, 0x8b, 0x8b, 0xa0, 0xa0, 0xa0, 
+  0xa0, 0x9d, 0x8b, 0x9d, 0x8b, 0x8b, 0x8b, 0x8b, 0x9c, 0x9b, 0x9b, 0x9b, 0x92, 0x92, 0x91, 0x96, 
+  0x97, 0x98, 0x98, 0x8e, 0x93, 0x93, 0x99, 0x99, 0x99, 0x89, 0x78, 0x9a, 0x80, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x8e, 0x8e, 0x98, 0x96, 0x96, 0x92, 0x92, 0x9b, 0x9b, 0x9b, 0x9c, 0x8b, 0x8b, 0x8b, 0x8b, 
+  0xa0, 0x8b, 0xa0, 0xa0, 0xa0, 0x8b, 0x8b, 0x9c, 0x9b, 0x9b, 0x9b, 0x95, 0x92, 0x91, 0x96, 0x96, 
+  0x98, 0x98, 0xa6, 0x8e, 0x8e, 0x93, 0x93, 0x99, 0x89, 0x90, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x89, 0x8e, 0xa6, 0x98, 0x96, 0x91, 0x92, 0x95, 0x9b, 0x9b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 
+  0xa0, 0x8b, 0x8b, 0x8b, 0xa0, 0x9c, 0x9b, 0x9c, 0x9c, 0x9b, 0x92, 0x95, 0x92, 0x92, 0x91, 0x96, 
+  0x96, 0x98, 0xa6, 0x8e, 0x8f, 0x8c, 0x8c, 0x9a, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3a, 0x88, 0x97, 0x96, 0x96, 0x92, 0x92, 0x95, 0x9c, 0x9b, 0x9b, 0x9c, 0x8b, 0x8b, 
+  0x9c, 0xa0, 0x8b, 0x9c, 0x9c, 0x8b, 0x9c, 0x9b, 0x9b, 0x9b, 0x9b, 0x92, 0x91, 0x91, 0x96, 0x97, 
+  0x98, 0x98, 0x8e, 0x8e, 0x93, 0x88, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x3a, 0x88, 0x97, 0x96, 0x96, 0x92, 0x92, 0x95, 0x9c, 0x9b, 0x9b, 0x9c, 0x8b, 0x8b, 
+  0x9c, 0xa0, 0x8b, 0x9c, 0x9c, 0x8b, 0x9c, 0x9b, 0x9b, 0x9b, 0x9b, 0x92, 0x91, 0x91, 0x96, 0x97, 
+  0x98, 0x98, 0x8e, 0x8e, 0x93, 0x88, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x87, 0x99, 0x92, 0x92, 0x92, 0x95, 0x9b, 0x9b, 0x9c, 0x9c, 0x9b, 
+  0x9b, 0x9c, 0x8b, 0x9b, 0x9c, 0x9b, 0x9b, 0x9b, 0x9b, 0x95, 0x95, 0x92, 0x91, 0x96, 0x96, 0x97, 
+  0x98, 0x8a, 0x83, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x80, 0x9a, 0x93, 0x95, 0x9b, 0x9b, 0x9b, 0x8b, 
+  0x9c, 0x9b, 0x9b, 0x8b, 0x9b, 0x9c, 0x9b, 0x9b, 0x95, 0x92, 0x92, 0x91, 0x91, 0x87, 0x87, 0x80, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x78, 0x78, 
+  0x78, 0x90, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4f, 0x78, 0x78, 
+  0x78, 0x90, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
+};
+
diff -uNr linux-2.4.37.9/include/linux/bootmem.h linux-2.4.37.9-amithlon/include/linux/bootmem.h
--- linux-2.4.37.9/include/linux/bootmem.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/bootmem.h	2010-06-16 22:58:36.000000000 -0400
@@ -33,6 +33,7 @@
 extern unsigned long __init bootmem_bootmap_pages (unsigned long);
 extern unsigned long __init init_bootmem (unsigned long addr, unsigned long memend);
 extern void __init reserve_bootmem (unsigned long addr, unsigned long size);
+extern int  __init bootmem_is_reserved (unsigned long addr);
 extern void __init free_bootmem (unsigned long addr, unsigned long size);
 extern void * __init __alloc_bootmem (unsigned long size, unsigned long align, unsigned long goal);
 #define alloc_bootmem(x) \
diff -uNr linux-2.4.37.9/include/linux/compat/atomic.h linux-2.4.37.9-amithlon/include/linux/compat/atomic.h
--- linux-2.4.37.9/include/linux/compat/atomic.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/atomic.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,24 @@
+/*
+	<linux/compat/atomic.h>
+
+	compatibility atomic macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: atomic.h,v 1.9 2000/05/21 13:32:14 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_ATOMIC_H
+# define _LINUX_COMPAT_ATOMIC_H
+
+# include <linux/compat/version.h>
+# include <asm/atomic.h>
+
+# if LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+#  define ATOMIC_INIT(i)			(i)
+#  define atomic_read(vp)         (*(vp))
+#  define atomic_set(vp,i)      ( (*(vp)) = (i) )
+# endif
+
+#endif	/* _LINUX_COMPAT_ATOMIC_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/bitops.h linux-2.4.37.9-amithlon/include/linux/compat/bitops.h
--- linux-2.4.37.9/include/linux/compat/bitops.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/bitops.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,28 @@
+/*
+	<linux/compat/bitops.h>
+
+	compatibility bitops macros
+
+	$Id: bitops.h,v 1.13 2000/05/21 13:43:55 fedorov Exp $
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	to do: hweight{8|16|32}
+*/
+
+#ifndef  _LINUX_COMPAT_BITOPS_H
+# define _LINUX_COMPAT_BITOPS_H
+
+# include <linux/compat/version.h>
+# include <asm/bitops.h>
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,37)
+#  define test_and_set_bit(nr, addr)       set_bit(nr, addr)
+#  define test_and_clear_bit(nr, addr)   clear_bit(nr, addr)
+#  define test_and_change_bit(nr, addr) change_bit(nr, addr)
+#
+#  define ffs(word) __builtin_ffs(word)
+# endif
+
+#endif	/* _LINUX_COMPAT_BITOPS_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/dma.h linux-2.4.37.9-amithlon/include/linux/compat/dma.h
--- linux-2.4.37.9/include/linux/compat/dma.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/dma.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,38 @@
+/*
+	<linux/compat/dma.h>
+
+	compatibility dma lock macros
+
+	$Id: dma.h,v 1.3 2000/05/21 13:43:55 fedorov Exp $
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+*/
+
+#ifndef  _LINUX_COMPAT_DMA_H
+# define _LINUX_COMPAT_DMA_H
+
+# include <linux/compat/version.h>
+# include <asm/dma.h>
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,0)
+#  ifndef __SMP__
+
+extern __inline__ unsigned long claim_dma_lock(void)
+{
+	unsigned long flags;
+	save_flags(flags); cli();
+	return flags;
+}
+
+extern __inline__ void release_dma_lock(unsigned long flags)
+{
+	restore_flags(flags);
+}
+
+#  else
+#   error 2.0.x SMP not supported
+#  endif
+# endif
+
+#endif	/* _LINUX_COMPAT_DMA_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/errno.h linux-2.4.37.9-amithlon/include/linux/compat/errno.h
--- linux-2.4.37.9/include/linux/compat/errno.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/errno.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,50 @@
+/*
+	<linux/compat/errno.h>
+
+	$Id: errno.h,v 1.4 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_ERRNO_H
+# define _LINUX_COMPAT_ERRNO_H
+
+# include <linux/errno.h>
+
+
+# ifndef  ENOTSUP
+#  define ENOTSUP EOPNOTSUPP
+# endif
+
+
+# ifndef ENOMEDIUM /* ENOMEDIUM and EMEDIUMTYPE was defined at the same time */
+#  if defined(_I386_ERRNO_H)
+#   define ENOMEDIUM    123
+#   define EMEDIUMTYPE  124
+#  elif defined(__ASM_MIPS_ERRNO_H)
+#   define ENOMEDIUM    159
+#   define EMEDIUMTYPE  160
+#  elif defined(_ALPHA_ERRNO_H)
+#   define ENOMEDIUM    129
+#   define EMEDIUMTYPE  130
+#  elif defined(_M68K_ERRNO_H)
+#   define ENOMEDIUM    123
+#   define EMEDIUMTYPE  124
+#  elif defined(_SPARC_ERRNO_H)
+#   define ENOMEDIUM    125
+#   define EMEDIUMTYPE  126
+#  elif defined(_PPC_ERRNO_H)
+#   define ENOMEDIUM    123
+#   define EMEDIUMTYPE  124
+#  elif defined(_SPARC64_ERRNO_H)
+#   define ENOMEDIUM    125
+#   define EMEDIUMTYPE  126
+#  elif defined(_ARM_ERRNO_H)
+#   define ENOMEDIUM    123
+#   define EMEDIUMTYPE  124
+#  elif defined(_S390_ERRNO_H)
+#   define ENOMEDIUM    123
+#   define EMEDIUMTYPE  124
+#  endif
+# endif
+
+#endif	/* _LINUX_COMPAT_ERRNO_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/file.h linux-2.4.37.9-amithlon/include/linux/compat/file.h
--- linux-2.4.37.9/include/linux/compat/file.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/file.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,70 @@
+/*
+	<linux/compat/file.h>
+
+	compatibility wrapper functions for accessing the file_struct fd array.
+
+	fcheck_task(), fcheck(), fd_install(), fput_compat(), __fput_compat()
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: file.h,v 1.14 2000/07/23 11:55:59 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_FILE_H
+# define _LINUX_COMPAT_FILE_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/sched.h>	/* task_struct */
+# include <linux/file.h>
+
+
+# if  LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+
+/*
+	Check whether the specified task has the fd open.
+	Since the task may not have a files_struct,
+	we must test for p->files != NULL.
+ */
+extern inline struct file* fcheck_task(struct task_struct* p, unsigned int fd)
+{
+	return (fd<NR_OPEN && p->files) ? p->files->fd[fd] : (struct file*)NULL;
+}
+
+
+/* Check whether the specified fd has an open file. */
+extern inline struct file* fcheck(unsigned int fd)
+{
+	return (fd<NR_OPEN) ? current->files->fd[fd] : (struct file*)NULL;
+}
+
+
+/* Install a file pointer in the fd array. */
+extern inline void fd_install(unsigned int fd, struct file* file)
+{
+	current->files->fd[fd] = file;
+}
+
+# endif	/* LINUX_VERSION_CODE > KERNEL_VERSION(2,1,0) */
+
+
+extern inline void fput_compat(struct file *file)
+{
+# if  LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+	fput(file, file->f_inode);
+# else
+	fput(file);
+# endif
+}
+
+extern inline void __fput_compat(struct file *file)
+{
+# if  LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+	__fput(file, file->f_inode);
+# else
+	__fput(file);
+# endif
+}
+
+
+#endif	/* _LINUX_COMPAT_FILE_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/fs.h linux-2.4.37.9-amithlon/include/linux/compat/fs.h
--- linux-2.4.37.9/include/linux/compat/fs.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/fs.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,98 @@
+/*
+	<linux/compat/fs.h>
+
+	compatibility <linux/fs.h> macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: fs.h,v 1.8 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_FS_H
+# define _LINUX_COMPAT_FS_H
+
+# include <linux/compat/version.h>
+# include <linux/fs.h>
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,31)
+#  define FILE_OPERATIONS_CLOSE_TYPE void
+#  define FILE_OPERATIONS_CLOSE_VALUE(rc)
+# else
+#  define FILE_OPERATIONS_CLOSE_TYPE int
+#  define FILE_OPERATIONS_CLOSE_VALUE(rc) (rc)
+# endif
+
+
+/* + unstable */
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,23)
+#  define FILE_OPERATIONS_SEEK_PROTOTYPE(name,_inode,_file,_offset,_origin) \
+	int name (struct inode* _inode, struct file* _file, \
+		off_t _offset, int _origin)
+# else
+#  define FILE_OPERATIONS_SEEK_PROTOTYPE(name,_inode,_file,_offset,_origin) \
+	loff_t name (struct file* _file, \
+		loff_t _offset, int _origin)
+# endif
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,23)
+
+#  define COMPAT_FILE_OPERATIONS_INIT( \
+	seek,read,write,readdir, \
+	select,poll, \
+	ioctl,mmap,open, \
+	flush, \
+	release,fsync,fasync,\
+	check_media_change,revalidate, \
+	lock) \
+\
+	{\
+		seek,read,write,readdir, select, ioctl,mmap,open, \
+		release,fsync,fasync,check_media_change,revalidate \
+	}
+
+# else
+
+#  define COMPAT_FILE_OPERATIONS_INIT( \
+	seek,read,write,readdir, \
+	select,poll, \
+	ioctl,mmap,open, \
+	flush, \
+	release,fsync,fasync,\
+	check_media_change,revalidate, \
+	lock) \
+\
+	{\
+		seek,read,write,readdir, poll, ioctl,mmap,open, \
+		flush, release,fsync,fasync,check_media_change,revalidate, lock \
+	}
+
+# endif
+
+/* - unstable */
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,43)
+#  define FILE_INODE(file) ((file)->f_inode)
+# else
+#  define FILE_INODE(file) ((file)->f_dentry->d_inode)
+# endif
+
+# define INODE_MINOR(inode) (MINOR((inode)->i_rdev))
+# define INODE_MAJOR(inode) (MAJOR((inode)->i_rdev))
+
+# define FILE_MINOR(file) (INODE_MINOR(FILE_INODE(file)))
+# define FILE_MAJOR(file) (INODE_MAJOR(FILE_INODE(file)))
+
+
+# if  LINUX_VERSION_CODE < KERNEL_VERSION(2,0,31)
+#  define FILE_OWNER_PID(file) ((file)->f_owner)
+# else
+#  define FILE_OWNER_PID(file) ((file)->f_owner.pid)
+# endif
+
+
+#endif	/* _LINUX_COMPAT_FS_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/hardirq.h linux-2.4.37.9-amithlon/include/linux/compat/hardirq.h
--- linux-2.4.37.9/include/linux/compat/hardirq.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/hardirq.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,28 @@
+/*
+	<linux/compat/hardirq.h>
+
+	some compatibility <asm/hardirq.h> macros
+
+	$Id: hardirq.h,v 1.4 2000/05/21 13:43:55 fedorov Exp $
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+*/
+
+#ifndef  _LINUX_COMPAT_HARDIRQ_H
+# define _LINUX_COMPAT_HARDIRQ_H
+
+# include <linux/compat/version.h>
+
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,30)
+#  include <asm/hardirq.h>
+# else
+#  ifndef __SMP__
+#   include <linux/interrupt.h>
+#   define in_interrupt() (intr_count)
+#  else  /* def __SMP__ */
+#   error 2.0.x SMP not supported
+#  endif /* ndef __SMP__ */
+# endif
+
+#endif	/* _LINUX_COMPAT_HARDIRQ_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/init.h linux-2.4.37.9-amithlon/include/linux/compat/init.h
--- linux-2.4.37.9/include/linux/compat/init.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/init.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,36 @@
+/*
+	<linux/compat/init.h>
+
+	compatibility init section macros
+
+	__init_text, __init_data, __init_func
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: init.h,v 1.11 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_INIT_H
+# define _LINUX_COMPAT_INIT_H
+
+# include <linux/compat/version.h>
+
+
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,16)
+#  include <linux/init.h>
+       /* I like this names */
+#  define __init_text __init
+#  define __init_data __initdata
+#  define __init_func(__arg) __initfunc(__arg)  /* deprecated */
+# else
+#  define __init_text
+#  define __init_data
+#  define __init_func(__arg) __arg              /* deprecated */
+
+#  define __init
+#  define __initdata
+#  define __initfunc(__arg)  __arg              /* deprecated */
+# endif
+
+#endif	/* _LINUX_COMPAT_INIT_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/interrupt.h linux-2.4.37.9-amithlon/include/linux/compat/interrupt.h
--- linux-2.4.37.9/include/linux/compat/interrupt.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/interrupt.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,22 @@
+/*
+	<linux/compat/interrupt.h>
+
+	compatibility <linux/interrupt.h> macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: interrupt.h,v 1.2 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_INTERRUPT_H
+# define _LINUX_COMPAT_INTERRUPT_H
+
+# include <linux/compat/version.h>
+# include <linux/interrupt.h>
+
+# if LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+#  define in_interrupt()	(intr_count)
+# endif
+
+#endif	/* _LINUX_COMPAT_INTERRUPT_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/io.h linux-2.4.37.9-amithlon/include/linux/compat/io.h
--- linux-2.4.37.9/include/linux/compat/io.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/io.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,34 @@
+/*
+	<linux/compat/io.h>
+
+	compatibility ioremap macros
+
+	ioremap, iounmap, ioremap_nocache,
+	virt_to_phys, phys_to_virt, virt_to_bus, bus_to_virt
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: io.h,v 1.12 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef   _LINUX_COMPAT_IO_H
+# define  _LINUX_COMPAT_IO_H
+
+# include <linux/compat/version.h>
+
+# include <asm/io.h>
+
+# if  LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+#  if LINUX_VERSION_CODE <= KERNEL_VERSION(1,3,0)
+#   define ioremap(offset,size)  ((char *)(offset))
+#   define iounmap(addr)
+#  else  /* 2.0.x */
+#   include <linux/mm.h> /* vremap, vfree */
+#   define ioremap(offset,size)  vremap(offset,size)
+#   define iounmap(addr)         vfree(addr)
+#  endif /* <= 1.3.0 */
+#  define ioremap_nocache(offset,size)  ioremap(offset,size)
+# endif  /* <= 2.1.0 */
+
+#endif   /* _LINUX_COMPAT_IO_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/Makefile linux-2.4.37.9-amithlon/include/linux/compat/Makefile
--- linux-2.4.37.9/include/linux/compat/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/Makefile	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,11 @@
+TOPDIR=../..
+include $(TOPDIR)/dfmakefiles/defs.make
+
+NOINSTALL=defined
+
+INCLUDE_DIR=$(includedir)/linux/compat
+INCLUDE_FILES=$(wildcard *.h *.imp)
+
+DONT_INCLUDE_DEPS=defined
+include $(TOPDIR)/dfmakefiles/rules.make
+
diff -uNr linux-2.4.37.9/include/linux/compat/module.h linux-2.4.37.9-amithlon/include/linux/compat/module.h
--- linux-2.4.37.9/include/linux/compat/module.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/module.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,84 @@
+/*
+	<linux/compat/module.h>
+
+	some compatibility macros for linux/module.h
+
+	(C) Dmitry Fedorov, fedorov@inp.nsk.su, 2000
+
+	$Id: module.h,v 1.1 2000/06/24 18:43:30 fedorov Exp $
+*/
+
+
+/*
+usage:
+
+#include <linux/compat/module.h>
+
+[...]
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+static struct symbol_table xx_syms =
+{
+# include <linux/symtab_begin.h>
+#endif
+
+	EXPORT_SYMBOL(symbol1)        EXPORT_SYMBOL_END
+
+	[...]
+
+	EXPORT_SYMBOL(symboln)        EXPORT_SYMBOL_END
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+# include <linux/symtab_end.h>
+};
+#endif
+
+[...]
+
+int xx_init(void)
+{
+	[...]
+
+	if ( (rc=register_chrdev(major, name, &xx_fops)) < 0 )
+		{ ... }
+
+	[...]
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+	if ( (rc=register_symtab(&xx_syms)) !=0 )
+	{
+		printk(KERN_ERR "register_symtab() error, errno=%d\n", -rc);
+		unregister_chrdev(major, name);
+		return rc;
+	}
+# endif
+
+	[...]
+}
+
+*/
+
+
+#ifndef  _LINUX_COMPAT_MODULE_H
+# define _LINUX_COMPAT_MODULE_H
+
+# include <linux/compat/version.h>
+# include <linux/module.h>
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,18)
+#  define MODULE_AUTHOR(name)
+#  define MODULE_DESCRIPTION(desc)
+#  define MODULE_SUPPORTED_DEVICE(name)
+#  define MODULE_PARM(var,type)
+#  define MODULE_PARM_DESC(var,desc)
+
+#  define EXPORT_SYMBOL(symbol) X(symbol)
+#  define EXPORT_SYMBOL_NOVERS(symbol) XNOVERS(symbol)
+#  define EXPORT_SYMBOL_END ,
+# else
+#  define EXPORT_SYMBOL_END ;
+#  define register_symtab(symtab)
+# endif
+
+#endif	/* _LINUX_COMPAT_MODULE_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/null.h linux-2.4.37.9-amithlon/include/linux/compat/null.h
--- linux-2.4.37.9/include/linux/compat/null.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/null.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,20 @@
+/*
+	<linux/compat/null.h>
+
+	$Id: null.h,v 1.2 2000/05/21 13:43:55 fedorov Exp $
+
+	force right NULL
+*/
+
+# undef NULL
+# if defined __GNUG__ && \
+		(__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8))
+#  define NULL __null
+# else
+#  if !defined(__cplusplus)
+#   define NULL ((void*)0)
+#  else
+#   define NULL 0
+#  endif
+# endif
+
diff -uNr linux-2.4.37.9/include/linux/compat/poll.h linux-2.4.37.9-amithlon/include/linux/compat/poll.h
--- linux-2.4.37.9/include/linux/compat/poll.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/poll.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,26 @@
+/*
+	<linux/compat/poll.h>
+
+	compatibility <linux/poll.h> macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: poll.h,v 1.4 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_POLL_H
+# define _LINUX_COMPAT_POLL_H
+
+# include <linux/compat/version.h>
+
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,23)
+#  include <linux/poll.h>
+
+#  if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,89)
+#   define poll_wait(f,wq,w) poll_wait((wq),(w))
+#  endif
+
+# endif
+
+#endif	/* _LINUX_COMPAT_POLL_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/processor.h linux-2.4.37.9-amithlon/include/linux/compat/processor.h
--- linux-2.4.37.9/include/linux/compat/processor.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/processor.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,26 @@
+/*
+	<linux/compat/processor.h>
+
+	mm_segment_t compatibility
+
+	(C) 2000, Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: processor.h,v 1.2 2000/07/13 12:47:07 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_PROCESSOR_H
+# define _LINUX_COMPAT_PROCESSOR_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/null.h>
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,0)
+   typedef unsigned long mm_segment_t;
+# else
+   /* asm/processor.h does not includes all of needed headers */
+#  include <linux/sched.h>
+#  include <asm/processor.h>	/* mm_segment_t */
+# endif
+
+#endif	/* _LINUX_COMPAT_PROCESSOR_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/proc_fs.h linux-2.4.37.9-amithlon/include/linux/compat/proc_fs.h
--- linux-2.4.37.9/include/linux/compat/proc_fs.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/proc_fs.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,32 @@
+/*
+	<linux/compat/proc_fs.h>
+
+	proc_register_dynamic() compatibility
+
+	Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: proc_fs.h,v 1.3 2000/07/31 10:45:25 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_PROC_FS_H
+# define _LINUX_COMPAT_PROC_FS_H
+
+# include <linux/compat/version.h>
+# include <linux/proc_fs.h>
+
+# if LINUX_VERSION_CODE > KERNEL_VERSION(2,1,0)
+#  ifdef CONFIG_PROC_FS
+
+extern inline int proc_register_dynamic(
+	struct proc_dir_entry* parent,
+	struct proc_dir_entry* child)
+{
+	child->low_ino = 0;
+	return proc_register(parent, child);
+}
+
+#  endif
+# endif
+
+#endif	/* _LINUX_COMPAT_PROC_FS_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/.release linux-2.4.37.9-amithlon/include/linux/compat/.release
--- linux-2.4.37.9/include/linux/compat/.release	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/.release	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,45 @@
+$Revision: 1.11 $
+$Date: 2000/07/31 10:56:26 $
+$Author: fedorov $
+
+$Log: .release,v $
+Revision 1.11  2000/07/31 10:56:26  fedorov
+module.h, processor.h created;
+file.h: fcheck_task(), fput_compat(), __fput_compat() added;
+system.h: xchg_compat() added (xchg() bug fixing)
+
+Revision 1.10  2000/05/25 07:47:46  fedorov
+all: header format slightly changed;
+atomic.h: ATOMIC_INIT(i) added;
+proc_fs.h: created;
+{sched,tqueue,uaccess,wait}.h: null.h included
+
+Revision 1.9  2000/05/09 09:53:38  fedorov
+errno.h: last change has error; fixed
+
+Revision 1.8  2000/05/08 12:47:12  fedorov
+errno.h: ENOMEDIUM, EMEDIUMTYPE support become arch depended
+
+Revision 1.7  2000/04/08 08:48:20  fedorov
+---
+
+Revision 1.6  2000/02/24 10:04:54  fedorov
+uaccess.h: typo fixed in COPY_TO_USER_NOCHECK() macro
+
+Revision 1.5  2000/02/14 09:54:07  fedorov
+sched.{h,imp}: schedule_timeout(), interruptible_sleep_on_timeout() added
+
+Revision 1.4  2000/01/21 15:43:48  fedorov
+errno.h added: ENOMEDIUM,EMEDIUMTYPE absent in kernels < 2.0.32
+fs.h: file->f_owner support added for kernels < 2.0.31
+
+Revision 1.3  2000/01/20 15:19:08  fedorov
+extra #include removed
+
+Revision 1.2  1999/12/18 13:08:26  fedorov
+NEED_RESCHED defined in sched.h
+
+Revision 1.1  1999/12/03 06:34:56  fedorov
+second public release.
+
+
diff -uNr linux-2.4.37.9/include/linux/compat/sched.h linux-2.4.37.9-amithlon/include/linux/compat/sched.h
--- linux-2.4.37.9/include/linux/compat/sched.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/sched.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,84 @@
+/*
+	<linux/compat/sched.h>
+
+	some compatibility macros for linux/sched.h
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: sched.h,v 1.10 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_SCHED_H
+# define _LINUX_COMPAT_SCHED_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/null.h>
+# include <linux/sched.h>
+
+
+/*
+You are using a 2.2.x kernel? Then use
+  if (signal_pending(current))
+instead of your code. current->blocked has been changed to an array
+to make more than 32 signals possible, and ~ can't be used on that.
+*/
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,57)
+#  define signal_pending(p)  ((p)->signal & ~(p)->blocked)
+# endif
+
+
+/* + unstable */
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,110)
+#  define NEED_RESCHED (need_resched)
+# else
+#  define NEED_RESCHED (current->need_resched)	/* need lock? $$$ */
+#endif
+/* - unstable */
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,127)
+#  define MAX_SCHEDULE_TIMEOUT	LONG_MAX
+
+/* returns rest of timer */
+long schedule_timeout(long timeout);
+
+#  include <linux/compat/wait.h>	/* wait_queue_head_t */
+
+/* returns rest of timer */
+long interruptible_sleep_on_timeout(wait_queue_head_t* p, long timeout);
+
+# endif
+
+
+/* + unstable names */
+/* Open file table structure. */
+
+/* returns -EMFILE if amount of files exceeded or fd arg. */
+extern inline int check_max_fd(struct files_struct* files, int fd)
+{
+	return
+#if   LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,12)
+		(fd >= files->max_fdset || fd >= files->max_fds)
+#elif LINUX_VERSION_CODE >  KERNEL_VERSION(2,1,0)
+		(fd >= files->max_fds)
+#else	/* 2.0.x */
+		(fd >= NR_OPEN)
+#endif
+		? -EMFILE : fd;
+}
+
+extern inline ulong open_fds_bits(struct files_struct* files, int fd_set_nr)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,12)
+	return files->open_fds->fds_bits[fd_set_nr];
+#else
+	return files->open_fds.fds_bits[fd_set_nr];
+#endif
+}
+
+/* - unstable names */
+
+
+#endif	/* _LINUX_COMPAT_SCHED_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/sched.imp linux-2.4.37.9-amithlon/include/linux/compat/sched.imp
--- linux-2.4.37.9/include/linux/compat/sched.imp	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/sched.imp	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,65 @@
+/*
+	<linux/compat/sched.imp>
+
+	some compatibility macros for linux/sched.h
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: sched.imp,v 1.2 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_SCHED_IMP
+# define _LINUX_COMPAT_SCHED_IMP
+
+# include <linux/compat/sched.h>
+# include <linux/kernel.h>	/* printk() */
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,127)
+
+/* returns rest of timer */
+long schedule_timeout(long timeout)
+{
+	long expire;
+
+	if (timeout==MAX_SCHEDULE_TIMEOUT)
+	{
+		schedule();
+		return timeout;
+	}
+
+	if (timeout < 0)
+	{
+		printk(KERN_ERR "schedule_timeout: wrong timeout "
+			"value %lx from %p\n", timeout, __builtin_return_address(0));
+		return 0;
+	}
+
+	expire = jiffies + timeout;
+	current->timeout = expire;
+
+	schedule();
+
+	timeout = expire - jiffies;
+	return timeout < 0 ? 0 : timeout;
+}
+
+
+/* returns rest of timer */
+long interruptible_sleep_on_timeout(wait_queue_head_t* p, long timeout)
+{
+	DECLARE_WAITQUEUE(wait, current);
+
+	current->state = TASK_INTERRUPTIBLE;
+	add_wait_queue(p, &wait);
+	timeout = schedule_timeout(timeout);
+	remove_wait_queue(p, &wait);
+
+	return timeout;
+}
+
+# endif	/* LINUX_VERSION_CODE < KERNEL_VERSION(2,1,127) */
+
+
+#endif	/* _LINUX_COMPAT_SCHED_IMP */
+
diff -uNr linux-2.4.37.9/include/linux/compat/smp_lock.h linux-2.4.37.9-amithlon/include/linux/compat/smp_lock.h
--- linux-2.4.37.9/include/linux/compat/smp_lock.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/smp_lock.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,30 @@
+/*
+	<linux/compat/smp_lock.h>
+
+	compatibility smp_lock macros
+
+	$Id: smp_lock.h,v 1.5 2000/05/21 13:43:55 fedorov Exp $
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+*/
+
+#ifndef  _LINUX_COMPAT_SMPLOCK_H
+# define _LINUX_COMPAT_SMPLOCK_H
+
+# include <linux/compat/version.h>
+
+# if LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+#  ifndef __SMP__
+#   define lock_kernel()                  do { } while(0)
+#   define unlock_kernel()                do { } while(0)
+#   define release_kernel_lock(task, cpu) do { } while(0)
+#   define reacquire_kernel_lock(task)    do { } while(0)
+#  else
+#   error 2.0.x SMP not supported
+#  endif
+# else
+#  include <linux/smp_lock.h>
+# endif
+
+#endif	/* _LINUX_COMPAT_SMPLOCK_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/spinlock.h linux-2.4.37.9-amithlon/include/linux/compat/spinlock.h
--- linux-2.4.37.9/include/linux/compat/spinlock.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/spinlock.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,95 @@
+/*
+	<linux/compat/spinlock.h>
+
+	compatibility spin lock macros
+
+	$Id: spinlock.h,v 1.5 2000/05/21 13:43:55 fedorov Exp $
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+*/
+
+#ifndef  _LINUX_COMPAT_SPINLOCK_H
+# define _LINUX_COMPAT_SPINLOCK_H
+
+# include <linux/compat/version.h>
+
+# if LINUX_VERSION_CODE <= KERNEL_VERSION(2,1,0)
+
+#  ifndef __SMP__
+
+/* Gcc-2.7.x has a nasty bug with empty initializers. */
+#   if (__GNUC__ > 2) || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8)
+     typedef struct { } spinlock_t;
+#    define SPIN_LOCK_UNLOCKED (spinlock_t) { }
+#   else
+     typedef struct { int gcc_is_buggy; } spinlock_t;
+#    define SPIN_LOCK_UNLOCKED (spinlock_t) { 0 }
+#   endif
+
+#   define spin_lock_init(lock)   do { } while(0)
+#   define spin_lock(lock)        do { } while(0)
+#   define spin_trylock(lock)     (1)
+#   define spin_unlock_wait(lock) do { } while(0)
+#   define spin_unlock(lock)      do { } while(0)
+#   define spin_lock_irq(lock)    cli()
+#   define spin_unlock_irq(lock)  sti()
+
+#   define spin_lock_irqsave(lock, flags) \
+        do { save_flags(flags); cli(); } while (0)
+
+#   define spin_unlock_irqrestore(lock, flags) \
+        restore_flags(flags)
+
+/*
+ * Read-write spinlocks, allowing multiple readers
+ * but only one writer.
+ *
+ * NOTE! it is quite common to have readers in interrupts
+ * but no interrupt writers. For those circumstances we
+ * can "mix" irq-safe locks - any writer needs to get a
+ * irq-safe write-lock, but readers can get non-irqsafe
+ * read-locks.
+ *
+ * Gcc-2.7.x has a nasty bug with empty initializers.
+ */
+#   if (__GNUC__ > 2) || (__GNUC__ == 2 && __GNUC_MINOR__ >= 8)
+     typedef struct { } rwlock_t;
+#    define RW_LOCK_UNLOCKED (rwlock_t) { }
+#   else
+     typedef struct { int gcc_is_buggy; } rwlock_t;
+#    define RW_LOCK_UNLOCKED (rwlock_t) { 0 }
+#   endif
+
+#   define read_lock(lock)        do { } while(0)
+#   define read_unlock(lock)      do { } while(0)
+#   define write_lock(lock)       do { } while(0)
+#   define write_unlock(lock)     do { } while(0)
+#   define read_lock_irq(lock)    cli()
+#   define read_unlock_irq(lock)  sti()
+#   define write_lock_irq(lock)   cli()
+#   define write_unlock_irq(lock) sti()
+
+#   define read_lock_irqsave(lock, flags) \
+        do { save_flags(flags); cli(); } while (0)
+
+#   define read_unlock_irqrestore(lock, flags) \
+        restore_flags(flags)
+
+#   define write_lock_irqsave(lock, flags)	\
+        do { save_flags(flags); cli(); } while (0)
+
+#   define write_unlock_irqrestore(lock, flags) \
+        restore_flags(flags)
+
+#  else  /* def __SMP__ */
+
+#   error 2.0.x SMP not supported
+
+#  endif /* ndef __SMP__ */
+
+# else   /* LINUX_VERSION_CODE > KERNEL_VERSION(2,1,0) */
+#  include <linux/spinlock.h>
+# endif
+
+#endif	/* _LINUX_COMPAT_SPINLOCK_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/system.h linux-2.4.37.9-amithlon/include/linux/compat/system.h
--- linux-2.4.37.9/include/linux/compat/system.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/system.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,40 @@
+/*
+	<linux/compat/system.h>
+
+	some compatibility macros for asm/system.h
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: system.h,v 1.9 2000/07/31 10:47:36 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_SYSTEM_H
+# define _LINUX_COMPAT_SYSTEM_H
+
+# include <linux/compat/version.h>
+# include <asm/system.h>
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,0)
+#  define rmb() mb()
+#  define wmb() mb()
+
+#  define __cli() cli()
+#  define __sti() sti()
+
+#  define __save_flags(x) save_flags(x)
+#  define __restore_flags(x) restore_flags(x)
+# endif
+
+
+/* xchg() macro was buggy! */
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,4,0)
+#  define xchg_compat(ptr,v) \
+	({ __typeof__(*(ptr)) volatile t = xchg((ptr),(v)); t; })
+# else
+#  define xchg_compat(ptr,v) xchg((ptr),(v))
+# endif
+
+
+#endif	/* _LINUX_COMPAT_SYSTEM_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/tqueue.h linux-2.4.37.9-amithlon/include/linux/compat/tqueue.h
--- linux-2.4.37.9/include/linux/compat/tqueue.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/tqueue.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,31 @@
+/*
+	<linux/compat/tqueue.h>
+
+	compatibility task queue handling (bottom-halves) macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: tqueue.h,v 1.7 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_TQUEUE_H
+# define _LINUX_COMPAT_TQUEUE_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/null.h>
+# include <linux/tqueue.h>
+
+
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,0)
+
+void queue_task_irq    (struct tq_struct*, task_queue*);
+void queue_task_irq_off(struct tq_struct*, task_queue*);
+
+#  define queue_task_irq(bh,tq)     queue_task(bh,tq)
+#  define queue_task_irq_off(bh,tq) queue_task(bh,tq)
+
+# endif
+
+
+#endif	/* _LINUX_COMPAT_TQUEUE_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/uaccess.h linux-2.4.37.9-amithlon/include/linux/compat/uaccess.h
--- linux-2.4.37.9/include/linux/compat/uaccess.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/uaccess.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,173 @@
+/*
+	<linux/compat/uaccess.h>
+
+	compatibility user space memory access macros
+
+	GET_USER, PUT_USER, GET_USER_NOCHECK, PUT_USER_NOCHECK
+	COPY_FROM_USER, COPY_TO_USER,
+	COPY_FROM_USER_NOCHECK, COPY_TO_USER_NOCHECK,
+	clear_user, strlen_user, strncpy_from_user
+
+	to do: put_user_ret, get_user_ret,
+	       __clear_user, __strncpy_from_user (no check)
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: uaccess.h,v 1.20 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_UACCESS_H
+# define _LINUX_COMPAT_UACCESS_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/null.h>
+
+
+
+/*
+ * These are the main single-value transfer routines.
+ * "Overloaded" macros, automatically use the right size
+ * if we just have the right pointer type.
+ *
+ * The "xxx_NOCHECK" versions of the user access functions are versions
+ * that do not verify the address space.
+ *
+ * get_user and put_user has different "prototypes" in 2.0 and 2.1 kernels.
+ *
+ * err  GET_USER(x,addr);
+ * err  PUT_USER(x,addr);
+ * void GET_USER_NOCHECK(x,addr);
+ * void PUT_USER_NOCHECK(x,addr);
+ *
+ * get_user and put_user returns 0 for success and -EFAULT for bad access.
+ */
+
+
+/*
+ * Copy from/to userspace
+ *
+ * COPY_FROM_USER and COPY_TO_USER returns the number of bytes they failed
+ * to copy (so zero is a successful return).
+ */
+
+extern inline unsigned long
+COPY_FROM_USER(void* kdst, const void* usrc, unsigned long len);
+
+extern inline unsigned long
+COPY_TO_USER  (void* udst, const void* ksrc, unsigned long len);
+
+extern inline void
+COPY_FROM_USER_NOCHECK(void* kdst, const void* usrc, unsigned long len);
+
+extern inline void
+COPY_TO_USER_NOCHECK  (void* udst, const void* ksrc, unsigned long len);
+
+
+/*
+ * clear_user, strlen_user, strncpy_from_user
+ *
+ * to do: __clear_user, __strncpy_from_user (no check)
+ *
+ * These functions are absent in 2.0 kernels.
+ *
+ * Implementation of these functions for 2.0 kernels is very slow -
+ * clear_user copy of each byte and string functions does verify_area
+ * on each byte.
+ *
+ * extern unsigned long clear_user(void* dst, unsigned long len);
+ *   Zeroing userspace.
+ *   Return the number of bytes that failed to zeroing.
+ *
+ * extern long strlen_user(const char *str);
+ *   Return the length of a string (including the ending 0).
+ *   Return 0 for error.
+ *
+ * extern long strncpy_from_user(char *dst, const char *src, long count);
+ *   Copy a null terminated string from userspace.
+ *   Return length of string w/o ending 0 or -EFAULT for error.
+ *
+ */
+
+
+/*
+ * memset of user space ($$ my extension $$).
+ * Return the number of bytes that failed to set.
+ */
+unsigned long memset_user(void* udst, int c, unsigned long len);
+
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,4)
+
+#  include <linux/mm.h>		/* verify_area, VERIFY_READ, VERIFY_WRITE */
+#  include <asm/segment.h>	/* put_user, get_user, ... */
+
+
+#  define GET_USER(x, addr) \
+( \
+ verify_area(VERIFY_READ, addr, sizeof(*(addr))) \
+	? : (x=get_user(addr), 0) \
+)
+
+#  define PUT_USER(x, addr) \
+( \
+ verify_area(VERIFY_WRITE, addr, sizeof(*(addr))) \
+	? : (put_user(x,addr), 0) \
+)
+
+#  define GET_USER_NOCHECK(x, addr) (x=get_user(addr))
+
+#  define PUT_USER_NOCHECK(x, addr) (put_user(x,addr))
+
+
+
+#  define COPY_FROM_USER(kdst, usrc, len) \
+( \
+ !verify_area(VERIFY_READ, usrc, len) \
+ ? (memcpy_fromfs(kdst, usrc, len), 0UL) \
+ : len \
+)
+
+#  define COPY_TO_USER(udst, ksrc, len) \
+( \
+ !verify_area(VERIFY_WRITE, udst, len) \
+ ? (memcpy_tofs(udst, ksrc, len), 0UL) \
+ : len \
+)
+
+#  define COPY_FROM_USER_NOCHECK(kdst, usrc, len) \
+	memcpy_fromfs(kdst, usrc, len)
+
+#  define COPY_TO_USER_NOCHECK(udst, ksrc, len) \
+	memcpy_tofs(udst, ksrc, len)
+
+
+
+extern long strncpy_from_user(char *kdst, const char *usrc, long count);
+extern long strlen_user(const char *ustr);
+
+extern inline unsigned long clear_user(void* udst, unsigned long len)
+{
+	return memset_user(udst, 0, len);
+}
+
+
+# else	/* LINUX_VERSION_CODE >= KERNEL_VERSION(2,1,4) */
+
+#  include <asm/uaccess.h>
+
+#  define GET_USER(x,addr) get_user(x,addr)
+#  define PUT_USER(x,addr) put_user(x,addr)
+#  define GET_USER_NOCHECK(x,addr) __get_user(x,addr)
+#  define PUT_USER_NOCHECK(x,addr) __put_user(x,addr)
+#
+#  define COPY_FROM_USER(kdst,usrc,len) copy_from_user(kdst,usrc,len)
+#  define COPY_TO_USER(udst,ksrc,len)   copy_to_user(udst,ksrc,len)
+#  define COPY_FROM_USER_NOCHECK(kdst,usrc,len) __copy_from_user(kdst,usrc,len)
+#  define COPY_TO_USER_NOCHECK(udst,ksrc,len)   __copy_to_user(udst,ksrc,len)
+
+# endif	/* LINUX_VERSION_CODE < KERNEL_VERSION(2,1,4) */
+
+
+#endif	/* _LINUX_COMPAT_UACCESS_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/uaccess.imp linux-2.4.37.9-amithlon/include/linux/compat/uaccess.imp
--- linux-2.4.37.9/include/linux/compat/uaccess.imp	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/uaccess.imp	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,100 @@
+/*
+	<linux/compat/uaccess.imp>
+
+	compatibility user space memory access macros
+
+	clear_user, strlen_user, strncpy_from_user
+
+	to do: __clear_user, __strncpy_from_user (no check)
+
+	These functions are absent in 2.0 kernels.
+
+	Implementation of these functions for 2.0 kernels is very slow -
+	clear_user copy of each byte and string functions does verify_area
+	on each byte.
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: uaccess.imp,v 1.10 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_UACCESS_IMP
+# define _LINUX_COMPAT_UACCESS_IMP
+
+# include <linux/compat/uaccess.h>
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,1,4)
+
+
+/*
+ * Return the length of a string (including the ending 0).
+ * Return 0 for error.
+ */
+long strlen_user(const char *ustr)
+{
+	char c;
+	long size=0;
+
+	do
+	{
+		if (GET_USER(c, ustr)) return 0L;
+		++size; ++ustr;
+	} while (c != '\0');
+
+	return size;
+}
+
+
+/*
+ * Copy a null terminated string from userspace.
+ * Return length of string w/o ending 0 or -EFAULT for error.
+ */
+long strncpy_from_user(char *kdst, const char *usrc, long count)
+{
+	long len;
+	int rc;
+
+	for (len=0; count--; kdst++,usrc++,len++)
+	{
+		if ((rc=GET_USER(*kdst, usrc)))
+			return rc;
+		if ( *kdst == '\0' )
+			break;
+	}
+
+	return len;
+}
+
+
+# endif	/* _LINUX_VERSION_CODE < KERNEL_VERSION(2,1,4) */
+
+
+/*
+ * memset of user space ($$ my extension $$).
+ * Return the number of bytes that failed to set.
+ */
+unsigned long memset_user(void* udst, int c, unsigned long len)
+{
+	char buf[64];
+
+	size_t q = len / sizeof(buf);
+	size_t r = len % sizeof(buf);
+
+	if (verify_area(VERIFY_WRITE, udst, len))
+		return len;
+
+	memset(buf, c, sizeof(buf));
+
+	for ( ; q--; ((char*)udst) += sizeof(buf) )
+		COPY_TO_USER_NOCHECK(udst, buf, sizeof(buf));
+
+	if (r!=0)
+		COPY_TO_USER_NOCHECK(udst, buf, r);
+
+	return 0;
+}
+
+
+#endif	/* _LINUX_COMPAT_UACCESS_IMP */
+
diff -uNr linux-2.4.37.9/include/linux/compat/version.h linux-2.4.37.9-amithlon/include/linux/compat/version.h
--- linux-2.4.37.9/include/linux/compat/version.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/version.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,38 @@
+/*
+	<linux/compat/version.h>
+
+	Kernel version macros
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: version.h,v 1.8 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_VERSION_H
+# define _LINUX_COMPAT_VERSION_H
+
+# include <linux/version.h>	/* LINUX_VERSION_CODE, KERNEL_VERSION() */
+
+# ifndef  KERNEL_VERSION
+#  define KERNEL_VERSION(v, p, s)	( ((v)<<16) | ((p)<<8) | (s) )
+# endif
+
+
+/* + unstable */
+
+# ifndef  LVC_VERSION
+#  define LVC_VERSION(lvc)     ( ((lvc)>>16) & 0xFF )
+# endif
+
+# ifndef  LVC_PATCHLEVEL
+#  define LVC_PATCHLEVEL(lvc)  ( ((lvc)>>8) & 0xFF )
+# endif
+
+# ifndef  LVC_SUBLEVEL
+#  define LVC_SUBLEVEL(lvc)    ( (lvc) & 0xFF )
+# endif
+
+/* - unstable */
+
+#endif	/* _LINUX_COMPAT_KERNEL_VERSION_H */
+
diff -uNr linux-2.4.37.9/include/linux/compat/wait.h linux-2.4.37.9-amithlon/include/linux/compat/wait.h
--- linux-2.4.37.9/include/linux/compat/wait.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/compat/wait.h	2010-06-17 08:31:52.000000000 -0400
@@ -0,0 +1,40 @@
+/*
+	<linux/compat/wait.h>
+
+	compatibility wait queue macros
+
+	to do: init_waitqueue_entry()
+
+	compiled from kernel sources by Dmitry Fedorov, fedorov@inp.nsk.su
+
+	$Id: wait.h,v 1.9 2000/05/21 13:43:55 fedorov Exp $
+*/
+
+#ifndef  _LINUX_COMPAT_WAIT_H
+# define _LINUX_COMPAT_WAIT_H
+
+# include <linux/compat/version.h>
+# include <linux/compat/null.h>
+# include <linux/wait.h>
+
+
+# if LINUX_VERSION_CODE < KERNEL_VERSION(2,3,1)
+
+typedef struct wait_queue wait_queue_t;
+typedef wait_queue_t* wait_queue_head_t;
+
+extern inline void init_waitqueue_head(wait_queue_head_t *q)
+{
+	*q = NULL;
+}
+
+#  define wait_queue_active waitqueue_active
+
+#  define DECLARE_WAITQUEUE(name, task) wait_queue_t name = { task, NULL }
+
+#  define DECLARE_WAIT_QUEUE_HEAD(name) wait_queue_head_t name = NULL
+
+# endif
+
+#endif	/* _LINUX_COMPAT_WAIT_H */
+
diff -uNr linux-2.4.37.9/include/linux/df/assert.h linux-2.4.37.9-amithlon/include/linux/df/assert.h
--- linux-2.4.37.9/include/linux/df/assert.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/df/assert.h	2010-02-18 08:21:10.000000000 -0500
@@ -0,0 +1,85 @@
+/*
+	<linux/df/assert.h>
+	$Id: assert.h,v 1.10 2000/07/13 12:56:42 fedorov Exp $
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su, 1999
+	Copying policy: GNU LGPL
+*/
+
+#ifndef  _LINUX_DF_ASSERT_H
+# define _LINUX_DF_ASSERT_H
+
+
+# ifdef NDEBUG
+
+#  define assert(expr)            ((void) 0)
+#  define assert_retvoid(expr)    ((void) 0)
+#  define assert_retval(expr,val) ((void) 0)
+#  define assert_goto(expr,label) ((void) 0)
+#  define assert_break(expr)      ((void) 0)
+
+# else	/* ndef NDEBUG */
+
+#  include <linux/kernel.h>		/* printk */
+
+#  define __assertion_failed(expr) \
+	( printk(KERN_ERR "%s:%u: %s: Assertion `%s' failed.\n", \
+		__FILE__, __LINE__, __PRETTY_FUNCTION__, #expr) )
+
+#  define __assert(expr) \
+	( (expr) ? 1 : (__assertion_failed(expr), 0) )
+
+#  define assert(expr) ((void) __assert(expr))
+
+#  define assert_retvoid(expr) \
+	do { if (!__assert(expr)) return; } while(0)
+
+#  define assert_retval(expr,val) \
+	do { if (!__assert(expr)) return (val); } while(0)
+
+#  define assert_goto(expr,label) \
+	do { if (!__assert(expr)) goto label; } while(0)
+
+#  define assert_break(expr) \
+	if (!__assert(expr)) break
+
+# endif	/* def NDEBUG */
+
+
+#endif	/* _LINUX_DF_ASSERT_H */
+
+
+/*
+$Log: assert.h,v $
+Revision 1.10  2000/07/13 12:56:42  fedorov
+---
+
+Revision 1.9  1999/10/09 03:47:28  fedorov
+__assertion_failed() created and used.
+
+Revision 1.8  1999/09/25 10:53:00  fedorov
+---
+
+Revision 1.7  1999/09/25 10:45:56  fedorov
+do while(0) construct used instead of statement expression (GNU extension);
+assert_goto() and assert_break() added.
+
+Revision 1.6  1999/09/21 07:09:30  fedorov
+comment style changed; dependence on pr.h removed.
+
+Revision 1.5  1999/08/05 14:27:26  fedorov
+header and history formats changed
+
+Revision 1.4  1999/05/02 10:32:07  fedorov
+extra multiple inclusion protection removed
+
+Revision 1.3  1999/04/15 08:49:59  fedorov
+include-once file macro names uppercased
+
+Revision 1.2  1999/04/11 18:55:33  fedorov
+assert_ret* created
+
+Revision 1.1  1999/04/07 06:31:50  fedorov
+created
+*/
+
diff -uNr linux-2.4.37.9/include/linux/df/pr.h linux-2.4.37.9-amithlon/include/linux/df/pr.h
--- linux-2.4.37.9/include/linux/df/pr.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/df/pr.h	2010-02-18 08:21:10.000000000 -0500
@@ -0,0 +1,73 @@
+/*
+	<linux/df/pr.h>
+	$Id: pr.h,v 1.12 2000/07/13 12:56:44 fedorov Exp $
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su, 1999
+	Copying policy: GNU LGPL
+*/
+
+#ifndef  _LINUX_DF_PR_H
+# define _LINUX_DF_PR_H
+
+# include <linux/kernel.h>		/* printk, pr_debug, pr_info */
+
+
+# ifndef  pr_error
+#  define pr_error(fmt,arg...)	printk(KERN_ERR fmt,##arg)
+# endif
+
+# ifndef  pr_warn
+#  define pr_warn(fmt,arg...)	printk(KERN_WARNING fmt,##arg)
+# endif
+
+# ifndef  pr_notice
+#  define pr_notice(fmt,arg...)	printk(KERN_NOTICE fmt,##arg)
+# endif
+
+# ifndef  pr_endl
+static inline void pr_endl(void)
+{
+	printk("\n");
+}
+# endif
+
+
+#endif	/* _LINUX_DF_PR_H */
+
+
+/*
+$Log: pr.h,v $
+Revision 1.12  2000/07/13 12:56:44  fedorov
+---
+
+Revision 1.11  1999/09/25 10:53:00  fedorov
+---
+
+Revision 1.10  1999/09/21 07:10:57  fedorov
+comment style changed; extern "C" removed; pr_endl() added.
+
+Revision 1.9  1999/08/05 14:27:27  fedorov
+header and history formats changed
+
+Revision 1.8  1999/05/19 06:36:34  fedorov
+pr_begin_* macros removed
+
+Revision 1.7  1999/05/18 19:03:51  fedorov
+pr_begin_* redefined as function macros
+
+Revision 1.6  1999/05/02 10:32:07  fedorov
+extra multiple inclusion protection removed
+
+Revision 1.5  1999/04/15 08:49:17  fedorov
+_ prepended to file macros
+
+Revision 1.4  1999/03/02 15:47:51  fedorov
+extern "C"
+
+Revision 1.2  1999/02/07 10:55:50  fedorov
+pr_begin_* added
+
+Revision 1.1  1999/02/05 16:05:44  fedorov
+created
+*/
+
diff -uNr linux-2.4.37.9/include/linux/df/save_flags_and_cli.h linux-2.4.37.9-amithlon/include/linux/df/save_flags_and_cli.h
--- linux-2.4.37.9/include/linux/df/save_flags_and_cli.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/df/save_flags_and_cli.h	2010-02-18 08:21:10.000000000 -0500
@@ -0,0 +1,24 @@
+/*
+	<linux/df/save_flags_and_cli.h>
+	$Id: save_flags_and_cli.h,v 1.9 2000/07/13 12:56:44 fedorov Exp $
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su, 1999
+	Copying policy: GNU LGPL
+*/
+
+#ifndef  _LINUX_DF_SAVE_FLAGS_AND_CLI_H
+# define _LINUX_DF_SAVE_FLAGS_AND_CLI_H
+
+# include <asm/system.h>
+
+/* assembler output of this will be optimized very well */
+extern inline unsigned long save_flags_and_cli(void)
+{
+	unsigned long flags;
+	save_flags(flags);
+	cli();
+	return flags;
+}
+
+#endif	/* _LINUX_DF_SAVE_FLAGS_AND_CLI_H */
+
diff -uNr linux-2.4.37.9/include/linux/df/strdup.h linux-2.4.37.9-amithlon/include/linux/df/strdup.h
--- linux-2.4.37.9/include/linux/df/strdup.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/df/strdup.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,30 @@
+/*
+	<linux/df/strdup.h>
+	$Id: strdup.h,v 1.4 2000/07/13 12:56:44 fedorov Exp $
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su, 1999
+	Copying policy: GNU LGPL
+*/
+
+#ifndef  _LINUX_DF_STRDUP_H
+# define _LINUX_DF_STRDUP_H
+
+char* strdup(const char* src);
+
+#endif	/* _LINUX_DF_STRDUP_H */
+
+/*
+$Log: strdup.h,v $
+Revision 1.4  2000/07/13 12:56:44  fedorov
+---
+
+Revision 1.3  1999/11/08 12:12:42  fedorov
+header format changed
+
+Revision 1.2  1999/09/25 10:53:00  fedorov
+---
+
+Revision 1.1  1999/09/21 07:39:43  fedorov
+created
+*/
+
diff -uNr linux-2.4.37.9/include/linux/df/strdup.imp linux-2.4.37.9-amithlon/include/linux/df/strdup.imp
--- linux-2.4.37.9/include/linux/df/strdup.imp	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/df/strdup.imp	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,48 @@
+/*
+	<linux/df/strdup.imp>
+	$Id: strdup.imp,v 1.5 2000/07/13 12:56:44 fedorov Exp $
+
+	(C) Dmitry A. Fedorov, fedorov@inp.nsk.su, 1999
+	Copying policy: GNU LGPL
+*/
+
+#ifndef  _LINUX_DF_STRDUP_IMP
+# define _LINUX_DF_STRDUP_IMP
+
+# include <linux/df/strdup.h>
+
+# include <linux/string.h>	/* strlen(), memcpy() */
+# include <linux/malloc.h>	/* kmalloc            */
+
+
+char* strdup(const char* src)
+{
+	size_t len=strlen(src)+1;
+	char* dst=kmalloc(len,GFP_KERNEL);
+	if (dst!=NULL)
+		memcpy(dst,src,len);
+	return dst;
+}
+
+
+#endif	/* _LINUX_DF_STRDUP_IMP */
+
+
+/*
+$Log: strdup.imp,v $
+Revision 1.5  2000/07/13 12:56:44  fedorov
+---
+
+Revision 1.4  1999/12/21 11:45:47  fedorov
+int -> size_t
+
+Revision 1.3  1999/11/08 12:12:42  fedorov
+header format changed
+
+Revision 1.2  1999/09/25 10:53:00  fedorov
+---
+
+Revision 1.1  1999/09/21 07:39:43  fedorov
+created
+*/
+
diff -uNr linux-2.4.37.9/include/linux/keyboard.h linux-2.4.37.9-amithlon/include/linux/keyboard.h
--- linux-2.4.37.9/include/linux/keyboard.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/keyboard.h	2010-02-18 08:21:03.000000000 -0500
@@ -327,6 +327,18 @@
 #define K_INCRCONSOLE	K(KT_SPEC,17)
 #define K_SPAWNCONSOLE	K(KT_SPEC,18)
 #define K_BARENUMLOCK	K(KT_SPEC,19)
+#define K_DECRVOL       K(KT_SPEC,20)
+#define K_INCRVOL       K(KT_SPEC,21)
+#define K_DECRLINE      K(KT_SPEC,22)
+#define K_INCRLINE      K(KT_SPEC,23)
+#define K_DECRCD        K(KT_SPEC,24)
+#define K_INCRCD        K(KT_SPEC,25)
+#define K_DECRPCM       K(KT_SPEC,26)
+#define K_INCRPCM       K(KT_SPEC,27)
+#define K_MUTEVOL       K(KT_SPEC,28)
+#define K_MUTELINE      K(KT_SPEC,29)
+#define K_MUTECD        K(KT_SPEC,30)
+#define K_MUTEPCM       K(KT_SPEC,31)
 
 #define K_ALLOCATED	K(KT_SPEC,126) /* dynamically allocated keymap */
 #define K_NOSUCHMAP	K(KT_SPEC,127) /* returned by KDGKBENT */
diff -uNr linux-2.4.37.9/include/linux/linux_logo.h linux-2.4.37.9-amithlon/include/linux/linux_logo.h
--- linux-2.4.37.9/include/linux/linux_logo.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/linux_logo.h	2010-02-17 20:04:05.000000000 -0500
@@ -18,1403 +18,1436 @@
  * but should contain %s to display the version
  */
 
-#ifndef __HAVE_ARCH_LINUX_LOGO
-#define LINUX_LOGO_COLORS	187
-#endif
-
-#ifdef INCLUDE_LINUX_LOGO_DATA
-
-#ifndef __HAVE_ARCH_LINUX_LOGO
+#if 0
+#if LINUX_LOGO_COLORS == 214
 
-unsigned char linux_logo_red[] __initdata = {
-    0x00, 0x06, 0x0a, 0x0e, 0x16, 0x1a, 0x1e, 0x22,
-    0x12, 0x00, 0x2a, 0x36, 0x42, 0x4e, 0x4a, 0x56,
-    0x26, 0x46, 0x2e, 0x32, 0x52, 0x3a, 0x02, 0x65,
-    0x5e, 0x3e, 0x74, 0x8a, 0xa2, 0x9a, 0x86, 0xc6,
-    0xc3, 0x65, 0xbb, 0xd2, 0xda, 0xd6, 0xe2, 0xf6,
-    0xfd, 0xae, 0x7b, 0xdd, 0xea, 0x6a, 0xaa, 0xe7,
-    0xbe, 0x5a, 0xee, 0x9e, 0x95, 0x80, 0x76, 0x79,
-    0x62, 0x36, 0x9a, 0xe2, 0xec, 0xe1, 0xb8, 0xd7,
-    0xaf, 0x25, 0xbc, 0xc0, 0xef, 0xea, 0xe8, 0xe8,
-    0xf5, 0xf1, 0xda, 0xd3, 0x79, 0xdb, 0xf4, 0xf6,
-    0xf6, 0xf6, 0xe2, 0x3d, 0xb4, 0xce, 0xe6, 0xee,
-    0xf6, 0x68, 0xd8, 0xec, 0xf5, 0xc6, 0xc8, 0x9c,
-    0x89, 0xd2, 0xee, 0xcb, 0xb9, 0xd2, 0x66, 0x5e,
-    0x8b, 0xbe, 0xa8, 0xd5, 0xca, 0xb6, 0xae, 0x9c,
-    0xc5, 0xbe, 0xbe, 0xca, 0x90, 0xb2, 0x9a, 0xa8,
-    0xb6, 0xf2, 0xce, 0xfa, 0xb2, 0x6e, 0xa6, 0x12,
-    0x4a, 0x8e, 0xf2, 0xf6, 0xf6, 0xee, 0xb5, 0xe4,
-    0xf1, 0x26, 0x9a, 0xea, 0xf6, 0xe0, 0xd2, 0x16,
-    0x9a, 0x2e, 0x70, 0xd6, 0x46, 0x7c, 0xb4, 0x62,
-    0xd6, 0xa3, 0x74, 0xa7, 0xa2, 0xca, 0xe0, 0xae,
-    0xbe, 0xce, 0xa3, 0x8e, 0x6d, 0x8e, 0x32, 0xaf,
-    0x50, 0x9e, 0x5b, 0x8a, 0x98, 0x82, 0x7a, 0x82,
-    0x56, 0x7c, 0x8a, 0x56, 0x5e, 0x86, 0x6a, 0x52,
-    0x59, 0x64, 0x5e,
+unsigned char linux_logo_red[]  = {
+  0x02, 0x9E, 0xE9, 0xC4, 0x50, 0xC9, 0xC4, 0xE9,
+  0x65, 0xE3, 0xC2, 0x25, 0xA4, 0xEC, 0x90, 0xA6,
+  0xC4, 0x6A, 0xD1, 0xF3, 0x12, 0xED, 0xA0, 0xC2,
+  0xB8, 0xD5, 0xDB, 0xD2, 0x3E, 0x16, 0xEB, 0x54,
+  0xA9, 0xCD, 0xF5, 0x0A, 0xBA, 0xB3, 0xDC, 0x74,
+  0xCE, 0xF6, 0xD3, 0xC5, 0xEA, 0xB8, 0xED, 0x5E,
+  0xE5, 0x26, 0xF4, 0xA9, 0x82, 0x94, 0xE6, 0x38,
+  0xF2, 0x0F, 0x7F, 0x49, 0xE5, 0xF4, 0xD3, 0xC3,
+  0xC2, 0x1E, 0xD5, 0xC6, 0xA4, 0xFA, 0x0A, 0xBA,
+  0xD4, 0xEB, 0xEA, 0xEC, 0xA8, 0xBC, 0xB4, 0xDC,
+  0x84, 0xE4, 0xCE, 0xEC, 0x92, 0xCD, 0xDC, 0x8B,
+  0xCC, 0x1E, 0xF6, 0xB2, 0x60, 0x2A, 0x96, 0x52,
+  0x0F, 0xBD, 0xFA, 0xCC, 0xB8, 0x7A, 0x4C, 0xD2,
+  0x06, 0xEF, 0x44, 0x64, 0xF4, 0xBA, 0xCE, 0xE6,
+  0x8A, 0x6F, 0x3C, 0x70, 0x7C, 0x9C, 0xBA, 0xDF,
+  0x2C, 0x4D, 0x3B, 0xCA, 0xDE, 0xCE, 0xEE, 0x46,
+  0x6A, 0xAC, 0x96, 0xE5, 0x96, 0x7A, 0xBA, 0xB6,
+  0xE2, 0x7E, 0xAA, 0xC5, 0x96, 0x9E, 0xC2, 0xAA,
+  0xDA, 0x35, 0xB6, 0x82, 0x88, 0xBE, 0xC2, 0x9E,
+  0xB4, 0xD5, 0xDA, 0x9C, 0xA0, 0xD0, 0xA8, 0xC7,
+  0x72, 0xF2, 0xDB, 0x76, 0xDC, 0xBE, 0xAA, 0xF4,
+  0x87, 0x2F, 0x53, 0x8E, 0x36, 0xCE, 0xE6, 0xCA,
+  0xCB, 0xE4, 0xD6, 0xAA, 0x42, 0x5D, 0xB4, 0x59,
+  0x1C, 0xC8, 0x96, 0x6C, 0xDA, 0xCE, 0xE6, 0xCB,
+  0x96, 0x16, 0xFA, 0xBE, 0xAE, 0xFE, 0x6E, 0xD6,
+  0xCE, 0xB6, 0xE5, 0xED, 0xDB, 0xDC, 0xF4, 0x72,
+  0x1F, 0xAE, 0xE6, 0xC2, 0xCA, 0xC4
 };
 
-unsigned char linux_logo_green[] __initdata = {
-    0x00, 0x06, 0x0a, 0x0e, 0x16, 0x1a, 0x1e, 0x22,
-    0x12, 0x00, 0x2a, 0x36, 0x42, 0x4e, 0x4a, 0x56,
-    0x26, 0x46, 0x2e, 0x32, 0x52, 0x3a, 0x02, 0x65,
-    0x5e, 0x3e, 0x74, 0x8a, 0xa2, 0x9a, 0x86, 0xc6,
-    0xc3, 0x62, 0xbb, 0xd2, 0xda, 0xd6, 0xe2, 0xf6,
-    0xfd, 0xae, 0x7b, 0xdd, 0xea, 0x6a, 0xaa, 0xe7,
-    0xbe, 0x5a, 0xee, 0x9e, 0x95, 0x80, 0x62, 0x5c,
-    0x4e, 0x26, 0x72, 0xaa, 0xba, 0xaf, 0x90, 0xae,
-    0x92, 0x1a, 0xa4, 0x85, 0xb6, 0xbe, 0xc3, 0xc8,
-    0xcf, 0xd0, 0xc2, 0xce, 0x57, 0xa2, 0xd6, 0xda,
-    0xda, 0xd7, 0xb8, 0x2a, 0x7b, 0x91, 0xae, 0xca,
-    0xda, 0x45, 0x9e, 0xb2, 0xd7, 0x9b, 0x90, 0x76,
-    0x5c, 0xa2, 0xbe, 0xa6, 0x85, 0x96, 0x4e, 0x46,
-    0x66, 0x92, 0x7a, 0x9a, 0x96, 0x9d, 0x9a, 0x6b,
-    0x8a, 0x8e, 0xb2, 0xca, 0x90, 0xa6, 0x79, 0x7c,
-    0xb6, 0xf2, 0xce, 0xfa, 0xb2, 0x6e, 0xa6, 0x0e,
-    0x36, 0x86, 0xba, 0xbe, 0xe6, 0xcc, 0x8e, 0xb8,
-    0xc4, 0x1e, 0x8e, 0xae, 0xba, 0xb2, 0xa6, 0x12,
-    0x7a, 0x20, 0x64, 0xaa, 0x2f, 0x70, 0x85, 0x46,
-    0xa6, 0x6e, 0x51, 0x72, 0x92, 0xa2, 0xa6, 0x87,
-    0x96, 0xa2, 0x85, 0x7a, 0x6a, 0x6e, 0x22, 0x76,
-    0x36, 0x76, 0x3c, 0x6e, 0x63, 0x53, 0x66, 0x62,
-    0x42, 0x50, 0x56, 0x42, 0x56, 0x56, 0x56, 0x3e,
-    0x51, 0x52, 0x56,
+unsigned char linux_logo_green[]  = {
+  0x02, 0x88, 0xC4, 0x85, 0x44, 0xA2, 0xA8, 0xE5,
+  0x65, 0xA6, 0xC2, 0x24, 0xA4, 0xB4, 0x62, 0x86,
+  0x94, 0x44, 0xD2, 0xB6, 0x12, 0xD4, 0x73, 0x96,
+  0x92, 0x95, 0xB2, 0xC2, 0x36, 0x0E, 0xBC, 0x54,
+  0x75, 0xA5, 0xF5, 0x0A, 0xB2, 0x83, 0xC2, 0x74,
+  0x9B, 0xBD, 0xA2, 0xCA, 0xDA, 0x8C, 0xCB, 0x42,
+  0xAC, 0x12, 0xDA, 0x7B, 0x54, 0x94, 0xD2, 0x24,
+  0xBE, 0x06, 0x65, 0x33, 0xBB, 0xBC, 0xAB, 0x8C,
+  0x92, 0x1E, 0x9B, 0xB6, 0x6E, 0xFB, 0x04, 0xA2,
+  0xC8, 0xBD, 0xAD, 0xEC, 0x92, 0xBC, 0x7B, 0x9D,
+  0x84, 0xC4, 0xC4, 0xB4, 0x6C, 0x93, 0xA3, 0x5E,
+  0x8D, 0x13, 0xD6, 0x82, 0x4C, 0x2A, 0x7A, 0x5A,
+  0x0D, 0x82, 0xBB, 0xCC, 0x8B, 0x6A, 0x3C, 0xBE,
+  0x06, 0xC4, 0x44, 0x45, 0xDB, 0x96, 0xB6, 0xDE,
+  0x8A, 0x4D, 0x3C, 0x5A, 0x7C, 0x9C, 0xAA, 0xCB,
+  0x1C, 0x4D, 0x2E, 0xB2, 0xBE, 0xAA, 0xDE, 0x3E,
+  0x6A, 0xAC, 0x82, 0xE5, 0x72, 0x62, 0x92, 0x9E,
+  0xCA, 0x4A, 0x8E, 0xBE, 0x86, 0x6B, 0xAA, 0x9A,
+  0xBE, 0x34, 0xAB, 0x76, 0x6E, 0x9A, 0x9E, 0x62,
+  0x76, 0xCE, 0xD3, 0x92, 0x7C, 0xB8, 0x7E, 0xC6,
+  0x5E, 0xE2, 0xC3, 0x54, 0xAA, 0x9E, 0x8A, 0xCA,
+  0x63, 0x2D, 0x3B, 0x8E, 0x1A, 0x9E, 0xC2, 0xA6,
+  0xCB, 0xDC, 0xD6, 0x8E, 0x26, 0x5C, 0xB4, 0x45,
+  0x1C, 0xB8, 0x6E, 0x4C, 0xBC, 0xAE, 0xD6, 0x92,
+  0x63, 0x16, 0xF6, 0x8C, 0x7A, 0xFE, 0x6E, 0xBA,
+  0xC6, 0x86, 0xAA, 0xAE, 0xDB, 0xA4, 0xD4, 0x56,
+  0x0E, 0x6E, 0xB6, 0xB2, 0xBE, 0xBE
 };
 
-unsigned char linux_logo_blue[] __initdata = {
-    0x00, 0x06, 0x0a, 0x0e, 0x16, 0x1a, 0x1e, 0x22,
-    0x12, 0x01, 0x2a, 0x36, 0x42, 0x4e, 0x4a, 0x56,
-    0x26, 0x46, 0x2e, 0x32, 0x52, 0x3a, 0x06, 0x65,
-    0x5e, 0x3e, 0x74, 0x8a, 0xa2, 0x9a, 0x86, 0xc6,
-    0xc3, 0x59, 0xbb, 0xd2, 0xda, 0xd6, 0xe2, 0xf6,
-    0xfd, 0xae, 0x7b, 0xdd, 0xea, 0x6a, 0xaa, 0xe7,
-    0xbe, 0x5a, 0xee, 0x9e, 0x95, 0x80, 0x2e, 0x08,
-    0x0a, 0x06, 0x0a, 0x0b, 0x0b, 0x0f, 0x0c, 0x0f,
-    0x3d, 0x09, 0x73, 0x09, 0x0d, 0x0a, 0x10, 0x1e,
-    0x2d, 0x13, 0x86, 0xba, 0x19, 0x0a, 0x36, 0x3c,
-    0x26, 0x14, 0x0d, 0x06, 0x07, 0x0a, 0x0b, 0x0f,
-    0x4a, 0x06, 0x0a, 0x0c, 0x2b, 0x0a, 0x0b, 0x0a,
-    0x06, 0x0a, 0x0a, 0x11, 0x0b, 0x0a, 0x0a, 0x1e,
-    0x0f, 0x0d, 0x0a, 0x0b, 0x22, 0x6a, 0x72, 0x0b,
-    0x0b, 0x22, 0x90, 0xca, 0x90, 0x92, 0x3c, 0x2c,
-    0xb6, 0xf2, 0xce, 0xfa, 0xb2, 0x6e, 0xa6, 0x06,
-    0x0e, 0x6a, 0x0e, 0x0e, 0xbe, 0x5b, 0x2c, 0x3e,
-    0x0e, 0x0a, 0x5a, 0x0d, 0x0e, 0x3e, 0x0a, 0x06,
-    0x2e, 0x06, 0x4e, 0x36, 0x06, 0x58, 0x24, 0x06,
-    0x3a, 0x08, 0x08, 0x07, 0x5e, 0x45, 0x0a, 0x32,
-    0x2e, 0x2a, 0x43, 0x48, 0x5f, 0x2e, 0x06, 0x06,
-    0x07, 0x24, 0x06, 0x32, 0x06, 0x06, 0x46, 0x2e,
-    0x22, 0x06, 0x06, 0x1e, 0x4c, 0x06, 0x3a, 0x22,
-    0x42, 0x34, 0x42,
+unsigned char linux_logo_blue[]  = {
+  0x04, 0x28, 0x10, 0x0B, 0x14, 0x14, 0x74, 0xC7,
+  0x64, 0x0E, 0xC3, 0x24, 0xA4, 0x0C, 0x10, 0x20,
+  0x0D, 0x04, 0xD1, 0x0D, 0x13, 0x22, 0x0A, 0x40,
+  0x14, 0x0C, 0x11, 0x94, 0x0C, 0x08, 0x0B, 0x56,
+  0x09, 0x47, 0xF4, 0x0B, 0x9C, 0x07, 0x54, 0x74,
+  0x0F, 0x0C, 0x0F, 0xC7, 0x6C, 0x14, 0x14, 0x11,
+  0x0B, 0x04, 0x12, 0x0C, 0x05, 0x94, 0x94, 0x0A,
+  0x34, 0x09, 0x14, 0x08, 0x2F, 0x15, 0x19, 0x11,
+  0x28, 0x0C, 0x0B, 0x94, 0x08, 0xFA, 0x08, 0x7C,
+  0xBC, 0x15, 0x0A, 0xEC, 0x64, 0xBB, 0x0A, 0x0C,
+  0x84, 0x2C, 0xA0, 0x15, 0x10, 0x0D, 0x0B, 0x0E,
+  0x0A, 0x07, 0x10, 0x3C, 0x24, 0x2C, 0x28, 0x5C,
+  0x0A, 0x0D, 0x0A, 0xC1, 0x22, 0x4C, 0x10, 0x94,
+  0x04, 0x0F, 0x45, 0x08, 0x31, 0x54, 0x3C, 0xBC,
+  0x8C, 0x09, 0x3C, 0x18, 0x7C, 0x9C, 0x7C, 0x91,
+  0x0C, 0x4D, 0x17, 0x74, 0x0C, 0x48, 0x9C, 0x3C,
+  0x6A, 0xAC, 0x5C, 0xE3, 0x29, 0x3C, 0x2C, 0x7C,
+  0x6C, 0x04, 0x14, 0xA9, 0x74, 0x07, 0x2C, 0x74,
+  0x4C, 0x34, 0x97, 0x5C, 0x38, 0x0C, 0x5C, 0x04,
+  0x0C, 0xBA, 0xBC, 0x78, 0x18, 0x88, 0x24, 0xC2,
+  0x3C, 0xB4, 0x87, 0x0C, 0x14, 0x4C, 0x3C, 0x10,
+  0x17, 0x2C, 0x0A, 0x8C, 0x04, 0x1C, 0x44, 0x2C,
+  0xCD, 0xD8, 0xD4, 0x34, 0x0C, 0x5B, 0xB4, 0x1E,
+  0x1D, 0xAC, 0x24, 0x18, 0x20, 0x5C, 0xB4, 0x1C,
+  0x09, 0x14, 0xFC, 0x0C, 0x10, 0xFC, 0x6C, 0x7C,
+  0xB4, 0x1C, 0x15, 0x17, 0xDB, 0x18, 0x21, 0x24,
+  0x04, 0x04, 0x44, 0x8C, 0x8C, 0xB7
 };
 
-unsigned char linux_logo[] __initdata = {
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22,
-    0x22, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
-    0x26, 0x26, 0x25, 0x28, 0x23, 0x22, 0x21, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x23, 0x25, 0x2a, 0x2b, 0x2c, 0x2d, 0x2d,
-    0x2d, 0x2e, 0x2c, 0x2b, 0x2a, 0x25, 0x28, 0x22,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x24, 0x2a, 0x2c, 0x2f, 0x2c, 0x30, 0x30, 0x24,
-    0x25, 0x27, 0x2b, 0x2c, 0x2f, 0x31, 0x32, 0x25,
-    0x23, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x25,
-    0x33, 0x34, 0x35, 0x21, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x21, 0x2b, 0x2f, 0x2c,
-    0x30, 0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x24, 0x33,
-    0x2d, 0x27, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x21, 0x31,
-    0x2d, 0x32, 0x24, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x21, 0x28, 0x2a, 0x34,
-    0x25, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x23, 0x32, 0x27, 0x21, 0x36,
-    0x2a, 0x2d, 0x2a, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x22, 0x26, 0x2c, 0x35,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x25, 0x2f, 0x37, 0x32, 0x22,
-    0x36, 0x35, 0x31, 0x27, 0x22, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x23, 0x2a, 0x2f, 0x22,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x26, 0x38, 0x38, 0x35, 0x25,
-    0x36, 0x21, 0x2d, 0x2b, 0x24, 0x21, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x21, 0x24, 0x39, 0x39, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x25, 0x2b, 0x30, 0x28, 0x22,
-    0x36, 0x36, 0x27, 0x34, 0x30, 0x23, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x21, 0x26, 0x2d, 0x26, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x22, 0x22, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x2d, 0x33, 0x28, 0x21, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x30, 0x2f, 0x23, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x2b, 0x2c, 0x25, 0x21, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x2a, 0x34, 0x36, 0x36,
-    0x36, 0x21, 0x22, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x21, 0x23, 0x22, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x28, 0x34, 0x27, 0x22, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x32, 0x2f, 0x36, 0x36,
-    0x21, 0x21, 0x24, 0x27, 0x21, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x28, 0x27, 0x22, 0x33, 0x24, 0x36,
-    0x36, 0x36, 0x36, 0x22, 0x2f, 0x2a, 0x23, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x32, 0x2f, 0x36, 0x36,
-    0x30, 0x3a, 0x38, 0x24, 0x24, 0x36, 0x36, 0x36,
-    0x23, 0x2f, 0x3b, 0x3c, 0x3d, 0x30, 0x25, 0x21,
-    0x36, 0x36, 0x36, 0x36, 0x2f, 0x32, 0x23, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x32, 0x2f, 0x36, 0x23,
-    0x3e, 0x3f, 0x40, 0x3a, 0x22, 0x36, 0x36, 0x21,
-    0x41, 0x42, 0x43, 0x44, 0x45, 0x3e, 0x23, 0x21,
-    0x36, 0x36, 0x36, 0x36, 0x2f, 0x33, 0x28, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x29, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x32, 0x2f, 0x36, 0x2b,
-    0x44, 0x40, 0x46, 0x47, 0x35, 0x36, 0x36, 0x26,
-    0x43, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x2e, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x31, 0x35, 0x24, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x32, 0x34, 0x36, 0x4d,
-    0x4e, 0x25, 0x2f, 0x46, 0x4a, 0x22, 0x23, 0x32,
-    0x4f, 0x50, 0x21, 0x31, 0x51, 0x52, 0x53, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x31, 0x35, 0x24, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x29, 0x20, 0x29, 0x29, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x2a, 0x2f, 0x21, 0x3a,
-    0x4d, 0x21, 0x31, 0x54, 0x55, 0x28, 0x30, 0x2b,
-    0x4b, 0x4d, 0x36, 0x23, 0x32, 0x50, 0x3f, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x2e, 0x39, 0x24, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x2a, 0x38, 0x23, 0x37,
-    0x55, 0x36, 0x28, 0x3a, 0x56, 0x57, 0x57, 0x58,
-    0x3c, 0x4d, 0x36, 0x36, 0x36, 0x40, 0x40, 0x21,
-    0x36, 0x36, 0x36, 0x36, 0x2e, 0x39, 0x24, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x29, 0x29, 0x29, 0x20, 0x29, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x30, 0x51, 0x23, 0x35,
-    0x43, 0x25, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e,
-    0x5f, 0x60, 0x61, 0x36, 0x31, 0x47, 0x3b, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x31, 0x2c, 0x25, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x30, 0x2f, 0x23, 0x22,
-    0x40, 0x62, 0x63, 0x5d, 0x64, 0x65, 0x66, 0x67,
-    0x68, 0x69, 0x66, 0x5e, 0x6a, 0x6b, 0x2a, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x33, 0x2e, 0x26, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x27, 0x2f, 0x23, 0x36,
-    0x6c, 0x63, 0x6d, 0x64, 0x5c, 0x66, 0x69, 0x6e,
-    0x6f, 0x70, 0x71, 0x69, 0x69, 0x72, 0x6c, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x33, 0x34, 0x27, 0x22,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x27, 0x34, 0x26, 0x73,
-    0x74, 0x75, 0x76, 0x64, 0x65, 0x77, 0x69, 0x78,
-    0x70, 0x71, 0x71, 0x71, 0x72, 0x5f, 0x5e, 0x21,
-    0x36, 0x36, 0x36, 0x36, 0x25, 0x38, 0x2a, 0x23,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x26, 0x2d, 0x33, 0x79,
-    0x63, 0x7a, 0x7b, 0x5c, 0x66, 0x69, 0x6e, 0x7c,
-    0x71, 0x71, 0x69, 0x7d, 0x7e, 0x7a, 0x7f, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x21, 0x51, 0x2b, 0x28,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x26, 0x2d, 0x32, 0x24,
-    0x80, 0x81, 0x64, 0x82, 0x77, 0x69, 0x71, 0x71,
-    0x69, 0x83, 0x84, 0x85, 0x7a, 0x85, 0x86, 0x36,
-    0x21, 0x2b, 0x23, 0x36, 0x36, 0x39, 0x2e, 0x26,
-    0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x27, 0x2d, 0x33, 0x21,
-    0x87, 0x88, 0x89, 0x72, 0x67, 0x66, 0x5f, 0x89,
-    0x8a, 0x63, 0x85, 0x8b, 0x8c, 0x8d, 0x41, 0x36,
-    0x36, 0x2d, 0x3a, 0x35, 0x36, 0x24, 0x51, 0x32,
-    0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x30, 0x2f, 0x33, 0x21,
-    0x55, 0x8e, 0x8f, 0x8a, 0x7d, 0x5e, 0x90, 0x7e,
-    0x75, 0x75, 0x90, 0x62, 0x40, 0x3f, 0x49, 0x23,
-    0x36, 0x24, 0x3a, 0x3a, 0x24, 0x36, 0x2e, 0x31,
-    0x26, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x21, 0x28, 0x33, 0x37, 0x25, 0x22,
-    0x3b, 0x50, 0x8e, 0x8f, 0x90, 0x7e, 0x90, 0x63,
-    0x74, 0x91, 0x92, 0x42, 0x93, 0x4b, 0x45, 0x2c,
-    0x36, 0x36, 0x33, 0x39, 0x21, 0x36, 0x22, 0x51,
-    0x33, 0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x22, 0x27, 0x2e, 0x2e, 0x36, 0x21,
-    0x94, 0x3f, 0x50, 0x95, 0x96, 0x8f, 0x8f, 0x97,
-    0x8e, 0x42, 0x50, 0x43, 0x47, 0x48, 0x48, 0x98,
-    0x21, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x39,
-    0x2e, 0x27, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x22, 0x24, 0x2b, 0x38, 0x28, 0x36, 0x32,
-    0x4c, 0x4b, 0x50, 0x50, 0x50, 0x42, 0x42, 0x50,
-    0x50, 0x40, 0x45, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x23,
-    0x2f, 0x2b, 0x24, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x28, 0x32, 0x51, 0x32, 0x28, 0x21, 0x98,
-    0x48, 0x47, 0x9a, 0x50, 0x50, 0x50, 0x50, 0x50,
-    0x9a, 0x4f, 0x9b, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x93, 0x23, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x2a, 0x2f, 0x2a, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x23, 0x30, 0x2e, 0x2c, 0x36, 0x21, 0x51, 0x9b,
-    0x48, 0x48, 0x52, 0x3f, 0x50, 0x50, 0x40, 0x4b,
-    0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x2d, 0x31, 0x27, 0x23, 0x21, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
-    0x27, 0x2c, 0x2d, 0x21, 0x36, 0x28, 0x44, 0x48,
-    0x48, 0x48, 0x48, 0x47, 0x46, 0x4f, 0x47, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x9c, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x28, 0x51, 0x39, 0x26, 0x22, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x25,
-    0x35, 0x51, 0x28, 0x36, 0x36, 0x9d, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x9b, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x4f, 0x28, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x28, 0x38, 0x2b, 0x25, 0x22, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x24, 0x33,
-    0x51, 0x25, 0x36, 0x36, 0x23, 0x40, 0x9b, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x9b, 0x99, 0x2b, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x30, 0x2f, 0x33, 0x24, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x21, 0x23, 0x30, 0x34,
-    0x27, 0x36, 0x36, 0x36, 0x2a, 0x40, 0x47, 0x48,
-    0x48, 0x48, 0x48, 0x9b, 0x99, 0x99, 0x9b, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x9b, 0x47, 0x52,
-    0x46, 0x4f, 0x37, 0x21, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x30, 0x34, 0x2a, 0x23,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x22, 0x25, 0x39, 0x2c,
-    0x36, 0x36, 0x36, 0x21, 0x31, 0x4e, 0x9a, 0x4c,
-    0x47, 0x9b, 0x9b, 0x52, 0x46, 0x4f, 0x52, 0x9b,
-    0x9b, 0x9b, 0x47, 0x4f, 0x45, 0x9a, 0x93, 0x93,
-    0x3f, 0x93, 0x98, 0x28, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x39, 0x2c, 0x26,
-    0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x23, 0x2a, 0x34, 0x28,
-    0x36, 0x36, 0x36, 0x22, 0x38, 0x98, 0x44, 0x99,
-    0x9b, 0x48, 0x48, 0x9b, 0x4c, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x47, 0x52, 0x46, 0x43, 0x93,
-    0x40, 0x40, 0x43, 0x53, 0x21, 0x23, 0x33, 0x23,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x21, 0x2f, 0x32,
-    0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x21, 0x24, 0x2b, 0x31, 0x36,
-    0x36, 0x22, 0x36, 0x24, 0x9e, 0x4f, 0x9b, 0x48,
-    0x48, 0x48, 0x48, 0x9b, 0x99, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x47,
-    0x4f, 0x9a, 0x3f, 0x46, 0x38, 0x36, 0x21, 0x30,
-    0x26, 0x36, 0x36, 0x36, 0x36, 0x36, 0x39, 0x2c,
-    0x25, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x22, 0x26, 0x2e, 0x33, 0x36,
-    0x25, 0x25, 0x36, 0x4d, 0x52, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x47, 0x44, 0x93, 0x43, 0x23, 0x36, 0x36,
-    0x26, 0x24, 0x36, 0x36, 0x36, 0x36, 0x28, 0x2f,
-    0x2a, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x23, 0x2a, 0x51, 0x24, 0x36,
-    0x2a, 0x36, 0x28, 0x44, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x9b, 0x4b, 0x44, 0x37, 0x36, 0x23,
-    0x28, 0x30, 0x22, 0x36, 0x36, 0x36, 0x36, 0x2d,
-    0x35, 0x24, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x21, 0x28, 0x2b, 0x34, 0x36, 0x25,
-    0x24, 0x36, 0x4a, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x9b, 0x52, 0x3f, 0x21, 0x30,
-    0x35, 0x25, 0x30, 0x36, 0x36, 0x36, 0x36, 0x32,
-    0x2d, 0x26, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x22, 0x26, 0x2e, 0x35, 0x36, 0x2a,
-    0x36, 0x24, 0x4f, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x9b, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x47, 0x32, 0x30,
-    0x2a, 0x23, 0x30, 0x23, 0x36, 0x36, 0x36, 0x21,
-    0x2f, 0x32, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x23, 0x2a, 0x51, 0x28, 0x28, 0x25,
-    0x36, 0x3a, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x9b, 0x52, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x38, 0x21,
-    0x36, 0x36, 0x22, 0x27, 0x36, 0x36, 0x36, 0x36,
-    0x2e, 0x35, 0x24, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x22, 0x25, 0x2c, 0x34, 0x36, 0x30, 0x21,
-    0x23, 0x43, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x47, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x94, 0x36,
-    0x36, 0x36, 0x36, 0x32, 0x36, 0x36, 0x36, 0x36,
-    0x2a, 0x2e, 0x26, 0x22, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x23, 0x2a, 0x51, 0x25, 0x21, 0x2a, 0x36,
-    0x2e, 0x9b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x99, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x98, 0x36,
-    0x36, 0x36, 0x36, 0x32, 0x36, 0x36, 0x36, 0x36,
-    0x22, 0x2f, 0x30, 0x22, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x22, 0x25, 0x2c, 0x34, 0x36, 0x24, 0x28, 0x36,
-    0x54, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4c, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x9a, 0x36,
-    0x36, 0x36, 0x36, 0x30, 0x36, 0x36, 0x36, 0x36,
-    0x21, 0x2f, 0x32, 0x23, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x28, 0x32, 0x2f, 0x28, 0x36, 0x27, 0x22, 0x21,
-    0x43, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4c, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4b, 0x21,
-    0x36, 0x36, 0x21, 0x26, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x34, 0x2b, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x25, 0x2c, 0x39, 0x36, 0x36, 0x30, 0x22, 0x25,
-    0x52, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x52, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4f, 0x21,
-    0x36, 0x36, 0x22, 0x26, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x2c, 0x35, 0x24, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x30, 0x2d, 0x21, 0x36, 0x36, 0x32, 0x23, 0x2a,
-    0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x22,
-    0x36, 0x36, 0x24, 0x23, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x2c, 0x39, 0x24, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28,
-    0x33, 0x2e, 0x36, 0x36, 0x23, 0x31, 0x27, 0x39,
-    0x9b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x47, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x23,
-    0x36, 0x36, 0x26, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x2c, 0x39, 0x24, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28,
-    0x2b, 0x39, 0x36, 0x36, 0x36, 0x26, 0x32, 0x31,
-    0x9b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x47, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x46, 0x22,
-    0x36, 0x21, 0x26, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x2c, 0x35, 0x24, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x24,
-    0x35, 0x39, 0x36, 0x36, 0x36, 0x36, 0x26, 0x2d,
-    0x9b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x47, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x9a, 0x36,
-    0x24, 0x27, 0x9f, 0x24, 0x25, 0x28, 0x21, 0x36,
-    0x36, 0x34, 0x2b, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x25,
-    0x39, 0x4d, 0xa0, 0x84, 0x81, 0x57, 0x21, 0x39,
-    0x52, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x47, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x53, 0x28,
-    0x23, 0x36, 0x36, 0x36, 0x21, 0x28, 0x2c, 0x30,
-    0x21, 0x38, 0x33, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x21, 0x22, 0x22, 0x28, 0x30,
-    0x2d, 0xa1, 0x7a, 0xa2, 0xa3, 0xa3, 0x7f, 0x22,
-    0x51, 0x52, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x9b, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0xa4, 0xa5, 0xa5, 0xa6, 0x61,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x30, 0x32,
-    0x25, 0x4d, 0x2b, 0x28, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x23, 0x24, 0x26, 0x30, 0x33, 0x31,
-    0x4d, 0x91, 0x5b, 0xa2, 0xa3, 0xa3, 0xa3, 0x5a,
-    0x21, 0x2e, 0x46, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4f, 0x9b, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0xa7, 0xa8, 0x69, 0x66, 0xa9,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x21, 0x26, 0x25,
-    0x83, 0xaa, 0x2c, 0x25, 0x21, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x28, 0x30, 0x35, 0x2d, 0x2f, 0x37, 0x4a,
-    0x60, 0x85, 0xab, 0xac, 0xa3, 0xa3, 0xa3, 0x82,
-    0x86, 0x36, 0x32, 0x3f, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x4c, 0x99, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0xad, 0xa2, 0xa8, 0xae, 0xaf,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x21, 0x57,
-    0x77, 0x66, 0x34, 0x27, 0x22, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x23, 0x30, 0x31, 0xb0, 0x91, 0x7e, 0x90, 0x90,
-    0x8b, 0x5b, 0xa2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0x5d, 0xb1, 0x36, 0x24, 0x53, 0x9b, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x9b, 0x99, 0xad, 0x64, 0x5c, 0x8b, 0xb1,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x73, 0x5d,
-    0x82, 0x5c, 0xb2, 0x2a, 0x23, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x24, 0x2b, 0xb0, 0x8b, 0x5b, 0x76, 0x5b, 0x5b,
-    0x7b, 0xa2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa8, 0x5e, 0x22, 0x36, 0x21, 0x3a, 0x99, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x4f, 0x3f, 0xb3, 0x7b, 0x7b, 0x85, 0x80,
-    0x9f, 0x36, 0x36, 0x36, 0x21, 0xb4, 0x7e, 0x7b,
-    0x64, 0x64, 0xb5, 0x35, 0x24, 0x21, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x26, 0x31, 0xb6, 0x5b, 0x64, 0xa2, 0xa2, 0xac,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0x66, 0xb7, 0x36, 0x36, 0x36, 0x2c, 0x4b,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x9a, 0x3f, 0xb8, 0x76, 0x76, 0x7a, 0x63,
-    0xb9, 0xba, 0x86, 0xba, 0xbb, 0x90, 0x5b, 0x64,
-    0xa2, 0xa2, 0xbc, 0x2d, 0x27, 0x23, 0x21, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x26, 0x2d, 0x91, 0x5b, 0x64, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa8, 0x83, 0xaf, 0x36, 0x36, 0x36, 0x30,
-    0x44, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x9b, 0x9a, 0x3f, 0xbd, 0x5b, 0x7b, 0xbe, 0x85,
-    0x7e, 0x90, 0x63, 0x90, 0x85, 0x5b, 0xa2, 0xa3,
-    0xa3, 0xac, 0x5d, 0xb5, 0x39, 0x26, 0x23, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x26, 0x2d, 0xbf, 0xbe, 0x64, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa8, 0x88, 0x36, 0x36, 0x36, 0x36,
-    0x2d, 0x9b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x9b, 0x45, 0x3f, 0xc0, 0x6d, 0x7b, 0xab, 0xbe,
-    0x7a, 0x8b, 0x8b, 0x7a, 0x5b, 0x64, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa2, 0xc1, 0x37, 0x35, 0x26, 0x23,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x26, 0x2e, 0xbf, 0x7a, 0x7b, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa8, 0x72, 0x73, 0x36, 0x36, 0x36,
-    0x24, 0x52, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x46, 0x42, 0xb6, 0x7a, 0x7b, 0x64, 0x7b,
-    0x76, 0x5b, 0x5b, 0x76, 0x7b, 0xa2, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xac, 0x64, 0xc1, 0x4d, 0x2c, 0x27,
-    0x23, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x25, 0x31, 0xc2, 0x8b, 0x7b, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa8, 0x89, 0x9f, 0x36, 0x36,
-    0x32, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x4b, 0x2f, 0x8f, 0x7a, 0x7b, 0xa2, 0xac,
-    0xa2, 0x64, 0x64, 0xa2, 0xa2, 0xac, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0x5d, 0xc3, 0x2c,
-    0x26, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x25, 0x31, 0xc2, 0x85, 0x7b, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0x66, 0x57, 0x27, 0x4d,
-    0x4b, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x99, 0x34, 0x9f, 0xb9, 0x7a, 0x7b, 0xa2, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0xc2,
-    0x32, 0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
-    0x26, 0x2d, 0xc2, 0x85, 0x7b, 0xac, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa8, 0x5f, 0x92, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x44,
-    0x35, 0x36, 0xaf, 0xbb, 0x7a, 0x7b, 0xac, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xac, 0xa2, 0xc0,
-    0x2b, 0x24, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
-    0x30, 0x2f, 0xb6, 0x8b, 0x7b, 0xac, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0x66, 0x89, 0x45,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x48, 0x9b, 0x4e, 0x25,
-    0x36, 0x36, 0x61, 0xb9, 0x6d, 0x64, 0xac, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xac, 0x7b, 0xbe, 0xc3,
-    0x32, 0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28,
-    0x33, 0xc4, 0x63, 0xbe, 0xa2, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0x72, 0x81, 0xc5,
-    0x46, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
-    0x48, 0x48, 0x48, 0x48, 0x3f, 0x2c, 0x36, 0x36,
-    0x36, 0x36, 0xc6, 0x8f, 0x6d, 0x64, 0xac, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa2, 0xab, 0x8b, 0xb0, 0x2c,
-    0x26, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x24,
-    0x35, 0x96, 0x75, 0xab, 0xa2, 0xac, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xac, 0x7b, 0x81, 0xb9,
-    0x73, 0x3b, 0x44, 0x9b, 0x48, 0x48, 0x48, 0x9b,
-    0x99, 0x43, 0x94, 0x2c, 0x21, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x73, 0xb9, 0x7a, 0x7b, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0x64, 0x76, 0x7a, 0x91, 0xb5, 0x31, 0x30,
-    0x28, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x24,
-    0x39, 0x97, 0x75, 0xbe, 0x7b, 0x64, 0xa2, 0xa2,
-    0xac, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0x7b, 0x7a, 0xc7,
-    0xc8, 0x36, 0x21, 0x26, 0x2b, 0x39, 0x33, 0x30,
-    0x23, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x21, 0xc8, 0xbb, 0x8b, 0x7b, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa2, 0x64, 0x64,
-    0x76, 0x85, 0xbf, 0xb5, 0x34, 0x2b, 0x27, 0x28,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x28,
-    0x33, 0xc9, 0x63, 0x7e, 0x7a, 0x6d, 0xbe, 0x5b,
-    0x76, 0x7b, 0x64, 0x64, 0xa2, 0xac, 0xa3, 0xa3,
-    0xa3, 0xa3, 0xa3, 0xa3, 0xac, 0x76, 0x85, 0xb9,
-    0x79, 0x22, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x21, 0xca, 0xbb, 0x75, 0x76, 0xa2, 0xa3,
-    0xa3, 0xa3, 0xac, 0xa2, 0x64, 0x76, 0xbe, 0x8b,
-    0xb6, 0xb5, 0x2f, 0x35, 0x30, 0x24, 0x22, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
-    0x27, 0x31, 0xcb, 0xc9, 0xbb, 0x74, 0x63, 0x90,
-    0x7e, 0x75, 0x8b, 0x6d, 0xbe, 0x76, 0x64, 0xa2,
-    0xac, 0xac, 0xac, 0xac, 0x64, 0x7a, 0x84, 0xcc,
-    0x79, 0x9f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
-    0x36, 0x21, 0xc8, 0xcc, 0x63, 0x6d, 0x7b, 0x64,
-    0xac, 0xa2, 0x64, 0x7b, 0xbe, 0x75, 0x63, 0x96,
-    0x38, 0x39, 0x2a, 0x24, 0x23, 0x21, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x28, 0x27, 0x35, 0x2d, 0x41, 0xb5, 0xc5, 0x8f,
-    0xb9, 0xbb, 0xc7, 0x74, 0x84, 0x90, 0x85, 0x6d,
-    0x5b, 0x7b, 0x7b, 0xab, 0x6d, 0x90, 0xb9, 0xcd,
-    0xca, 0x22, 0x36, 0x36, 0x28, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x25, 0x36,
-    0x36, 0x21, 0xb4, 0x80, 0xc7, 0x7e, 0x6d, 0x76,
-    0xab, 0x76, 0x6d, 0x85, 0x63, 0xb9, 0xb5, 0x34,
-    0x33, 0x26, 0x23, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x23, 0x24, 0x27, 0x2a, 0x35, 0x2e, 0x2f,
-    0x41, 0xce, 0xcf, 0x6c, 0x80, 0xcc, 0xb9, 0x74,
-    0x84, 0x90, 0x75, 0x7e, 0x74, 0x8f, 0xcd, 0x79,
-    0xc6, 0x2b, 0x9d, 0x41, 0x2f, 0x34, 0x2d, 0x2d,
-    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x34, 0x2f, 0x38,
-    0x4d, 0x37, 0xd0, 0xd1, 0x8f, 0x74, 0x63, 0x7e,
-    0x75, 0x7e, 0x63, 0xc7, 0x88, 0xc4, 0x31, 0x2a,
-    0x24, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x26, 0x30,
-    0x33, 0x39, 0x2e, 0x51, 0x41, 0xb2, 0x6c, 0xd1,
-    0x80, 0xcc, 0xcc, 0xcc, 0xd2, 0xd1, 0xb7, 0xd3,
-    0x41, 0x34, 0x35, 0x32, 0x30, 0x27, 0x27, 0x27,
-    0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x30, 0x2a,
-    0x2b, 0x34, 0xd4, 0xca, 0xd5, 0x8f, 0xbb, 0xc7,
-    0xc7, 0xbb, 0xcc, 0x6c, 0x41, 0x39, 0x27, 0x28,
-    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x22,
-    0x28, 0x24, 0x26, 0x2a, 0x33, 0x2c, 0x2f, 0x41,
-    0xd6, 0xb7, 0x79, 0x79, 0x79, 0xca, 0xd7, 0x51,
-    0x39, 0x30, 0x24, 0x23, 0x22, 0x22, 0x22, 0x22,
-    0x22, 0x22, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23,
-    0x24, 0x2a, 0x31, 0xd8, 0xc8, 0x79, 0xd1, 0x80,
-    0xd5, 0xba, 0xd9, 0x2f, 0x35, 0x26, 0x23, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x22, 0x23, 0x28, 0x25, 0x30, 0x2b,
-    0x31, 0x2f, 0xd4, 0xd8, 0xd8, 0x2f, 0x2e, 0x33,
-    0x26, 0x23, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x21, 0x28, 0x27, 0x35, 0x34, 0xd8, 0xd8, 0xd8,
-    0xda, 0xd4, 0x2e, 0x33, 0x25, 0x23, 0x21, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x23, 0x28,
-    0x26, 0x30, 0x32, 0x2b, 0x33, 0x2a, 0x26, 0x28,
-    0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x21, 0x23, 0x25, 0x30, 0x33, 0x35, 0x35,
-    0x2b, 0x2a, 0x26, 0x28, 0x22, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21,
-    0x21, 0x22, 0x23, 0x28, 0x28, 0x23, 0x22, 0x21,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x21, 0x23, 0x28, 0x24, 0x24,
-    0x28, 0x23, 0x22, 0x21, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+unsigned char linux_logo[]  = {
+  0xBF, 0x95, 0x90, 0xCB, 0x95, 0xA1, 0x2C, 0x2C,
+  0x95, 0x55, 0xCB, 0x90, 0xCB, 0x95, 0x2C, 0x95,
+  0xCB, 0x47, 0x94, 0x95, 0xA1, 0xD6, 0xD6, 0x2C,
+  0x90, 0x47, 0x70, 0x2C, 0x6D, 0x2A, 0x6D, 0xD6,
+  0xA1, 0x2C, 0x55, 0x95, 0x2C, 0x2C, 0x55, 0x55,
+  0x95, 0xA1, 0xA1, 0xA1, 0x6D, 0xBF, 0x2A, 0x2A,
+  0xBF, 0x83, 0xBF, 0x95, 0x90, 0xCB, 0x95, 0xA1,
+  0x2C, 0x2C, 0x95, 0x55, 0xCB, 0x90, 0xCB, 0x95,
+  0x2C, 0x95, 0xCB, 0x47, 0x94, 0x95, 0xA1, 0xD6,
+  0xD6, 0x2C, 0x90, 0x47, 0x70, 0x2C, 0x6D, 0x2A,
+  0x95, 0x47, 0x47, 0x90, 0x2C, 0x2C, 0x2C, 0x95,
+  0x55, 0x55, 0xCB, 0x90, 0xCB, 0x55, 0x55, 0xCB,
+  0x47, 0xE6, 0x70, 0x95, 0xD6, 0xD6, 0xA1, 0x2C,
+  0x55, 0x55, 0x95, 0xD6, 0x6D, 0xD6, 0xA1, 0x2C,
+  0x2C, 0x95, 0x55, 0x95, 0x95, 0x95, 0x2C, 0x2C,
+  0xA1, 0xA1, 0x2C, 0x2C, 0xA1, 0xD6, 0xD6, 0xD6,
+  0xD6, 0xD6, 0x95, 0x47, 0x47, 0x90, 0x2C, 0x2C,
+  0x2C, 0x95, 0x55, 0x55, 0xCB, 0x90, 0xCB, 0x55,
+  0x55, 0xCB, 0x47, 0xE6, 0x70, 0x95, 0xD6, 0xD6,
+  0xA1, 0x2C, 0x55, 0x55, 0x95, 0xD6, 0x6D, 0xD6,
+  0x90, 0x47, 0x47, 0x70, 0x2C, 0xA1, 0x2C, 0x95,
+  0x55, 0x55, 0x90, 0xCB, 0x55, 0x55, 0x55, 0x70,
+  0x94, 0x70, 0x95, 0xA1, 0xD6, 0xD6, 0xA1, 0x2C,
+  0x95, 0x95, 0x2C, 0xA1, 0xD6, 0xA1, 0x2C, 0x2C,
+  0x95, 0x55, 0xCB, 0x95, 0xD6, 0xA1, 0x2C, 0x95,
+  0xA1, 0xD6, 0xD6, 0xA1, 0xA1, 0xD6, 0xA1, 0xA1,
+  0xA1, 0x2C, 0x90, 0x47, 0x47, 0x70, 0x2C, 0xA1,
+  0x2C, 0x95, 0x55, 0x55, 0x90, 0xCB, 0x55, 0x55,
+  0x55, 0x70, 0x94, 0x70, 0x95, 0xA1, 0xD6, 0xD6,
+  0xA1, 0x2C, 0x95, 0x95, 0x2C, 0xD6, 0xD6, 0xA1,
+  0x94, 0xA0, 0x47, 0x55, 0x2C, 0xD6, 0xA1, 0x95,
+  0x55, 0x55, 0xCB, 0xCB, 0x55, 0x55, 0xCB, 0xCB,
+  0x55, 0x95, 0x2C, 0xA1, 0xD6, 0xD6, 0xA1, 0x2C,
+  0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x95,
+  0x55, 0x55, 0x2C, 0x3F, 0x80, 0x20, 0x88, 0x88,
+  0x88, 0x20, 0x88, 0xB1, 0x2C, 0xA1, 0x2C, 0x2C,
+  0x95, 0xCB, 0x94, 0xA0, 0x47, 0x55, 0x2C, 0xD6,
+  0xA1, 0x95, 0x55, 0x55, 0xCB, 0xCB, 0x55, 0x55,
+  0xCB, 0xCB, 0x55, 0x95, 0x2C, 0xA1, 0xD6, 0xD6,
+  0xA1, 0x2C, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x94, 0x94, 0x70, 0x2C, 0xA1, 0xD6, 0xA1, 0x2C,
+  0x55, 0x55, 0xCB, 0x55, 0x55, 0x55, 0x55, 0x55,
+  0x95, 0x2C, 0xD6, 0xD6, 0xD6, 0xA1, 0x2C, 0x95,
+  0x55, 0x55, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x2C, 0x94, 0x80, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x88, 0x92, 0xA1, 0x95,
+  0x55, 0x90, 0x94, 0x94, 0x70, 0x2C, 0xA1, 0xD6,
+  0xA1, 0x2C, 0x55, 0x55, 0xCB, 0x55, 0x55, 0x55,
+  0x55, 0x55, 0x95, 0x2C, 0xD6, 0xD6, 0xD6, 0xA1,
+  0x2C, 0x95, 0x55, 0x55, 0x55, 0x95, 0x95, 0x95,
+  0x70, 0x70, 0x55, 0x2C, 0xD6, 0xD6, 0xA1, 0x95,
+  0x55, 0x90, 0xCB, 0xCB, 0x55, 0x55, 0x2C, 0x2C,
+  0xA1, 0xD6, 0xA1, 0xA1, 0x2C, 0x2C, 0x95, 0x55,
+  0x55, 0x55, 0x95, 0x95, 0x2C, 0x95, 0x95, 0xD6,
+  0xB1, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x80, 0x34, 0x88, 0x43, 0x47,
+  0x95, 0xCB, 0x70, 0x70, 0x55, 0x2C, 0xD6, 0xD6,
+  0xA1, 0x95, 0x55, 0x90, 0xCB, 0xCB, 0x55, 0x55,
+  0x2C, 0x2C, 0xA1, 0xD6, 0xA1, 0xA1, 0xA1, 0x2C,
+  0x55, 0x55, 0x55, 0x55, 0x2C, 0x95, 0x2C, 0x2C,
+  0x55, 0x55, 0x95, 0x2C, 0xA1, 0xA1, 0x2C, 0x55,
+  0x90, 0x70, 0x90, 0x55, 0x95, 0x95, 0xA1, 0xA1,
+  0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x95, 0x95, 0x95,
+  0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xD5,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x88, 0x7D, 0x3F, 0xB1, 0x80, 0x20,
+  0x99, 0x2C, 0x55, 0x55, 0x95, 0x2C, 0xA1, 0xA1,
+  0x2C, 0x55, 0x90, 0x70, 0x90, 0x55, 0x95, 0x95,
+  0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x2C, 0x2C,
+  0x95, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x95, 0x90, 0x55, 0x2C, 0xA1, 0xA1, 0x95, 0xCB,
+  0x70, 0x94, 0x90, 0x55, 0x95, 0xA1, 0xA1, 0xA1,
+  0x2C, 0x2C, 0x2C, 0x2C, 0x95, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0xA1, 0x88,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0xB1, 0x47, 0xD5, 0x7D, 0x43,
+  0x20, 0x70, 0x95, 0x90, 0x55, 0x2C, 0xA1, 0xA1,
+  0x95, 0xCB, 0x70, 0x94, 0x90, 0x55, 0x95, 0xA1,
+  0xA1, 0xA1, 0x2C, 0x95, 0x2C, 0x2C, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x2C, 0x95, 0x95, 0x95, 0x95,
+  0x95, 0x90, 0x55, 0x2C, 0xD6, 0xD6, 0x2C, 0x90,
+  0x94, 0x70, 0x55, 0x95, 0x2C, 0xD6, 0xD6, 0xA1,
+  0x95, 0x95, 0x95, 0x2C, 0x2C, 0x95, 0x55, 0x55,
+  0xCB, 0xCB, 0xCB, 0x55, 0xCB, 0x55, 0x47, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x88, 0xB1, 0x3F, 0x92, 0x2B, 0x80,
+  0x20, 0x80, 0xD6, 0x70, 0x55, 0x2C, 0xD6, 0xD6,
+  0x2C, 0x90, 0x94, 0x70, 0x55, 0x95, 0x2C, 0xD6,
+  0xD6, 0xA1, 0x2C, 0x95, 0x95, 0x2C, 0x2C, 0x95,
+  0x95, 0x55, 0x90, 0xCB, 0xCB, 0xCB, 0xCB, 0x55,
+  0xD6, 0x55, 0x95, 0xA1, 0xD6, 0xA1, 0x55, 0x70,
+  0x94, 0x55, 0x95, 0xA1, 0xA1, 0xA1, 0xA1, 0x95,
+  0x55, 0x55, 0x55, 0x95, 0x55, 0x55, 0xCB, 0x90,
+  0x70, 0x90, 0xCB, 0x55, 0x55, 0xA1, 0xD8, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x88, 0xD8, 0xE1, 0x88, 0x20, 0x20,
+  0x88, 0x88, 0xE6, 0x55, 0x2C, 0xA1, 0xD6, 0xA1,
+  0x55, 0x70, 0x94, 0x55, 0x95, 0xA1, 0xA1, 0xA1,
+  0xA1, 0x95, 0x55, 0x55, 0x95, 0x95, 0x55, 0x55,
+  0x90, 0x90, 0x90, 0x90, 0xCB, 0x55, 0x55, 0x55,
+  0xD6, 0x2C, 0xA1, 0xD6, 0xD6, 0xA1, 0xCB, 0x70,
+  0x70, 0x95, 0x2C, 0xA1, 0xA1, 0x2C, 0x2C, 0x55,
+  0xCB, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
+  0x55, 0x95, 0x2C, 0x95, 0x2C, 0xD6, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x80, 0xD6, 0xA1, 0xD6, 0xD6, 0xA1,
+  0xCB, 0x70, 0x70, 0x95, 0x2C, 0xA1, 0xA1, 0x2C,
+  0x2C, 0x55, 0xCB, 0xCB, 0x55, 0x55, 0x55, 0x55,
+  0x55, 0x55, 0x55, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0xD6, 0xA1, 0xA1, 0xA1, 0xA1, 0x55, 0x70, 0x94,
+  0xCB, 0x95, 0xA1, 0xA1, 0x2C, 0x95, 0xCB, 0x55,
+  0x90, 0xCB, 0x55, 0x55, 0x55, 0x55, 0x95, 0xA1,
+  0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0x95, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x88, 0x95, 0xA1, 0xA1, 0xA1, 0x55,
+  0x70, 0x94, 0xCB, 0x95, 0xA1, 0xA1, 0x2C, 0x95,
+  0xCB, 0xCB, 0x90, 0xCB, 0x55, 0x55, 0x55, 0x55,
+  0x95, 0x2C, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1,
+  0x2C, 0x2C, 0x2C, 0x95, 0x95, 0xCB, 0x70, 0x70,
+  0x95, 0x2C, 0x2C, 0x95, 0xCB, 0x70, 0x90, 0xCB,
+  0xCB, 0x55, 0x55, 0xCB, 0x55, 0x55, 0x2C, 0xD6,
+  0xD6, 0xD6, 0xD6, 0xA1, 0x2C, 0x70, 0x20, 0x20,
+  0x88, 0x43, 0xD8, 0x43, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x88, 0x88, 0x43, 0x2B, 0xD8, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x3F, 0x2C, 0x95, 0x95, 0xCB,
+  0x70, 0x70, 0x95, 0x2C, 0x2C, 0x95, 0xCB, 0x90,
+  0x90, 0xCB, 0x55, 0xCB, 0x55, 0xCB, 0x55, 0x95,
+  0x2C, 0xD6, 0xD6, 0xD6, 0xD6, 0xA1, 0x2C, 0x2C,
+  0xA1, 0x95, 0x95, 0x55, 0xCB, 0x70, 0x90, 0x55,
+  0x2C, 0x2C, 0x2C, 0x55, 0x70, 0x70, 0x55, 0x95,
+  0x95, 0xCB, 0x90, 0x90, 0x90, 0x95, 0x2C, 0xA1,
+  0xD6, 0xD6, 0x2C, 0x2C, 0x95, 0x70, 0x20, 0x20,
+  0x80, 0x2B, 0x34, 0x2B, 0x88, 0x20, 0x20, 0x20,
+  0x88, 0xB1, 0x28, 0x28, 0x2B, 0x7D, 0x80, 0x20,
+  0x20, 0x20, 0x20, 0x92, 0x95, 0x55, 0xCB, 0x70,
+  0x90, 0x55, 0x2C, 0x2C, 0x2C, 0x55, 0x70, 0x70,
+  0x55, 0x95, 0x55, 0x55, 0x90, 0x90, 0x90, 0x55,
+  0x2C, 0xA1, 0xD6, 0xA1, 0x2C, 0x2C, 0x95, 0x95,
+  0xA1, 0x95, 0x55, 0xCB, 0x90, 0x70, 0xCB, 0x95,
+  0xA1, 0x95, 0x95, 0xCB, 0x90, 0xCB, 0x95, 0x2C,
+  0x95, 0x70, 0x70, 0x90, 0x55, 0x2C, 0xA1, 0xA1,
+  0x2C, 0x2C, 0x55, 0xCB, 0x55, 0x90, 0x20, 0x34,
+  0x90, 0x6D, 0x70, 0xD8, 0x43, 0x20, 0x20, 0x88,
+  0x3F, 0x55, 0xA1, 0x2A, 0xD6, 0x7D, 0x43, 0x20,
+  0x20, 0x20, 0x88, 0x7D, 0x55, 0xCB, 0x90, 0x70,
+  0xCB, 0x95, 0xA1, 0x95, 0x95, 0xCB, 0x70, 0xCB,
+  0x95, 0xA1, 0x95, 0x70, 0x70, 0xCB, 0x55, 0x2C,
+  0xA1, 0xA1, 0xA1, 0x95, 0x55, 0x55, 0x55, 0x95,
+  0x2C, 0x55, 0x90, 0x70, 0x94, 0x90, 0x95, 0x2C,
+  0x2C, 0x95, 0xCB, 0x90, 0x55, 0x95, 0xA1, 0xA1,
+  0x95, 0x90, 0x90, 0x95, 0xA1, 0xD6, 0xD6, 0x6D,
+  0xA1, 0x95, 0x55, 0xCB, 0x55, 0xCB, 0x20, 0x99,
+  0xBF, 0xA3, 0xA3, 0x90, 0x20, 0x20, 0x20, 0x92,
+  0x83, 0x6B, 0x6B, 0x6B, 0xA3, 0x70, 0x88, 0x20,
+  0x20, 0x20, 0x20, 0x2B, 0x90, 0x70, 0x94, 0x90,
+  0x95, 0x2C, 0x2C, 0x95, 0xCB, 0x90, 0x55, 0x95,
+  0xA1, 0x2C, 0x55, 0x90, 0x90, 0x95, 0xA1, 0xD6,
+  0xD6, 0x6D, 0xA1, 0x95, 0x55, 0xCB, 0x55, 0x55,
+  0x2C, 0x55, 0x70, 0x70, 0x94, 0x90, 0x95, 0x2C,
+  0x2C, 0x55, 0xCB, 0xCB, 0x95, 0x2C, 0x2C, 0x2C,
+  0x55, 0x55, 0x95, 0xA1, 0x6D, 0xBF, 0x6D, 0xD6,
+  0x95, 0x55, 0x90, 0xCB, 0x55, 0x95, 0x88, 0x95,
+  0x2C, 0x3F, 0x6D, 0x6B, 0x34, 0x20, 0x20, 0x47,
+  0x65, 0xD6, 0xE1, 0x3F, 0x2A, 0x6B, 0x2B, 0x20,
+  0x20, 0x20, 0x20, 0x43, 0x70, 0x70, 0x94, 0x90,
+  0x95, 0x2C, 0x2C, 0x55, 0x55, 0x55, 0x95, 0x2C,
+  0xA1, 0x2C, 0x55, 0xCB, 0x95, 0xA1, 0x6D, 0xBF,
+  0x6D, 0xD6, 0x2C, 0x55, 0x90, 0xCB, 0x95, 0x95,
+  0x95, 0x55, 0x70, 0x94, 0x70, 0x55, 0x2C, 0xA1,
+  0x2C, 0x55, 0xCB, 0x55, 0x2C, 0x95, 0x2C, 0x95,
+  0x95, 0x95, 0xA1, 0x6D, 0xBF, 0x2A, 0xD6, 0x95,
+  0x70, 0x94, 0x94, 0x70, 0x55, 0x55, 0x20, 0xBF,
+  0xC9, 0xB1, 0x99, 0x42, 0xB1, 0x61, 0x7D, 0x94,
+  0x65, 0xB1, 0x88, 0x99, 0xD5, 0xE5, 0x7F, 0x20,
+  0x20, 0x20, 0x20, 0x43, 0x70, 0x94, 0x70, 0x55,
+  0x2C, 0xA1, 0x2C, 0x55, 0x90, 0x55, 0x2C, 0x95,
+  0x2C, 0x95, 0x95, 0x2C, 0xA1, 0x6D, 0xBF, 0xBF,
+  0xD6, 0x55, 0x70, 0x94, 0x94, 0x70, 0xCB, 0x55,
+  0x55, 0xCB, 0x70, 0x94, 0x70, 0x95, 0xA1, 0xA1,
+  0x95, 0x55, 0x55, 0x95, 0x2C, 0x95, 0x95, 0x95,
+  0x95, 0xA1, 0x6D, 0x2A, 0x2A, 0xD6, 0x55, 0x94,
+  0xE6, 0xE6, 0x47, 0x70, 0x55, 0x95, 0x20, 0x2A,
+  0xD8, 0x43, 0xC9, 0x83, 0x98, 0x79, 0x34, 0x9F,
+  0x6B, 0x43, 0x20, 0x88, 0x2B, 0x65, 0xA0, 0x20,
+  0x20, 0x20, 0x20, 0xE1, 0x70, 0x94, 0x70, 0x95,
+  0xA1, 0xA1, 0x95, 0x55, 0x55, 0x95, 0x2C, 0x95,
+  0x95, 0x95, 0x95, 0xA1, 0x6D, 0xBF, 0x2A, 0xD6,
+  0x55, 0x94, 0xE6, 0xE6, 0x47, 0x70, 0x55, 0x55,
+  0x94, 0x70, 0x94, 0x47, 0x70, 0x95, 0x2C, 0x2C,
+  0x95, 0xCB, 0x95, 0x2C, 0x2C, 0xA1, 0x2C, 0x2C,
+  0xA1, 0xD6, 0x6D, 0x6D, 0xA1, 0xCB, 0x47, 0x28,
+  0xE6, 0x47, 0x70, 0x55, 0x95, 0xA1, 0x20, 0x2C,
+  0x7F, 0x88, 0xF0, 0xC6, 0x25, 0x5E, 0xCF, 0x2F,
+  0xE7, 0x9A, 0x20, 0x88, 0x99, 0x65, 0x3F, 0x20,
+  0x20, 0x20, 0x20, 0x34, 0x94, 0x47, 0x70, 0x95,
+  0xA1, 0x2C, 0x55, 0xCB, 0x95, 0x2C, 0x2C, 0xA1,
+  0x2C, 0x2C, 0xA1, 0xD6, 0x6D, 0x6D, 0xA1, 0xCB,
+  0x94, 0x28, 0xA0, 0x47, 0x70, 0x55, 0x95, 0x95,
+  0x47, 0x70, 0x90, 0x94, 0x70, 0x95, 0xA1, 0x2C,
+  0x55, 0x55, 0x2C, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C,
+  0xA1, 0x6D, 0x2A, 0xD6, 0x55, 0x47, 0x28, 0x28,
+  0x47, 0x70, 0x55, 0x95, 0x2C, 0xA1, 0x20, 0x28,
+  0xEC, 0x86, 0xBE, 0x48, 0x3E, 0x3E, 0x3A, 0x25,
+  0x4E, 0xAE, 0x93, 0xD7, 0xEC, 0xD1, 0x34, 0x20,
+  0x20, 0x20, 0x20, 0x43, 0x55, 0x94, 0x70, 0x95,
+  0xA1, 0xA1, 0x55, 0xCB, 0x2C, 0xA1, 0xA1, 0xA1,
+  0xA1, 0x2C, 0xA1, 0x6D, 0x6D, 0xD6, 0x55, 0x47,
+  0x28, 0x28, 0x47, 0x70, 0x55, 0x95, 0x2C, 0x2C,
+  0x95, 0x95, 0x55, 0x90, 0xCB, 0x2C, 0xA1, 0xA1,
+  0x55, 0x55, 0x2C, 0xD6, 0xD6, 0xA1, 0xA1, 0x2C,
+  0xD6, 0x6D, 0x6D, 0xA1, 0x70, 0x28, 0xD5, 0xE6,
+  0x70, 0x55, 0x95, 0x2C, 0xA1, 0xD6, 0x20, 0xE1,
+  0x26, 0x84, 0x76, 0x73, 0x9C, 0x22, 0x4E, 0x35,
+  0x8C, 0x7A, 0x4E, 0xDC, 0x8E, 0x7E, 0x3D, 0x88,
+  0x20, 0x20, 0x20, 0x88, 0x2C, 0x90, 0x90, 0x95,
+  0xA1, 0x2C, 0x55, 0x55, 0x2C, 0xD6, 0xD6, 0xD6,
+  0x2C, 0x2C, 0xD6, 0x2A, 0x6D, 0x2C, 0x70, 0x28,
+  0xD5, 0xE6, 0x70, 0x55, 0x95, 0xA1, 0x2C, 0xA1,
+  0xBF, 0xA1, 0x95, 0xCB, 0xCB, 0x2C, 0xA1, 0xA1,
+  0x95, 0x95, 0xA1, 0xD6, 0xD6, 0xA1, 0x2C, 0x95,
+  0xD6, 0x6D, 0xD6, 0x95, 0x94, 0x28, 0xE6, 0x70,
+  0x55, 0x95, 0xA1, 0xA1, 0xA1, 0xD6, 0x20, 0x57,
+  0xE4, 0xDF, 0x50, 0x3E, 0x22, 0x4E, 0x35, 0x8C,
+  0x8C, 0x52, 0x52, 0x7A, 0x4E, 0x58, 0xD7, 0x20,
+  0x20, 0x20, 0x20, 0x88, 0x2C, 0xCB, 0x55, 0x2C,
+  0xA1, 0xA1, 0x95, 0x95, 0xA1, 0xD6, 0xD6, 0xA1,
+  0x2C, 0x95, 0xA1, 0x6D, 0x6D, 0x95, 0x47, 0xA0,
+  0xE6, 0x70, 0x55, 0x95, 0x2C, 0xA1, 0xA1, 0xA1,
+  0xD2, 0x95, 0x55, 0x90, 0x55, 0x2C, 0xD6, 0xA1,
+  0x95, 0x95, 0xA1, 0xD6, 0xD6, 0x2C, 0x95, 0x2C,
+  0xA1, 0x6D, 0xA1, 0x55, 0x94, 0x47, 0x94, 0xCB,
+  0x55, 0x95, 0x2C, 0xA1, 0xD6, 0xD6, 0x59, 0xC8,
+  0xE3, 0x76, 0x2D, 0x3E, 0x22, 0x4E, 0x8C, 0x35,
+  0x52, 0x52, 0xEE, 0x3A, 0x4D, 0xED, 0x24, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x28, 0xCB, 0x55, 0x2C,
+  0xD6, 0xA1, 0x95, 0x95, 0xA1, 0xD6, 0xA1, 0x2C,
+  0x95, 0x2C, 0xD6, 0x6D, 0xA1, 0x55, 0x94, 0xE6,
+  0x70, 0xCB, 0x55, 0x95, 0xA1, 0xD6, 0xD6, 0xA1,
+  0xD0, 0x94, 0x94, 0x90, 0x55, 0x2C, 0xA1, 0xA1,
+  0x55, 0x95, 0xA1, 0xA1, 0xA1, 0x2C, 0x95, 0x2C,
+  0xA1, 0xD6, 0x2C, 0x70, 0x94, 0x94, 0x94, 0x94,
+  0x70, 0x55, 0xA1, 0xD6, 0xA1, 0xD6, 0x88, 0x77,
+  0x38, 0xC4, 0x3E, 0x69, 0x4E, 0x35, 0x8C, 0xEE,
+  0x35, 0x89, 0x30, 0x30, 0x4A, 0x48, 0x3C, 0x20,
+  0x20, 0x88, 0x20, 0x20, 0xD8, 0x2C, 0x55, 0x2C,
+  0xD6, 0xA1, 0x95, 0x95, 0x2C, 0xD6, 0xA1, 0x2C,
+  0x95, 0x2C, 0xA1, 0xD6, 0x2C, 0x90, 0x94, 0x47,
+  0x94, 0x94, 0x70, 0x55, 0x2C, 0xD6, 0xA1, 0x95,
+  0x95, 0x28, 0x47, 0x90, 0x95, 0x2C, 0xA1, 0x2C,
+  0x95, 0x55, 0x95, 0xA1, 0xD6, 0xA1, 0x2C, 0x2C,
+  0xA1, 0xA1, 0x55, 0x70, 0x94, 0x47, 0x94, 0x94,
+  0x70, 0x2C, 0xD6, 0xD6, 0x2C, 0xA1, 0x43, 0x98,
+  0x54, 0x48, 0x3E, 0x22, 0x35, 0xEE, 0xEE, 0x9C,
+  0x4D, 0x45, 0x75, 0x4A, 0xDF, 0x7B, 0x3D, 0x20,
+  0xD8, 0x28, 0x2B, 0x88, 0x20, 0x95, 0x95, 0x2C,
+  0xA1, 0x2C, 0x55, 0x55, 0x2C, 0xA1, 0xD6, 0xA1,
+  0x2C, 0x95, 0xA1, 0x2C, 0x55, 0x70, 0x94, 0x94,
+  0x94, 0x94, 0x70, 0x95, 0xD6, 0xD6, 0x2C, 0x95,
+  0x70, 0x28, 0x47, 0x55, 0x95, 0x2C, 0x2C, 0x2C,
+  0x95, 0x95, 0x95, 0xA1, 0xA1, 0xA1, 0x95, 0x55,
+  0x95, 0x95, 0x55, 0x70, 0x70, 0x70, 0x94, 0x70,
+  0x55, 0xD6, 0x6D, 0xD6, 0x95, 0x2C, 0x20, 0x43,
+  0xBB, 0xC8, 0x36, 0x30, 0x30, 0x38, 0x45, 0x6E,
+  0xE3, 0x75, 0x78, 0x37, 0xBD, 0xD9, 0x3F, 0x20,
+  0x88, 0xD5, 0x70, 0xB1, 0x88, 0xA0, 0x95, 0x2C,
+  0x2C, 0xA1, 0x95, 0x55, 0x95, 0xA1, 0xA1, 0xA1,
+  0x2C, 0x55, 0x95, 0x2C, 0x55, 0x70, 0x70, 0x70,
+  0x94, 0x70, 0x55, 0xD6, 0x6D, 0x6D, 0x95, 0x55,
+  0x94, 0x47, 0x70, 0x95, 0x2C, 0x2C, 0x2C, 0xA1,
+  0x2C, 0x95, 0x2C, 0xA1, 0xD6, 0xA1, 0x2C, 0x55,
+  0x55, 0x95, 0x95, 0x55, 0x55, 0x55, 0x55, 0x95,
+  0xA1, 0x6D, 0x4B, 0xD6, 0x55, 0xD6, 0x20, 0xD8,
+  0xD6, 0x67, 0xDA, 0x4D, 0xED, 0x62, 0x78, 0x78,
+  0x23, 0x84, 0x67, 0xF5, 0x4B, 0xBF, 0x90, 0x88,
+  0x88, 0x2B, 0x47, 0x99, 0x20, 0x43, 0xD6, 0x2C,
+  0x2C, 0xA1, 0x2C, 0x95, 0x2C, 0xA1, 0xD6, 0xA1,
+  0x95, 0x95, 0x55, 0x95, 0x55, 0x55, 0x55, 0x55,
+  0x55, 0x95, 0xD6, 0x6D, 0xBF, 0xD6, 0x55, 0xCB,
+  0x55, 0x55, 0x55, 0x2C, 0x2C, 0x2C, 0x2C, 0xA1,
+  0x2C, 0x2C, 0x2C, 0xA1, 0xA1, 0x2C, 0x2C, 0x95,
+  0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0xA1,
+  0x6D, 0x2A, 0x2A, 0xA1, 0x55, 0x55, 0x20, 0xD8,
+  0x6D, 0xAB, 0x96, 0x7E, 0x64, 0x53, 0x36, 0x36,
+  0xC6, 0x63, 0x6D, 0xD0, 0x6B, 0xE5, 0xA3, 0x7D,
+  0x20, 0x88, 0x80, 0x88, 0x20, 0x20, 0xC9, 0xA1,
+  0x2C, 0xA1, 0xA1, 0x2C, 0x2C, 0xA1, 0xA1, 0xA1,
+  0x95, 0x95, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x2C, 0xA1, 0x6D, 0xBF, 0x6D, 0xA1, 0x55, 0x55,
+  0x95, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0xA1,
+  0xA1, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x95,
+  0x55, 0x55, 0x2C, 0x2C, 0xA1, 0xA1, 0xD6, 0xD6,
+  0x6D, 0x6D, 0xA1, 0x55, 0x2C, 0xD8, 0x20, 0xB1,
+  0xA3, 0x4B, 0x6D, 0xD9, 0xA7, 0x6C, 0xAF, 0xB2,
+  0x6D, 0x2A, 0x83, 0x42, 0xE5, 0xE5, 0x65, 0x2C,
+  0x20, 0x20, 0x88, 0x20, 0x20, 0x20, 0x88, 0x95,
+  0x2C, 0xA1, 0x2C, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x2C, 0x95, 0x55, 0x55, 0x2C, 0x2C, 0xA1, 0xA1,
+  0xD6, 0xD6, 0x6D, 0x6D, 0xA1, 0x55, 0xCB, 0x55,
+  0x95, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x95, 0x2C,
+  0x2C, 0x95, 0x95, 0x95, 0x95, 0x95, 0x2C, 0x95,
+  0x55, 0x95, 0x2C, 0x2C, 0xA1, 0xA1, 0xD6, 0xA1,
+  0xA1, 0x2C, 0x55, 0x55, 0x28, 0x88, 0x43, 0x2A,
+  0xE5, 0xA3, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6D,
+  0xBF, 0xA3, 0x42, 0xE5, 0xE5, 0xE5, 0xE5, 0x65,
+  0xB1, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xD8,
+  0xD6, 0x2C, 0x2C, 0x95, 0x95, 0x95, 0x95, 0x2C,
+  0x95, 0x95, 0x55, 0x95, 0x2C, 0x2C, 0xA1, 0xA1,
+  0xA1, 0xA1, 0xA1, 0x2C, 0x95, 0x90, 0x90, 0x55,
+  0x90, 0xCB, 0x55, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x2C, 0x2C, 0x95, 0x55, 0x95, 0x95, 0x95, 0x55,
+  0x55, 0xCB, 0x55, 0x2C, 0x95, 0x95, 0x95, 0x95,
+  0x55, 0x90, 0x90, 0x90, 0xE1, 0x43, 0x28, 0xE5,
+  0xE5, 0x65, 0xD0, 0x6D, 0x6D, 0x6D, 0x2A, 0xD2,
+  0x42, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xD6, 0x20, 0x20, 0x20, 0x20, 0x20, 0x88, 0x88,
+  0xD5, 0x2C, 0x2C, 0x2C, 0x95, 0x55, 0x95, 0x95,
+  0x95, 0x55, 0x55, 0xCB, 0x55, 0x95, 0x2C, 0x95,
+  0x95, 0x95, 0x55, 0x90, 0x70, 0x70, 0x70, 0x90,
+  0x70, 0x70, 0xCB, 0x55, 0x55, 0x95, 0x95, 0x95,
+  0x2C, 0x95, 0x95, 0x55, 0x55, 0x55, 0x55, 0xCB,
+  0x70, 0x70, 0x70, 0xCB, 0x90, 0x90, 0x70, 0x94,
+  0x94, 0x94, 0x2C, 0x80, 0x20, 0xE1, 0xA3, 0xE5,
+  0xE5, 0xE5, 0x42, 0xEC, 0xD0, 0x83, 0xA3, 0x65,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0x65, 0x7D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x88, 0x2C, 0x95, 0x95, 0x95, 0x55, 0x55, 0x55,
+  0x55, 0xCB, 0x70, 0x70, 0x90, 0x90, 0x90, 0x90,
+  0x70, 0x94, 0x94, 0x94, 0x70, 0x70, 0x70, 0x70,
+  0x70, 0x55, 0x55, 0x55, 0x95, 0x95, 0x95, 0x95,
+  0x2C, 0x2C, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55,
+  0x90, 0x70, 0x90, 0x55, 0x55, 0xCB, 0x70, 0x94,
+  0x94, 0x95, 0xD8, 0x20, 0x88, 0x70, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0x65, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0x47, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0xE1, 0x6D, 0x2C, 0x95, 0x55, 0x55, 0x55,
+  0x55, 0x55, 0x90, 0x70, 0x70, 0x55, 0x55, 0xCB,
+  0x70, 0x94, 0x94, 0x94, 0x70, 0x90, 0x70, 0x94,
+  0x55, 0x2C, 0x2C, 0x2C, 0x95, 0x2C, 0x95, 0x95,
+  0x2C, 0x2C, 0x2C, 0x55, 0x55, 0x55, 0x55, 0x55,
+  0xCB, 0xCB, 0x95, 0x2C, 0x2C, 0x95, 0x55, 0x90,
+  0x55, 0x99, 0x20, 0x20, 0xE1, 0xA3, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xD6, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x2B, 0x6D, 0x95, 0x95, 0x55, 0x55,
+  0x55, 0x55, 0xCB, 0x55, 0x95, 0x2C, 0x2C, 0x95,
+  0x55, 0x90, 0xCB, 0xCB, 0xCB, 0xCB, 0x90, 0x70,
+  0x2C, 0xD6, 0xD6, 0x2C, 0x2C, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x2C, 0x95, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x2C, 0xA1, 0x2C, 0x95, 0x55, 0x95,
+  0xE6, 0x88, 0x20, 0x20, 0x3F, 0xA3, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0x42, 0xA3, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x88, 0x2B, 0xD6, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x2C, 0xA1, 0x2C, 0x95,
+  0x55, 0x55, 0x95, 0x95, 0x95, 0x55, 0x55, 0x55,
+  0xA1, 0xD6, 0xD6, 0xA1, 0x2C, 0x2C, 0x95, 0x2C,
+  0x2C, 0x2C, 0x95, 0x2C, 0x95, 0x95, 0x55, 0x95,
+  0x95, 0x2C, 0x2C, 0x2C, 0x95, 0xCB, 0xCB, 0x94,
+  0x20, 0x20, 0x20, 0x20, 0xE6, 0x83, 0x65, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x42, 0x6B, 0x6B, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x42, 0x6B, 0x6B, 0xA3, 0xD2,
+  0xD2, 0x6B, 0xC9, 0x20, 0x20, 0x88, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x88, 0x8A, 0xA1, 0x95, 0x95,
+  0x95, 0x55, 0x95, 0x2C, 0xA1, 0x2C, 0x95, 0xCB,
+  0xCB, 0x55, 0x95, 0x95, 0x95, 0x55, 0x55, 0x95,
+  0x6D, 0x6D, 0x6D, 0xD6, 0xA1, 0x2C, 0x2C, 0x95,
+  0x2C, 0x95, 0x2C, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x55, 0x70, 0x70, 0x2C, 0x80,
+  0x88, 0x20, 0x20, 0x80, 0x94, 0xD6, 0x32, 0x6B,
+  0xE5, 0xE5, 0xE5, 0x42, 0x6B, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xA3, 0xD2, 0xD0, 0xBF, 0x2A,
+  0x2A, 0xD0, 0x6D, 0x34, 0x20, 0xE1, 0x88, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x88, 0xA1, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x55, 0x70, 0x70,
+  0x70, 0x90, 0xCB, 0xCB, 0xCB, 0x95, 0x95, 0x2C,
+  0xD0, 0x6D, 0xD6, 0xD6, 0xA1, 0xA1, 0xA1, 0x2C,
+  0x2C, 0x2C, 0x2C, 0x95, 0x55, 0x55, 0x55, 0x95,
+  0x95, 0x2C, 0x95, 0x55, 0xCB, 0xCB, 0x95, 0x88,
+  0x20, 0x20, 0x88, 0xD8, 0x2C, 0xD1, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x65, 0x65, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x42, 0x6B, 0xEC,
+  0xBF, 0x2A, 0xEC, 0x95, 0x20, 0x34, 0x2B, 0xE1,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x99, 0x95, 0x55,
+  0x55, 0x55, 0x95, 0x95, 0x95, 0x55, 0xCB, 0xCB,
+  0x55, 0x55, 0xCB, 0xCB, 0xCB, 0x55, 0x95, 0x95,
+  0x32, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x2C,
+  0xA1, 0x95, 0x95, 0x95, 0x55, 0xCB, 0xCB, 0x55,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x55, 0x99, 0x20,
+  0xE1, 0xE1, 0x43, 0x47, 0x6B, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0x42, 0xEC, 0xBF, 0xA3, 0x8A, 0x20, 0x88, 0xD8,
+  0x2B, 0x20, 0x20, 0x20, 0x88, 0x88, 0x2C, 0xCB,
+  0xCB, 0x95, 0x95, 0x2C, 0x95, 0x95, 0x55, 0x95,
+  0x55, 0x55, 0x55, 0x55, 0x55, 0x95, 0x55, 0x95,
+  0x6D, 0x55, 0x55, 0x55, 0x95, 0x95, 0x2C, 0x95,
+  0x2C, 0x95, 0x95, 0x55, 0x55, 0x55, 0x55, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0xA1, 0x34, 0x20,
+  0xC9, 0x20, 0xE1, 0xA3, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xA3, 0x83, 0x6D, 0x20, 0x88, 0x88,
+  0x2B, 0x34, 0x20, 0x20, 0x20, 0x88, 0xD5, 0x55,
+  0x55, 0x55, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x55, 0x55, 0x95, 0x95,
+  0x2C, 0x55, 0xCB, 0x55, 0xCB, 0x55, 0x55, 0x95,
+  0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x2C, 0x95, 0x95, 0x55, 0x95, 0x2C, 0x20, 0xD8,
+  0xE1, 0x20, 0x70, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x65, 0xA3, 0x92, 0x43, 0x7D,
+  0xD8, 0xC9, 0x88, 0x20, 0x20, 0x20, 0x43, 0xD6,
+  0x2C, 0x2C, 0x95, 0x95, 0x95, 0x55, 0x95, 0x2C,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x2C, 0x95, 0x2C,
+  0xA1, 0x55, 0x55, 0x55, 0x55, 0x95, 0x95, 0x55,
+  0x55, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0xA1, 0x2C,
+  0xA1, 0x2C, 0x2C, 0x95, 0x2C, 0x99, 0x88, 0xB1,
+  0x20, 0xD8, 0x42, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xCB, 0x34, 0x8A,
+  0xC9, 0x34, 0x2B, 0x20, 0x20, 0x20, 0x20, 0x90,
+  0xA1, 0xA1, 0xA1, 0x2C, 0x2C, 0x95, 0x95, 0x2C,
+  0x2C, 0x95, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0xD6, 0x2C, 0x55, 0x55, 0x95, 0x2C, 0x2C, 0x2C,
+  0x55, 0xCB, 0x55, 0x2C, 0x2C, 0xA1, 0x2C, 0xA1,
+  0xA1, 0xA1, 0x2C, 0x2C, 0x6D, 0x43, 0xD8, 0x80,
+  0x88, 0xCB, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x32, 0x80, 0xE1,
+  0x80, 0x20, 0xB1, 0x20, 0x20, 0x20, 0x20, 0xC9,
+  0xD6, 0xA1, 0xA1, 0xA1, 0x2C, 0xA1, 0x2C, 0x2C,
+  0x2C, 0x55, 0x55, 0x55, 0x95, 0x95, 0x95, 0x55,
+  0xD6, 0x95, 0x95, 0x95, 0x2C, 0xA1, 0x2C, 0x2C,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x2C, 0x95, 0x2C,
+  0x2C, 0x2C, 0x2C, 0x95, 0xCB, 0x20, 0xC9, 0x20,
+  0xE1, 0xA3, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x42, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xD8, 0x20,
+  0x20, 0x20, 0x2B, 0x43, 0x20, 0x20, 0x20, 0x88,
+  0xD6, 0x2C, 0x2C, 0x2C, 0x95, 0x95, 0x95, 0x55,
+  0x95, 0x55, 0x55, 0xCB, 0x55, 0xCB, 0xCB, 0x55,
+  0x2C, 0x55, 0x55, 0x95, 0x2C, 0x2C, 0xA1, 0x95,
+  0x55, 0x95, 0x55, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x55, 0xCB, 0x70, 0xCB, 0xC9, 0x80, 0x2B, 0x20,
+  0xA0, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x42, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x92, 0x20,
+  0x20, 0x20, 0xE1, 0xD8, 0x20, 0x20, 0x20, 0x20,
+  0x95, 0x95, 0x55, 0xCB, 0x90, 0x90, 0x70, 0x90,
+  0x90, 0x90, 0xCB, 0xCB, 0xCB, 0xCB, 0x55, 0x95,
+  0x95, 0x55, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x95, 0x95, 0x55, 0x55, 0x55, 0x95, 0x95, 0x55,
+  0x90, 0x47, 0xA0, 0x55, 0x20, 0x2B, 0x43, 0x88,
+  0x6D, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x28, 0x20,
+  0x20, 0x20, 0xE1, 0xE1, 0x20, 0x20, 0x20, 0x20,
+  0x28, 0x55, 0x90, 0x47, 0xA0, 0x47, 0x94, 0x70,
+  0x55, 0x95, 0x95, 0x55, 0xCB, 0x55, 0x55, 0x2C,
+  0x2C, 0x2C, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x95, 0x2C, 0x95, 0x95, 0x95, 0x95, 0x95, 0x55,
+  0x94, 0xE6, 0x70, 0x2B, 0x88, 0x2B, 0x88, 0xE1,
+  0x65, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x47, 0x20,
+  0x20, 0x20, 0xE1, 0x34, 0x20, 0x20, 0x20, 0x20,
+  0xB1, 0x95, 0x94, 0xE6, 0xA0, 0x47, 0x70, 0x55,
+  0x2C, 0xA1, 0x2C, 0x55, 0x90, 0xCB, 0x2C, 0xD6,
+  0x6D, 0xA1, 0x2C, 0x95, 0x95, 0xA1, 0x2C, 0xA1,
+  0x2C, 0x2C, 0x95, 0x95, 0x95, 0x95, 0x95, 0x55,
+  0x70, 0xE6, 0x70, 0x20, 0x20, 0x7D, 0x20, 0x8A,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0xA3, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x94, 0x20,
+  0x20, 0x20, 0xD8, 0x88, 0x20, 0x20, 0x20, 0x20,
+  0xD8, 0x2C, 0x94, 0x47, 0x47, 0x90, 0x95, 0x95,
+  0xA1, 0x6D, 0xA1, 0x90, 0x94, 0x55, 0x2C, 0xD6,
+  0xD0, 0xA1, 0x95, 0x95, 0x2C, 0x2C, 0xA1, 0x2C,
+  0x95, 0x95, 0x55, 0x55, 0x55, 0x95, 0x2C, 0x2C,
+  0xCB, 0x95, 0xD8, 0x20, 0x20, 0xB1, 0x88, 0x28,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE2, 0xA3, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xCB, 0x20,
+  0x20, 0x20, 0x2B, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x88, 0xD6, 0x55, 0x47, 0x94, 0x55, 0x2C, 0xA1,
+  0xA1, 0xD6, 0x95, 0x94, 0x94, 0x55, 0xD6, 0x6D,
+  0xBF, 0x95, 0x90, 0xCB, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x55, 0x95, 0xCB, 0x90, 0x90, 0x95, 0x2C, 0x95,
+  0x90, 0x70, 0x20, 0x20, 0x34, 0x8A, 0x20, 0x94,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xCB, 0x20,
+  0x20, 0x88, 0x2B, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x88, 0xD6, 0xCB, 0x47, 0x94, 0x55, 0xA1, 0xD6,
+  0xD6, 0x2C, 0xCB, 0x47, 0x70, 0xA1, 0x6D, 0x2A,
+  0x95, 0x47, 0x47, 0x70, 0x95, 0xA1, 0x2C, 0x95,
+  0x55, 0x55, 0x90, 0x90, 0x55, 0x55, 0x55, 0x90,
+  0x47, 0xD5, 0x20, 0x20, 0x80, 0xD5, 0x43, 0xCB,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x42, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xCB, 0x20,
+  0x20, 0x80, 0x34, 0x20, 0x20, 0x20, 0x88, 0x20,
+  0x20, 0x2C, 0x47, 0xE6, 0x70, 0x2C, 0xD6, 0xD6,
+  0xA1, 0x2C, 0x55, 0xCB, 0x95, 0xA1, 0x6D, 0xD6,
+  0x90, 0x47, 0x47, 0x90, 0x2C, 0xA1, 0x2C, 0x95,
+  0x55, 0x55, 0x90, 0x90, 0x55, 0x55, 0x55, 0x70,
+  0x94, 0x8A, 0x20, 0x88, 0x88, 0xE1, 0xD8, 0x95,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE2, 0x42, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x47, 0x20,
+  0x43, 0x7D, 0x43, 0x80, 0x88, 0x20, 0x20, 0x20,
+  0x88, 0xCB, 0x94, 0x70, 0x55, 0xA1, 0xD6, 0xD6,
+  0xA1, 0x2C, 0x2C, 0x95, 0xA1, 0xA1, 0xD6, 0xA1,
+  0x94, 0xE6, 0x47, 0x55, 0x2C, 0xD6, 0xA1, 0x95,
+  0x55, 0x55, 0xCB, 0xCB, 0x55, 0x55, 0xCB, 0xCB,
+  0x55, 0xA0, 0x43, 0x86, 0x86, 0x43, 0xD8, 0xCB,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x3F, 0x80,
+  0xD8, 0x80, 0x88, 0x34, 0xD8, 0x2B, 0xD8, 0x20,
+  0x99, 0x90, 0x55, 0x95, 0x2C, 0xA1, 0xD6, 0xD6,
+  0xA1, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x94, 0x94, 0x70, 0x2C, 0xA1, 0xD6, 0xA1, 0x2C,
+  0x55, 0x55, 0xCB, 0x55, 0x55, 0x55, 0x55, 0x55,
+  0x95, 0x44, 0xBC, 0x3E, 0x5D, 0xD3, 0x79, 0x92,
+  0xA3, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0x42, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x65, 0x9A, 0x34,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x99, 0xE1,
+  0x70, 0x55, 0x95, 0xA1, 0xD6, 0xD6, 0xD6, 0xA1,
+  0x2C, 0x95, 0x55, 0x55, 0x95, 0x95, 0x95, 0x95,
+  0x70, 0x70, 0x55, 0x2C, 0xD6, 0xD6, 0xA1, 0x95,
+  0x55, 0x90, 0xCB, 0xCB, 0x55, 0x55, 0x2C, 0x2C,
+  0x32, 0x9D, 0xEB, 0x5D, 0x69, 0x49, 0x84, 0xF0,
+  0xB1, 0xEC, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x42, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xC1, 0x4E, 0x21, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0xC9, 0xD8,
+  0xBB, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x2C,
+  0x95, 0x55, 0x55, 0x55, 0x95, 0x95, 0x2C, 0x2C,
+  0x55, 0xCB, 0x95, 0x2C, 0xA1, 0xA1, 0x2C, 0x55,
+  0x90, 0x70, 0x90, 0x55, 0x95, 0x95, 0x6D, 0xD0,
+  0xC2, 0x48, 0x6A, 0x49, 0x69, 0x82, 0x5D, 0x2F,
+  0x59, 0x7D, 0xBF, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xEA, 0xC7, 0x7E, 0x66,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x43, 0x5A,
+  0x46, 0x27, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x95,
+  0x95, 0x55, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x95, 0x90, 0x55, 0x2C, 0xA1, 0xA1, 0x95, 0x55,
+  0x94, 0x94, 0x2C, 0x2A, 0x72, 0x3B, 0x56, 0xDD,
+  0xDF, 0x29, 0x5D, 0x49, 0x89, 0x5D, 0x3E, 0x69,
+  0x93, 0x66, 0x34, 0xA1, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x65, 0x42, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xEA, 0x3E, 0x5A, 0x66,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x5B, 0x73,
+  0x89, 0x4C, 0xBF, 0x2C, 0x95, 0x2C, 0x2C, 0x95,
+  0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
+  0x2C, 0x70, 0x55, 0x2C, 0xD6, 0xD6, 0x2C, 0xCB,
+  0x70, 0x55, 0xE7, 0x60, 0x4A, 0x48, 0xCD, 0x4A,
+  0x29, 0x73, 0x5D, 0x82, 0x49, 0x49, 0x49, 0x49,
+  0x3A, 0x57, 0x88, 0x88, 0x70, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0x42, 0x73, 0x50, 0xBE, 0x79,
+  0x20, 0x20, 0x20, 0x20, 0x66, 0xCC, 0x37, 0x9C,
+  0x3E, 0xCE, 0xBF, 0x95, 0x95, 0x95, 0x2C, 0x95,
+  0x95, 0x55, 0xCB, 0xCB, 0xCB, 0xCB, 0xCB, 0x55,
+  0xA1, 0x55, 0x95, 0xA1, 0xD6, 0xA1, 0x55, 0x94,
+  0x94, 0xE8, 0x60, 0xC4, 0x3E, 0x2D, 0x2D, 0x2D,
+  0x33, 0x5D, 0x82, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x89, 0xAA, 0x59, 0x20, 0x20, 0x28, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xEC, 0x4A, 0x2D, 0x50, 0x78, 0x2E,
+  0x57, 0x51, 0xF0, 0x57, 0x31, 0x4D, 0x50, 0x2D,
+  0x5D, 0xF2, 0xA1, 0x2C, 0x95, 0x95, 0x55, 0x55,
+  0x90, 0x90, 0x70, 0x90, 0xCB, 0x55, 0x55, 0x55,
+  0x6D, 0x2C, 0xA1, 0xD6, 0xD6, 0xA1, 0x55, 0x94,
+  0x70, 0xB9, 0x75, 0x50, 0x3E, 0x49, 0x49, 0x49,
+  0x5D, 0x82, 0x49, 0x49, 0x82, 0x49, 0x49, 0x49,
+  0x89, 0x69, 0x4F, 0x20, 0x20, 0x20, 0x8A, 0x42,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0x83, 0x4A, 0x3A, 0x50, 0x62, 0x23,
+  0x81, 0xB8, 0xB8, 0xE9, 0x5F, 0x29, 0x33, 0x5D,
+  0x5D, 0x73, 0xE8, 0xCB, 0x55, 0x55, 0x55, 0x55,
+  0x55, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0xD6, 0xA1, 0xA1, 0xA1, 0xA1, 0x55, 0x70, 0x70,
+  0xCB, 0x68, 0x75, 0x50, 0x82, 0x49, 0x49, 0x49,
+  0x5D, 0x49, 0x49, 0x5D, 0x49, 0x49, 0x5D, 0x82,
+  0x69, 0x5D, 0x25, 0xF0, 0x20, 0x20, 0x20, 0xE1,
+  0x2A, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0x4B, 0xF4, 0xDF, 0x50, 0x73, 0x76, 0x48,
+  0x75, 0xDF, 0x75, 0x62, 0xC4, 0x33, 0x82, 0x49,
+  0x5D, 0x5D, 0xA8, 0xF5, 0x55, 0x55, 0x55, 0x55,
+  0x2C, 0x2C, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1, 0xA1,
+  0x2C, 0x2C, 0x2C, 0x95, 0x95, 0xCB, 0x70, 0x70,
+  0x95, 0x83, 0x5F, 0xEA, 0x2D, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x5D, 0x49, 0x22, 0x5A, 0x79, 0x20, 0x20, 0x20,
+  0x80, 0xD2, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0x65, 0xD0, 0x63, 0x5F, 0x29, 0x2D, 0x2D, 0xEA,
+  0x29, 0x29, 0x76, 0x50, 0x2D, 0x82, 0x49, 0x49,
+  0x3E, 0x49, 0x5C, 0xB0, 0xBA, 0x95, 0x55, 0x55,
+  0x2C, 0xA1, 0xD6, 0xD6, 0xD6, 0xA1, 0x2C, 0x2C,
+  0xA1, 0x95, 0x95, 0x55, 0xCB, 0x70, 0x70, 0x55,
+  0x2C, 0x83, 0x60, 0x76, 0x5D, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x5D, 0x89, 0xDC, 0x8B, 0x20, 0x20, 0x20,
+  0x20, 0x95, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE2, 0x32, 0x85, 0xE3, 0x29, 0x2D, 0x33, 0x2D,
+  0x2D, 0x2D, 0x6A, 0x2D, 0x33, 0x5D, 0x49, 0x82,
+  0x49, 0x49, 0x82, 0x73, 0x5C, 0x9E, 0x2C, 0x55,
+  0x2C, 0xA1, 0xD6, 0xA1, 0x2C, 0x2C, 0x95, 0x95,
+  0x2C, 0x95, 0x55, 0xCB, 0x90, 0x90, 0xCB, 0x95,
+  0x2C, 0x6D, 0x41, 0x6F, 0x3E, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x82, 0x3E, 0x4E, 0x38, 0xCA, 0x20, 0x20,
+  0x20, 0x55, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0x65,
+  0x42, 0xA0, 0xD4, 0xE3, 0x29, 0x2D, 0x82, 0x5D,
+  0x5D, 0x82, 0x82, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x3E, 0x49, 0x49, 0x49, 0x5C, 0x56, 0xD6,
+  0xA1, 0xA1, 0xA1, 0x95, 0x55, 0x55, 0x55, 0x95,
+  0xA1, 0x55, 0x90, 0x70, 0x94, 0x70, 0x95, 0x2C,
+  0x2C, 0xD6, 0xDD, 0x6F, 0x33, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x5D, 0x5D, 0x82, 0x69, 0x22, 0x62, 0x80, 0x34,
+  0x94, 0x6B, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0x65, 0xE5, 0x65, 0x6B,
+  0xD5, 0x88, 0x5B, 0xE3, 0x29, 0x5D, 0x5D, 0x5D,
+  0x5D, 0x5D, 0x5D, 0x5D, 0x49, 0x49, 0x49, 0x82,
+  0x49, 0x49, 0x89, 0x49, 0x82, 0x49, 0x71, 0xBA,
+  0x6D, 0x6D, 0xA1, 0x95, 0x55, 0xCB, 0x55, 0x55,
+  0x2C, 0x55, 0x70, 0x70, 0x70, 0x90, 0x95, 0xA1,
+  0x2C, 0xA1, 0x41, 0x76, 0x5D, 0x5D, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x5D, 0x82, 0x5D, 0x89, 0x5E, 0x96, 0x65,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0xE5, 0xE5, 0xE5, 0xE5, 0x65, 0x65, 0xEC, 0xB1,
+  0x20, 0x20, 0xCA, 0x23, 0x29, 0x33, 0x49, 0x5D,
+  0x49, 0x82, 0x49, 0x49, 0x49, 0x49, 0x49, 0x82,
+  0x49, 0x82, 0x5D, 0x5D, 0x5D, 0x2D, 0x5C, 0x8F,
+  0x6D, 0xD6, 0x2C, 0x55, 0x90, 0xCB, 0x95, 0x95,
+  0x95, 0x55, 0x70, 0x94, 0x70, 0x55, 0x2C, 0xA1,
+  0x95, 0xE8, 0x5F, 0x76, 0x33, 0x5D, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x3E, 0x9C, 0x2F, 0x68,
+  0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5,
+  0x65, 0xE5, 0x65, 0xE5, 0x6B, 0x90, 0x80, 0x20,
+  0x20, 0x20, 0x4F, 0x81, 0x50, 0x3E, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x69, 0x69, 0x49, 0x5D, 0x2D, 0xC4, 0x46, 0xA3,
+  0xD6, 0x55, 0x70, 0x94, 0x94, 0x70, 0xCB, 0x55,
+  0x55, 0xCB, 0x70, 0x47, 0x70, 0x95, 0xA1, 0xA1,
+  0x95, 0xBD, 0x75, 0x2D, 0x33, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x5D, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x5D, 0x2D, 0xB5, 0xDB,
+  0xD6, 0x65, 0xE5, 0x65, 0xE5, 0xE5, 0x65, 0xE5,
+  0x65, 0x65, 0x6B, 0x95, 0x2B, 0x88, 0x20, 0x20,
+  0x20, 0x20, 0x8B, 0x81, 0x29, 0x33, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x3E, 0x3E, 0x5E, 0x41, 0x97, 0x27, 0xD6,
+  0x55, 0x94, 0xE6, 0xE6, 0x47, 0x70, 0x55, 0x55,
+  0x94, 0x70, 0x94, 0x94, 0x70, 0x55, 0xA1, 0x2C,
+  0x6D, 0xC5, 0x39, 0x6A, 0x5D, 0x5D, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x3E, 0xEA, 0x30, 0x77,
+  0xE1, 0xC9, 0x94, 0x2C, 0xD6, 0xD6, 0xA1, 0x55,
+  0x47, 0x9F, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x80, 0x91, 0x81, 0x6A, 0x2D, 0x49, 0x49,
+  0x49, 0x5D, 0x5D, 0x49, 0x49, 0x5D, 0x5D, 0x82,
+  0xEB, 0x4A, 0x41, 0xC2, 0x8F, 0xF5, 0xA1, 0x55,
+  0x94, 0x28, 0xA0, 0x47, 0x70, 0x55, 0x95, 0x95,
+  0x47, 0x70, 0x70, 0x94, 0x90, 0x95, 0xA1, 0x2C,
+  0xE8, 0xA6, 0x39, 0x76, 0x50, 0x50, 0x2D, 0x2D,
+  0x3E, 0x3E, 0x5D, 0x3E, 0x5D, 0x5D, 0x49, 0x82,
+  0x49, 0x49, 0x49, 0x82, 0x82, 0x50, 0x75, 0xE0,
+  0x57, 0x20, 0x88, 0x88, 0x20, 0x20, 0x88, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x79, 0x91, 0x81, 0x76, 0x33, 0x49, 0x49,
+  0x5D, 0x82, 0x49, 0x49, 0x3E, 0x6A, 0xEA, 0x29,
+  0xDF, 0x97, 0xBF, 0x6D, 0x6D, 0xD6, 0x55, 0x47,
+  0x28, 0x28, 0x47, 0x70, 0x55, 0x95, 0x2C, 0x2C,
+  0x95, 0x95, 0x55, 0x90, 0x90, 0x95, 0xA1, 0xA1,
+  0xD6, 0x26, 0x45, 0x81, 0x5F, 0x30, 0x48, 0x6F,
+  0x6F, 0x29, 0x29, 0x6A, 0x2D, 0x2D, 0x5D, 0x49,
+  0x49, 0x49, 0x49, 0x49, 0x2D, 0x76, 0x6E, 0x77,
+  0x5B, 0x66, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x20, 0x79, 0xA9, 0xB8, 0x39, 0x50, 0x5D, 0x5D,
+  0x5D, 0x5D, 0x3E, 0x2D, 0x29, 0x76, 0xCD, 0x37,
+  0xB9, 0xA1, 0xA1, 0x6D, 0x6D, 0x2C, 0x94, 0x28,
+  0xD5, 0xE6, 0x70, 0x55, 0x95, 0xA1, 0x2C, 0xA1,
+  0xBF, 0xA1, 0x95, 0xCB, 0x55, 0x95, 0xA1, 0x2C,
+  0x95, 0x83, 0xDE, 0x87, 0xB6, 0xBE, 0x40, 0x6E,
+  0x81, 0x81, 0x78, 0x78, 0x39, 0x6F, 0xEA, 0x2D,
+  0x2D, 0x33, 0x33, 0x33, 0x76, 0x30, 0x64, 0x54,
+  0x5B, 0x66, 0x20, 0x20, 0x66, 0x20, 0x88, 0x20,
+  0x20, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
+  0x88, 0x34, 0x8B, 0xF1, 0x23, 0x6F, 0x50, 0x2D,
+  0x2D, 0x6A, 0x29, 0x6F, 0x78, 0x84, 0x9B, 0xD2,
+  0x2C, 0x2C, 0xD6, 0x6D, 0x6D, 0x2C, 0x47, 0xA0,
+  0xE6, 0x70, 0x55, 0x95, 0x2C, 0xA1, 0xA1, 0xA1,
+  0xD2, 0x95, 0x55, 0xCB, 0x55, 0x2C, 0xD6, 0xA1,
+  0x95, 0x95, 0xA1, 0xD6, 0x6D, 0x6D, 0xBA, 0xF3,
+  0x8D, 0x36, 0x74, 0x36, 0xF1, 0xB8, 0x23, 0x78,
+  0x62, 0x4A, 0x29, 0x62, 0x23, 0xF1, 0x54, 0x31,
+  0x57, 0x2B, 0x90, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0x2C, 0x2C, 0xCB,
+  0xE6, 0x7D, 0xCA, 0xB7, 0xB8, 0x75, 0x6F, 0x6F,
+  0x76, 0x6F, 0x78, 0x81, 0x53, 0xBD, 0x6D, 0x2C,
+  0x95, 0x95, 0xA1, 0x6D, 0xA1, 0x55, 0x94, 0xE6,
+  0x70, 0xCB, 0x55, 0x95, 0xA1, 0xD6, 0xD6, 0xA1,
+  0xD0, 0x94, 0x94, 0x90, 0x95, 0x2C, 0xD6, 0xA1,
+  0x95, 0x55, 0x2C, 0xA1, 0xD6, 0xA1, 0x95, 0x2C,
+  0xD6, 0x68, 0xAB, 0x6C, 0xA4, 0x77, 0x77, 0xAD,
+  0x40, 0x53, 0x6E, 0x40, 0xB7, 0x54, 0x31, 0xD7,
+  0xAC, 0xD6, 0x55, 0x55, 0x95, 0x95, 0x95, 0x55,
+  0x95, 0x2C, 0x2C, 0xA1, 0x95, 0x95, 0x2C, 0xA1,
+  0x6D, 0xD2, 0x7C, 0x54, 0xAD, 0x40, 0x6E, 0x81,
+  0x81, 0x6E, 0x36, 0xDA, 0xE8, 0xD6, 0xD6, 0x2C,
+  0x2C, 0x2C, 0xA1, 0xD6, 0x95, 0x90, 0x94, 0x47,
+  0x94, 0x94, 0x70, 0x55, 0x2C, 0xD6, 0xA1, 0x95,
+  0x95, 0x28, 0x47, 0x90, 0x95, 0x2C, 0xA1, 0x2C,
+  0x55, 0x95, 0x2C, 0xA1, 0xA1, 0x2C, 0x2C, 0x2C,
+  0x2C, 0xA1, 0x55, 0x70, 0x95, 0x2C, 0xB2, 0xB4,
+  0xC3, 0xC3, 0x54, 0x54, 0xA9, 0x31, 0xCA, 0x2A,
+  0x95, 0x90, 0x55, 0x95, 0x2C, 0xA1, 0x2C, 0x95,
+  0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xD6,
+  0x6D, 0x2A, 0xB2, 0x4F, 0x31, 0x2E, 0xE0, 0xAD,
+  0xB7, 0xC8, 0xB4, 0xF5, 0x2C, 0xA1, 0xA1, 0xA1,
+  0x95, 0x2C, 0xA1, 0x2C, 0x95, 0x70, 0x94, 0x94,
+  0x94, 0x94, 0x70, 0x95, 0xD6, 0xD6, 0x2C, 0x95,
+  0x94, 0x28, 0x47, 0xCB, 0x95, 0x2C, 0xA1, 0xA1,
+  0x95, 0x55, 0x2C, 0xA1, 0xD6, 0xA1, 0x95, 0x95,
+  0x95, 0x2C, 0x55, 0x70, 0x70, 0x70, 0x94, 0x2C,
+  0x63, 0xBB, 0xA5, 0xD7, 0xCA, 0xB3, 0x6D, 0x2C,
+  0x55, 0x55, 0x95, 0x2C, 0x2C, 0x2C, 0x95, 0x95,
+  0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0xA1,
+  0xD6, 0x2C, 0x70, 0x95, 0xAC, 0xC0, 0xDB, 0xEF,
+  0xEF, 0xA2, 0xE8, 0x95, 0x95, 0xA1, 0xD6, 0xA1,
+  0x95, 0x55, 0x2C, 0x95, 0x55, 0x70, 0x70, 0x70,
+  0x94, 0x70, 0x55, 0xD6, 0x6D, 0x6D, 0x95, 0x55,
+  0x70, 0x47, 0x70, 0x95, 0x2C, 0x2C, 0x2C, 0xA1,
+  0x2C, 0x95, 0x2C, 0xA1, 0xD6, 0xA1, 0x95, 0x55,
+  0x55, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x95,
+  0xA1, 0xF5, 0xBF, 0xBF, 0xA1, 0x95, 0x95, 0x95,
+  0x95, 0x55, 0x2C, 0x2C, 0x95, 0x55, 0x55, 0x95,
+  0x95, 0x95, 0xA1, 0xA1, 0xA1, 0xA1, 0x2C, 0xA1,
+  0x2C, 0x55, 0x70, 0x94, 0x90, 0x2C, 0x6D, 0x6D,
+  0x6D, 0xA1, 0x2C, 0x95, 0x2C, 0xA1, 0xD6, 0xA1,
+  0x2C, 0x55, 0x55, 0x95, 0x55, 0x55, 0x55, 0x55,
+  0x55, 0x95, 0xD6, 0x6D, 0xBF, 0xD6, 0x55, 0xCB,
+  0x55, 0x55, 0x55, 0x2C, 0x2C, 0x2C, 0x2C, 0xA1,
+  0xA1, 0x95, 0x2C, 0xA1, 0xA1, 0xA1, 0x2C, 0x95,
+  0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C, 0xA1,
+  0x6D, 0xBF, 0x6D, 0x2C, 0x55, 0x55, 0x95, 0x95,
+  0xCB, 0xCB, 0x55, 0x55, 0xCB, 0x55, 0x55, 0x95,
+  0x95, 0x2C, 0x2C, 0xA1, 0xA1, 0xA1, 0x2C, 0x2C,
+  0xA1, 0x95, 0xCB, 0xCB, 0x95, 0x95, 0x2C, 0x2C,
+  0x2C, 0xA1, 0x2C, 0x2C, 0x2C, 0xA1, 0xA1, 0x2C,
+  0x2C, 0x95, 0x55, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x2C, 0xA1, 0x6D, 0xBF, 0x6D, 0xA1, 0x55, 0x55,
+  0x95, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x2C,
+  0x2C, 0x95, 0x95, 0x95, 0x2C, 0x2C, 0x2C, 0x95,
+  0x55, 0x95, 0x2C, 0x2C, 0xA1, 0xA1, 0xD6, 0xD6,
+  0x6D, 0x6D, 0xA1, 0x95, 0xCB, 0x55, 0x95, 0x55,
+  0x90, 0x70, 0xCB, 0xCB, 0x90, 0xCB, 0x95, 0x95,
+  0x2C, 0x2C, 0xA1, 0xD6, 0xA1, 0xA1, 0xA1, 0xA1,
+  0xA1, 0xA1, 0x2C, 0x95, 0x95, 0x2C, 0x2C, 0x2C,
+  0x2C, 0xA1, 0x2C, 0x95, 0x95, 0x95, 0x2C, 0x2C,
+  0x2C, 0x95, 0x55, 0x55, 0x2C, 0x2C, 0xA1, 0xA1,
+  0xD6, 0xD6, 0x6D, 0x6D, 0xA1, 0x55, 0xCB, 0x55
 };
+#endif
 
-#endif /* !__HAVE_ARCH_LINUX_LOGO */
+#else /* biglogo */
+#if 0
+#include <linux/biglogo.h>
+#else
+#include <linux/biglogo2.h>
+#endif
+#endif
 
-#ifndef __HAVE_ARCH_LINUX_LOGOBW
+#ifdef INCLUDE_LINUX_LOGOBW
 
-unsigned char linux_logo_bw[] __initdata = {
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xcf, 0xf3, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xbf, 0xfc, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfd, 0xff, 0xf3, 0xdf, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfd, 0xff, 0xf7, 0xef, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x9f, 0x87, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x0f, 0x03, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x67, 0x33, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xe7, 0x79, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xf7, 0x79, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0xf9, 0xf7, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x60, 0x3b, 0xf7, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x89, 0x07, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x00, 0x03, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x00, 0x0d, 0xfb, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x80, 0x33, 0xfd, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xc0, 0xc3, 0xfd, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0xff, 0x0d, 0xdd, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xfb, 0x40, 0x31, 0xee, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf7, 0x20, 0xc1, 0xee, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf7, 0x1f, 0x00, 0xff, 0x7f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xef, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xee, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xde, 0x00, 0x00, 0x7f, 0xdf, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xbc, 0x00, 0x00, 0x3f, 0xef, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x7c, 0x00, 0x00, 0x3f, 0xf7, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x7c, 0x00, 0x00, 0x1f, 0xf7, 0xff, 0xff,
-    0xff, 0xff, 0xfe, 0xff, 0x1c, 0x07, 0xdf, 0xfb, 0xff, 0xff,
-    0xff, 0xff, 0xfd, 0xfc, 0x08, 0x0f, 0xef, 0xfd, 0xff, 0xff,
-    0xff, 0xff, 0xfd, 0xf8, 0x00, 0x01, 0xef, 0xfd, 0xff, 0xff,
-    0xff, 0xff, 0xfb, 0xf0, 0x00, 0x00, 0x7f, 0xfe, 0xff, 0xff,
-    0xff, 0xff, 0xfb, 0xe0, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xff,
-    0xff, 0xff, 0xf7, 0xe0, 0x00, 0x00, 0x07, 0xbf, 0x7f, 0xff,
-    0xff, 0xff, 0xf7, 0xc0, 0x00, 0x00, 0x03, 0xbf, 0x7f, 0xff,
-    0xff, 0xff, 0xef, 0xc0, 0x00, 0x00, 0x03, 0xdf, 0xbf, 0xff,
-    0xff, 0xff, 0xef, 0x80, 0x00, 0x00, 0x03, 0xdf, 0xbf, 0xff,
-    0xff, 0xff, 0xdf, 0x80, 0x00, 0x00, 0x03, 0xdf, 0xbf, 0xff,
-    0xff, 0xff, 0xdf, 0x80, 0x00, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xdf, 0x80, 0x00, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x01, 0xef, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x03, 0x03, 0xdf, 0xff,
-    0xff, 0xff, 0xbf, 0x00, 0x20, 0x00, 0x02, 0xfd, 0xdf, 0xff,
-    0xff, 0xff, 0xa3, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xdf, 0xff,
-    0xff, 0xff, 0xc1, 0xc0, 0x00, 0x00, 0x11, 0xff, 0x3f, 0xff,
-    0xff, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x21, 0xfe, 0x3f, 0xff,
-    0xff, 0xff, 0x00, 0x70, 0x00, 0x00, 0x21, 0xfc, 0x3f, 0xff,
-    0xff, 0xfe, 0x00, 0x3c, 0x00, 0x00, 0x20, 0xf8, 0x3f, 0xff,
-    0xff, 0xf0, 0x00, 0x3e, 0x00, 0x00, 0x20, 0x00, 0x3f, 0xff,
-    0xff, 0xc0, 0x00, 0x1f, 0x00, 0x00, 0x20, 0x00, 0x3f, 0xff,
-    0xff, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x20, 0x00, 0x1f, 0xff,
-    0xff, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x20, 0x00, 0x07, 0xff,
-    0xff, 0xc0, 0x00, 0x07, 0x80, 0x00, 0x20, 0x00, 0x03, 0xff,
-    0xff, 0xc0, 0x00, 0x07, 0x80, 0x00, 0x60, 0x00, 0x01, 0xff,
-    0xff, 0xc0, 0x00, 0x02, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xff,
-    0xff, 0xc0, 0x00, 0x01, 0x00, 0x01, 0xe0, 0x00, 0x01, 0xff,
-    0xff, 0xc0, 0x00, 0x00, 0x80, 0x07, 0xe0, 0x00, 0x03, 0xff,
-    0xff, 0xc0, 0x00, 0x00, 0x80, 0x3f, 0xe0, 0x00, 0x0f, 0xff,
-    0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x1f, 0xff,
-    0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x7f, 0xff,
-    0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0xff, 0xff,
-    0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x03, 0xff, 0xff,
-    0xff, 0xff, 0xc0, 0x00, 0x70, 0x00, 0xc0, 0x07, 0xff, 0xff,
-    0xff, 0xff, 0xfc, 0x00, 0x8f, 0xff, 0x20, 0x0f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+unsigned char linux_logo_bw[]  = {
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x3F,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
+  0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFE, 0x3F, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xC7, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xC3,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF,
+  0xFB, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFD, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xF1,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF,
+  0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xF9, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xF9, 0xCF, 0xC3, 0xF8, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x87, 0x81, 0xF9,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xA7,
+  0x99, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xF9, 0xF3, 0xBC, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xF9, 0xE3, 0xBC, 0xF9, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xB0, 0x3C, 0xF9,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xB0,
+  0x19, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xF9, 0xC0, 0x03, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xF9, 0x80, 0x01, 0xF8, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x80, 0x01, 0xF8,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x80,
+  0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xF9, 0xC0, 0x21, 0xD8, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xF9, 0xB1, 0x80, 0xEC, 0xC0, 0x1F,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x90, 0x00, 0xE4,
+  0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x8C,
+  0xC0, 0x7C, 0x04, 0x81, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xE3, 0x80, 0x00, 0x7C, 0x40, 0x11, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xE3, 0x80, 0x00, 0x7F, 0xD2, 0x29,
+  0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x00, 0x00, 0x3F,
+  0x80, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x00,
+  0x00, 0x3F, 0x80, 0x19, 0xFF, 0xFF, 0xFF, 0xFF,
+  0x1E, 0x00, 0x00, 0x1F, 0x80, 0x19, 0xFF, 0xFF,
+  0xFF, 0xFE, 0x1C, 0x00, 0x00, 0x1E, 0x80, 0x19,
+  0xFF, 0xFF, 0xFF, 0xFE, 0x3C, 0x00, 0x00, 0x1E,
+  0x80, 0x11, 0xFF, 0xFF, 0xFF, 0xFC, 0x7C, 0x00,
+  0x00, 0x0F, 0x80, 0x11, 0xFF, 0xFF, 0xFF, 0xFC,
+  0xF8, 0x00, 0x00, 0x0E, 0x80, 0x11, 0xFF, 0xFF,
+  0xFF, 0xFC, 0xF8, 0x00, 0x00, 0x06, 0x00, 0x11,
+  0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0x00, 0x00, 0x06,
+  0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF9, 0xF0, 0x00,
+  0x00, 0x02, 0x00, 0x09, 0xFF, 0xFF, 0xFF, 0xF1,
+  0xF0, 0x00, 0x00, 0x02, 0x80, 0x10, 0xFF, 0xFF,
+  0xFF, 0xF1, 0xE0, 0x00, 0x00, 0x00, 0x97, 0x10,
+  0xFF, 0xFF, 0xFF, 0xE3, 0xE0, 0x00, 0x00, 0x00,
+  0xDF, 0xF0, 0xFF, 0xFF, 0xFF, 0xE3, 0xC0, 0x00,
+  0x00, 0x00, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xC7,
+  0xC0, 0x00, 0x00, 0x01, 0xFF, 0xF8, 0xFF, 0xFF,
+  0xFF, 0xC7, 0x80, 0x00, 0x00, 0x01, 0xFF, 0xF8,
+  0xFF, 0xFF, 0xFF, 0x8F, 0x80, 0x00, 0x00, 0x01,
+  0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0x8F, 0x80, 0x00,
+  0x00, 0x01, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0x9F,
+  0x80, 0x00, 0x00, 0x01, 0xFF, 0xF8, 0xFF, 0xFF,
+  0xFF, 0x9F, 0x80, 0x00, 0x00, 0x01, 0x80, 0x18,
+  0xFF, 0xFF, 0xFF, 0x9E, 0x80, 0x00, 0x00, 0x03,
+  0xA8, 0x11, 0xFF, 0xFF, 0xFF, 0x9F, 0x80, 0x00,
+  0x00, 0x02, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x99,
+  0x80, 0x00, 0x00, 0x00, 0x00, 0x09, 0xFF, 0xFF,
+  0xFF, 0x00, 0x80, 0x00, 0x00, 0x01, 0xC0, 0x01,
+  0xFF, 0xFF, 0xFE, 0x20, 0x60, 0x00, 0x00, 0x00,
+  0xFF, 0xC3, 0xFF, 0xFF, 0xF8, 0x00, 0x30, 0x00,
+  0x00, 0x00, 0xFF, 0x0F, 0xFF, 0xFF, 0xC0, 0x40,
+  0x38, 0x00, 0x00, 0x00, 0xFE, 0x47, 0xFF, 0xFF,
+  0x81, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xFC, 0x23,
+  0xFF, 0xFF, 0x90, 0x00, 0x1E, 0x00, 0x00, 0x00,
+  0x78, 0x11, 0xFF, 0xFF, 0x80, 0x00, 0x0F, 0x80,
+  0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00,
+  0x07, 0xC0, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xFF,
+  0xC0, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x04,
+  0x7F, 0xFF, 0x80, 0x00, 0x03, 0xC0, 0x00, 0x10,
+  0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x01, 0x80,
+  0x00, 0x30, 0x00, 0x00, 0x0F, 0xFF, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x70, 0x00, 0x01, 0x4F, 0xFF,
+  0x80, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
+  0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x80, 0x03, 0xF0,
+  0x00, 0x00, 0x8F, 0xFF, 0x80, 0x00, 0x00, 0x40,
+  0x0F, 0xF0, 0x00, 0x04, 0x1F, 0xFF, 0x80, 0x00,
+  0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x10, 0x1F, 0xFF,
+  0xC0, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x40,
+  0xFF, 0xFF, 0x98, 0x00, 0x00, 0xFF, 0xFF, 0xF0,
+  0x00, 0x83, 0xFF, 0xFF, 0x81, 0xE0, 0x01, 0xFF,
+  0xFF, 0xF8, 0x02, 0x07, 0xFF, 0xFF, 0x80, 0x3F,
+  0x07, 0xE0, 0x00, 0x1C, 0x0C, 0x1F, 0xFF, 0xFF,
+  0xF8, 0x03, 0xFF, 0x80, 0x00, 0x1F, 0x78, 0x1F,
+  0xFF, 0xFF, 0xFF, 0x80, 0x7F, 0x00, 0x07, 0x0F,
+  0xF0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x0C, 0x07,
+  0xFF, 0x83, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0x00, 0x1F, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x07, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
+  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 };
 
-#endif /* !__HAVE_ARCH_LINUX_LOGOBW */
+#endif
 
-#ifndef __HAVE_ARCH_LINUX_LOGO16
+#ifdef INCLUDE_LINUX_LOGO16
 
-unsigned char linux_logo16[] __initdata = {
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x88, 0x88, 0x88, 0x80, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x88, 0x80, 0x00, 0x00, 0x08, 0x88, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x80,
-    0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x08, 0x70, 0x00, 0x00, 0x00, 0x77, 0x70, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x87, 0x77, 0x00, 0x00, 0x07, 0xff, 0xf7, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
-    0x77, 0xff, 0x00, 0x00, 0x7f, 0x77, 0xf7, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
-    0x70, 0x0f, 0x80, 0x00, 0xf7, 0x08, 0x7f, 0x70,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
-    0x80, 0x07, 0x80, 0x00, 0xf8, 0x00, 0x8f, 0x70,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
-    0x70, 0x07, 0x88, 0x88, 0xf8, 0x00, 0x8f, 0x70,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0xf0, 0x06, 0xe6, 0xe6, 0xe6, 0x00, 0x8f, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x77, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x77, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x06, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0x00,
-    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x60,
-    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0x60,
-    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x66, 0x66, 0x80,
-    0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
-    0x86, 0xe6, 0xe6, 0xe6, 0x66, 0x66, 0x66, 0x80,
-    0x08, 0x78, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
-    0x86, 0x66, 0x66, 0x66, 0x66, 0x66, 0x77, 0x70,
-    0x00, 0x77, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x87, 0x66, 0x66, 0x66, 0x66, 0x77, 0x77, 0x78,
-    0x00, 0x88, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x87, 0x76, 0x66, 0x66, 0x77, 0x77, 0xff, 0xf7,
-    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08,
-    0xff, 0x77, 0x77, 0x77, 0x77, 0xff, 0xff, 0xff,
-    0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07,
-    0xff, 0x77, 0x77, 0x77, 0x7f, 0xff, 0xff, 0xff,
-    0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x8f,
-    0xff, 0xf7, 0x77, 0x77, 0xff, 0xff, 0xff, 0xff,
-    0xf0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x7f,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf8, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x87, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x87, 0x77,
-    0xff, 0xf7, 0x77, 0xff, 0xff, 0xff, 0x77, 0x77,
-    0x77, 0x78, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x77, 0x7f,
-    0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x77,
-    0x77, 0x78, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x7f, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x77, 0x00, 0x08, 0x80, 0x00, 0x00, 0x80,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x80, 0x80, 0x08, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x77, 0x80, 0x00, 0x08, 0x00, 0x00, 0x08,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x08, 0x00, 0x80, 0x07, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0x78, 0x00, 0x08, 0x80, 0x00, 0x08,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x08, 0x08, 0x00, 0x8f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xf7, 0x08, 0x80, 0x80, 0x00, 0x08,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x08, 0x08, 0x08, 0x7f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xf7, 0x08, 0x80, 0x80, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x80, 0x08, 0x07, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x80, 0x00, 0x08, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x80, 0x80, 0x0f, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x70, 0x00, 0x08, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x08, 0x00, 0x80, 0x8f, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x70, 0x00, 0x08, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x08, 0x08, 0x00, 0x7f, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0x70, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x80, 0x08, 0x00, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x08, 0x00, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x08, 0x08, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x08, 0x08, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x88, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x00, 0x00, 0x08, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf0, 0x88, 0x88, 0x80, 0x00,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x08, 0x06, 0xe6, 0x00, 0x8f, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x08, 0x80,
-    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x6e, 0x6e, 0x60, 0x08, 0xff, 0xff, 0xff,
-    0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xe6, 0xe0, 0x00, 0x00, 0x00, 0x88,
-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x06, 0xe6, 0xe6, 0xe6, 0x00, 0x8f, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xfe, 0x6e, 0x60, 0x00, 0x00, 0x00, 0x00,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x60, 0x08, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xf6, 0xe6, 0xe0, 0x00, 0x00, 0x00, 0x06,
-    0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe0, 0x00, 0x8f, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xfe, 0x6e, 0x60, 0x00, 0x00, 0x00, 0x0e,
-    0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x00, 0x08, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0x76, 0xe6, 0xe6, 0x00, 0x00, 0x00, 0xe6,
-    0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe0, 0x00, 0x8f,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x7e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x60, 0x00, 0x08,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x76, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0x00, 0x00,
-    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x7e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x60, 0x00,
-    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x76, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe0, 0x00,
-    0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xf7, 0x8e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x88,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0x78, 0x86, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xef,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7,
-    0x80, 0x06, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78,
-    0x00, 0x06, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe0, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x80,
-    0x00, 0x06, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x0e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x66,
-    0x67, 0xff, 0xff, 0xff, 0xff, 0x78, 0x80, 0x00,
-    0x00, 0x86, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x06, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x86, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e,
-    0x66, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x0e, 0x6e, 0x6e, 0x6e,
-    0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x66,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x86, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xe6, 0xe6,
-    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x86, 0x6e, 0x6e, 0x6e, 0x6e, 0x66, 0x66,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66,
-    0x66, 0x66, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x66,
-    0x60, 0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x80,
-    0x00, 0x06, 0x66, 0xe6, 0xe6, 0xe6, 0x66, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x66, 0x66, 0x66, 0x66, 0xe6, 0xe6, 0x66,
-    0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
-    0x88, 0x86, 0x66, 0x6e, 0x6e, 0x66, 0x60, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x60,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x66, 0x66, 0x66, 0x60, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+unsigned char linux_logo16_red[]  = {
+    0x00, 0x90, 0xb0, 0x9c, 0xf7, 0x35, 0x83, 0xa5,
+    0x65, 0x8f, 0x98, 0xc9, 0xdb, 0xe1, 0xe7, 0xf8
 };
 
-#endif /* !__HAVE_ARCH_LINUX_LOGO16 */
-
-#else /* !INCLUDE_LINUX_LOGO_DATA */
+unsigned char linux_logo16_green[]  = {
+    0x00, 0x90, 0xb0, 0x9c, 0xf7, 0x2e, 0x83, 0xa5,
+    0x65, 0x6e, 0x98, 0x89, 0xbf, 0xac, 0xda, 0xf8
+};
 
-/* prototypes only */
-extern unsigned char linux_logo_red[];
-extern unsigned char linux_logo_green[];
-extern unsigned char linux_logo_blue[];
-extern unsigned char linux_logo[];
-extern unsigned char linux_logo_bw[];
-extern unsigned char linux_logo16[];
+unsigned char linux_logo16_blue[]  = {
+    0x00, 0x90, 0xaf, 0x9c, 0xf7, 0x2b, 0x82, 0xa5,
+    0x65, 0x41, 0x97, 0x1e, 0x60, 0x29, 0xa5, 0xf8
+};
 
-#endif /* !INCLUDE_LINUX_LOGO_DATA */
+unsigned char linux_logo16[]  = {
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa1, 0x11, 0x11,
+    0x61, 0x16, 0x66, 0x66, 0x11, 0x11, 0x11, 0x11,
+    0x11, 0x11, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0xa8, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x87, 0x77, 0x77, 0x77, 0x77,
+    0x77, 0x77, 0x73, 0x33, 0x33, 0x3a, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xa3, 0x33, 0x33, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x77,
+    0x77, 0x27, 0x77, 0x77, 0x77, 0x33, 0x3a, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xa3, 0x33, 0x33, 0x30, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x55, 0x50, 0x08, 0x33, 0x77, 0x77,
+    0x77, 0x72, 0x72, 0x27, 0x77, 0x77, 0x33, 0x33,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xa3, 0x33, 0x33, 0x77, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x58, 0x85, 0x00, 0x11, 0x11, 0xaa,
+    0xa3, 0x37, 0x77, 0x72, 0x22, 0x22, 0x77, 0x73,
+    0x33, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa3,
+    0x33, 0x37, 0x77, 0x33, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x56, 0x85, 0x00, 0x06, 0x66, 0x11,
+    0x11, 0x1a, 0xa3, 0x37, 0x77, 0x72, 0x22, 0x77,
+    0x73, 0x33, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33,
+    0x33, 0x33, 0x33, 0x30, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x55, 0x00, 0x00, 0x06, 0x66, 0x66,
+    0x66, 0x66, 0x11, 0x1a, 0xa3, 0x77, 0x72, 0x22,
+    0x77, 0x73, 0x3a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33,
+    0x33, 0x33, 0x33, 0xa0, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11,
+    0x66, 0x66, 0x66, 0x66, 0x11, 0xa3, 0x77, 0x22,
+    0x22, 0x77, 0x33, 0x33, 0xaa, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x33,
+    0x33, 0x3a, 0xa1, 0x10, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x33,
+    0xaa, 0x11, 0x16, 0x66, 0x66, 0x61, 0x1a, 0x37,
+    0x22, 0x22, 0x77, 0x33, 0x3a, 0xaa, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xa3, 0x33, 0x33, 0x33,
+    0x3a, 0xa1, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x22,
+    0x22, 0x77, 0x3a, 0x11, 0x66, 0x66, 0x66, 0x1a,
+    0x37, 0x22, 0x22, 0x77, 0x33, 0x3a, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x33, 0x3a,
+    0xa1, 0x11, 0x11, 0x10, 0x00, 0x00, 0x50, 0x00,
+    0x00, 0x05, 0x80, 0x50, 0x00, 0x00, 0x07, 0x72,
+    0x22, 0x22, 0x22, 0x73, 0xa1, 0x66, 0x66, 0x61,
+    0x1a, 0x77, 0x22, 0x27, 0x73, 0x33, 0xaa, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x3a, 0xaa,
+    0x11, 0x11, 0x1a, 0xa0, 0x08, 0x71, 0x05, 0x00,
+    0x00, 0x12, 0x22, 0x50, 0x00, 0x00, 0x07, 0x77,
+    0x77, 0x72, 0x22, 0x22, 0x27, 0x31, 0x16, 0x66,
+    0x61, 0x13, 0x77, 0x22, 0x77, 0x33, 0x3a, 0xaa,
+    0xaa, 0xaa, 0xaa, 0xa3, 0x33, 0x33, 0xaa, 0xa1,
+    0x11, 0x1a, 0x33, 0x70, 0x07, 0x2e, 0x70, 0x00,
+    0x01, 0x44, 0x42, 0x60, 0x00, 0x00, 0x02, 0x22,
+    0x22, 0x22, 0x22, 0x22, 0x22, 0x27, 0x31, 0x66,
+    0x66, 0x61, 0xa3, 0x72, 0x22, 0x77, 0x33, 0xaa,
+    0xaa, 0xaa, 0xa3, 0x33, 0x33, 0xaa, 0xaa, 0x11,
+    0x1a, 0x33, 0x77, 0x30, 0x04, 0x82, 0x40, 0x00,
+    0x54, 0x48, 0x54, 0x40, 0x00, 0x00, 0x01, 0xaa,
+    0x32, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x31,
+    0x66, 0x66, 0x11, 0x37, 0x22, 0x27, 0x73, 0x3a,
+    0xaa, 0xaa, 0xa3, 0x33, 0x3a, 0xaa, 0xaa, 0xaa,
+    0xa3, 0x77, 0xaa, 0x10, 0x50, 0x08, 0x46, 0x05,
+    0x54, 0x80, 0x50, 0x42, 0x00, 0x00, 0x08, 0x66,
+    0x66, 0x1a, 0x32, 0x22, 0x22, 0x22, 0x22, 0x27,
+    0x31, 0x66, 0x66, 0x13, 0x72, 0x22, 0x77, 0x33,
+    0xaa, 0xaa, 0xaa, 0x33, 0xaa, 0xa1, 0xaa, 0xa3,
+    0x37, 0xa1, 0x1a, 0x30, 0x50, 0x06, 0x26, 0x00,
+    0x54, 0x00, 0x00, 0x44, 0x00, 0x00, 0x08, 0xe2,
+    0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0x22, 0x22,
+    0x27, 0xa6, 0x66, 0x61, 0xa7, 0x72, 0x27, 0x73,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33,
+    0x31, 0x11, 0x37, 0x70, 0x02, 0x00, 0xab, 0xbb,
+    0xb6, 0x00, 0x00, 0xf4, 0x00, 0x00, 0xee, 0xee,
+    0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0x22,
+    0x22, 0x23, 0x16, 0x66, 0x1a, 0x37, 0x22, 0x77,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa3, 0x3a,
+    0x11, 0xa7, 0x33, 0x10, 0x04, 0x09, 0xbd, 0xdd,
+    0xbd, 0xd0, 0x04, 0x45, 0x00, 0x0e, 0xee, 0xee,
+    0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0x22,
+    0x22, 0x22, 0x71, 0x66, 0x66, 0x13, 0x72, 0x27,
+    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x11,
+    0xa3, 0x73, 0xa1, 0x60, 0x08, 0xbd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdb, 0x90, 0x00, 0x02, 0xec, 0xee,
+    0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xce, 0x22,
+    0x22, 0x22, 0x27, 0xa6, 0x66, 0x61, 0x37, 0x27,
+    0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xa3, 0xa1, 0x1a,
+    0x33, 0xa1, 0x16, 0x60, 0x0b, 0xbd, 0xdd, 0xdd,
+    0xcd, 0xdd, 0xdd, 0xd9, 0x00, 0x00, 0xec, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0xa2,
+    0x22, 0x22, 0x22, 0x7a, 0x66, 0x66, 0x13, 0x77,
+    0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0x3a, 0x11, 0x33,
+    0xaa, 0x11, 0x66, 0x60, 0x9b, 0xdd, 0xdd, 0xdd,
+    0xcd, 0xdd, 0xdb, 0xb9, 0x00, 0x00, 0xec, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xee, 0x61,
+    0x72, 0x22, 0x22, 0x22, 0xa1, 0x66, 0x61, 0x37,
+    0x1a, 0xaa, 0xaa, 0xaa, 0xa3, 0xa1, 0x13, 0x3a,
+    0x11, 0x11, 0x11, 0x10, 0x5b, 0xdd, 0xdd, 0xdc,
+    0xdd, 0xdd, 0xbd, 0xd9, 0x00, 0x00, 0xec, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xee, 0x86,
+    0x17, 0x22, 0x22, 0x22, 0x23, 0x16, 0x66, 0xaa,
+    0xaa, 0xa3, 0x3a, 0xaa, 0xaa, 0x1a, 0x3a, 0xa1,
+    0x11, 0x11, 0x1a, 0x70, 0x05, 0xbd, 0xdd, 0xdd,
+    0xdb, 0x5b, 0xdd, 0xb0, 0x00, 0x60, 0x2e, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe6, 0x88,
+    0x66, 0x32, 0x22, 0x22, 0x22, 0x36, 0x66, 0x11,
+    0x33, 0x33, 0x3a, 0xaa, 0x11, 0xaa, 0xaa, 0xa1,
+    0x11, 0x1a, 0x3a, 0x60, 0x02, 0x99, 0xbb, 0xb9,
+    0x9b, 0xbb, 0xbc, 0x22, 0x00, 0x86, 0x5e, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe1, 0x68,
+    0x86, 0x63, 0x22, 0x22, 0x22, 0x2a, 0x66, 0x66,
+    0x33, 0x33, 0xaa, 0xaa, 0x1a, 0xaa, 0xaa, 0x11,
+    0x1a, 0xa7, 0x68, 0x80, 0x02, 0x2b, 0xbd, 0xbb,
+    0xbb, 0xb9, 0x22, 0x22, 0x00, 0x06, 0x6e, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xc7, 0xa6,
+    0x88, 0x86, 0x32, 0x22, 0x22, 0x27, 0xa6, 0x66,
+    0x33, 0x3a, 0xaa, 0xa1, 0xaa, 0xaa, 0xa1, 0x11,
+    0xa3, 0xa6, 0x88, 0x80, 0x02, 0x22, 0x9b, 0xbb,
+    0xbb, 0x22, 0x24, 0xf4, 0x60, 0x00, 0x0c, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xc2, 0x21,
+    0x68, 0x88, 0x63, 0x22, 0x22, 0x22, 0x71, 0x66,
+    0x33, 0x3a, 0x11, 0x11, 0xaa, 0xaa, 0x11, 0xaa,
+    0x71, 0x88, 0x88, 0x00, 0x02, 0xe2, 0x26, 0x99,
+    0x22, 0x22, 0x4f, 0xf4, 0x40, 0x00, 0x0c, 0xcc,
+    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x22, 0x22,
+    0x16, 0x88, 0x86, 0xa2, 0x22, 0x22, 0x27, 0x11,
+    0x33, 0xa1, 0x11, 0x11, 0xaa, 0x31, 0x1a, 0xa3,
+    0x68, 0x88, 0x81, 0x00, 0x54, 0x42, 0x22, 0x22,
+    0x22, 0x44, 0xff, 0xff, 0x48, 0x00, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x22, 0x22,
+    0x21, 0x88, 0x88, 0x6a, 0x22, 0x22, 0x22, 0x31,
+    0x3a, 0xa1, 0x11, 0x1a, 0xa3, 0x11, 0x33, 0x36,
+    0x88, 0x86, 0x30, 0x00, 0x4f, 0x44, 0x22, 0x22,
+    0x24, 0xff, 0xff, 0xff, 0x44, 0x00, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x95, 0x22, 0x72,
+    0x22, 0x18, 0x88, 0x86, 0x32, 0x22, 0x22, 0x27,
+    0xaa, 0x11, 0x11, 0x1a, 0x31, 0x13, 0x33, 0x68,
+    0x88, 0x6a, 0x00, 0x02, 0x4f, 0x4f, 0x42, 0x24,
+    0x4f, 0xff, 0xff, 0xff, 0xf4, 0x50, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x22, 0x73,
+    0x72, 0x26, 0x88, 0x88, 0x63, 0x22, 0x22, 0x22,
+    0x11, 0x11, 0x11, 0xa3, 0xa1, 0x73, 0xa6, 0x88,
+    0x81, 0xa5, 0x00, 0x04, 0x4f, 0x4f, 0x44, 0x4f,
+    0xff, 0xff, 0xff, 0xff, 0xf4, 0x40, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x12, 0x27,
+    0xaa, 0x22, 0x68, 0x55, 0x86, 0x72, 0x22, 0x22,
+    0x11, 0x11, 0x1a, 0x33, 0x13, 0x3a, 0x18, 0x88,
+    0x1a, 0x10, 0x00, 0x44, 0x4f, 0x4f, 0xff, 0x4f,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x61, 0x22,
+    0x3a, 0xa2, 0x26, 0x85, 0x58, 0x67, 0x22, 0x22,
+    0x61, 0x61, 0x1a, 0x7a, 0x37, 0x31, 0x88, 0x81,
+    0x11, 0x00, 0x05, 0xe4, 0x44, 0xff, 0xff, 0xff,
+    0x4f, 0xf4, 0x44, 0xff, 0xff, 0xf5, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x88, 0x12,
+    0x2a, 0xaa, 0x72, 0x68, 0x55, 0x81, 0x22, 0x22,
+    0x66, 0x61, 0xa3, 0x33, 0x73, 0x16, 0x88, 0x11,
+    0x10, 0x00, 0x08, 0x74, 0x44, 0x4f, 0x44, 0x44,
+    0xf4, 0xf4, 0x44, 0x44, 0xe2, 0x44, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x88, 0x81,
+    0x22, 0xaa, 0xa7, 0x26, 0x85, 0x88, 0x12, 0x22,
+    0x66, 0x61, 0x37, 0xa7, 0x3a, 0x66, 0x66, 0x11,
+    0x80, 0x00, 0x0a, 0x72, 0x44, 0x4f, 0x44, 0x4f,
+    0xff, 0x44, 0x44, 0x22, 0x22, 0x24, 0x00, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0x85, 0x88,
+    0x12, 0x2a, 0xaa, 0x22, 0x68, 0x58, 0x63, 0x22,
+    0x66, 0x1a, 0x73, 0x77, 0x31, 0x66, 0x61, 0x11,
+    0x00, 0x00, 0x07, 0x44, 0xff, 0x4f, 0xf4, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0x42, 0x22, 0x40, 0x9b,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb9, 0x85, 0x55,
+    0x81, 0x27, 0xaa, 0xa2, 0x78, 0x88, 0x86, 0x72,
+    0x66, 0x13, 0x77, 0x73, 0x11, 0x66, 0x61, 0x76,
+    0x00, 0x50, 0x84, 0xf4, 0xff, 0x4f, 0xf4, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x42, 0x40, 0x9b,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb9, 0x68, 0x55,
+    0x58, 0x12, 0x3a, 0xaa, 0x23, 0x88, 0x88, 0xa7,
+    0x66, 0xa7, 0x77, 0x7a, 0x16, 0x66, 0x1a, 0x15,
+    0x05, 0x00, 0x4f, 0xf4, 0xff, 0x4f, 0xf4, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x44, 0x24, 0x9b,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb9, 0x26, 0x55,
+    0x55, 0x81, 0x23, 0xaa, 0x32, 0x18, 0x88, 0x6a,
+    0x61, 0x37, 0x77, 0x31, 0x66, 0x66, 0x17, 0x60,
+    0x05, 0x08, 0x4f, 0xf4, 0xff, 0x4f, 0xf4, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x4e, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x99, 0xa2, 0x65,
+    0x55, 0x58, 0xa2, 0x7a, 0xa2, 0x26, 0x88, 0x61,
+    0x61, 0x32, 0x27, 0xa1, 0x66, 0x61, 0x31, 0x60,
+    0x00, 0x04, 0x4f, 0xf4, 0xff, 0x44, 0x44, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x44, 0xf4, 0x99,
+    0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x9b, 0xaa, 0x26,
+    0x55, 0x55, 0x87, 0x27, 0x33, 0x27, 0x68, 0x61,
+    0x1a, 0x72, 0x27, 0xa6, 0x66, 0x6a, 0x71, 0x00,
+    0x80, 0x84, 0xff, 0xf4, 0xff, 0x44, 0x44, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x44, 0xf4, 0x99,
+    0x9b, 0x9b, 0x99, 0xb9, 0xb9, 0x99, 0xaa, 0xa2,
+    0x85, 0x55, 0x56, 0x22, 0x27, 0x22, 0x36, 0x66,
+    0x13, 0x22, 0x23, 0x16, 0x86, 0x63, 0x73, 0x00,
+    0x00, 0x44, 0xf4, 0xf4, 0xff, 0x44, 0x44, 0xff,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x4f, 0x99,
+    0x9b, 0x99, 0x99, 0x99, 0xb9, 0x99, 0xaa, 0xaa,
+    0x28, 0x55, 0x58, 0x12, 0x22, 0x22, 0x21, 0x11,
+    0xa3, 0x27, 0x7a, 0x66, 0x86, 0x17, 0x75, 0x05,
+    0x05, 0xff, 0xf4, 0xf4, 0xff, 0x44, 0x44, 0xff,
+    0xff, 0x4f, 0x44, 0x4f, 0x4f, 0x44, 0x4f, 0x99,
+    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x3a, 0xaa,
+    0xa2, 0x85, 0x58, 0x67, 0x72, 0x22, 0x27, 0xa1,
+    0x37, 0x27, 0x7a, 0x68, 0x86, 0xa2, 0x70, 0x00,
+    0x02, 0xff, 0xf4, 0xf4, 0xff, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0xf4, 0xf4, 0xf4, 0x99,
+    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x23, 0xaa,
+    0xa7, 0x78, 0x88, 0x81, 0x77, 0x22, 0x27, 0x3a,
+    0x72, 0x73, 0x71, 0x68, 0x66, 0x32, 0x50, 0x00,
+    0x04, 0x4f, 0xf4, 0xf4, 0xff, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0xf4, 0xf4, 0x44, 0x95,
+    0x99, 0x99, 0x99, 0x99, 0x99, 0x55, 0x12, 0x3a,
+    0xaa, 0x21, 0x88, 0x81, 0x77, 0x27, 0x73, 0x73,
+    0x72, 0x33, 0x36, 0x86, 0x61, 0x72, 0x00, 0x00,
+    0x04, 0x44, 0xf4, 0xf4, 0xf4, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x44, 0x55,
+    0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x8a, 0x27,
+    0xaa, 0x77, 0x68, 0x61, 0x23, 0x71, 0x11, 0x3a,
+    0x27, 0xa3, 0x36, 0x86, 0x61, 0x20, 0x00, 0x00,
+    0x04, 0xf4, 0xf4, 0xf4, 0xf4, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x41, 0x59,
+    0x99, 0x99, 0x99, 0x99, 0x99, 0x95, 0x58, 0x77,
+    0x27, 0x32, 0x36, 0x63, 0x23, 0x71, 0x66, 0x11,
+    0x27, 0x13, 0xa6, 0x86, 0x6a, 0x20, 0x00, 0x50,
+    0x04, 0x4f, 0x4f, 0x4f, 0x4f, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x41, 0x99,
+    0x9b, 0xbb, 0xbb, 0xbb, 0xb9, 0x99, 0x68, 0x13,
+    0x32, 0x22, 0x73, 0xa7, 0x2a, 0x31, 0x88, 0x66,
+    0x7a, 0x13, 0x18, 0x66, 0x63, 0x20, 0x00, 0x06,
+    0x0f, 0x4f, 0x4f, 0x4f, 0x4f, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0x4f, 0x4f, 0x49, 0x95,
+    0xa9, 0xa9, 0x99, 0x97, 0x92, 0x99, 0x65, 0x6a,
+    0x17, 0x22, 0x23, 0x72, 0x27, 0xaa, 0x88, 0x88,
+    0xa1, 0x17, 0x68, 0x66, 0x67, 0x70, 0x00, 0x05,
+    0x0f, 0x4f, 0x4f, 0x4f, 0x4f, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0xf4, 0xf4, 0x49, 0x9c,
+    0x2e, 0xee, 0xee, 0xee, 0xee, 0xa9, 0x65, 0x8a,
+    0x1a, 0xaa, 0x37, 0x72, 0x27, 0x37, 0x88, 0x88,
+    0x11, 0x17, 0x68, 0x66, 0x67, 0x10, 0x9d, 0xd0,
+    0x84, 0x44, 0xff, 0x4f, 0x4f, 0x44, 0xf4, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0xf4, 0xf4, 0x4f, 0x69,
+    0xcc, 0xee, 0xee, 0xee, 0xec, 0x99, 0x88, 0x63,
+    0x61, 0x68, 0x61, 0x72, 0x22, 0x7a, 0x68, 0x88,
+    0x11, 0x17, 0x88, 0x66, 0x12, 0x1b, 0xdd, 0xdd,
+    0x02, 0x44, 0x4f, 0x4f, 0x4f, 0x44, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xff, 0xff, 0x4f, 0x4c, 0xc5,
+    0x0c, 0xc1, 0x11, 0x1c, 0xc0, 0x26, 0x66, 0x17,
+    0x66, 0x88, 0x88, 0x12, 0x22, 0x23, 0xa8, 0x88,
+    0x11, 0x13, 0x88, 0x66, 0x17, 0xbb, 0xdd, 0xdd,
+    0xd0, 0x8f, 0xff, 0xf4, 0xf4, 0x44, 0xf4, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0x4f, 0x44, 0xdd, 0xdd,
+    0x00, 0x00, 0x00, 0x05, 0x9d, 0x21, 0x66, 0x27,
+    0xa6, 0x65, 0x58, 0x67, 0x22, 0x27, 0x28, 0x88,
+    0x11, 0xaa, 0x86, 0x68, 0x1a, 0xbb, 0xdd, 0xdd,
+    0xdb, 0x05, 0xf4, 0xf4, 0xf4, 0xf4, 0x44, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0xf4, 0xf4, 0xdd, 0xdb,
+    0x00, 0x00, 0x00, 0x00, 0xdd, 0xda, 0x66, 0x22,
+    0x71, 0x15, 0x55, 0x81, 0x22, 0x22, 0x76, 0x88,
+    0x11, 0x31, 0x88, 0x88, 0xab, 0xbd, 0xdd, 0xdd,
+    0xdd, 0x00, 0x04, 0x44, 0xff, 0xff, 0x4f, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0xf4, 0x44, 0xdd, 0xdb,
+    0x00, 0x00, 0x00, 0x0b, 0xdd, 0xda, 0x11, 0x22,
+    0x23, 0x68, 0x55, 0x86, 0x22, 0x22, 0x7a, 0x88,
+    0x1a, 0x71, 0x88, 0x89, 0xbb, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xd0, 0x00, 0x4f, 0x44, 0xff, 0x4f, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0xff, 0xe2, 0xdd, 0xdb,
+    0x90, 0x00, 0x05, 0xbd, 0xdd, 0xb8, 0x63, 0x22,
+    0x27, 0xa6, 0x55, 0x88, 0x77, 0x22, 0x22, 0x88,
+    0x1a, 0x28, 0xbd, 0xdb, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdb, 0x00, 0x07, 0x44, 0x4f, 0x4f, 0x4f,
+    0xff, 0x4f, 0x44, 0x4f, 0x4f, 0x22, 0xdd, 0xdb,
+    0xbb, 0x9b, 0xbb, 0xbd, 0xdd, 0xd5, 0x86, 0x22,
+    0x22, 0x77, 0x85, 0x88, 0x17, 0x22, 0x22, 0x88,
+    0xaa, 0x2b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0x00, 0x00, 0x54, 0x4f, 0x4f, 0x4f,
+    0xff, 0x4f, 0x44, 0xf4, 0x44, 0x22, 0xbd, 0xdd,
+    0xbb, 0xbb, 0xbb, 0xdd, 0xdd, 0xdd, 0x88, 0x72,
+    0x27, 0x22, 0x88, 0x88, 0x67, 0x72, 0x22, 0x18,
+    0x33, 0x2d, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xd0, 0x00, 0x05, 0x4f, 0x4f, 0x4f,
+    0xff, 0x4f, 0x44, 0x44, 0x4f, 0x22, 0xbd, 0xdd,
+    0xdb, 0xbb, 0xdd, 0xdd, 0xdd, 0xdd, 0x88, 0x17,
+    0x27, 0x72, 0x68, 0x88, 0x87, 0x32, 0x22, 0x36,
+    0x37, 0x2d, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xd5, 0x00, 0x00, 0x4f, 0x4f, 0x4f,
+    0xff, 0xf4, 0xf4, 0xf4, 0xf4, 0x22, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd8, 0x67,
+    0x72, 0x77, 0x38, 0x88, 0x83, 0x37, 0x22, 0x26,
+    0x72, 0x2b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0x00, 0x00, 0x4f, 0x4f, 0x4f,
+    0xff, 0xf4, 0xf4, 0xf4, 0x44, 0x25, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd3,
+    0x32, 0x73, 0x76, 0x88, 0x81, 0x33, 0x22, 0x2a,
+    0x22, 0x2b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xb0, 0x54, 0x4f, 0x4f, 0x4f,
+    0xff, 0xf4, 0xf4, 0xff, 0x44, 0x00, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xa7, 0x73, 0x26, 0x88, 0x86, 0x7a, 0x72, 0x27,
+    0x22, 0x2b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdb, 0x44, 0xff, 0x4f, 0x4f,
+    0xff, 0xf4, 0xf4, 0x44, 0x40, 0x05, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0x13, 0x23, 0x21, 0x68, 0x86, 0x17, 0x72, 0x22,
+    0x22, 0x2b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdb, 0x44, 0x4f, 0x4f, 0x4f,
+    0xff, 0xff, 0x44, 0x42, 0x00, 0x05, 0xbd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0x87, 0x27, 0x27, 0x16, 0x66, 0x67, 0x22, 0x22,
+    0x72, 0x7b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0x94, 0x44, 0x44, 0x44,
+    0x44, 0x44, 0x44, 0x00, 0x00, 0x05, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xb8,
+    0x86, 0x22, 0x22, 0x7a, 0x68, 0x81, 0x22, 0x22,
+    0x37, 0x7b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdb, 0xb5, 0x44, 0x44, 0x44,
+    0x44, 0x47, 0x00, 0x00, 0x00, 0x05, 0xbd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd8, 0x68,
+    0x58, 0x72, 0x22, 0x27, 0x18, 0x86, 0x72, 0x22,
+    0x1a, 0xbb, 0xbd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdb, 0xb5, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xb9, 0x18, 0x85,
+    0x58, 0x12, 0x22, 0x36, 0x18, 0x88, 0x32, 0x22,
+    0x61, 0x3b, 0xbb, 0xbb, 0xbd, 0xdd, 0xdd, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdb, 0xb9, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xbb, 0xdd,
+    0xdd, 0xdd, 0xdd, 0xdd, 0xb9, 0x7a, 0x68, 0x85,
+    0x88, 0x62, 0x27, 0x16, 0x18, 0x88, 0x12, 0x27,
+    0x86, 0x18, 0x9b, 0xbb, 0xbb, 0xbb, 0xbb, 0xbd,
+    0xdd, 0xdd, 0xdd, 0xbb, 0xb5, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xbb, 0xbd,
+    0xdd, 0xdd, 0xdb, 0xbb, 0x87, 0x31, 0x68, 0x65,
+    0x88, 0x82, 0x23, 0x16, 0x18, 0x88, 0x12, 0x23,
+    0x88, 0x67, 0x27, 0xa8, 0x9b, 0xbb, 0xbb, 0xbb,
+    0xbd, 0xdd, 0xbb, 0xbb, 0x95, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x9b, 0xbb,
+    0xbb, 0xbb, 0xbb, 0x96, 0x87, 0x16, 0x68, 0x18,
+    0x88, 0x62, 0x31, 0x66, 0x18, 0x88, 0x62, 0x73,
+    0x88, 0x63, 0x27, 0x33, 0x65, 0x55, 0x99, 0x9b,
+    0xbb, 0xbb, 0xbb, 0x99, 0x55, 0x0a, 0xa1, 0x86,
+    0x81, 0x68, 0x88, 0x55, 0x58, 0x85, 0x9b, 0xbb,
+    0xbb, 0xbb, 0x95, 0x88, 0x83, 0x66, 0x66, 0x18,
+    0x66, 0x82, 0xa1, 0x66, 0x18, 0x88, 0x62, 0x33,
+    0x88, 0x81, 0x27, 0x7a, 0x18, 0x58, 0x86, 0x85,
+    0x99, 0x99, 0x99, 0x95, 0x53, 0x2a, 0xaa, 0x88,
+    0x67, 0x31, 0x68, 0x55, 0x58, 0x85, 0x59, 0xbb,
+    0xbb, 0xb9, 0x58, 0x68, 0x83, 0x66, 0x61, 0x16,
+    0x66, 0x62, 0x16, 0x66, 0x68, 0x88, 0x62, 0xaa,
+    0x88, 0x86, 0x27, 0x77, 0x78, 0x55, 0x88, 0x22,
+    0x25, 0x55, 0x95, 0x55, 0x6a, 0xa2, 0x2a, 0x88,
+    0x62, 0x27, 0x37, 0x38, 0x88, 0x87, 0x55, 0x59,
+    0x95, 0x58, 0x16, 0x88, 0x8a, 0x66, 0x63, 0x68,
+    0x86, 0x67, 0x66, 0x66, 0x68, 0x88, 0x12, 0x11,
+    0x88, 0x88, 0x72, 0x77, 0x78, 0x85, 0x58, 0x17,
+    0x23, 0x32, 0x55, 0x55, 0x81, 0x13, 0x73, 0x66,
+    0x62, 0x7a, 0xaa, 0x38, 0x88, 0x58, 0x27, 0x55,
+    0x58, 0x32, 0x38, 0x88, 0x81, 0x66, 0xa2, 0x88,
+    0x86, 0x61, 0x66, 0x61, 0x66, 0x68, 0x13, 0x11,
+    0x88, 0x88, 0x12, 0x22, 0x71, 0x85, 0x58, 0x62,
+    0x23, 0xa2, 0x68, 0x88, 0x81, 0x66, 0x88, 0x88,
+    0x63, 0x2a, 0xaa, 0x28, 0x88, 0x55, 0x86, 0x61,
+    0x66, 0x66, 0x68, 0x88, 0x66, 0x66, 0x77, 0x88,
+    0x68, 0x16, 0x66, 0x62, 0x66, 0x68, 0xa1, 0x61,
+    0x88, 0x88, 0x62, 0x22, 0x22, 0x85, 0x55, 0x83,
+    0x72, 0x37, 0xa8, 0x88, 0x61, 0x66, 0x85, 0x55,
+    0x86, 0x23, 0xaa, 0x71, 0x88, 0x85, 0x88, 0x66,
+    0x88, 0x86, 0x88, 0x88, 0x16, 0x61, 0x21, 0x88,
+    0x66, 0xa6, 0x86, 0x17, 0x66, 0x66, 0x31, 0x61,
+    0x88, 0x88, 0x87, 0x72, 0x22, 0x68, 0x55, 0x86,
+    0x77, 0x77, 0x36, 0x88, 0x13, 0x68, 0x85, 0x55,
+    0x58, 0x12, 0x73, 0x72, 0x76, 0x88, 0x88, 0x68,
+    0x88, 0x88, 0x88, 0x66, 0x36, 0x63, 0x26, 0x86,
+    0x86, 0x36, 0x86, 0x11, 0x66, 0x66, 0x76, 0x61,
+    0x88, 0x88, 0x81, 0x22, 0x22, 0x38, 0x85, 0x58,
+    0x37, 0x22, 0x21, 0x68, 0xa2, 0x31, 0x68, 0x55,
+    0x55, 0x81, 0x22, 0x22, 0xa8, 0x88, 0x88, 0x68,
+    0x86, 0x88, 0x68, 0x81, 0x36, 0x17, 0x21, 0x68,
+    0x86, 0x16, 0x66, 0x26, 0x66, 0x61, 0x36, 0x66,
+    0x68, 0x88, 0x86, 0x27, 0x22, 0x28, 0x88, 0x88,
+    0x17, 0x72, 0x2a, 0x66, 0xa2, 0x22, 0x36, 0x55,
+    0x55, 0x58, 0x37, 0x3a, 0x16, 0x66, 0x66, 0x66,
+    0x66, 0x18, 0x88, 0x67, 0x16, 0x12, 0x71, 0x68,
+    0x81, 0x68, 0x61, 0x76, 0x66, 0x6a, 0x16, 0x66,
+    0x88, 0x88, 0x86, 0x77, 0x22, 0x26, 0x88, 0x88,
+    0x13, 0x37, 0x71, 0x66, 0xa2, 0x33, 0x2a, 0x85,
+    0x55, 0x55, 0x17, 0x73, 0x16, 0x66, 0x66, 0x68,
+    0x63, 0x88, 0x88, 0xa2, 0x66, 0xa2, 0xa6, 0x88,
+    0x61, 0x68, 0x6a, 0x76, 0x66, 0x6a, 0x66, 0x6a
+};
 
+#endif
diff -uNr linux-2.4.37.9/include/linux/miscdevice.h linux-2.4.37.9-amithlon/include/linux/miscdevice.h
--- linux-2.4.37.9/include/linux/miscdevice.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/miscdevice.h	2010-02-18 08:21:03.000000000 -0500
@@ -23,6 +23,7 @@
 #define NVRAM_MINOR		144
 #define I2O_MINOR		166
 #define MICROCODE_MINOR		184
+#define MKBD_MINOR		196
 #define MWAVE_MINOR		219	/* ACP/Mwave Modem */
 #define MPT_MINOR		220
 #define MISC_DYNAMIC_MINOR	255
diff -uNr linux-2.4.37.9/include/linux/pci.h linux-2.4.37.9-amithlon/include/linux/pci.h
--- linux-2.4.37.9/include/linux/pci.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/pci.h	2010-06-17 09:00:59.000000000 -0400
@@ -423,6 +423,7 @@
 	int (*prepare)(struct pci_dev *dev);	/* ISAPnP hooks */
 	int (*activate)(struct pci_dev *dev);
 	int (*deactivate)(struct pci_dev *dev);
+	int bridge_valid_bases;
 };
 
 #define pci_dev_g(n) list_entry(n, struct pci_dev, global_list)
diff -uNr linux-2.4.37.9/include/linux/pci_ids.h linux-2.4.37.9-amithlon/include/linux/pci_ids.h
--- linux-2.4.37.9/include/linux/pci_ids.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/pci_ids.h	2010-02-21 20:38:02.000000000 -0500
@@ -301,9 +301,10 @@
 /* Radeon R350 (9800) */
 #define PCI_DEVICE_ID_ATI_RADEON_NH	0x4e48
 #define PCI_DEVICE_ID_ATI_RADEON_NI	0x4e49
+#define PCI_DEVICE_ID_ATI_RADEON_9800SE 0x4148
 /* Radeon RV350 (9600) */
 #define PCI_DEVICE_ID_ATI_RADEON_AP	0x4150
-#define PCI_DEVICE_ID_ATI_RADEON_AQ	0x4151
+#define PCI_DEVICE_ID_ATI_RADEON_9600	0x4151
 #define PCI_DEVICE_ID_ATI_RADEON_AR	0x4152
 /* Radeon M6 */
 #define PCI_DEVICE_ID_ATI_RADEON_LY	0x4c59
@@ -470,7 +471,7 @@
 #	define PCI_DEVICE_ID_AMD_VIPER_7449	PCI_DEVICE_ID_AMD_OPUS_7449
 #define PCI_DEVICE_ID_AMD_8111_LAN	0x7462
 #define PCI_DEVICE_ID_AMD_8111_IDE     0x7469
-#define PCI_DEVICE_ID_AMD_8111_AUDIO	0x746d
+#define PCI_DEVICE_ID_AMD_8111_AC97		0x746d
 #define PCI_DEVICE_ID_AMD_8131_APIC     0x7450
 
 #define PCI_VENDOR_ID_TRIDENT		0x1023
@@ -991,6 +992,7 @@
 #define PCI_DEVICE_ID_NVIDIA_TNT		0x0020
 #define PCI_DEVICE_ID_NVIDIA_TNT2		0x0028
 #define PCI_DEVICE_ID_NVIDIA_UTNT2		0x0029
+#define PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN        0x002a
 #define PCI_DEVICE_ID_NVIDIA_VTNT2		0x002C
 #define PCI_DEVICE_ID_NVIDIA_UVTNT2		0x002D
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE	0x0035
@@ -999,28 +1001,47 @@
 #define PCI_DEVICE_ID_NVIDIA_NVENET_11		0x0038
 #define PCI_DEVICE_ID_NVIDIA_MCP04_AUDIO	0x003a
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2	0x003e
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA 0x0040
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800       0x0041
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE    0x0042
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT    0x0045
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000     0x004E
+#define PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS	0x0052
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE	0x0053
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA	0x0054
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2	0x0055
 #define PCI_DEVICE_ID_NVIDIA_NVENET_8		0x0056
 #define PCI_DEVICE_ID_NVIDIA_NVENET_9		0x0057
 #define PCI_DEVICE_ID_NVIDIA_CK804_AUDIO	0x0059
+#define PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS	0x0064
 #define PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE	0x0065
 #define PCI_DEVICE_ID_NVIDIA_NVENET_2		0x0066
+#define PCI_DEVICE_ID_NVIDIA_MCP2_MODEM		0x0069
 #define PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO		0x006a
+#define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS	0x0084
 #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE	0x0085
 #define PCI_DEVICE_ID_NVIDIA_NVENET_4		0x0086
+#define PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM	0x0089
 #define PCI_DEVICE_ID_NVIDIA_NVENET_5		0x008c
 #define PCI_DEVICE_ID_NVIDIA_MCP2S_AUDIO	0x008a
 #define PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA	0x008e
 #define PCI_DEVICE_ID_NVIDIA_ITNT2		0x00A0
+#define PCI_DEVICE_ID_GEFORCE_6800A             0x00c1
+#define PCI_DEVICE_ID_GEFORCE_6800A_LE          0x00c2
+#define PCI_DEVICE_ID_GEFORCE_GO_6800           0x00c8
+#define PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA     0x00c9
+#define PCI_DEVICE_ID_QUADRO_FX_GO1400          0x00cc
+#define PCI_DEVICE_ID_QUADRO_FX_1400            0x00ce
 #define PCI_DEVICE_ID_NVIDIA_NFORCE3		0x00d1
+#define PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS	0x00d4
 #define PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE	0x00d5
 #define PCI_DEVICE_ID_NVIDIA_NVENET_3		0x00d6
+#define PCI_DEVICE_ID_NVIDIA_MCP3_MODEM		0x00d9
 #define PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO		0x00da
 #define PCI_DEVICE_ID_NVIDIA_NVENET_7		0x00df
 #define PCI_DEVICE_ID_NVIDIA_NFORCE3S		0x00e1
 #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA	0x00e3
+#define PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS	0x00e4
 #define PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE	0x00e5
 #define PCI_DEVICE_ID_NVIDIA_NVENET_6		0x00e6
 #define PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO		0x00ea
@@ -1032,25 +1053,117 @@
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2	0x0111
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO	0x0112
 #define PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR	0x0113
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT	0x0140
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6600	0x0141
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL	0x0145
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540	0x014E
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200	0x014F
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS	0x0150
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2	0x0151
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA	0x0152
 #define PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO	0x0153
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE 0x0161
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200    0x0164
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250    0x0166
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1  0x0167
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1  0x0168
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460	0x0170
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440	0x0171
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420	0x0172
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE	0x0173
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO	0x0174
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO	0x0175
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32 0x0176
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO    0x0177
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL	0x0178
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64 0x0179
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_200	0x017A
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL	0x017B
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL	0x017C
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16 0x017D
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X 0x0181
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X 0x0182
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X 0x0183
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_MX_4000	0x0185
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO    0x0186
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO    0x0187
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL    0x0188
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC    0x0189
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS    0x018A
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL    0x018B
 #define PCI_DEVICE_ID_NVIDIA_IGEFORCE2		0x01a0
 #define PCI_DEVICE_ID_NVIDIA_NFORCE		0x01a4
 #define PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO		0x01b1
+#define PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS	0x01b4
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_IDE		0x01bc
+#define PCI_DEVICE_ID_NVIDIA_MCP1_MODEM		0x01c1
 #define PCI_DEVICE_ID_NVIDIA_NVENET_1		0x01c3
 #define PCI_DEVICE_ID_NVIDIA_NFORCE2		0x01e0
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE3		0x0200
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_1		0x0201
 #define PCI_DEVICE_ID_NVIDIA_GEFORCE3_2		0x0202
 #define PCI_DEVICE_ID_NVIDIA_QUADRO_DDC		0x0203
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B      0x0211
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE   0x0212
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT   0x0215
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600	0x0250
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400	0x0251
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200	0x0253
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL	0x0258
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL	0x0259
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL	0x025B
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE	0x0265
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA	0x0266
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2	0x0267
 #define PCI_DEVICE_ID_NVIDIA_NVENET_12		0x0268
 #define PCI_DEVICE_ID_NVIDIA_NVENET_13		0x0269
+#define PCI_DEVICE_ID_NVIDIA_MCP51_AUDIO	0x026B
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800	0x0280
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X    0x0281
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE     0x0282
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO       0x0286
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL        0x0288
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL        0x0289
+#define PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL       0x028C
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA  0x0301
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800        0x0302
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000         0x0308
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000         0x0309
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA  0x0311
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600        0x0312
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE      0x0314
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600      0x031A
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650      0x031B
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700        0x031C
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200        0x0320
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA  0x0321
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1      0x0322
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE      0x0323
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200      0x0324
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250      0x0325
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500        0x0326
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100        0x0327
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32   0x0328
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200	    0x0329
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI     0x032A
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500          0x032B
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300      0x032C
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100      0x032D
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA  0x0330
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900        0x0331
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT      0x0332
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA  0x0333
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT      0x0334
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000         0x0338
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700          0x033F
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA  0x0341
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700        0x0342
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE      0x0343
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE      0x0344
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1    0x0347
+#define PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2    0x0348
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000       0x034C
+#define PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100         0x034E
 #define PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE	0x036E
 #define PCI_DEVICE_ID_NVIDIA_NVENET_14		0x0372
 #define PCI_DEVICE_ID_NVIDIA_NVENET_15		0x0373
@@ -1793,6 +1906,7 @@
 #define PCI_DEVICE_ID_FARSITE_T4U       0x0640
 #define PCI_DEVICE_ID_FARSITE_TE1       0x1610
 #define PCI_DEVICE_ID_FARSITE_TE1C      0x1612
+#define PCI_DEVICE_ID_PDC_1841			0x1841
 
 #define PCI_VENDOR_ID_ALTIMA		0x173b
 #define PCI_DEVICE_ID_ALTIMA_AC1000	0x03e8
diff -uNr linux-2.4.37.9/include/linux/pc_keyb.h linux-2.4.37.9-amithlon/include/linux/pc_keyb.h
--- linux-2.4.37.9/include/linux/pc_keyb.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/pc_keyb.h	2010-02-17 20:04:05.000000000 -0500
@@ -120,7 +120,7 @@
 					   three to make overruns stay in sync
 					   but then the read function would need
 					   a lock etc - ick */
-
+extern void (*scancode_handler)(unsigned char, int some_bool);
 struct aux_queue {
 	unsigned long head;
 	unsigned long tail;
diff -uNr linux-2.4.37.9/include/linux/timex.h linux-2.4.37.9-amithlon/include/linux/timex.h
--- linux-2.4.37.9/include/linux/timex.h	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/timex.h	2010-06-17 09:00:59.000000000 -0400
@@ -286,6 +286,12 @@
 extern long pps_errcnt;		/* calibration errors */
 extern long pps_stbcnt;		/* stability limit exceeded */
 
+/* UAE high precision timer interface */
+extern unsigned long current_latch; /* The current latch value for the timer chip */
+extern unsigned long long uae_alert; /* When to start checking timers */
+extern unsigned long long uae_nextevent; /* When to next trigger */
+extern void uae_trigger(void);
+
 #endif /* KERNEL */
 
 #endif /* LINUX_TIMEX_H */
diff -uNr linux-2.4.37.9/include/linux/uae.h linux-2.4.37.9-amithlon/include/linux/uae.h
--- linux-2.4.37.9/include/linux/uae.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/linux/uae.h	2010-02-17 20:04:05.000000000 -0500
@@ -0,0 +1,6 @@
+#ifndef UAE_H
+#define UAE_H
+
+void add_uae_block(int start, int end);
+
+#endif
diff -uNr linux-2.4.37.9/include/net/slhc.h linux-2.4.37.9-amithlon/include/net/slhc.h
--- linux-2.4.37.9/include/net/slhc.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/net/slhc.h	2010-02-17 20:04:06.000000000 -0500
@@ -0,0 +1,6 @@
+#ifndef __NET_SLHC_H
+#define __NET_SLHC_H
+
+extern void slhc_install(void);
+
+#endif
diff -uNr linux-2.4.37.9/include/video/vga.h linux-2.4.37.9-amithlon/include/video/vga.h
--- linux-2.4.37.9/include/video/vga.h	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.4.37.9-amithlon/include/video/vga.h	2010-02-24 13:52:17.000000000 -0500
@@ -0,0 +1,481 @@
+/*
+ * linux/include/video/vga.h -- standard VGA chipset interaction
+ *
+ * Copyright 1999 Jeff Garzik <jgarzik@pobox.com>
+ * 
+ * Copyright history from vga16fb.c:
+ *	Copyright 1999 Ben Pfaff and Petr Vandrovec
+ *	Based on VGA info at http://www.goodnet.com/~tinara/FreeVGA/home.htm
+ *	Based on VESA framebuffer (c) 1998 Gerd Knorr
+ *
+ * This file is subject to the terms and conditions of the GNU General
+ * Public License.  See the file COPYING in the main directory of this
+ * archive for more details.  
+ *
+ */
+
+#ifndef __linux_video_vga_h__
+#define __linux_video_vga_h__
+
+#include <linux/types.h>
+#include <asm/io.h>
+#ifndef CONFIG_AMIGA
+#include <asm/vga.h>
+#else
+/*
+ * FIXME
+ * Ugh, we don't have PCI space, so map readb() and friends to use Zorro space
+ * for MMIO accesses. This should make cirrusfb work again on Amiga
+ */
+#undef inb_p
+#undef inw_p
+#undef outb_p
+#undef outw
+#undef readb
+#undef writeb
+#undef writew
+#define inb_p(port)	0
+#define inw_p(port)	0
+#define outb_p(port, val)	do { } while (0)
+#define outw(port, val)		do { } while (0)
+#define readb		z_readb
+#define writeb		z_writeb
+#define writew		z_writew
+#endif
+#include <asm/byteorder.h>
+
+
+/* Some of the code below is taken from SVGAlib.  The original,
+   unmodified copyright notice for that code is below. */
+/* VGAlib version 1.2 - (c) 1993 Tommy Frandsen                    */
+/*                                                                 */
+/* This library is free software; you can redistribute it and/or   */
+/* modify it without any restrictions. This library is distributed */
+/* in the hope that it will be useful, but without any warranty.   */
+
+/* Multi-chipset support Copyright 1993 Harm Hanemaayer */
+/* partially copyrighted (C) 1993 by Hartmut Schirmer */
+
+/* VGA data register ports */
+#define VGA_CRT_DC  	0x3D5	/* CRT Controller Data Register - color emulation */
+#define VGA_CRT_DM  	0x3B5	/* CRT Controller Data Register - mono emulation */
+#define VGA_ATT_R   	0x3C1	/* Attribute Controller Data Read Register */
+#define VGA_ATT_W   	0x3C0	/* Attribute Controller Data Write Register */
+#define VGA_GFX_D   	0x3CF	/* Graphics Controller Data Register */
+#define VGA_SEQ_D   	0x3C5	/* Sequencer Data Register */
+#define VGA_MIS_R   	0x3CC	/* Misc Output Read Register */
+#define VGA_MIS_W   	0x3C2	/* Misc Output Write Register */
+#define VGA_FTC_R	0x3CA	/* Feature Control Read Register */
+#define VGA_IS1_RC  	0x3DA	/* Input Status Register 1 - color emulation */
+#define VGA_IS1_RM  	0x3BA	/* Input Status Register 1 - mono emulation */
+#define VGA_PEL_D   	0x3C9	/* PEL Data Register */
+#define VGA_PEL_MSK 	0x3C6	/* PEL mask register */
+
+/* EGA-specific registers */
+#define EGA_GFX_E0	0x3CC	/* Graphics enable processor 0 */
+#define EGA_GFX_E1	0x3CA	/* Graphics enable processor 1 */
+
+/* VGA index register ports */
+#define VGA_CRT_IC  	0x3D4	/* CRT Controller Index - color emulation */
+#define VGA_CRT_IM  	0x3B4	/* CRT Controller Index - mono emulation */
+#define VGA_ATT_IW  	0x3C0	/* Attribute Controller Index & Data Write Register */
+#define VGA_GFX_I   	0x3CE	/* Graphics Controller Index */
+#define VGA_SEQ_I   	0x3C4	/* Sequencer Index */
+#define VGA_PEL_IW  	0x3C8	/* PEL Write Index */
+#define VGA_PEL_IR  	0x3C7	/* PEL Read Index */
+
+/* standard VGA indexes max counts */
+#define VGA_CRT_C   	0x19	/* Number of CRT Controller Registers */
+#define VGA_ATT_C   	0x15	/* Number of Attribute Controller Registers */
+#define VGA_GFX_C   	0x09	/* Number of Graphics Controller Registers */
+#define VGA_SEQ_C   	0x05	/* Number of Sequencer Registers */
+#define VGA_MIS_C   	0x01	/* Number of Misc Output Register */
+
+/* VGA misc register bit masks */
+#define VGA_MIS_COLOR		0x01
+#define VGA_MIS_ENB_MEM_ACCESS	0x02
+#define VGA_MIS_DCLK_28322_720	0x04
+#define VGA_MIS_ENB_PLL_LOAD	(0x04 | 0x08)
+#define VGA_MIS_SEL_HIGH_PAGE	0x20
+
+/* VGA CRT controller register indices */
+#define VGA_CRTC_H_TOTAL	0
+#define VGA_CRTC_H_DISP		1
+#define VGA_CRTC_H_BLANK_START	2
+#define VGA_CRTC_H_BLANK_END	3
+#define VGA_CRTC_H_SYNC_START	4
+#define VGA_CRTC_H_SYNC_END	5
+#define VGA_CRTC_V_TOTAL	6
+#define VGA_CRTC_OVERFLOW	7
+#define VGA_CRTC_PRESET_ROW	8
+#define VGA_CRTC_MAX_SCAN	9
+#define VGA_CRTC_CURSOR_START	0x0A
+#define VGA_CRTC_CURSOR_END	0x0B
+#define VGA_CRTC_START_HI	0x0C
+#define VGA_CRTC_START_LO	0x0D
+#define VGA_CRTC_CURSOR_HI	0x0E
+#define VGA_CRTC_CURSOR_LO	0x0F
+#define VGA_CRTC_V_SYNC_START	0x10
+#define VGA_CRTC_V_SYNC_END	0x11
+#define VGA_CRTC_V_DISP_END	0x12
+#define VGA_CRTC_OFFSET		0x13
+#define VGA_CRTC_UNDERLINE	0x14
+#define VGA_CRTC_V_BLANK_START	0x15
+#define VGA_CRTC_V_BLANK_END	0x16
+#define VGA_CRTC_MODE		0x17
+#define VGA_CRTC_LINE_COMPARE	0x18
+#define VGA_CRTC_REGS		VGA_CRT_C
+
+/* VGA CRT controller bit masks */
+#define VGA_CR11_LOCK_CR0_CR7	0x80 /* lock writes to CR0 - CR7 */
+#define VGA_CR17_H_V_SIGNALS_ENABLED 0x80
+
+/* VGA attribute controller register indices */
+#define VGA_ATC_PALETTE0	0x00
+#define VGA_ATC_PALETTE1	0x01
+#define VGA_ATC_PALETTE2	0x02
+#define VGA_ATC_PALETTE3	0x03
+#define VGA_ATC_PALETTE4	0x04
+#define VGA_ATC_PALETTE5	0x05
+#define VGA_ATC_PALETTE6	0x06
+#define VGA_ATC_PALETTE7	0x07
+#define VGA_ATC_PALETTE8	0x08
+#define VGA_ATC_PALETTE9	0x09
+#define VGA_ATC_PALETTEA	0x0A
+#define VGA_ATC_PALETTEB	0x0B
+#define VGA_ATC_PALETTEC	0x0C
+#define VGA_ATC_PALETTED	0x0D
+#define VGA_ATC_PALETTEE	0x0E
+#define VGA_ATC_PALETTEF	0x0F
+#define VGA_ATC_MODE		0x10
+#define VGA_ATC_OVERSCAN	0x11
+#define VGA_ATC_PLANE_ENABLE	0x12
+#define VGA_ATC_PEL		0x13
+#define VGA_ATC_COLOR_PAGE	0x14
+
+#define VGA_AR_ENABLE_DISPLAY	0x20
+
+/* VGA sequencer register indices */
+#define VGA_SEQ_RESET		0x00
+#define VGA_SEQ_CLOCK_MODE	0x01
+#define VGA_SEQ_PLANE_WRITE	0x02
+#define VGA_SEQ_CHARACTER_MAP	0x03
+#define VGA_SEQ_MEMORY_MODE	0x04
+
+/* VGA sequencer register bit masks */
+#define VGA_SR01_CHAR_CLK_8DOTS	0x01 /* bit 0: character clocks 8 dots wide are generated */
+#define VGA_SR01_SCREEN_OFF	0x20 /* bit 5: Screen is off */
+#define VGA_SR02_ALL_PLANES	0x0F /* bits 3-0: enable access to all planes */
+#define VGA_SR04_EXT_MEM	0x02 /* bit 1: allows complete mem access to 256K */
+#define VGA_SR04_SEQ_MODE	0x04 /* bit 2: directs system to use a sequential addressing mode */
+#define VGA_SR04_CHN_4M		0x08 /* bit 3: selects modulo 4 addressing for CPU access to display memory */
+
+/* VGA graphics controller register indices */
+#define VGA_GFX_SR_VALUE	0x00
+#define VGA_GFX_SR_ENABLE	0x01
+#define VGA_GFX_COMPARE_VALUE	0x02
+#define VGA_GFX_DATA_ROTATE	0x03
+#define VGA_GFX_PLANE_READ	0x04
+#define VGA_GFX_MODE		0x05
+#define VGA_GFX_MISC		0x06
+#define VGA_GFX_COMPARE_MASK	0x07
+#define VGA_GFX_BIT_MASK	0x08
+
+/* VGA graphics controller bit masks */
+#define VGA_GR06_GRAPHICS_MODE	0x01
+
+/* macro for composing an 8-bit VGA register index and value
+ * into a single 16-bit quantity */
+#define VGA_OUT16VAL(v, r)       (((v) << 8) | (r))
+
+/* decide whether we should enable the faster 16-bit VGA register writes */
+#ifdef __LITTLE_ENDIAN
+#define VGA_OUTW_WRITE
+#endif
+
+/* VGA State Save and Restore */
+#define VGA_SAVE_FONT0 1  /* save/restore plane 2 fonts	  */
+#define VGA_SAVE_FONT1 2  /* save/restore plane 3 fonts   */
+#define VGA_SAVE_TEXT  4  /* save/restore plane 0/1 fonts */
+#define VGA_SAVE_FONTS 7  /* save/restore all fonts	  */
+#define VGA_SAVE_MODE  8  /* save/restore video mode 	  */
+#define VGA_SAVE_CMAP  16 /* save/restore color map/DAC   */
+
+struct vgastate {
+	void __iomem *vgabase;	/* mmio base, if supported 		   */
+	unsigned long membase;	/* VGA window base, 0 for default - 0xA000 */
+	__u32 memsize;		/* VGA window size, 0 for default 64K	   */
+	__u32 flags;		/* what state[s] to save (see VGA_SAVE_*)  */
+	__u32 depth;		/* current fb depth, not important	   */
+	__u32 num_attr;		/* number of att registers, 0 for default  */
+	__u32 num_crtc;		/* number of crt registers, 0 for default  */
+	__u32 num_gfx;		/* number of gfx registers, 0 for default  */
+	__u32 num_seq;		/* number of seq registers, 0 for default  */
+	void *vidstate;
+};	
+
+extern int save_vga(struct vgastate *state);
+extern int restore_vga(struct vgastate *state);
+
+/*
+ * generic VGA port read/write
+ */
+ 
+static inline unsigned char vga_io_r (unsigned short port)
+{
+	return inb_p(port);
+}
+
+static inline void vga_io_w (unsigned short port, unsigned char val)
+{
+	outb_p(val, port);
+}
+
+static inline void vga_io_w_fast (unsigned short port, unsigned char reg,
+				  unsigned char val)
+{
+	outw(VGA_OUT16VAL (val, reg), port);
+}
+
+static inline unsigned char vga_mm_r (void __iomem *regbase, unsigned short port)
+{
+	return readb (regbase + port);
+}
+
+static inline void vga_mm_w (void __iomem *regbase, unsigned short port, unsigned char val)
+{
+	writeb (val, regbase + port);
+}
+
+static inline void vga_mm_w_fast (void __iomem *regbase, unsigned short port,
+				  unsigned char reg, unsigned char val)
+{
+	writew (VGA_OUT16VAL (val, reg), regbase + port);
+}
+
+static inline unsigned char vga_r (void __iomem *regbase, unsigned short port)
+{
+	if (regbase)
+		return vga_mm_r (regbase, port);
+	else
+		return vga_io_r (port);
+}
+
+static inline void vga_w (void __iomem *regbase, unsigned short port, unsigned char val)
+{
+	if (regbase)
+		vga_mm_w (regbase, port, val);
+	else
+		vga_io_w (port, val);
+}
+
+
+static inline void vga_w_fast (void __iomem *regbase, unsigned short port,
+			       unsigned char reg, unsigned char val)
+{
+	if (regbase)
+		vga_mm_w_fast (regbase, port, reg, val);
+	else
+		vga_io_w_fast (port, reg, val);
+}
+
+
+/*
+ * VGA CRTC register read/write
+ */
+ 
+static inline unsigned char vga_rcrt (void __iomem *regbase, unsigned char reg)
+{
+        vga_w (regbase, VGA_CRT_IC, reg);
+        return vga_r (regbase, VGA_CRT_DC);
+}
+
+static inline void vga_wcrt (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_w_fast (regbase, VGA_CRT_IC, reg, val);
+#else
+        vga_w (regbase, VGA_CRT_IC, reg);
+        vga_w (regbase, VGA_CRT_DC, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_io_rcrt (unsigned char reg)
+{
+        vga_io_w (VGA_CRT_IC, reg);
+        return vga_io_r (VGA_CRT_DC);
+}
+
+static inline void vga_io_wcrt (unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_io_w_fast (VGA_CRT_IC, reg, val);
+#else
+        vga_io_w (VGA_CRT_IC, reg);
+        vga_io_w (VGA_CRT_DC, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_mm_rcrt (void __iomem *regbase, unsigned char reg)
+{
+        vga_mm_w (regbase, VGA_CRT_IC, reg);
+        return vga_mm_r (regbase, VGA_CRT_DC);
+}
+
+static inline void vga_mm_wcrt (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_mm_w_fast (regbase, VGA_CRT_IC, reg, val);
+#else
+        vga_mm_w (regbase, VGA_CRT_IC, reg);
+        vga_mm_w (regbase, VGA_CRT_DC, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+
+/*
+ * VGA sequencer register read/write
+ */
+ 
+static inline unsigned char vga_rseq (void __iomem *regbase, unsigned char reg)
+{
+        vga_w (regbase, VGA_SEQ_I, reg);
+        return vga_r (regbase, VGA_SEQ_D);
+}
+
+static inline void vga_wseq (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_w_fast (regbase, VGA_SEQ_I, reg, val);
+#else
+        vga_w (regbase, VGA_SEQ_I, reg);
+        vga_w (regbase, VGA_SEQ_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_io_rseq (unsigned char reg)
+{
+        vga_io_w (VGA_SEQ_I, reg);
+        return vga_io_r (VGA_SEQ_D);
+}
+
+static inline void vga_io_wseq (unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_io_w_fast (VGA_SEQ_I, reg, val);
+#else
+        vga_io_w (VGA_SEQ_I, reg);
+        vga_io_w (VGA_SEQ_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_mm_rseq (void __iomem *regbase, unsigned char reg)
+{
+        vga_mm_w (regbase, VGA_SEQ_I, reg);
+        return vga_mm_r (regbase, VGA_SEQ_D);
+}
+
+static inline void vga_mm_wseq (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_mm_w_fast (regbase, VGA_SEQ_I, reg, val);
+#else
+        vga_mm_w (regbase, VGA_SEQ_I, reg);
+        vga_mm_w (regbase, VGA_SEQ_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+/*
+ * VGA graphics controller register read/write
+ */
+ 
+static inline unsigned char vga_rgfx (void __iomem *regbase, unsigned char reg)
+{
+        vga_w (regbase, VGA_GFX_I, reg);
+        return vga_r (regbase, VGA_GFX_D);
+}
+
+static inline void vga_wgfx (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_w_fast (regbase, VGA_GFX_I, reg, val);
+#else
+        vga_w (regbase, VGA_GFX_I, reg);
+        vga_w (regbase, VGA_GFX_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_io_rgfx (unsigned char reg)
+{
+        vga_io_w (VGA_GFX_I, reg);
+        return vga_io_r (VGA_GFX_D);
+}
+
+static inline void vga_io_wgfx (unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_io_w_fast (VGA_GFX_I, reg, val);
+#else
+        vga_io_w (VGA_GFX_I, reg);
+        vga_io_w (VGA_GFX_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+static inline unsigned char vga_mm_rgfx (void __iomem *regbase, unsigned char reg)
+{
+        vga_mm_w (regbase, VGA_GFX_I, reg);
+        return vga_mm_r (regbase, VGA_GFX_D);
+}
+
+static inline void vga_mm_wgfx (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+#ifdef VGA_OUTW_WRITE
+	vga_mm_w_fast (regbase, VGA_GFX_I, reg, val);
+#else
+        vga_mm_w (regbase, VGA_GFX_I, reg);
+        vga_mm_w (regbase, VGA_GFX_D, val);
+#endif /* VGA_OUTW_WRITE */
+}
+
+
+/*
+ * VGA attribute controller register read/write
+ */
+ 
+static inline unsigned char vga_rattr (void __iomem *regbase, unsigned char reg)
+{
+        vga_w (regbase, VGA_ATT_IW, reg);
+        return vga_r (regbase, VGA_ATT_R);
+}
+
+static inline void vga_wattr (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+        vga_w (regbase, VGA_ATT_IW, reg);
+        vga_w (regbase, VGA_ATT_W, val);
+}
+
+static inline unsigned char vga_io_rattr (unsigned char reg)
+{
+        vga_io_w (VGA_ATT_IW, reg);
+        return vga_io_r (VGA_ATT_R);
+}
+
+static inline void vga_io_wattr (unsigned char reg, unsigned char val)
+{
+        vga_io_w (VGA_ATT_IW, reg);
+        vga_io_w (VGA_ATT_W, val);
+}
+
+static inline unsigned char vga_mm_rattr (void __iomem *regbase, unsigned char reg)
+{
+        vga_mm_w (regbase, VGA_ATT_IW, reg);
+        return vga_mm_r (regbase, VGA_ATT_R);
+}
+
+static inline void vga_mm_wattr (void __iomem *regbase, unsigned char reg, unsigned char val)
+{
+        vga_mm_w (regbase, VGA_ATT_IW, reg);
+        vga_mm_w (regbase, VGA_ATT_W, val);
+}
+
+#endif /* __linux_video_vga_h__ */
diff -uNr linux-2.4.37.9/init/main.c linux-2.4.37.9-amithlon/init/main.c
--- linux-2.4.37.9/init/main.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/init/main.c	2010-02-17 20:04:10.000000000 -0500
@@ -397,6 +397,7 @@
 	sti();
 	calibrate_delay();
 #ifdef CONFIG_BLK_DEV_INITRD
+	printk("looking at initrd early on!\n");
 	if (initrd_start && !initrd_below_start_ok &&
 			initrd_start < min_low_pfn << PAGE_SHIFT) {
 		printk(KERN_CRIT "initrd overwritten (0x%08lx < 0x%08lx) - "
diff -uNr linux-2.4.37.9/kernel/printk.c linux-2.4.37.9-amithlon/kernel/printk.c
--- linux-2.4.37.9/kernel/printk.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/kernel/printk.c	2010-02-17 20:04:10.000000000 -0500
@@ -153,8 +153,21 @@
 	c->index = idx;
 	return 1;
 }
+/*
+ *	Set console log level at boot time
+ */
+static int __init console_level_setup(char *str)
+{
+  int level=0;
 
+  while (str[0] >= '0' && str[0] <= '9') {
+    level=10*level+str[0]-'0';
+    str++;
+  }
+  console_loglevel = level;
+}
 __setup("console=", console_setup);
+__setup("console_level=", console_level_setup);
 
 /*
  * Commands to do_syslog:
@@ -169,6 +182,7 @@
  * 	7 -- Enable printk's to console
  *	8 -- Set level of messages printed to console
  *	9 -- Return number of unread characters in the log buffer
+ * 102 -- same as 2, but non-blocking
  */
 int do_syslog(int type, char * buf, int len)
 {
@@ -182,6 +196,7 @@
 		break;
 	case 1:		/* Open log */
 		break;
+	case 102:
 	case 2:		/* Read from log */
 		error = -EINVAL;
 		if (!buf || len < 0)
@@ -192,12 +207,12 @@
 		error = verify_area(VERIFY_WRITE,buf,len);
 		if (error)
 			goto out;
-		error = wait_event_interruptible(log_wait, (log_start - log_end));
+		error = wait_event_interruptible(log_wait, log_start-log_end||(type==102));
 		if (error)
 			goto out;
 		i = 0;
 		spin_lock_irq(&logbuf_lock);
-		while ((log_start != log_end) && i < len) {
+		while (log_start != log_end && i < len) {
 			c = LOG_BUF(log_start);
 			log_start++;
 			spin_unlock_irq(&logbuf_lock);
@@ -303,7 +318,7 @@
 		return -EPERM;
 	return do_syslog(type, buf, len);
 }
-
+extern int fbcon_show_logo(void);
 /*
  * Call the console drivers on a range of log_buf
  */
@@ -476,6 +491,7 @@
 		spin_unlock_irqrestore(&logbuf_lock, flags);
 	}
 out:
+	fbcon_show_logo(); /* move the logo around */
 	return printed_len;
 }
 EXPORT_SYMBOL(printk);
diff -uNr linux-2.4.37.9/kernel/sched.c linux-2.4.37.9-amithlon/kernel/sched.c
--- linux-2.4.37.9/kernel/sched.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/kernel/sched.c	2010-02-17 20:04:10.000000000 -0500
@@ -127,6 +127,11 @@
 
 void scheduling_functions_start_here(void) { }
 
+/* This lets us mess easily with the scheduler, to improve AmigaOS
+   interrupt response time in the face of disk I/O */
+unsigned long process_to_elevate=0;
+int do_elevate_process=0;
+
 /*
  * This is the function that decides how desirable a process is..
  * You can weigh different processes against each other depending
@@ -190,6 +195,11 @@
 	 */
 	weight = 1000 + p->rt_priority;
 out:
+	if (process_to_elevate && 
+	    p->pid==process_to_elevate && 
+	    do_elevate_process 
+	    )
+	return 2000; /* Run this before all other */
 	return weight;
 }
 
diff -uNr linux-2.4.37.9/mm/bootmem.c linux-2.4.37.9-amithlon/mm/bootmem.c
--- linux-2.4.37.9/mm/bootmem.c	2010-02-01 16:04:46.000000000 -0500
+++ linux-2.4.37.9-amithlon/mm/bootmem.c	2010-02-17 20:04:10.000000000 -0500
@@ -100,6 +100,19 @@
 			printk("hm, page %08lx reserved twice.\n", i*PAGE_SIZE);
 }
 
+static int __init bootmem_is_reserved_core(bootmem_data_t *bdata, unsigned long addr)
+{
+	unsigned long i;
+	/*
+	 * round up, partially reserved pages are considered
+	 * fully reserved.
+	 */
+	unsigned long sidx = (addr - bdata->node_boot_start)/PAGE_SIZE;
+	if (test_bit(sidx, bdata->node_bootmem_map))
+	  return 1;
+	return 0;
+}
+
 static void __init free_bootmem_core(bootmem_data_t *bdata, unsigned long addr, unsigned long size)
 {
 	unsigned long i;
@@ -313,6 +326,11 @@
 	reserve_bootmem_core(contig_page_data.bdata, addr, size);
 }
 
+int __init bootmem_is_reserved (unsigned long addr)
+{
+  return bootmem_is_reserved_core(contig_page_data.bdata, addr);
+}
+
 void __init free_bootmem (unsigned long addr, unsigned long size)
 {
 	return(free_bootmem_core(contig_page_data.bdata, addr, size));
